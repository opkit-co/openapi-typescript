/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/v1/3d_secure": {
    /** <p>Initiate 3D Secure authentication.</p> */
    readonly post: operations["Post3dSecure"];
  };
  readonly "/v1/3d_secure/{three_d_secure}": {
    /** <p>Retrieves a 3D Secure object.</p> */
    readonly get: operations["Get3dSecureThreeDSecure"];
  };
  readonly "/v1/account": {
    /** <p>Retrieves the details of an account.</p> */
    readonly get: operations["GetAccount"];
    /**
     * <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
     *
     * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     */
    readonly post: operations["PostAccount"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
     *
     * <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
     *
     * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     */
    readonly delete: operations["DeleteAccount"];
  };
  readonly "/v1/account/bank_accounts": {
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountBankAccounts"];
  };
  readonly "/v1/account/bank_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountBankAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     *
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountBankAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountBankAccountsId"];
  };
  readonly "/v1/account/capabilities": {
    /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
    readonly get: operations["GetAccountCapabilities"];
  };
  readonly "/v1/account/capabilities/{capability}": {
    /** <p>Retrieves information about the specified Account Capability.</p> */
    readonly get: operations["GetAccountCapabilitiesCapability"];
    /** <p>Updates an existing Account Capability.</p> */
    readonly post: operations["PostAccountCapabilitiesCapability"];
  };
  readonly "/v1/account/external_accounts": {
    /** <p>List external accounts for an account.</p> */
    readonly get: operations["GetAccountExternalAccounts"];
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountExternalAccounts"];
  };
  readonly "/v1/account/external_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountExternalAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     *
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountExternalAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountExternalAccountsId"];
  };
  readonly "/v1/account/login_links": {
    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
     *
     * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    readonly post: operations["PostAccountLoginLinks"];
  };
  readonly "/v1/account/people": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountPeople"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountPeople"];
  };
  readonly "/v1/account/people/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountPeoplePerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountPeoplePerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountPeoplePerson"];
  };
  readonly "/v1/account/persons": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountPersons"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountPersons"];
  };
  readonly "/v1/account/persons/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountPersonsPerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountPersonsPerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountPersonsPerson"];
  };
  readonly "/v1/account_links": {
    /** <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p> */
    readonly post: operations["PostAccountLinks"];
  };
  readonly "/v1/accounts": {
    /** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p> */
    readonly get: operations["GetAccounts"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
     * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
     */
    readonly post: operations["PostAccounts"];
  };
  readonly "/v1/accounts/{account}": {
    /** <p>Retrieves the details of an account.</p> */
    readonly get: operations["GetAccountsAccount"];
    /**
     * <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
     *
     * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     */
    readonly post: operations["PostAccountsAccount"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
     *
     * <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
     *
     * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     */
    readonly delete: operations["DeleteAccountsAccount"];
  };
  readonly "/v1/accounts/{account}/bank_accounts": {
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountsAccountBankAccounts"];
  };
  readonly "/v1/accounts/{account}/bank_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountsAccountBankAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     *
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountsAccountBankAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountsAccountBankAccountsId"];
  };
  readonly "/v1/accounts/{account}/capabilities": {
    /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
    readonly get: operations["GetAccountsAccountCapabilities"];
  };
  readonly "/v1/accounts/{account}/capabilities/{capability}": {
    /** <p>Retrieves information about the specified Account Capability.</p> */
    readonly get: operations["GetAccountsAccountCapabilitiesCapability"];
    /** <p>Updates an existing Account Capability.</p> */
    readonly post: operations["PostAccountsAccountCapabilitiesCapability"];
  };
  readonly "/v1/accounts/{account}/external_accounts": {
    /** <p>List external accounts for an account.</p> */
    readonly get: operations["GetAccountsAccountExternalAccounts"];
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountsAccountExternalAccounts"];
  };
  readonly "/v1/accounts/{account}/external_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountsAccountExternalAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     *
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountsAccountExternalAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountsAccountExternalAccountsId"];
  };
  readonly "/v1/accounts/{account}/login_links": {
    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
     *
     * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    readonly post: operations["PostAccountsAccountLoginLinks"];
  };
  readonly "/v1/accounts/{account}/people": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountsAccountPeople"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountsAccountPeople"];
  };
  readonly "/v1/accounts/{account}/people/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountsAccountPeoplePerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountsAccountPeoplePerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountsAccountPeoplePerson"];
  };
  readonly "/v1/accounts/{account}/persons": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountsAccountPersons"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountsAccountPersons"];
  };
  readonly "/v1/accounts/{account}/persons/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountsAccountPersonsPerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountsAccountPersonsPerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountsAccountPersonsPerson"];
  };
  readonly "/v1/accounts/{account}/reject": {
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
     *
     * <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
     */
    readonly post: operations["PostAccountsAccountReject"];
  };
  readonly "/v1/apple_pay/domains": {
    /** <p>List apple pay domains.</p> */
    readonly get: operations["GetApplePayDomains"];
    /** <p>Create an apple pay domain.</p> */
    readonly post: operations["PostApplePayDomains"];
  };
  readonly "/v1/apple_pay/domains/{domain}": {
    /** <p>Retrieve an apple pay domain.</p> */
    readonly get: operations["GetApplePayDomainsDomain"];
    /** <p>Delete an apple pay domain.</p> */
    readonly delete: operations["DeleteApplePayDomainsDomain"];
  };
  readonly "/v1/application_fees": {
    /** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p> */
    readonly get: operations["GetApplicationFees"];
  };
  readonly "/v1/application_fees/{fee}/refunds/{id}": {
    /** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p> */
    readonly get: operations["GetApplicationFeesFeeRefundsId"];
    /**
     * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts metadata as an argument.</p>
     */
    readonly post: operations["PostApplicationFeesFeeRefundsId"];
  };
  readonly "/v1/application_fees/{id}": {
    /** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p> */
    readonly get: operations["GetApplicationFeesId"];
  };
  readonly "/v1/application_fees/{id}/refund": {
    readonly post: operations["PostApplicationFeesIdRefund"];
  };
  readonly "/v1/application_fees/{id}/refunds": {
    /** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
    readonly get: operations["GetApplicationFeesIdRefunds"];
    /**
     * <p>Refunds an application fee that has previously been collected but not yet refunded.
     * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
     *
     * <p>You can optionally refund only part of an application fee.
     * You can do so multiple times, until the entire fee has been refunded.</p>
     *
     * <p>Once entirely refunded, an application fee can’t be refunded again.
     * This method will raise an error when called on an already-refunded application fee,
     * or when trying to refund more money than is left on an application fee.</p>
     */
    readonly post: operations["PostApplicationFeesIdRefunds"];
  };
  readonly "/v1/balance": {
    /**
     * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
     *  For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
     */
    readonly get: operations["GetBalance"];
  };
  readonly "/v1/balance/history": {
    /**
     * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
     *
     * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     */
    readonly get: operations["GetBalanceHistory"];
  };
  readonly "/v1/balance/history/{id}": {
    /**
     * <p>Retrieves the balance transaction with the given ID.</p>
     *
     * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     */
    readonly get: operations["GetBalanceHistoryId"];
  };
  readonly "/v1/balance_transactions": {
    /**
     * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
     *
     * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     */
    readonly get: operations["GetBalanceTransactions"];
  };
  readonly "/v1/balance_transactions/{id}": {
    /**
     * <p>Retrieves the balance transaction with the given ID.</p>
     *
     * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     */
    readonly get: operations["GetBalanceTransactionsId"];
  };
  readonly "/v1/billing_portal/configurations": {
    /** <p>Returns a list of configurations that describe the functionality of the customer portal.</p> */
    readonly get: operations["GetBillingPortalConfigurations"];
    /** <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p> */
    readonly post: operations["PostBillingPortalConfigurations"];
  };
  readonly "/v1/billing_portal/configurations/{configuration}": {
    /** <p>Retrieves a configuration that describes the functionality of the customer portal.</p> */
    readonly get: operations["GetBillingPortalConfigurationsConfiguration"];
    /** <p>Updates a configuration that describes the functionality of the customer portal.</p> */
    readonly post: operations["PostBillingPortalConfigurationsConfiguration"];
  };
  readonly "/v1/billing_portal/sessions": {
    /** <p>Creates a session of the customer portal.</p> */
    readonly post: operations["PostBillingPortalSessions"];
  };
  readonly "/v1/bitcoin/receivers": {
    /** <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p> */
    readonly get: operations["GetBitcoinReceivers"];
  };
  readonly "/v1/bitcoin/receivers/{id}": {
    /** <p>Retrieves the Bitcoin receiver with the given ID.</p> */
    readonly get: operations["GetBitcoinReceiversId"];
  };
  readonly "/v1/bitcoin/receivers/{receiver}/transactions": {
    /** <p>List bitcoin transacitons for a given receiver.</p> */
    readonly get: operations["GetBitcoinReceiversReceiverTransactions"];
  };
  readonly "/v1/bitcoin/transactions": {
    /** <p>List bitcoin transacitons for a given receiver.</p> */
    readonly get: operations["GetBitcoinTransactions"];
  };
  readonly "/v1/charges": {
    /** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p> */
    readonly get: operations["GetCharges"];
    /** <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p> */
    readonly post: operations["PostCharges"];
  };
  readonly "/v1/charges/{charge}": {
    /** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p> */
    readonly get: operations["GetChargesCharge"];
    /** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostChargesCharge"];
  };
  readonly "/v1/charges/{charge}/capture": {
    /**
     * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
     *
     * <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
     */
    readonly post: operations["PostChargesChargeCapture"];
  };
  readonly "/v1/charges/{charge}/dispute": {
    /** <p>Retrieve a dispute for a specified charge.</p> */
    readonly get: operations["GetChargesChargeDispute"];
    readonly post: operations["PostChargesChargeDispute"];
  };
  readonly "/v1/charges/{charge}/dispute/close": {
    readonly post: operations["PostChargesChargeDisputeClose"];
  };
  readonly "/v1/charges/{charge}/refund": {
    /**
     * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
     *
     * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
     * Funds will be refunded to the credit or debit card that was originally charged.</p>
     *
     * <p>You can optionally refund only part of a charge.
     * You can do so multiple times, until the entire charge has been refunded.</p>
     *
     * <p>Once entirely refunded, a charge can’t be refunded again.
     * This method will raise an error when called on an already-refunded charge,
     * or when trying to refund more money than is left on a charge.</p>
     */
    readonly post: operations["PostChargesChargeRefund"];
  };
  readonly "/v1/charges/{charge}/refunds": {
    /** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
    readonly get: operations["GetChargesChargeRefunds"];
    /** <p>Create a refund.</p> */
    readonly post: operations["PostChargesChargeRefunds"];
  };
  readonly "/v1/charges/{charge}/refunds/{refund}": {
    /** <p>Retrieves the details of an existing refund.</p> */
    readonly get: operations["GetChargesChargeRefundsRefund"];
    /** <p>Update a specified refund.</p> */
    readonly post: operations["PostChargesChargeRefundsRefund"];
  };
  readonly "/v1/checkout/sessions": {
    /** <p>Returns a list of Checkout Sessions.</p> */
    readonly get: operations["GetCheckoutSessions"];
    /** <p>Creates a Session object.</p> */
    readonly post: operations["PostCheckoutSessions"];
  };
  readonly "/v1/checkout/sessions/{session}": {
    /** <p>Retrieves a Session object.</p> */
    readonly get: operations["GetCheckoutSessionsSession"];
  };
  readonly "/v1/checkout/sessions/{session}/expire": {
    /**
     * <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
     *
     * <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
     */
    readonly post: operations["PostCheckoutSessionsSessionExpire"];
  };
  readonly "/v1/checkout/sessions/{session}/line_items": {
    /** <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetCheckoutSessionsSessionLineItems"];
  };
  readonly "/v1/country_specs": {
    /** <p>Lists all Country Spec objects available in the API.</p> */
    readonly get: operations["GetCountrySpecs"];
  };
  readonly "/v1/country_specs/{country}": {
    /** <p>Returns a Country Spec for a given Country code.</p> */
    readonly get: operations["GetCountrySpecsCountry"];
  };
  readonly "/v1/coupons": {
    /** <p>Returns a list of your coupons.</p> */
    readonly get: operations["GetCoupons"];
    /**
     * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
     *
     * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
     */
    readonly post: operations["PostCoupons"];
  };
  readonly "/v1/coupons/{coupon}": {
    /** <p>Retrieves the coupon with the given ID.</p> */
    readonly get: operations["GetCouponsCoupon"];
    /** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p> */
    readonly post: operations["PostCouponsCoupon"];
    /** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p> */
    readonly delete: operations["DeleteCouponsCoupon"];
  };
  readonly "/v1/credit_notes": {
    /** <p>Returns a list of credit notes.</p> */
    readonly get: operations["GetCreditNotes"];
    /**
     * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
     * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
     * in any combination of the following:</p>
     *
     * <ul>
     * <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
     * <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
     * <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
     * </ul>
     *
     * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
     *
     * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
     * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
     */
    readonly post: operations["PostCreditNotes"];
  };
  readonly "/v1/credit_notes/preview": {
    /** <p>Get a preview of a credit note without creating it.</p> */
    readonly get: operations["GetCreditNotesPreview"];
  };
  readonly "/v1/credit_notes/preview/lines": {
    /** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetCreditNotesPreviewLines"];
  };
  readonly "/v1/credit_notes/{credit_note}/lines": {
    /** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetCreditNotesCreditNoteLines"];
  };
  readonly "/v1/credit_notes/{id}": {
    /** <p>Retrieves the credit note object with the given identifier.</p> */
    readonly get: operations["GetCreditNotesId"];
    /** <p>Updates an existing credit note.</p> */
    readonly post: operations["PostCreditNotesId"];
  };
  readonly "/v1/credit_notes/{id}/void": {
    /** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p> */
    readonly post: operations["PostCreditNotesIdVoid"];
  };
  readonly "/v1/customers": {
    /** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p> */
    readonly get: operations["GetCustomers"];
    /** <p>Creates a new customer object.</p> */
    readonly post: operations["PostCustomers"];
  };
  readonly "/v1/customers/{customer}": {
    /** <p>Retrieves a Customer object.</p> */
    readonly get: operations["GetCustomersCustomer"];
    /**
     * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
     *
     * <p>This request accepts mostly the same arguments as the customer creation call.</p>
     */
    readonly post: operations["PostCustomersCustomer"];
    /** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p> */
    readonly delete: operations["DeleteCustomersCustomer"];
  };
  readonly "/v1/customers/{customer}/balance_transactions": {
    /** <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p> */
    readonly get: operations["GetCustomersCustomerBalanceTransactions"];
    /** <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p> */
    readonly post: operations["PostCustomersCustomerBalanceTransactions"];
  };
  readonly "/v1/customers/{customer}/balance_transactions/{transaction}": {
    /** <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p> */
    readonly get: operations["GetCustomersCustomerBalanceTransactionsTransaction"];
    /** <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p> */
    readonly post: operations["PostCustomersCustomerBalanceTransactionsTransaction"];
  };
  readonly "/v1/customers/{customer}/bank_accounts": {
    /** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p> */
    readonly get: operations["GetCustomersCustomerBankAccounts"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    readonly post: operations["PostCustomersCustomerBankAccounts"];
  };
  readonly "/v1/customers/{customer}/bank_accounts/{id}": {
    /** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p> */
    readonly get: operations["GetCustomersCustomerBankAccountsId"];
    /** <p>Update a specified source for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerBankAccountsId"];
    /** <p>Delete a specified source for a given customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerBankAccountsId"];
  };
  readonly "/v1/customers/{customer}/bank_accounts/{id}/verify": {
    /** <p>Verify a specified bank account for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerBankAccountsIdVerify"];
  };
  readonly "/v1/customers/{customer}/cards": {
    /**
     * <p>You can see a list of the cards belonging to a customer.
     * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
     * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
     */
    readonly get: operations["GetCustomersCustomerCards"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    readonly post: operations["PostCustomersCustomerCards"];
  };
  readonly "/v1/customers/{customer}/cards/{id}": {
    /** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p> */
    readonly get: operations["GetCustomersCustomerCardsId"];
    /** <p>Update a specified source for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerCardsId"];
    /** <p>Delete a specified source for a given customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerCardsId"];
  };
  readonly "/v1/customers/{customer}/discount": {
    readonly get: operations["GetCustomersCustomerDiscount"];
    /** <p>Removes the currently applied discount on a customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerDiscount"];
  };
  readonly "/v1/customers/{customer}/payment_methods": {
    /** <p>Returns a list of PaymentMethods for a given Customer</p> */
    readonly get: operations["GetCustomersCustomerPaymentMethods"];
  };
  readonly "/v1/customers/{customer}/sources": {
    /** <p>List sources for a specified customer.</p> */
    readonly get: operations["GetCustomersCustomerSources"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    readonly post: operations["PostCustomersCustomerSources"];
  };
  readonly "/v1/customers/{customer}/sources/{id}": {
    /** <p>Retrieve a specified source for a given customer.</p> */
    readonly get: operations["GetCustomersCustomerSourcesId"];
    /** <p>Update a specified source for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerSourcesId"];
    /** <p>Delete a specified source for a given customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerSourcesId"];
  };
  readonly "/v1/customers/{customer}/sources/{id}/verify": {
    /** <p>Verify a specified bank account for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerSourcesIdVerify"];
  };
  readonly "/v1/customers/{customer}/subscriptions": {
    /** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p> */
    readonly get: operations["GetCustomersCustomerSubscriptions"];
    /** <p>Creates a new subscription on an existing customer.</p> */
    readonly post: operations["PostCustomersCustomerSubscriptions"];
  };
  readonly "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
    /** <p>Retrieves the subscription with the given ID.</p> */
    readonly get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedId"];
    /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
    readonly post: operations["PostCustomersCustomerSubscriptionsSubscriptionExposedId"];
    /**
     * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
     *
     * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
     *
     * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     */
    readonly delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedId"];
  };
  readonly "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
    readonly get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
    /** <p>Removes the currently applied discount on a customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
  };
  readonly "/v1/customers/{customer}/tax_ids": {
    /** <p>Returns a list of tax IDs for a customer.</p> */
    readonly get: operations["GetCustomersCustomerTaxIds"];
    /** <p>Creates a new <code>TaxID</code> object for a customer.</p> */
    readonly post: operations["PostCustomersCustomerTaxIds"];
  };
  readonly "/v1/customers/{customer}/tax_ids/{id}": {
    /** <p>Retrieves the <code>TaxID</code> object with the given identifier.</p> */
    readonly get: operations["GetCustomersCustomerTaxIdsId"];
    /** <p>Deletes an existing <code>TaxID</code> object.</p> */
    readonly delete: operations["DeleteCustomersCustomerTaxIdsId"];
  };
  readonly "/v1/disputes": {
    /** <p>Returns a list of your disputes.</p> */
    readonly get: operations["GetDisputes"];
  };
  readonly "/v1/disputes/{dispute}": {
    /** <p>Retrieves the dispute with the given ID.</p> */
    readonly get: operations["GetDisputesDispute"];
    /**
     * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
     *
     * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
     */
    readonly post: operations["PostDisputesDispute"];
  };
  readonly "/v1/disputes/{dispute}/close": {
    /**
     * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
     *
     * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
     */
    readonly post: operations["PostDisputesDisputeClose"];
  };
  readonly "/v1/ephemeral_keys": {
    /** <p>Creates a short-lived API key for a given resource.</p> */
    readonly post: operations["PostEphemeralKeys"];
  };
  readonly "/v1/ephemeral_keys/{key}": {
    /** <p>Invalidates a short-lived API key for a given resource.</p> */
    readonly delete: operations["DeleteEphemeralKeysKey"];
  };
  readonly "/v1/events": {
    /** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p> */
    readonly get: operations["GetEvents"];
  };
  readonly "/v1/events/{id}": {
    /** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p> */
    readonly get: operations["GetEventsId"];
  };
  readonly "/v1/exchange_rates": {
    /** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p> */
    readonly get: operations["GetExchangeRates"];
  };
  readonly "/v1/exchange_rates/{rate_id}": {
    /** <p>Retrieves the exchange rates from the given currency to every supported currency.</p> */
    readonly get: operations["GetExchangeRatesRateId"];
  };
  readonly "/v1/file_links": {
    /** <p>Returns a list of file links.</p> */
    readonly get: operations["GetFileLinks"];
    /** <p>Creates a new file link object.</p> */
    readonly post: operations["PostFileLinks"];
  };
  readonly "/v1/file_links/{link}": {
    /** <p>Retrieves the file link with the given ID.</p> */
    readonly get: operations["GetFileLinksLink"];
    /** <p>Updates an existing file link object. Expired links can no longer be updated.</p> */
    readonly post: operations["PostFileLinksLink"];
  };
  readonly "/v1/files": {
    /** <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p> */
    readonly get: operations["GetFiles"];
    /**
     * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
     *
     * <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
     */
    readonly post: operations["PostFiles"];
  };
  readonly "/v1/files/{file}": {
    /** <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p> */
    readonly get: operations["GetFilesFile"];
  };
  readonly "/v1/identity/verification_reports": {
    /** <p>List all verification reports.</p> */
    readonly get: operations["GetIdentityVerificationReports"];
  };
  readonly "/v1/identity/verification_reports/{report}": {
    /** <p>Retrieves an existing VerificationReport</p> */
    readonly get: operations["GetIdentityVerificationReportsReport"];
  };
  readonly "/v1/identity/verification_sessions": {
    /** <p>Returns a list of VerificationSessions</p> */
    readonly get: operations["GetIdentityVerificationSessions"];
    /**
     * <p>Creates a VerificationSession object.</p>
     *
     * <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
     *
     * <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
     *
     * <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a>.</p>
     */
    readonly post: operations["PostIdentityVerificationSessions"];
  };
  readonly "/v1/identity/verification_sessions/{session}": {
    /**
     * <p>Retrieves the details of a VerificationSession that was previously created.</p>
     *
     * <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
     * <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
     */
    readonly get: operations["GetIdentityVerificationSessionsSession"];
    /**
     * <p>Updates a VerificationSession object.</p>
     *
     * <p>When the session status is <code>requires_input</code>, you can use this method to update the
     * verification check and options.</p>
     */
    readonly post: operations["PostIdentityVerificationSessionsSession"];
  };
  readonly "/v1/identity/verification_sessions/{session}/cancel": {
    /**
     * <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
     *
     * <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
     */
    readonly post: operations["PostIdentityVerificationSessionsSessionCancel"];
  };
  readonly "/v1/identity/verification_sessions/{session}/redact": {
    /**
     * <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
     * the VerificationSession and all objects related to it, including VerificationReports, Events,
     * request logs, etc.</p>
     *
     * <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
     * <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
     * state will automatically cancel it.</p>
     *
     * <p>The redaction process may take up to four days. When the redaction process is in progress, the
     * VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
     * finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
     * will be emitted.</p>
     *
     * <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
     * fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
     * placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
     * used for any purpose.</p>
     *
     * <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
     */
    readonly post: operations["PostIdentityVerificationSessionsSessionRedact"];
  };
  readonly "/v1/invoiceitems": {
    /** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p> */
    readonly get: operations["GetInvoiceitems"];
    /** <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p> */
    readonly post: operations["PostInvoiceitems"];
  };
  readonly "/v1/invoiceitems/{invoiceitem}": {
    /** <p>Retrieves the invoice item with the given ID.</p> */
    readonly get: operations["GetInvoiceitemsInvoiceitem"];
    /** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p> */
    readonly post: operations["PostInvoiceitemsInvoiceitem"];
    /** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p> */
    readonly delete: operations["DeleteInvoiceitemsInvoiceitem"];
  };
  readonly "/v1/invoices": {
    /** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p> */
    readonly get: operations["GetInvoices"];
    /** <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p> */
    readonly post: operations["PostInvoices"];
  };
  readonly "/v1/invoices/upcoming": {
    /**
     * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
     *
     * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
     *
     * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
     */
    readonly get: operations["GetInvoicesUpcoming"];
  };
  readonly "/v1/invoices/upcoming/lines": {
    /** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetInvoicesUpcomingLines"];
  };
  readonly "/v1/invoices/{invoice}": {
    /** <p>Retrieves the invoice with the given ID.</p> */
    readonly get: operations["GetInvoicesInvoice"];
    /**
     * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
     * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
     *
     * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
     * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
     * <code>auto_advance=false</code>.</p>
     */
    readonly post: operations["PostInvoicesInvoice"];
    /** <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p> */
    readonly delete: operations["DeleteInvoicesInvoice"];
  };
  readonly "/v1/invoices/{invoice}/finalize": {
    /** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p> */
    readonly post: operations["PostInvoicesInvoiceFinalize"];
  };
  readonly "/v1/invoices/{invoice}/lines": {
    /** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetInvoicesInvoiceLines"];
  };
  readonly "/v1/invoices/{invoice}/mark_uncollectible": {
    /** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p> */
    readonly post: operations["PostInvoicesInvoiceMarkUncollectible"];
  };
  readonly "/v1/invoices/{invoice}/pay": {
    /** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p> */
    readonly post: operations["PostInvoicesInvoicePay"];
  };
  readonly "/v1/invoices/{invoice}/send": {
    /**
     * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
     *
     * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
     */
    readonly post: operations["PostInvoicesInvoiceSend"];
  };
  readonly "/v1/invoices/{invoice}/void": {
    /** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p> */
    readonly post: operations["PostInvoicesInvoiceVoid"];
  };
  readonly "/v1/issuer_fraud_records": {
    /** <p>Returns a list of issuer fraud records.</p> */
    readonly get: operations["GetIssuerFraudRecords"];
  };
  readonly "/v1/issuer_fraud_records/{issuer_fraud_record}": {
    /**
     * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
     *
     * <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
     */
    readonly get: operations["GetIssuerFraudRecordsIssuerFraudRecord"];
  };
  readonly "/v1/issuing/authorizations": {
    /** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingAuthorizations"];
  };
  readonly "/v1/issuing/authorizations/{authorization}": {
    /** <p>Retrieves an Issuing <code>Authorization</code> object.</p> */
    readonly get: operations["GetIssuingAuthorizationsAuthorization"];
    /** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingAuthorizationsAuthorization"];
  };
  readonly "/v1/issuing/authorizations/{authorization}/approve": {
    /** <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p> */
    readonly post: operations["PostIssuingAuthorizationsAuthorizationApprove"];
  };
  readonly "/v1/issuing/authorizations/{authorization}/decline": {
    /** <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p> */
    readonly post: operations["PostIssuingAuthorizationsAuthorizationDecline"];
  };
  readonly "/v1/issuing/cardholders": {
    /** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingCardholders"];
    /** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p> */
    readonly post: operations["PostIssuingCardholders"];
  };
  readonly "/v1/issuing/cardholders/{cardholder}": {
    /** <p>Retrieves an Issuing <code>Cardholder</code> object.</p> */
    readonly get: operations["GetIssuingCardholdersCardholder"];
    /** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingCardholdersCardholder"];
  };
  readonly "/v1/issuing/cards": {
    /** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingCards"];
    /** <p>Creates an Issuing <code>Card</code> object.</p> */
    readonly post: operations["PostIssuingCards"];
  };
  readonly "/v1/issuing/cards/{card}": {
    /** <p>Retrieves an Issuing <code>Card</code> object.</p> */
    readonly get: operations["GetIssuingCardsCard"];
    /** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingCardsCard"];
  };
  readonly "/v1/issuing/disputes": {
    /** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingDisputes"];
    /** <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p> */
    readonly post: operations["PostIssuingDisputes"];
  };
  readonly "/v1/issuing/disputes/{dispute}": {
    /** <p>Retrieves an Issuing <code>Dispute</code> object.</p> */
    readonly get: operations["GetIssuingDisputesDispute"];
    /** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p> */
    readonly post: operations["PostIssuingDisputesDispute"];
  };
  readonly "/v1/issuing/disputes/{dispute}/submit": {
    /** <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p> */
    readonly post: operations["PostIssuingDisputesDisputeSubmit"];
  };
  readonly "/v1/issuing/settlements": {
    /** <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingSettlements"];
  };
  readonly "/v1/issuing/settlements/{settlement}": {
    /** <p>Retrieves an Issuing <code>Settlement</code> object.</p> */
    readonly get: operations["GetIssuingSettlementsSettlement"];
    /** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingSettlementsSettlement"];
  };
  readonly "/v1/issuing/transactions": {
    /** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingTransactions"];
  };
  readonly "/v1/issuing/transactions/{transaction}": {
    /** <p>Retrieves an Issuing <code>Transaction</code> object.</p> */
    readonly get: operations["GetIssuingTransactionsTransaction"];
    /** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingTransactionsTransaction"];
  };
  readonly "/v1/mandates/{mandate}": {
    /** <p>Retrieves a Mandate object.</p> */
    readonly get: operations["GetMandatesMandate"];
  };
  readonly "/v1/order_returns": {
    /** <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p> */
    readonly get: operations["GetOrderReturns"];
  };
  readonly "/v1/order_returns/{id}": {
    /** <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p> */
    readonly get: operations["GetOrderReturnsId"];
  };
  readonly "/v1/orders": {
    /** <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p> */
    readonly get: operations["GetOrders"];
    /** <p>Creates a new order object.</p> */
    readonly post: operations["PostOrders"];
  };
  readonly "/v1/orders/{id}": {
    /** <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p> */
    readonly get: operations["GetOrdersId"];
    /** <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostOrdersId"];
  };
  readonly "/v1/orders/{id}/pay": {
    /** <p>Pay an order by providing a <code>source</code> to create a payment.</p> */
    readonly post: operations["PostOrdersIdPay"];
  };
  readonly "/v1/orders/{id}/returns": {
    /** <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p> */
    readonly post: operations["PostOrdersIdReturns"];
  };
  readonly "/v1/payment_intents": {
    /** <p>Returns a list of PaymentIntents.</p> */
    readonly get: operations["GetPaymentIntents"];
    /**
     * <p>Creates a PaymentIntent object.</p>
     *
     * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
     * to continue the payment. You can read more about the different payment flows
     * available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
     *
     * <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
     * and confirming the PaymentIntent in the same call. You may use any parameters
     * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
     * is supplied.</p>
     */
    readonly post: operations["PostPaymentIntents"];
  };
  readonly "/v1/payment_intents/{intent}": {
    /**
     * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
     *
     * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
     *
     * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
     */
    readonly get: operations["GetPaymentIntentsIntent"];
    /**
     * <p>Updates properties on a PaymentIntent object without confirming.</p>
     *
     * <p>Depending on which properties you update, you may need to confirm the
     * PaymentIntent again. For example, updating the <code>payment_method</code> will
     * always require you to confirm the PaymentIntent again. If you prefer to
     * update and confirm at the same time, we recommend updating properties via
     * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
     */
    readonly post: operations["PostPaymentIntentsIntent"];
  };
  readonly "/v1/payment_intents/{intent}/cancel": {
    /**
     * <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>, or <code>processing</code>. </p>
     *
     * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
     */
    readonly post: operations["PostPaymentIntentsIntentCancel"];
  };
  readonly "/v1/payment_intents/{intent}/capture": {
    /**
     * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
     *
     * <p>Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).</p>
     *
     * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
     */
    readonly post: operations["PostPaymentIntentsIntentCapture"];
  };
  readonly "/v1/payment_intents/{intent}/confirm": {
    /**
     * <p>Confirm that your customer intends to pay with current or provided
     * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
     * a payment.</p>
     *
     * <p>If the selected payment method requires additional authentication steps, the
     * PaymentIntent will transition to the <code>requires_action</code> status and
     * suggest additional actions via <code>next_action</code>. If payment fails,
     * the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
     * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
     * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
     *
     * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
     * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
     * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
     * After <code>next_action</code>s are handled by the client, no additional
     * confirmation is required to complete the payment.</p>
     *
     * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
     * initiated using a secret key.
     * If any actions are required for the payment, the PaymentIntent will
     * return to the <code>requires_confirmation</code> state
     * after those actions are completed. Your server needs to then
     * explicitly re-confirm the PaymentIntent to initiate the next payment
     * attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
     * to learn more about manual confirmation.</p>
     */
    readonly post: operations["PostPaymentIntentsIntentConfirm"];
  };
  readonly "/v1/payment_intents/{intent}/verify_microdeposits": {
    /** <p>Verifies microdeposits on a PaymentIntent object.</p> */
    readonly post: operations["PostPaymentIntentsIntentVerifyMicrodeposits"];
  };
  readonly "/v1/payment_links": {
    /** <p>Returns a list of your payment links.</p> */
    readonly get: operations["GetPaymentLinks"];
    /** <p>Creates a payment link.</p> */
    readonly post: operations["PostPaymentLinks"];
  };
  readonly "/v1/payment_links/{payment_link}": {
    /** <p>Retrieve a payment link.</p> */
    readonly get: operations["GetPaymentLinksPaymentLink"];
    /** <p>Updates a payment link.</p> */
    readonly post: operations["PostPaymentLinksPaymentLink"];
  };
  readonly "/v1/payment_links/{payment_link}/line_items": {
    /** <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetPaymentLinksPaymentLinkLineItems"];
  };
  readonly "/v1/payment_methods": {
    /** <p>Returns a list of PaymentMethods. For listing a customer’s payment methods, you should use <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a></p> */
    readonly get: operations["GetPaymentMethods"];
    /**
     * <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
     *
     * <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
     */
    readonly post: operations["PostPaymentMethods"];
  };
  readonly "/v1/payment_methods/{payment_method}": {
    /** <p>Retrieves a PaymentMethod object.</p> */
    readonly get: operations["GetPaymentMethodsPaymentMethod"];
    /** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p> */
    readonly post: operations["PostPaymentMethodsPaymentMethod"];
  };
  readonly "/v1/payment_methods/{payment_method}/attach": {
    /**
     * <p>Attaches a PaymentMethod object to a Customer.</p>
     *
     * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
     * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
     * These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
     * <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
     * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
     *
     * <p>To use this PaymentMethod as the default for invoice or subscription payments,
     * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
     * on the Customer to the PaymentMethod’s ID.</p>
     */
    readonly post: operations["PostPaymentMethodsPaymentMethodAttach"];
  };
  readonly "/v1/payment_methods/{payment_method}/detach": {
    /** <p>Detaches a PaymentMethod object from a Customer.</p> */
    readonly post: operations["PostPaymentMethodsPaymentMethodDetach"];
  };
  readonly "/v1/payouts": {
    /** <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p> */
    readonly get: operations["GetPayouts"];
    /**
     * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
     *
     * <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
     *
     * <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
     */
    readonly post: operations["PostPayouts"];
  };
  readonly "/v1/payouts/{payout}": {
    /** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p> */
    readonly get: operations["GetPayoutsPayout"];
    /** <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p> */
    readonly post: operations["PostPayoutsPayout"];
  };
  readonly "/v1/payouts/{payout}/cancel": {
    /** <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p> */
    readonly post: operations["PostPayoutsPayoutCancel"];
  };
  readonly "/v1/payouts/{payout}/reverse": {
    /**
     * <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p>
     *
     * <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
     */
    readonly post: operations["PostPayoutsPayoutReverse"];
  };
  readonly "/v1/plans": {
    /** <p>Returns a list of your plans.</p> */
    readonly get: operations["GetPlans"];
    /** <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p> */
    readonly post: operations["PostPlans"];
  };
  readonly "/v1/plans/{plan}": {
    /** <p>Retrieves the plan with the given ID.</p> */
    readonly get: operations["GetPlansPlan"];
    /** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p> */
    readonly post: operations["PostPlansPlan"];
    /** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p> */
    readonly delete: operations["DeletePlansPlan"];
  };
  readonly "/v1/prices": {
    /** <p>Returns a list of your prices.</p> */
    readonly get: operations["GetPrices"];
    /** <p>Creates a new price for an existing product. The price can be recurring or one-time.</p> */
    readonly post: operations["PostPrices"];
  };
  readonly "/v1/prices/{price}": {
    /** <p>Retrieves the price with the given ID.</p> */
    readonly get: operations["GetPricesPrice"];
    /** <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p> */
    readonly post: operations["PostPricesPrice"];
  };
  readonly "/v1/products": {
    /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
    readonly get: operations["GetProducts"];
    /** <p>Creates a new product object.</p> */
    readonly post: operations["PostProducts"];
  };
  readonly "/v1/products/{id}": {
    /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
    readonly get: operations["GetProductsId"];
    /** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostProductsId"];
    /** <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p> */
    readonly delete: operations["DeleteProductsId"];
  };
  readonly "/v1/promotion_codes": {
    /** <p>Returns a list of your promotion codes.</p> */
    readonly get: operations["GetPromotionCodes"];
    /** <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p> */
    readonly post: operations["PostPromotionCodes"];
  };
  readonly "/v1/promotion_codes/{promotion_code}": {
    /** <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p> */
    readonly get: operations["GetPromotionCodesPromotionCode"];
    /** <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p> */
    readonly post: operations["PostPromotionCodesPromotionCode"];
  };
  readonly "/v1/quotes": {
    /** <p>Returns a list of your quotes.</p> */
    readonly get: operations["GetQuotes"];
    /** <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p> */
    readonly post: operations["PostQuotes"];
  };
  readonly "/v1/quotes/{quote}": {
    /** <p>Retrieves the quote with the given ID.</p> */
    readonly get: operations["GetQuotesQuote"];
    /** <p>A quote models prices and services for a customer.</p> */
    readonly post: operations["PostQuotesQuote"];
  };
  readonly "/v1/quotes/{quote}/accept": {
    /** <p>Accepts the specified quote.</p> */
    readonly post: operations["PostQuotesQuoteAccept"];
  };
  readonly "/v1/quotes/{quote}/cancel": {
    /** <p>Cancels the quote.</p> */
    readonly post: operations["PostQuotesQuoteCancel"];
  };
  readonly "/v1/quotes/{quote}/computed_upfront_line_items": {
    /** <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p> */
    readonly get: operations["GetQuotesQuoteComputedUpfrontLineItems"];
  };
  readonly "/v1/quotes/{quote}/finalize": {
    /** <p>Finalizes the quote.</p> */
    readonly post: operations["PostQuotesQuoteFinalize"];
  };
  readonly "/v1/quotes/{quote}/line_items": {
    /** <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetQuotesQuoteLineItems"];
  };
  readonly "/v1/quotes/{quote}/pdf": {
    /** <p>Download the PDF for a finalized quote</p> */
    readonly get: operations["GetQuotesQuotePdf"];
  };
  readonly "/v1/radar/early_fraud_warnings": {
    /** <p>Returns a list of early fraud warnings.</p> */
    readonly get: operations["GetRadarEarlyFraudWarnings"];
  };
  readonly "/v1/radar/early_fraud_warnings/{early_fraud_warning}": {
    /**
     * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
     *
     * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
     */
    readonly get: operations["GetRadarEarlyFraudWarningsEarlyFraudWarning"];
  };
  readonly "/v1/radar/value_list_items": {
    /** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetRadarValueListItems"];
    /** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p> */
    readonly post: operations["PostRadarValueListItems"];
  };
  readonly "/v1/radar/value_list_items/{item}": {
    /** <p>Retrieves a <code>ValueListItem</code> object.</p> */
    readonly get: operations["GetRadarValueListItemsItem"];
    /** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p> */
    readonly delete: operations["DeleteRadarValueListItemsItem"];
  };
  readonly "/v1/radar/value_lists": {
    /** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetRadarValueLists"];
    /** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p> */
    readonly post: operations["PostRadarValueLists"];
  };
  readonly "/v1/radar/value_lists/{value_list}": {
    /** <p>Retrieves a <code>ValueList</code> object.</p> */
    readonly get: operations["GetRadarValueListsValueList"];
    /** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p> */
    readonly post: operations["PostRadarValueListsValueList"];
    /** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p> */
    readonly delete: operations["DeleteRadarValueListsValueList"];
  };
  readonly "/v1/recipients": {
    /** <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p> */
    readonly get: operations["GetRecipients"];
    /**
     * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
     * Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
     */
    readonly post: operations["PostRecipients"];
  };
  readonly "/v1/recipients/{id}": {
    /** <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p> */
    readonly get: operations["GetRecipientsId"];
    /**
     * <p>Updates the specified recipient by setting the values of the parameters passed.
     * Any parameters not provided will be left unchanged.</p>
     *
     * <p>If you update the name or tax ID, the identity verification will automatically be rerun.
     * If you update the bank account, the bank account validation will automatically be rerun.</p>
     */
    readonly post: operations["PostRecipientsId"];
    /** <p>Permanently deletes a recipient. It cannot be undone.</p> */
    readonly delete: operations["DeleteRecipientsId"];
  };
  readonly "/v1/refunds": {
    /** <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p> */
    readonly get: operations["GetRefunds"];
    /** <p>Create a refund.</p> */
    readonly post: operations["PostRefunds"];
  };
  readonly "/v1/refunds/{refund}": {
    /** <p>Retrieves the details of an existing refund.</p> */
    readonly get: operations["GetRefundsRefund"];
    /**
     * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts <code>metadata</code> as an argument.</p>
     */
    readonly post: operations["PostRefundsRefund"];
  };
  readonly "/v1/reporting/report_runs": {
    /** <p>Returns a list of Report Runs, with the most recent appearing first.</p> */
    readonly get: operations["GetReportingReportRuns"];
    /** <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    readonly post: operations["PostReportingReportRuns"];
  };
  readonly "/v1/reporting/report_runs/{report_run}": {
    /** <p>Retrieves the details of an existing Report Run.</p> */
    readonly get: operations["GetReportingReportRunsReportRun"];
  };
  readonly "/v1/reporting/report_types": {
    /** <p>Returns a full list of Report Types.</p> */
    readonly get: operations["GetReportingReportTypes"];
  };
  readonly "/v1/reporting/report_types/{report_type}": {
    /** <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    readonly get: operations["GetReportingReportTypesReportType"];
  };
  readonly "/v1/reviews": {
    /** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetReviews"];
  };
  readonly "/v1/reviews/{review}": {
    /** <p>Retrieves a <code>Review</code> object.</p> */
    readonly get: operations["GetReviewsReview"];
  };
  readonly "/v1/reviews/{review}/approve": {
    /** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p> */
    readonly post: operations["PostReviewsReviewApprove"];
  };
  readonly "/v1/setup_attempts": {
    /** <p>Returns a list of SetupAttempts associated with a provided SetupIntent.</p> */
    readonly get: operations["GetSetupAttempts"];
  };
  readonly "/v1/setup_intents": {
    /** <p>Returns a list of SetupIntents.</p> */
    readonly get: operations["GetSetupIntents"];
    /**
     * <p>Creates a SetupIntent object.</p>
     *
     * <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
     * to collect any required permissions to charge the payment method later.</p>
     */
    readonly post: operations["PostSetupIntents"];
  };
  readonly "/v1/setup_intents/{intent}": {
    /**
     * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
     *
     * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
     *
     * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
     */
    readonly get: operations["GetSetupIntentsIntent"];
    /** <p>Updates a SetupIntent object.</p> */
    readonly post: operations["PostSetupIntentsIntent"];
  };
  readonly "/v1/setup_intents/{intent}/cancel": {
    /**
     * <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
     *
     * <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
     */
    readonly post: operations["PostSetupIntentsIntentCancel"];
  };
  readonly "/v1/setup_intents/{intent}/confirm": {
    /**
     * <p>Confirm that your customer intends to set up the current or
     * provided payment method. For example, you would confirm a SetupIntent
     * when a customer hits the “Save” button on a payment method management
     * page on your website.</p>
     *
     * <p>If the selected payment method does not require any additional
     * steps from the customer, the SetupIntent will transition to the
     * <code>succeeded</code> status.</p>
     *
     * <p>Otherwise, it will transition to the <code>requires_action</code> status and
     * suggest additional actions via <code>next_action</code>. If setup fails,
     * the SetupIntent will transition to the
     * <code>requires_payment_method</code> status.</p>
     */
    readonly post: operations["PostSetupIntentsIntentConfirm"];
  };
  readonly "/v1/setup_intents/{intent}/verify_microdeposits": {
    /** <p>Verifies microdeposits on a SetupIntent object.</p> */
    readonly post: operations["PostSetupIntentsIntentVerifyMicrodeposits"];
  };
  readonly "/v1/shipping_rates": {
    /** <p>Returns a list of your shipping rates.</p> */
    readonly get: operations["GetShippingRates"];
    /** <p>Creates a new shipping rate object.</p> */
    readonly post: operations["PostShippingRates"];
  };
  readonly "/v1/shipping_rates/{shipping_rate_token}": {
    /** <p>Returns the shipping rate object with the given ID.</p> */
    readonly get: operations["GetShippingRatesShippingRateToken"];
    /** <p>Updates an existing shipping rate object.</p> */
    readonly post: operations["PostShippingRatesShippingRateToken"];
  };
  readonly "/v1/sigma/scheduled_query_runs": {
    /** <p>Returns a list of scheduled query runs.</p> */
    readonly get: operations["GetSigmaScheduledQueryRuns"];
  };
  readonly "/v1/sigma/scheduled_query_runs/{scheduled_query_run}": {
    /** <p>Retrieves the details of an scheduled query run.</p> */
    readonly get: operations["GetSigmaScheduledQueryRunsScheduledQueryRun"];
  };
  readonly "/v1/skus": {
    /** <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p> */
    readonly get: operations["GetSkus"];
    /** <p>Creates a new SKU associated with a product.</p> */
    readonly post: operations["PostSkus"];
  };
  readonly "/v1/skus/{id}": {
    /** <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p> */
    readonly get: operations["GetSkusId"];
    /**
     * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
     */
    readonly post: operations["PostSkusId"];
    /** <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p> */
    readonly delete: operations["DeleteSkusId"];
  };
  readonly "/v1/sources": {
    /** <p>Creates a new source object.</p> */
    readonly post: operations["PostSources"];
  };
  readonly "/v1/sources/{source}": {
    /** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p> */
    readonly get: operations["GetSourcesSource"];
    /**
     * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
     */
    readonly post: operations["PostSourcesSource"];
  };
  readonly "/v1/sources/{source}/mandate_notifications/{mandate_notification}": {
    /** <p>Retrieves a new Source MandateNotification.</p> */
    readonly get: operations["GetSourcesSourceMandateNotificationsMandateNotification"];
  };
  readonly "/v1/sources/{source}/source_transactions": {
    /** <p>List source transactions for a given source.</p> */
    readonly get: operations["GetSourcesSourceSourceTransactions"];
  };
  readonly "/v1/sources/{source}/source_transactions/{source_transaction}": {
    /** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p> */
    readonly get: operations["GetSourcesSourceSourceTransactionsSourceTransaction"];
  };
  readonly "/v1/sources/{source}/verify": {
    /** <p>Verify a given source.</p> */
    readonly post: operations["PostSourcesSourceVerify"];
  };
  readonly "/v1/subscription_items": {
    /** <p>Returns a list of your subscription items for a given subscription.</p> */
    readonly get: operations["GetSubscriptionItems"];
    /** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p> */
    readonly post: operations["PostSubscriptionItems"];
  };
  readonly "/v1/subscription_items/{item}": {
    /** <p>Retrieves the subscription item with the given ID.</p> */
    readonly get: operations["GetSubscriptionItemsItem"];
    /** <p>Updates the plan or quantity of an item on a current subscription.</p> */
    readonly post: operations["PostSubscriptionItemsItem"];
    /** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p> */
    readonly delete: operations["DeleteSubscriptionItemsItem"];
  };
  readonly "/v1/subscription_items/{subscription_item}/usage_record_summaries": {
    /**
     * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
     *
     * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
     */
    readonly get: operations["GetSubscriptionItemsSubscriptionItemUsageRecordSummaries"];
  };
  readonly "/v1/subscription_items/{subscription_item}/usage_records": {
    /**
     * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
     *
     * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
     *
     * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
     *
     * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
     */
    readonly post: operations["PostSubscriptionItemsSubscriptionItemUsageRecords"];
  };
  readonly "/v1/subscription_schedules": {
    /** <p>Retrieves the list of your subscription schedules.</p> */
    readonly get: operations["GetSubscriptionSchedules"];
    /** <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p> */
    readonly post: operations["PostSubscriptionSchedules"];
  };
  readonly "/v1/subscription_schedules/{schedule}": {
    /** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p> */
    readonly get: operations["GetSubscriptionSchedulesSchedule"];
    /** <p>Updates an existing subscription schedule.</p> */
    readonly post: operations["PostSubscriptionSchedulesSchedule"];
  };
  readonly "/v1/subscription_schedules/{schedule}/cancel": {
    /** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p> */
    readonly post: operations["PostSubscriptionSchedulesScheduleCancel"];
  };
  readonly "/v1/subscription_schedules/{schedule}/release": {
    /** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p> */
    readonly post: operations["PostSubscriptionSchedulesScheduleRelease"];
  };
  readonly "/v1/subscriptions": {
    /** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p> */
    readonly get: operations["GetSubscriptions"];
    /** <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p> */
    readonly post: operations["PostSubscriptions"];
  };
  readonly "/v1/subscriptions/{subscription_exposed_id}": {
    /** <p>Retrieves the subscription with the given ID.</p> */
    readonly get: operations["GetSubscriptionsSubscriptionExposedId"];
    /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
    readonly post: operations["PostSubscriptionsSubscriptionExposedId"];
    /**
     * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
     *
     * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
     *
     * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     */
    readonly delete: operations["DeleteSubscriptionsSubscriptionExposedId"];
  };
  readonly "/v1/subscriptions/{subscription_exposed_id}/discount": {
    /** <p>Removes the currently applied discount on a subscription.</p> */
    readonly delete: operations["DeleteSubscriptionsSubscriptionExposedIdDiscount"];
  };
  readonly "/v1/tax_codes": {
    /** <p>A list of <a href="https://stripe.com/docs/tax/tax-codes">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p> */
    readonly get: operations["GetTaxCodes"];
  };
  readonly "/v1/tax_codes/{id}": {
    /** <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p> */
    readonly get: operations["GetTaxCodesId"];
  };
  readonly "/v1/tax_rates": {
    /** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p> */
    readonly get: operations["GetTaxRates"];
    /** <p>Creates a new tax rate.</p> */
    readonly post: operations["PostTaxRates"];
  };
  readonly "/v1/tax_rates/{tax_rate}": {
    /** <p>Retrieves a tax rate with the given ID</p> */
    readonly get: operations["GetTaxRatesTaxRate"];
    /** <p>Updates an existing tax rate.</p> */
    readonly post: operations["PostTaxRatesTaxRate"];
  };
  readonly "/v1/terminal/connection_tokens": {
    /** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p> */
    readonly post: operations["PostTerminalConnectionTokens"];
  };
  readonly "/v1/terminal/locations": {
    /** <p>Returns a list of <code>Location</code> objects.</p> */
    readonly get: operations["GetTerminalLocations"];
    /**
     * <p>Creates a new <code>Location</code> object.
     * For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
     */
    readonly post: operations["PostTerminalLocations"];
  };
  readonly "/v1/terminal/locations/{location}": {
    /** <p>Retrieves a <code>Location</code> object.</p> */
    readonly get: operations["GetTerminalLocationsLocation"];
    /** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostTerminalLocationsLocation"];
    /** <p>Deletes a <code>Location</code> object.</p> */
    readonly delete: operations["DeleteTerminalLocationsLocation"];
  };
  readonly "/v1/terminal/readers": {
    /** <p>Returns a list of <code>Reader</code> objects.</p> */
    readonly get: operations["GetTerminalReaders"];
    /** <p>Creates a new <code>Reader</code> object.</p> */
    readonly post: operations["PostTerminalReaders"];
  };
  readonly "/v1/terminal/readers/{reader}": {
    /** <p>Retrieves a <code>Reader</code> object.</p> */
    readonly get: operations["GetTerminalReadersReader"];
    /** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostTerminalReadersReader"];
    /** <p>Deletes a <code>Reader</code> object.</p> */
    readonly delete: operations["DeleteTerminalReadersReader"];
  };
  readonly "/v1/tokens": {
    /**
     * <p>Creates a single-use token that represents a bank account’s details.
     * This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
     */
    readonly post: operations["PostTokens"];
  };
  readonly "/v1/tokens/{token}": {
    /** <p>Retrieves the token with the given ID.</p> */
    readonly get: operations["GetTokensToken"];
  };
  readonly "/v1/topups": {
    /** <p>Returns a list of top-ups.</p> */
    readonly get: operations["GetTopups"];
    /** <p>Top up the balance of an account</p> */
    readonly post: operations["PostTopups"];
  };
  readonly "/v1/topups/{topup}": {
    /** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p> */
    readonly get: operations["GetTopupsTopup"];
    /** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p> */
    readonly post: operations["PostTopupsTopup"];
  };
  readonly "/v1/topups/{topup}/cancel": {
    /** <p>Cancels a top-up. Only pending top-ups can be canceled.</p> */
    readonly post: operations["PostTopupsTopupCancel"];
  };
  readonly "/v1/transfers": {
    /** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p> */
    readonly get: operations["GetTransfers"];
    /** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p> */
    readonly post: operations["PostTransfers"];
  };
  readonly "/v1/transfers/{id}/reversals": {
    /** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p> */
    readonly get: operations["GetTransfersIdReversals"];
    /**
     * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
     *
     * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
     *
     * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
     */
    readonly post: operations["PostTransfersIdReversals"];
  };
  readonly "/v1/transfers/{transfer}": {
    /** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p> */
    readonly get: operations["GetTransfersTransfer"];
    /**
     * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request accepts only metadata as an argument.</p>
     */
    readonly post: operations["PostTransfersTransfer"];
  };
  readonly "/v1/transfers/{transfer}/reversals/{id}": {
    /** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p> */
    readonly get: operations["GetTransfersTransferReversalsId"];
    /**
     * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts metadata and description as arguments.</p>
     */
    readonly post: operations["PostTransfersTransferReversalsId"];
  };
  readonly "/v1/webhook_endpoints": {
    /** <p>Returns a list of your webhook endpoints.</p> */
    readonly get: operations["GetWebhookEndpoints"];
    /** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p> */
    readonly post: operations["PostWebhookEndpoints"];
  };
  readonly "/v1/webhook_endpoints/{webhook_endpoint}": {
    /** <p>Retrieves the webhook endpoint with the given ID.</p> */
    readonly get: operations["GetWebhookEndpointsWebhookEndpoint"];
    /** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p> */
    readonly post: operations["PostWebhookEndpointsWebhookEndpoint"];
    /** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p> */
    readonly delete: operations["DeleteWebhookEndpointsWebhookEndpoint"];
  };
}

export interface components {
  readonly schemas: {
    /**
     * Account
     * @description This is an object representing a Stripe account. You can retrieve it to see
     * properties on the account like its current e-mail address or if the account is
     * enabled yet to make live charges.
     *
     * Some properties, marked below, are available only to platforms that want to
     * [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
     */
    readonly account: {
      /** @description Business information about the account. */
      readonly business_profile?: components["schemas"]["account_business_profile"] | null;
      /**
       * @description The business type.
       * @enum {string|null}
       */
      readonly business_type?: ("company" | "government_entity" | "individual" | "non_profit") | null;
      readonly capabilities?: components["schemas"]["account_capabilities"];
      /** @description Whether the account can create live charges. */
      readonly charges_enabled?: boolean;
      readonly company?: components["schemas"]["legal_entity_company"];
      readonly controller?: components["schemas"]["account_unification_account_controller"];
      /** @description The account's country. */
      readonly country?: string;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created?: number;
      /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
      readonly default_currency?: string;
      /** @description Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
      readonly details_submitted?: boolean;
      /** @description An email address associated with the account. You can treat this as metadata: it is not used for authentication or messaging account holders. */
      readonly email?: string | null;
      /**
       * ExternalAccountList
       * @description External accounts (bank accounts and debit cards) currently attached to this account
       */
      readonly external_accounts?: {
        /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
        readonly data: readonly (components["schemas"]["bank_account"] | components["schemas"]["card"])[];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      readonly future_requirements?: components["schemas"]["account_future_requirements"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      readonly individual?: components["schemas"]["person"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "account";
      /** @description Whether Stripe can send payouts to this account. */
      readonly payouts_enabled?: boolean;
      readonly requirements?: components["schemas"]["account_requirements"];
      /** @description Options for customizing how the account functions within Stripe. */
      readonly settings?: components["schemas"]["account_settings"] | null;
      readonly tos_acceptance?: components["schemas"]["account_tos_acceptance"];
      /**
       * @description The Stripe account type. Can be `standard`, `express`, or `custom`.
       * @enum {string}
       */
      readonly type?: "custom" | "express" | "standard";
    };
    /** AccountBacsDebitPaymentsSettings */
    readonly account_bacs_debit_payments_settings: {
      /** @description The Bacs Direct Debit Display Name for this account. For payments made with Bacs Direct Debit, this will appear on the mandate, and as the statement descriptor. */
      readonly display_name?: string;
    };
    /** AccountBrandingSettings */
    readonly account_branding_settings: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
      readonly icon?: (string | components["schemas"]["file"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
      readonly logo?: (string | components["schemas"]["file"]) | null;
      /** @description A CSS hex color value representing the primary branding color for this account */
      readonly primary_color?: string | null;
      /** @description A CSS hex color value representing the secondary branding color for this account */
      readonly secondary_color?: string | null;
    };
    /** AccountBusinessProfile */
    readonly account_business_profile: {
      /** @description [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
      readonly mcc?: string | null;
      /** @description The customer-facing business name. */
      readonly name?: string | null;
      /** @description Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
      readonly product_description?: string | null;
      /** @description A publicly available mailing address for sending support issues to. */
      readonly support_address?: components["schemas"]["address"] | null;
      /** @description A publicly available email address for sending support issues to. */
      readonly support_email?: string | null;
      /** @description A publicly available phone number to call with support issues. */
      readonly support_phone?: string | null;
      /** @description A publicly available website for handling support issues. */
      readonly support_url?: string | null;
      /** @description The business's publicly available website. */
      readonly url?: string | null;
    };
    /** AccountCapabilities */
    readonly account_capabilities: {
      /**
       * @description The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
       * @enum {string}
       */
      readonly acss_debit_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
       * @enum {string}
       */
      readonly afterpay_clearpay_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
       * @enum {string}
       */
      readonly au_becs_debit_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
       * @enum {string}
       */
      readonly bacs_debit_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
       * @enum {string}
       */
      readonly bancontact_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
       * @enum {string}
       */
      readonly boleto_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
       * @enum {string}
       */
      readonly card_issuing?: "active" | "inactive" | "pending";
      /**
       * @description The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
       * @enum {string}
       */
      readonly card_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
       * @enum {string}
       */
      readonly cartes_bancaires_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
       * @enum {string}
       */
      readonly eps_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
       * @enum {string}
       */
      readonly fpx_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
       * @enum {string}
       */
      readonly giropay_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
       * @enum {string}
       */
      readonly grabpay_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
       * @enum {string}
       */
      readonly ideal_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
       * @enum {string}
       */
      readonly jcb_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
       * @enum {string}
       */
      readonly klarna_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the legacy payments capability of the account.
       * @enum {string}
       */
      readonly legacy_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
       * @enum {string}
       */
      readonly oxxo_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
       * @enum {string}
       */
      readonly p24_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
       * @enum {string}
       */
      readonly sepa_debit_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
       * @enum {string}
       */
      readonly sofort_payments?: "active" | "inactive" | "pending";
      /**
       * @description The status of the tax reporting 1099-K (US) capability of the account.
       * @enum {string}
       */
      readonly tax_reporting_us_1099_k?: "active" | "inactive" | "pending";
      /**
       * @description The status of the tax reporting 1099-MISC (US) capability of the account.
       * @enum {string}
       */
      readonly tax_reporting_us_1099_misc?: "active" | "inactive" | "pending";
      /**
       * @description The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
       * @enum {string}
       */
      readonly transfers?: "active" | "inactive" | "pending";
    };
    /** AccountCapabilityFutureRequirements */
    readonly account_capability_future_requirements: {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      readonly alternatives?: readonly components["schemas"]["account_requirements_alternative"][] | null;
      /**
       * Format: unix-time
       * @description Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
       */
      readonly current_deadline?: number | null;
      /** @description Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
      readonly currently_due: readonly string[];
      /** @description This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account. */
      readonly disabled_reason?: string | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      readonly errors: readonly components["schemas"]["account_requirements_error"][];
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
      readonly eventually_due: readonly string[];
      /** @description Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
      readonly past_due: readonly string[];
      /** @description Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
      readonly pending_verification: readonly string[];
    };
    /** AccountCapabilityRequirements */
    readonly account_capability_requirements: {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      readonly alternatives?: readonly components["schemas"]["account_requirements_alternative"][] | null;
      /**
       * Format: unix-time
       * @description Date by which the fields in `currently_due` must be collected to keep the capability enabled for the account. These fields may disable the capability sooner if the next threshold is reached before they are collected.
       */
      readonly current_deadline?: number | null;
      /** @description Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. */
      readonly currently_due: readonly string[];
      /**
       * @description If the capability is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`.
       *
       * `rejected.unsupported_business` means that the account's business is not supported by the capability. For example, payment methods may restrict the businesses they support in their terms of service:
       *
       * - [Afterpay Clearpay's terms of service](/afterpay-clearpay/legal#restricted-businesses)
       *
       * If you believe that the rejection is in error, please contact support at https://support.stripe.com/contact/ for assistance.
       */
      readonly disabled_reason?: string | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      readonly errors: readonly components["schemas"]["account_requirements_error"][];
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
      readonly eventually_due: readonly string[];
      /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account. */
      readonly past_due: readonly string[];
      /** @description Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
      readonly pending_verification: readonly string[];
    };
    /** AccountCardIssuingSettings */
    readonly account_card_issuing_settings: {
      readonly tos_acceptance?: components["schemas"]["card_issuing_account_terms_of_service"];
    };
    /** AccountCardPaymentsSettings */
    readonly account_card_payments_settings: {
      readonly decline_on?: components["schemas"]["account_decline_charge_on"];
      /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
      readonly statement_descriptor_prefix?: string | null;
    };
    /** AccountDashboardSettings */
    readonly account_dashboard_settings: {
      /** @description The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
      readonly display_name?: string | null;
      /** @description The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
      readonly timezone?: string | null;
    };
    /** AccountDeclineChargeOn */
    readonly account_decline_charge_on: {
      /** @description Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
      readonly avs_failure: boolean;
      /** @description Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
      readonly cvc_failure: boolean;
    };
    /** AccountFutureRequirements */
    readonly account_future_requirements: {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      readonly alternatives?: readonly components["schemas"]["account_requirements_alternative"][] | null;
      /**
       * Format: unix-time
       * @description Date on which `future_requirements` merges with the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
       */
      readonly current_deadline?: number | null;
      /** @description Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash. */
      readonly currently_due?: readonly string[] | null;
      /** @description This is typed as a string for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is empty because fields in `future_requirements` will never disable the account. */
      readonly disabled_reason?: string | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      readonly errors?: readonly components["schemas"]["account_requirements_error"][] | null;
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well. */
      readonly eventually_due?: readonly string[] | null;
      /** @description Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
      readonly past_due?: readonly string[] | null;
      /** @description Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
      readonly pending_verification?: readonly string[] | null;
    };
    /**
     * AccountLink
     * @description Account Links are the means by which a Connect platform grants a connected account permission to access
     * Stripe-hosted applications, such as Connect Onboarding.
     *
     * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
     */
    readonly account_link: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * Format: unix-time
       * @description The timestamp at which this account link will expire.
       */
      readonly expires_at: number;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "account_link";
      /** @description The URL for the account link. */
      readonly url: string;
    };
    /** AccountPaymentsSettings */
    readonly account_payments_settings: {
      /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
      readonly statement_descriptor?: string | null;
      /** @description The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) */
      readonly statement_descriptor_kana?: string | null;
      /** @description The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) */
      readonly statement_descriptor_kanji?: string | null;
    };
    /** AccountPayoutSettings */
    readonly account_payout_settings: {
      /** @description A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `false` for Custom accounts, otherwise `true`. */
      readonly debit_negative_balances: boolean;
      readonly schedule: components["schemas"]["transfer_schedule"];
      /** @description The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
      readonly statement_descriptor?: string | null;
    };
    /** AccountRequirements */
    readonly account_requirements: {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      readonly alternatives?: readonly components["schemas"]["account_requirements_alternative"][] | null;
      /**
       * Format: unix-time
       * @description Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
       */
      readonly current_deadline?: number | null;
      /** @description Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      readonly currently_due?: readonly string[] | null;
      /** @description If the account is disabled, this string describes why. Can be `requirements.past_due`, `requirements.pending_verification`, `listed`, `platform_paused`, `rejected.fraud`, `rejected.listed`, `rejected.terms_of_service`, `rejected.other`, `under_review`, or `other`. */
      readonly disabled_reason?: string | null;
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      readonly errors?: readonly components["schemas"]["account_requirements_error"][] | null;
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set. */
      readonly eventually_due?: readonly string[] | null;
      /** @description Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account. */
      readonly past_due?: readonly string[] | null;
      /** @description Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
      readonly pending_verification?: readonly string[] | null;
    };
    /** AccountRequirementsAlternative */
    readonly account_requirements_alternative: {
      /** @description Fields that can be provided to satisfy all fields in `original_fields_due`. */
      readonly alternative_fields_due: readonly string[];
      /** @description Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`. */
      readonly original_fields_due: readonly string[];
    };
    /** AccountRequirementsError */
    readonly account_requirements_error: {
      /**
       * @description The code for the type of error.
       * @enum {string}
       */
      readonly code:
        | "invalid_address_city_state_postal_code"
        | "invalid_street_address"
        | "invalid_value_other"
        | "verification_document_address_mismatch"
        | "verification_document_address_missing"
        | "verification_document_corrupt"
        | "verification_document_country_not_supported"
        | "verification_document_dob_mismatch"
        | "verification_document_duplicate_type"
        | "verification_document_expired"
        | "verification_document_failed_copy"
        | "verification_document_failed_greyscale"
        | "verification_document_failed_other"
        | "verification_document_failed_test_mode"
        | "verification_document_fraudulent"
        | "verification_document_id_number_mismatch"
        | "verification_document_id_number_missing"
        | "verification_document_incomplete"
        | "verification_document_invalid"
        | "verification_document_issue_or_expiry_date_missing"
        | "verification_document_manipulated"
        | "verification_document_missing_back"
        | "verification_document_missing_front"
        | "verification_document_name_mismatch"
        | "verification_document_name_missing"
        | "verification_document_nationality_mismatch"
        | "verification_document_not_readable"
        | "verification_document_not_signed"
        | "verification_document_not_uploaded"
        | "verification_document_photo_mismatch"
        | "verification_document_too_large"
        | "verification_document_type_not_supported"
        | "verification_failed_address_match"
        | "verification_failed_business_iec_number"
        | "verification_failed_document_match"
        | "verification_failed_id_number_match"
        | "verification_failed_keyed_identity"
        | "verification_failed_keyed_match"
        | "verification_failed_name_match"
        | "verification_failed_other"
        | "verification_failed_tax_id_match"
        | "verification_failed_tax_id_not_issued"
        | "verification_missing_executives"
        | "verification_missing_owners"
        | "verification_requires_additional_memorandum_of_associations";
      /** @description An informative message that indicates the error type and provides additional details about the error. */
      readonly reason: string;
      /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
      readonly requirement: string;
    };
    /** AccountSepaDebitPaymentsSettings */
    readonly account_sepa_debit_payments_settings: {
      /** @description SEPA creditor identifier that identifies the company making the payment. */
      readonly creditor_id?: string;
    };
    /** AccountSettings */
    readonly account_settings: {
      readonly bacs_debit_payments?: components["schemas"]["account_bacs_debit_payments_settings"];
      readonly branding: components["schemas"]["account_branding_settings"];
      readonly card_issuing?: components["schemas"]["account_card_issuing_settings"];
      readonly card_payments: components["schemas"]["account_card_payments_settings"];
      readonly dashboard: components["schemas"]["account_dashboard_settings"];
      readonly payments: components["schemas"]["account_payments_settings"];
      readonly payouts?: components["schemas"]["account_payout_settings"];
      readonly sepa_debit_payments?: components["schemas"]["account_sepa_debit_payments_settings"];
    };
    /** AccountTOSAcceptance */
    readonly account_tos_acceptance: {
      /**
       * Format: unix-time
       * @description The Unix timestamp marking when the account representative accepted their service agreement
       */
      readonly date?: number | null;
      /** @description The IP address from which the account representative accepted their service agreement */
      readonly ip?: string | null;
      /** @description The user's service agreement type */
      readonly service_agreement?: string;
      /** @description The user agent of the browser from which the account representative accepted their service agreement */
      readonly user_agent?: string | null;
    };
    /** AccountUnificationAccountController */
    readonly account_unification_account_controller: {
      /** @description `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null. */
      readonly is_controller?: boolean;
      /**
       * @description The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
       * @enum {string}
       */
      readonly type: "account" | "application";
    };
    /** Address */
    readonly address: {
      /** @description City, district, suburb, town, or village. */
      readonly city?: string | null;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      readonly country?: string | null;
      /** @description Address line 1 (e.g., street, PO Box, or company name). */
      readonly line1?: string | null;
      /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
      readonly line2?: string | null;
      /** @description ZIP or postal code. */
      readonly postal_code?: string | null;
      /** @description State, county, province, or region. */
      readonly state?: string | null;
    };
    /** AlipayAccount */
    readonly alipay_account: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The ID of the customer associated with this Alipay Account. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. */
      readonly fingerprint: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "alipay_account";
      /** @description If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
      readonly payment_amount?: number | null;
      /** @description If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
      readonly payment_currency?: string | null;
      /** @description True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
      readonly reusable: boolean;
      /** @description Whether this Alipay account object has ever been used for a payment. */
      readonly used: boolean;
      /** @description The username for the Alipay account. */
      readonly username: string;
    };
    /** APIErrors */
    readonly api_errors: {
      /** @description For card errors, the ID of the failed charge. */
      readonly charge?: string;
      /** @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
      readonly code?: string;
      /** @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
      readonly decline_code?: string;
      /** @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
      readonly doc_url?: string;
      /** @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
      readonly message?: string;
      /** @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
      readonly param?: string;
      readonly payment_intent?: components["schemas"]["payment_intent"];
      readonly payment_method?: components["schemas"]["payment_method"];
      /** @description If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors. */
      readonly payment_method_type?: string;
      readonly setup_intent?: components["schemas"]["setup_intent"];
      /** @description The source object for errors returned on a request involving a source. */
      readonly source?:
        | components["schemas"]["bank_account"]
        | components["schemas"]["card"]
        | components["schemas"]["source"];
      /**
       * @description The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
       * @enum {string}
       */
      readonly type: "api_error" | "card_error" | "idempotency_error" | "invalid_request_error";
    };
    /** ApplePayDomain */
    readonly apple_pay_domain: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      readonly domain_name: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "apple_pay_domain";
    };
    /** Application */
    readonly application: {
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The name of the application. */
      readonly name?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "application";
    };
    /** PlatformFee */
    readonly application_fee: {
      /** @description ID of the Stripe account this fee was taken from. */
      readonly account: string | components["schemas"]["account"];
      /** @description Amount earned, in %s. */
      readonly amount: number;
      /** @description Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
      readonly amount_refunded: number;
      /** @description ID of the Connect application that earned the fee. */
      readonly application: string | components["schemas"]["application"];
      /** @description Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /** @description ID of the charge that the application fee was taken from. */
      readonly charge: string | components["schemas"]["charge"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "application_fee";
      /** @description ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
      readonly originating_transaction?: (string | components["schemas"]["charge"]) | null;
      /** @description Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
      readonly refunded: boolean;
      /**
       * FeeRefundList
       * @description A list of refunds that have been applied to the fee.
       */
      readonly refunds: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["fee_refund"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
    };
    /** AutomaticTax */
    readonly automatic_tax: {
      /** @description Whether Stripe automatically computes tax on this invoice. */
      readonly enabled: boolean;
      /**
       * @description The status of the most recent automated tax calculation for this invoice.
       * @enum {string|null}
       */
      readonly status?: ("complete" | "failed" | "requires_location_inputs") | null;
    };
    /**
     * Balance
     * @description This is an object representing your Stripe balance. You can retrieve it to see
     * the balance currently on your Stripe account.
     *
     * You can also retrieve the balance history, which contains a list of
     * [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
     * (charges, payouts, and so forth).
     *
     * The available and pending amounts for each currency are broken down further by
     * payment source types.
     *
     * Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
     */
    readonly balance: {
      /** @description Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property. */
      readonly available: readonly components["schemas"]["balance_amount"][];
      /** @description Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property. */
      readonly connect_reserved?: readonly components["schemas"]["balance_amount"][];
      /** @description Funds that can be paid out using Instant Payouts. */
      readonly instant_available?: readonly components["schemas"]["balance_amount"][];
      readonly issuing?: components["schemas"]["balance_detail"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "balance";
      /** @description Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property. */
      readonly pending: readonly components["schemas"]["balance_amount"][];
    };
    /** BalanceAmount */
    readonly balance_amount: {
      /** @description Balance amount. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      readonly source_types?: components["schemas"]["balance_amount_by_source_type"];
    };
    /** BalanceAmountBySourceType */
    readonly balance_amount_by_source_type: {
      /** @description Amount for bank account. */
      readonly bank_account?: number;
      /** @description Amount for card. */
      readonly card?: number;
      /** @description Amount for FPX. */
      readonly fpx?: number;
    };
    /** BalanceDetail */
    readonly balance_detail: {
      /** @description Funds that are available for use. */
      readonly available: readonly components["schemas"]["balance_amount"][];
    };
    /**
     * BalanceTransaction
     * @description Balance transactions represent funds moving through your Stripe account.
     * They're created for every type of transaction that comes into or flows out of your Stripe account balance.
     *
     * Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
     */
    readonly balance_transaction: {
      /** @description Gross amount of the transaction, in %s. */
      readonly amount: number;
      /**
       * Format: unix-time
       * @description The date the transaction's net funds will become available in the Stripe balance.
       */
      readonly available_on: number;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`. */
      readonly exchange_rate?: number | null;
      /** @description Fees (in %s) paid for this transaction. */
      readonly fee: number;
      /** @description Detailed breakdown of fees (in %s) paid for this transaction. */
      readonly fee_details: readonly components["schemas"]["fee"][];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Net amount of the transaction, in %s. */
      readonly net: number;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "balance_transaction";
      /** @description [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective. */
      readonly reporting_category: string;
      /** @description The Stripe object to which this transaction is related. */
      readonly source?:
        | (
            | string
            | components["schemas"]["application_fee"]
            | components["schemas"]["charge"]
            | components["schemas"]["connect_collection_transfer"]
            | components["schemas"]["dispute"]
            | components["schemas"]["fee_refund"]
            | components["schemas"]["issuing.authorization"]
            | components["schemas"]["issuing.dispute"]
            | components["schemas"]["issuing.transaction"]
            | components["schemas"]["payout"]
            | components["schemas"]["platform_tax_fee"]
            | components["schemas"]["refund"]
            | components["schemas"]["reserve_transaction"]
            | components["schemas"]["tax_deducted_at_source"]
            | components["schemas"]["topup"]
            | components["schemas"]["transfer"]
            | components["schemas"]["transfer_reversal"]
          )
        | null;
      /** @description If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. */
      readonly status: string;
      /**
       * @description Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
       * @enum {string}
       */
      readonly type:
        | "adjustment"
        | "advance"
        | "advance_funding"
        | "anticipation_repayment"
        | "application_fee"
        | "application_fee_refund"
        | "charge"
        | "connect_collection_transfer"
        | "contribution"
        | "issuing_authorization_hold"
        | "issuing_authorization_release"
        | "issuing_dispute"
        | "issuing_transaction"
        | "payment"
        | "payment_failure_refund"
        | "payment_refund"
        | "payout"
        | "payout_cancel"
        | "payout_failure"
        | "refund"
        | "refund_failure"
        | "reserve_transaction"
        | "reserved_funds"
        | "stripe_fee"
        | "stripe_fx_fee"
        | "tax_fee"
        | "topup"
        | "topup_reversal"
        | "transfer"
        | "transfer_cancel"
        | "transfer_failure"
        | "transfer_refund";
    };
    /**
     * BankAccount
     * @description These bank accounts are payment methods on `Customer` objects.
     *
     * On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
     * destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
     * They can be bank accounts or debit cards as well, and are documented in the links above.
     *
     * Related guide: [Bank Debits and Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
     */
    readonly bank_account: {
      /** @description The ID of the account that the bank account is associated with. */
      readonly account?: (string | components["schemas"]["account"]) | null;
      /** @description The name of the person or business that owns the bank account. */
      readonly account_holder_name?: string | null;
      /** @description The type of entity that holds the account. This can be either `individual` or `company`. */
      readonly account_holder_type?: string | null;
      /** @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`. */
      readonly account_type?: string | null;
      /** @description A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout. */
      readonly available_payout_methods?: readonly ("instant" | "standard")[] | null;
      /** @description Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
      readonly bank_name?: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      readonly country: string;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      readonly currency: string;
      /** @description The ID of the customer that the bank account is associated with. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description Whether this bank account is the default external account for its currency. */
      readonly default_for_currency?: boolean | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The last four digits of the bank account number. */
      readonly last4: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "bank_account";
      /** @description The routing transit number for the bank account. */
      readonly routing_number?: string | null;
      /**
       * @description For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
       *
       * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
       */
      readonly status: string;
    };
    /** billing_details */
    readonly billing_details: {
      /** @description Billing address. */
      readonly address?: components["schemas"]["address"] | null;
      /** @description Email address. */
      readonly email?: string | null;
      /** @description Full name. */
      readonly name?: string | null;
      /** @description Billing phone number (including extension). */
      readonly phone?: string | null;
    };
    /**
     * PortalConfiguration
     * @description A portal configuration describes the functionality and behavior of a portal session.
     */
    readonly "billing_portal.configuration": {
      /** @description Whether the configuration is active and can be used to create portal sessions. */
      readonly active: boolean;
      /** @description ID of the Connect Application that created the configuration. */
      readonly application?: string | null;
      readonly business_profile: components["schemas"]["portal_business_profile"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
      readonly default_return_url?: string | null;
      readonly features: components["schemas"]["portal_features"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session. */
      readonly is_default: boolean;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "billing_portal.configuration";
      /**
       * Format: unix-time
       * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
       */
      readonly updated: number;
    };
    /**
     * PortalSession
     * @description The Billing customer portal is a Stripe-hosted UI for subscription and
     * billing management.
     *
     * A portal configuration describes the functionality and features that you
     * want to provide to your customers through the portal.
     *
     * A portal session describes the instantiation of the customer portal for
     * a particular customer. By visiting the session's URL, the customer
     * can manage their subscriptions and billing details. For security reasons,
     * sessions are short-lived and will expire if the customer does not visit the URL.
     * Create sessions on-demand when customers intend to manage their subscriptions
     * and billing details.
     *
     * Learn more in the [integration guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
     */
    readonly "billing_portal.session": {
      /** @description The configuration used by this session, describing the features available. */
      readonly configuration: string | components["schemas"]["billing_portal.configuration"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The ID of the customer for this session. */
      readonly customer: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
       * @enum {string|null}
       */
      readonly locale?:
        | (
            | "auto"
            | "bg"
            | "cs"
            | "da"
            | "de"
            | "el"
            | "en"
            | "en-AU"
            | "en-CA"
            | "en-GB"
            | "en-IE"
            | "en-IN"
            | "en-NZ"
            | "en-SG"
            | "es"
            | "es-419"
            | "et"
            | "fi"
            | "fil"
            | "fr"
            | "fr-CA"
            | "hr"
            | "hu"
            | "id"
            | "it"
            | "ja"
            | "ko"
            | "lt"
            | "lv"
            | "ms"
            | "mt"
            | "nb"
            | "nl"
            | "pl"
            | "pt"
            | "pt-BR"
            | "ro"
            | "ru"
            | "sk"
            | "sl"
            | "sv"
            | "th"
            | "tr"
            | "vi"
            | "zh"
            | "zh-HK"
            | "zh-TW"
          )
        | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "billing_portal.session";
      /** @description The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
      readonly on_behalf_of?: string | null;
      /** @description The URL to redirect customers to when they click on the portal's link to return to your website. */
      readonly return_url: string;
      /** @description The short-lived URL of the session that gives customers access to the customer portal. */
      readonly url: string;
    };
    /** BitcoinReceiver */
    readonly bitcoin_receiver: {
      /** @description True when this bitcoin receiver has received a non-zero amount of bitcoin. */
      readonly active: boolean;
      /** @description The amount of `currency` that you are collecting as payment. */
      readonly amount: number;
      /** @description The amount of `currency` to which `bitcoin_amount_received` has been converted. */
      readonly amount_received: number;
      /** @description The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
      readonly bitcoin_amount: number;
      /** @description The amount of bitcoin that has been sent by the customer to this receiver. */
      readonly bitcoin_amount_received: number;
      /** @description This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
      readonly bitcoin_uri: string;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. */
      readonly currency: string;
      /** @description The customer ID of the bitcoin receiver. */
      readonly customer?: string | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description The customer's email address, set by the API call that creates the receiver. */
      readonly email?: string | null;
      /** @description This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
      readonly filled: boolean;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
      readonly inbound_address: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "bitcoin_receiver";
      /** @description The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
      readonly payment?: string | null;
      /** @description The refund address of this bitcoin receiver. */
      readonly refund_address?: string | null;
      /**
       * BitcoinTransactionList
       * @description A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
       */
      readonly transactions?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["bitcoin_transaction"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description This receiver contains uncaptured funds that can be used for a payment or refunded. */
      readonly uncaptured_funds: boolean;
      /** @description Indicate if this source is used for payment. */
      readonly used_for_payment?: boolean | null;
    };
    /** BitcoinTransaction */
    readonly bitcoin_transaction: {
      /** @description The amount of `currency` that the transaction was converted to in real-time. */
      readonly amount: number;
      /** @description The amount of bitcoin contained in the transaction. */
      readonly bitcoin_amount: number;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "bitcoin_transaction";
      /** @description The receiver to which this transaction was sent. */
      readonly receiver: string;
    };
    /**
     * AccountCapability
     * @description This is an object representing a capability for a Stripe account.
     *
     * Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities).
     */
    readonly capability: {
      /** @description The account for which the capability enables functionality. */
      readonly account: string | components["schemas"]["account"];
      readonly future_requirements?: components["schemas"]["account_capability_future_requirements"];
      /** @description The identifier for the capability. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "capability";
      /** @description Whether the capability has been requested. */
      readonly requested: boolean;
      /**
       * Format: unix-time
       * @description Time at which the capability was requested. Measured in seconds since the Unix epoch.
       */
      readonly requested_at?: number | null;
      readonly requirements?: components["schemas"]["account_capability_requirements"];
      /**
       * @description The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
       * @enum {string}
       */
      readonly status: "active" | "disabled" | "inactive" | "pending" | "unrequested";
    };
    /**
     * Card
     * @description You can store multiple cards on a customer in order to charge the customer
     * later. You can also store multiple debit cards on a recipient in order to
     * transfer to those cards later.
     *
     * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
     */
    readonly card: {
      /** @description The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. */
      readonly account?: (string | components["schemas"]["account"]) | null;
      /** @description City/District/Suburb/Town/Village. */
      readonly address_city?: string | null;
      /** @description Billing address country, if provided when creating card. */
      readonly address_country?: string | null;
      /** @description Address line 1 (Street address/PO Box/Company name). */
      readonly address_line1?: string | null;
      /** @description If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly address_line1_check?: string | null;
      /** @description Address line 2 (Apartment/Suite/Unit/Building). */
      readonly address_line2?: string | null;
      /** @description State/County/Province/Region. */
      readonly address_state?: string | null;
      /** @description ZIP or postal code. */
      readonly address_zip?: string | null;
      /** @description If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly address_zip_check?: string | null;
      /** @description A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout. */
      readonly available_payout_methods?: readonly ("instant" | "standard")[] | null;
      /** @description Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
      readonly brand: string;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      readonly country?: string | null;
      /** @description Three-letter [ISO code for currency](https://stripe.com/docs/payouts). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. */
      readonly currency?: string | null;
      /** @description The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge). */
      readonly cvc_check?: string | null;
      /** @description Whether this card is the default external account for its currency. */
      readonly default_for_currency?: boolean | null;
      /** @description (For tokenized numbers only.) The last four digits of the device account number. */
      readonly dynamic_last4?: string | null;
      /** @description Two-digit number representing the card's expiration month. */
      readonly exp_month: number;
      /** @description Four-digit number representing the card's expiration year. */
      readonly exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
       */
      readonly fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      readonly funding: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The last four digits of the card. */
      readonly last4: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /** @description Cardholder name. */
      readonly name?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "card";
      /** @description The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
      readonly recipient?: (string | components["schemas"]["recipient"]) | null;
      /** @description If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
      readonly tokenization_method?: string | null;
    };
    /** card_generated_from_payment_method_details */
    readonly card_generated_from_payment_method_details: {
      readonly card_present?: components["schemas"]["payment_method_details_card_present"];
      /** @description The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`. */
      readonly type: string;
    };
    /** CardIssuingAccountTermsOfService */
    readonly card_issuing_account_terms_of_service: {
      /** @description The Unix timestamp marking when the account representative accepted the service agreement. */
      readonly date?: number | null;
      /** @description The IP address from which the account representative accepted the service agreement. */
      readonly ip?: string | null;
      /** @description The user agent of the browser from which the account representative accepted the service agreement. */
      readonly user_agent?: string;
    };
    /** card_mandate_payment_method_details */
    readonly card_mandate_payment_method_details: { readonly [key: string]: unknown };
    /**
     * Charge
     * @description To charge a credit or a debit card, you create a `Charge` object. You can
     * retrieve and refund individual charges as well as list all charges. Charges
     * are identified by a unique, random ID.
     *
     * Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
     */
    readonly charge: {
      /** @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      readonly amount: number;
      /** @description Amount in %s captured (can be less than the amount attribute on the charge if a partial capture was made). */
      readonly amount_captured: number;
      /** @description Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
      readonly amount_refunded: number;
      /** @description ID of the Connect application that created the charge. */
      readonly application?: (string | components["schemas"]["application"]) | null;
      /** @description The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
      readonly application_fee?: (string | components["schemas"]["application_fee"]) | null;
      /** @description The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
      readonly application_fee_amount?: number | null;
      /** @description ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      readonly billing_details: components["schemas"]["billing_details"];
      /** @description The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
      readonly calculated_statement_descriptor?: string | null;
      /** @description If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
      readonly captured: boolean;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description ID of the customer this charge is for if one exists. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description Whether the charge has been disputed. */
      readonly disputed: boolean;
      /** @description Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
      readonly failure_code?: string | null;
      /** @description Message to user further explaining reason for charge failure if available. */
      readonly failure_message?: string | null;
      /** @description Information on fraud assessments for the charge. */
      readonly fraud_details?: components["schemas"]["charge_fraud_details"] | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description ID of the invoice this charge is for if one exists. */
      readonly invoice?: (string | components["schemas"]["invoice"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "charge";
      /** @description The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details. */
      readonly on_behalf_of?: (string | components["schemas"]["account"]) | null;
      /** @description ID of the order this charge is for if one exists. */
      readonly order?: (string | components["schemas"]["order"]) | null;
      /** @description Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details. */
      readonly outcome?: components["schemas"]["charge_outcome"] | null;
      /** @description `true` if the charge succeeded, or was successfully authorized for later capture. */
      readonly paid: boolean;
      /** @description ID of the PaymentIntent associated with this charge, if one exists. */
      readonly payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
      /** @description ID of the payment method used in this charge. */
      readonly payment_method?: string | null;
      /** @description Details about the payment method at the time of the transaction. */
      readonly payment_method_details?: components["schemas"]["payment_method_details"] | null;
      /** @description This is the email address that the receipt for this charge was sent to. */
      readonly receipt_email?: string | null;
      /** @description This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
      readonly receipt_number?: string | null;
      /** @description This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
      readonly receipt_url?: string | null;
      /** @description Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
      readonly refunded: boolean;
      /**
       * RefundList
       * @description A list of refunds that have been applied to the charge.
       */
      readonly refunds: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["refund"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description ID of the review associated with this charge if one exists. */
      readonly review?: (string | components["schemas"]["review"]) | null;
      /** @description Shipping information for the charge. */
      readonly shipping?: components["schemas"]["shipping"] | null;
      /** @description The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
      readonly source_transfer?: (string | components["schemas"]["transfer"]) | null;
      /** @description For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
      readonly statement_descriptor?: string | null;
      /** @description Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
      readonly statement_descriptor_suffix?: string | null;
      /**
       * @description The status of the payment is either `succeeded`, `pending`, or `failed`.
       * @enum {string}
       */
      readonly status: "failed" | "pending" | "succeeded";
      /** @description ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
      readonly transfer?: string | components["schemas"]["transfer"];
      /** @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
      readonly transfer_data?: components["schemas"]["charge_transfer_data"] | null;
      /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
      readonly transfer_group?: string | null;
    };
    /** ChargeFraudDetails */
    readonly charge_fraud_details: {
      /** @description Assessments from Stripe. If set, the value is `fraudulent`. */
      readonly stripe_report?: string;
      /** @description Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
      readonly user_report?: string;
    };
    /** ChargeOutcome */
    readonly charge_outcome: {
      /** @description Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
      readonly network_status?: string | null;
      /** @description An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
      readonly reason?: string | null;
      /** @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar. */
      readonly risk_level?: string;
      /** @description Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
      readonly risk_score?: number;
      /** @description The ID of the Radar rule that matched the payment, if applicable. */
      readonly rule?: string | components["schemas"]["rule"];
      /** @description A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
      readonly seller_message?: string | null;
      /** @description Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
      readonly type: string;
    };
    /** ChargeTransferData */
    readonly charge_transfer_data: {
      /** @description The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
      readonly amount?: number | null;
      /** @description ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
      readonly destination: string | components["schemas"]["account"];
    };
    /**
     * Session
     * @description A Checkout Session represents your customer's session as they pay for
     * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
     * or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
     * new Session each time your customer attempts to pay.
     *
     * Once payment is successful, the Checkout Session will contain a reference
     * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
     * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
     * [Subscription](https://stripe.com/docs/api/subscriptions).
     *
     * You can create a Checkout Session on your server and pass its ID to the
     * client to begin Checkout.
     *
     * Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
     */
    readonly "checkout.session": {
      /** @description When set, provides configuration for actions to take if this Checkout Session expires. */
      readonly after_expiration?: components["schemas"]["payment_pages_checkout_session_after_expiration"] | null;
      /** @description Enables user redeemable promotion codes. */
      readonly allow_promotion_codes?: boolean | null;
      /** @description Total of all items before discounts or taxes are applied. */
      readonly amount_subtotal?: number | null;
      /** @description Total of all items after discounts and taxes are applied. */
      readonly amount_total?: number | null;
      readonly automatic_tax: components["schemas"]["payment_pages_checkout_session_automatic_tax"];
      /**
       * @description Describes whether Checkout should collect the customer's billing address.
       * @enum {string|null}
       */
      readonly billing_address_collection?: ("auto" | "required") | null;
      /** @description The URL the customer will be directed to if they decide to cancel payment and return to your website. */
      readonly cancel_url: string;
      /**
       * @description A unique string to reference the Checkout Session. This can be a
       * customer ID, a cart ID, or similar, and can be used to reconcile the
       * Session with your internal systems.
       */
      readonly client_reference_id?: string | null;
      /** @description Results of `consent_collection` for this session. */
      readonly consent?: components["schemas"]["payment_pages_checkout_session_consent"] | null;
      /** @description When set, provides configuration for the Checkout Session to gather active consent from customers. */
      readonly consent_collection?: components["schemas"]["payment_pages_checkout_session_consent_collection"] | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency?: string | null;
      /**
       * @description The ID of the customer for this Session.
       * For Checkout Sessions in `payment` or `subscription` mode, Checkout
       * will create a new customer object based on information provided
       * during the payment flow unless an existing customer was provided when
       * the Session was created.
       */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /**
       * @description Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
       * @enum {string|null}
       */
      readonly customer_creation?: ("always" | "if_required") | null;
      /** @description The customer details including the customer's tax exempt status and the customer's tax IDs. Only present on Sessions in `payment` or `subscription` mode. */
      readonly customer_details?: components["schemas"]["payment_pages_checkout_session_customer_details"] | null;
      /**
       * @description If provided, this value will be used when the Customer object is created.
       * If not provided, customers will be asked to enter their email address.
       * Use this parameter to prefill customer data if you already have an email
       * on file. To access information about the customer once the payment flow is
       * complete, use the `customer` attribute.
       */
      readonly customer_email?: string | null;
      /**
       * Format: unix-time
       * @description The timestamp at which the Checkout Session will expire.
       */
      readonly expires_at: number;
      /**
       * @description Unique identifier for the object. Used to pass to `redirectToCheckout`
       * in Stripe.js.
       */
      readonly id: string;
      /**
       * PaymentPagesCheckoutSessionListLineItems
       * @description The line items purchased by the customer.
       */
      readonly line_items?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
       * @enum {string|null}
       */
      readonly locale?:
        | (
            | "auto"
            | "bg"
            | "cs"
            | "da"
            | "de"
            | "el"
            | "en"
            | "en-GB"
            | "es"
            | "es-419"
            | "et"
            | "fi"
            | "fil"
            | "fr"
            | "fr-CA"
            | "hr"
            | "hu"
            | "id"
            | "it"
            | "ja"
            | "ko"
            | "lt"
            | "lv"
            | "ms"
            | "mt"
            | "nb"
            | "nl"
            | "pl"
            | "pt"
            | "pt-BR"
            | "ro"
            | "ru"
            | "sk"
            | "sl"
            | "sv"
            | "th"
            | "tr"
            | "vi"
            | "zh"
            | "zh-HK"
            | "zh-TW"
          )
        | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description The mode of the Checkout Session.
       * @enum {string}
       */
      readonly mode: "payment" | "setup" | "subscription";
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "checkout.session";
      /** @description The ID of the PaymentIntent for Checkout Sessions in `payment` mode. */
      readonly payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
      /** @description The ID of the Payment Link that created this Session. */
      readonly payment_link?: (string | components["schemas"]["payment_link"]) | null;
      /** @description Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession. */
      readonly payment_method_options?: components["schemas"]["checkout_session_payment_method_options"] | null;
      /**
       * @description A list of the types of payment methods (e.g. card) this Checkout
       * Session is allowed to accept.
       */
      readonly payment_method_types: readonly string[];
      /**
       * @description The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
       * You can use this value to decide when to fulfill your customer's order.
       * @enum {string}
       */
      readonly payment_status: "no_payment_required" | "paid" | "unpaid";
      readonly phone_number_collection?: components["schemas"]["payment_pages_checkout_session_phone_number_collection"];
      /** @description The ID of the original expired Checkout Session that triggered the recovery flow. */
      readonly recovered_from?: string | null;
      /** @description The ID of the SetupIntent for Checkout Sessions in `setup` mode. */
      readonly setup_intent?: (string | components["schemas"]["setup_intent"]) | null;
      /** @description Shipping information for this Checkout Session. */
      readonly shipping?: components["schemas"]["shipping"] | null;
      /** @description When set, provides configuration for Checkout to collect a shipping address from a customer. */
      readonly shipping_address_collection?:
        | components["schemas"]["payment_pages_checkout_session_shipping_address_collection"]
        | null;
      /** @description The shipping rate options applied to this Session. */
      readonly shipping_options: readonly components["schemas"]["payment_pages_checkout_session_shipping_option"][];
      /** @description The ID of the ShippingRate for Checkout Sessions in `payment` mode. */
      readonly shipping_rate?: (string | components["schemas"]["shipping_rate"]) | null;
      /**
       * @description The status of the Checkout Session, one of `open`, `complete`, or `expired`.
       * @enum {string|null}
       */
      readonly status?: ("complete" | "expired" | "open") | null;
      /**
       * @description Describes the type of transaction being performed by Checkout in order to customize
       * relevant text on the page, such as the submit button. `submit_type` can only be
       * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
       * in `subscription` or `setup` mode.
       * @enum {string|null}
       */
      readonly submit_type?: ("auto" | "book" | "donate" | "pay") | null;
      /** @description The ID of the subscription for Checkout Sessions in `subscription` mode. */
      readonly subscription?: (string | components["schemas"]["subscription"]) | null;
      /**
       * @description The URL the customer will be directed to after the payment or
       * subscription creation is successful.
       */
      readonly success_url: string;
      readonly tax_id_collection?: components["schemas"]["payment_pages_checkout_session_tax_id_collection"];
      /** @description Tax and discount details for the computed total amount. */
      readonly total_details?: components["schemas"]["payment_pages_checkout_session_total_details"] | null;
      /** @description The URL to the Checkout Session. */
      readonly url?: string | null;
    };
    /** CheckoutAcssDebitMandateOptions */
    readonly checkout_acss_debit_mandate_options: {
      /** @description A URL for custom mandate text */
      readonly custom_mandate_url?: string;
      /** @description List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode. */
      readonly default_for?: readonly ("invoice" | "subscription")[];
      /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      readonly interval_description?: string | null;
      /**
       * @description Payment schedule for the mandate.
       * @enum {string|null}
       */
      readonly payment_schedule?: ("combined" | "interval" | "sporadic") | null;
      /**
       * @description Transaction type of the mandate.
       * @enum {string|null}
       */
      readonly transaction_type?: ("business" | "personal") | null;
    };
    /** CheckoutAcssDebitPaymentMethodOptions */
    readonly checkout_acss_debit_payment_method_options: {
      /**
       * @description Currency supported by the bank account. Returned when the Session is in `setup` mode.
       * @enum {string}
       */
      readonly currency?: "cad" | "usd";
      readonly mandate_options?: components["schemas"]["checkout_acss_debit_mandate_options"];
      /**
       * @description Bank account verification method.
       * @enum {string}
       */
      readonly verification_method?: "automatic" | "instant" | "microdeposits";
    };
    /** CheckoutBoletoPaymentMethodOptions */
    readonly checkout_boleto_payment_method_options: {
      /** @description The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
      readonly expires_after_days: number;
    };
    /** CheckoutOxxoPaymentMethodOptions */
    readonly checkout_oxxo_payment_method_options: {
      /** @description The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
      readonly expires_after_days: number;
    };
    /** CheckoutSessionPaymentMethodOptions */
    readonly checkout_session_payment_method_options: {
      readonly acss_debit?: components["schemas"]["checkout_acss_debit_payment_method_options"];
      readonly boleto?: components["schemas"]["checkout_boleto_payment_method_options"];
      readonly oxxo?: components["schemas"]["checkout_oxxo_payment_method_options"];
    };
    /** ConnectCollectionTransfer */
    readonly connect_collection_transfer: {
      /** @description Amount transferred, in %s. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description ID of the account that funds are being collected for. */
      readonly destination: string | components["schemas"]["account"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "connect_collection_transfer";
    };
    /**
     * CountrySpec
     * @description Stripe needs to collect certain pieces of information about each account
     * created. These requirements can differ depending on the account's country. The
     * Country Specs API makes these rules available to your integration.
     *
     * You can also view the information from this API call as [an online
     * guide](/docs/connect/required-verification-information).
     */
    readonly country_spec: {
      /** @description The default currency for this country. This applies to both payment methods and bank accounts. */
      readonly default_currency: string;
      /** @description Unique identifier for the object. Represented as the ISO country code for this country. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "country_spec";
      /** @description Currencies that can be accepted in the specific country (for transfers). */
      readonly supported_bank_account_currencies: { readonly [key: string]: readonly string[] };
      /** @description Currencies that can be accepted in the specified country (for payments). */
      readonly supported_payment_currencies: readonly string[];
      /** @description Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). */
      readonly supported_payment_methods: readonly string[];
      /** @description Countries that can accept transfers from the specified country. */
      readonly supported_transfer_countries: readonly string[];
      readonly verification_fields: components["schemas"]["country_spec_verification_fields"];
    };
    /** CountrySpecVerificationFieldDetails */
    readonly country_spec_verification_field_details: {
      /** @description Additional fields which are only required for some users. */
      readonly additional: readonly string[];
      /** @description Fields which every account must eventually provide. */
      readonly minimum: readonly string[];
    };
    /** CountrySpecVerificationFields */
    readonly country_spec_verification_fields: {
      readonly company: components["schemas"]["country_spec_verification_field_details"];
      readonly individual: components["schemas"]["country_spec_verification_field_details"];
    };
    /**
     * Coupon
     * @description A coupon contains information about a percent-off or amount-off discount you
     * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
     * [orders](https://stripe.com/docs/api#create_order_legacy-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
     */
    readonly coupon: {
      /** @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
      readonly amount_off?: number | null;
      readonly applies_to?: components["schemas"]["coupon_applies_to"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
      readonly currency?: string | null;
      /**
       * @description One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
       * @enum {string}
       */
      readonly duration: "forever" | "once" | "repeating";
      /** @description If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
      readonly duration_in_months?: number | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
      readonly max_redemptions?: number | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /** @description Name of the coupon displayed to customers on for instance invoices or receipts. */
      readonly name?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "coupon";
      /** @description Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. */
      readonly percent_off?: number | null;
      /**
       * Format: unix-time
       * @description Date after which the coupon can no longer be redeemed.
       */
      readonly redeem_by?: number | null;
      /** @description Number of times this coupon has been applied to a customer. */
      readonly times_redeemed: number;
      /** @description Taking account of the above properties, whether this coupon can still be applied to a customer. */
      readonly valid: boolean;
    };
    /** CouponAppliesTo */
    readonly coupon_applies_to: {
      /** @description A list of product IDs this coupon applies to */
      readonly products: readonly string[];
    };
    /**
     * CreditNote
     * @description Issue a credit note to adjust an invoice's amount after the invoice is finalized.
     *
     * Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
     */
    readonly credit_note: {
      /** @description The integer amount in %s representing the total amount of the credit note, including tax. */
      readonly amount: number;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description ID of the customer. */
      readonly customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
      /** @description Customer balance transaction related to this credit note. */
      readonly customer_balance_transaction?: (string | components["schemas"]["customer_balance_transaction"]) | null;
      /** @description The integer amount in %s representing the total amount of discount that was credited. */
      readonly discount_amount: number;
      /** @description The aggregate amounts calculated per discount for all line items. */
      readonly discount_amounts: readonly components["schemas"]["discounts_resource_discount_amount"][];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description ID of the invoice. */
      readonly invoice: string | components["schemas"]["invoice"];
      /**
       * CreditNoteLinesList
       * @description Line items that make up the credit note
       */
      readonly lines: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["credit_note_line_item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Customer-facing text that appears on the credit note PDF. */
      readonly memo?: string | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /** @description A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. */
      readonly number: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "credit_note";
      /** @description Amount that was credited outside of Stripe. */
      readonly out_of_band_amount?: number | null;
      /** @description The link to download the PDF of the credit note. */
      readonly pdf: string;
      /**
       * @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
       * @enum {string|null}
       */
      readonly reason?: ("duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory") | null;
      /** @description Refund related to this credit note. */
      readonly refund?: (string | components["schemas"]["refund"]) | null;
      /**
       * @description Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
       * @enum {string}
       */
      readonly status: "issued" | "void";
      /** @description The integer amount in %s representing the amount of the credit note, excluding tax and invoice level discounts. */
      readonly subtotal: number;
      /** @description The aggregate amounts calculated per tax rate for all line items. */
      readonly tax_amounts: readonly components["schemas"]["credit_note_tax_amount"][];
      /** @description The integer amount in %s representing the total amount of the credit note, including tax and all discount. */
      readonly total: number;
      /**
       * @description Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
       * @enum {string}
       */
      readonly type: "post_payment" | "pre_payment";
      /**
       * Format: unix-time
       * @description The time that the credit note was voided.
       */
      readonly voided_at?: number | null;
    };
    /** CreditNoteLineItem */
    readonly credit_note_line_item: {
      /** @description The integer amount in %s representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts. */
      readonly amount: number;
      /** @description Description of the item being credited. */
      readonly description?: string | null;
      /** @description The integer amount in %s representing the discount being credited for this line item. */
      readonly discount_amount: number;
      /** @description The amount of discount calculated per discount for this line item */
      readonly discount_amounts: readonly components["schemas"]["discounts_resource_discount_amount"][];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description ID of the invoice line item being credited */
      readonly invoice_line_item?: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "credit_note_line_item";
      /** @description The number of units of product being credited. */
      readonly quantity?: number | null;
      /** @description The amount of tax calculated per tax rate for this line item */
      readonly tax_amounts: readonly components["schemas"]["credit_note_tax_amount"][];
      /** @description The tax rates which apply to the line item. */
      readonly tax_rates: readonly components["schemas"]["tax_rate"][];
      /**
       * @description The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
       * @enum {string}
       */
      readonly type: "custom_line_item" | "invoice_line_item";
      /** @description The cost of each unit of product being credited. */
      readonly unit_amount?: number | null;
      /**
       * Format: decimal
       * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
       */
      readonly unit_amount_decimal?: string | null;
    };
    /** CreditNoteTaxAmount */
    readonly credit_note_tax_amount: {
      /** @description The amount, in %s, of the tax. */
      readonly amount: number;
      /** @description Whether this tax amount is inclusive or exclusive. */
      readonly inclusive: boolean;
      /** @description The tax rate that was applied to get this tax amount. */
      readonly tax_rate: string | components["schemas"]["tax_rate"];
    };
    /**
     * Customer
     * @description This object represents a customer of your business. It lets you create recurring charges and track payments that belong to the same customer.
     *
     * Related guide: [Save a card during payment](https://stripe.com/docs/payments/save-during-payment).
     */
    readonly customer: {
      /** @description The customer's address. */
      readonly address?: components["schemas"]["address"] | null;
      /** @description Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
      readonly balance?: number;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
      readonly currency?: string | null;
      /**
       * @description ID of the default payment source for the customer.
       *
       * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
       */
      readonly default_source?:
        | (
            | string
            | components["schemas"]["alipay_account"]
            | components["schemas"]["bank_account"]
            | components["schemas"]["bitcoin_receiver"]
            | components["schemas"]["card"]
            | components["schemas"]["source"]
          )
        | null;
      /**
       * @description When the customer's latest invoice is billed by charging automatically, `delinquent` is `true` if the invoice's latest charge failed. When the customer's latest invoice is billed by sending an invoice, `delinquent` is `true` if the invoice isn't paid by its due date.
       *
       * If an invoice is marked uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't get reset to `false`.
       */
      readonly delinquent?: boolean | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description Describes the current discount active on the customer, if there is one. */
      readonly discount?: components["schemas"]["discount"] | null;
      /** @description The customer's email address. */
      readonly email?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The prefix for the customer used to generate unique invoice numbers. */
      readonly invoice_prefix?: string | null;
      readonly invoice_settings?: components["schemas"]["invoice_setting_customer_setting"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string };
      /** @description The customer's full name or business name. */
      readonly name?: string | null;
      /** @description The suffix of the customer's next invoice number, e.g., 0001. */
      readonly next_invoice_sequence?: number;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "customer";
      /** @description The customer's phone number. */
      readonly phone?: string | null;
      /** @description The customer's preferred locales (languages), ordered by preference. */
      readonly preferred_locales?: readonly string[] | null;
      /** @description Mailing and shipping address for the customer. Appears on invoices emailed to this customer. */
      readonly shipping?: components["schemas"]["shipping"] | null;
      /**
       * ApmsSourcesSourceList
       * @description The customer's payment sources, if any.
       */
      readonly sources?: {
        /** @description Details about each object. */
        readonly data: readonly (
          | components["schemas"]["alipay_account"]
          | components["schemas"]["bank_account"]
          | components["schemas"]["bitcoin_receiver"]
          | components["schemas"]["card"]
          | components["schemas"]["source"]
        )[];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /**
       * SubscriptionList
       * @description The customer's current subscriptions, if any.
       */
      readonly subscriptions?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["subscription"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      readonly tax?: components["schemas"]["customer_tax"];
      /**
       * @description Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
       * @enum {string|null}
       */
      readonly tax_exempt?: ("exempt" | "none" | "reverse") | null;
      /**
       * TaxIDsList
       * @description The customer's tax IDs.
       */
      readonly tax_ids?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["tax_id"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
    };
    /** customer_acceptance */
    readonly customer_acceptance: {
      /**
       * Format: unix-time
       * @description The time at which the customer accepted the Mandate.
       */
      readonly accepted_at?: number | null;
      readonly offline?: components["schemas"]["offline_acceptance"];
      readonly online?: components["schemas"]["online_acceptance"];
      /**
       * @description The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
       * @enum {string}
       */
      readonly type: "offline" | "online";
    };
    /**
     * CustomerBalanceTransaction
     * @description Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
     * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
     * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
     * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
     *
     * Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
     */
    readonly customer_balance_transaction: {
      /** @description The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
      readonly amount: number;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The ID of the credit note (if any) related to the transaction. */
      readonly credit_note?: (string | components["schemas"]["credit_note"]) | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description The ID of the customer the transaction belongs to. */
      readonly customer: string | components["schemas"]["customer"];
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
      readonly ending_balance: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The ID of the invoice (if any) related to the transaction. */
      readonly invoice?: (string | components["schemas"]["invoice"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "customer_balance_transaction";
      /**
       * @description Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
       * @enum {string}
       */
      readonly type:
        | "adjustment"
        | "applied_to_invoice"
        | "credit_note"
        | "initial"
        | "invoice_too_large"
        | "invoice_too_small"
        | "migration"
        | "unapplied_from_invoice"
        | "unspent_receiver_credit";
    };
    /** CustomerTax */
    readonly customer_tax: {
      /**
       * @description Surfaces if automatic tax computation is possible given the current customer location information.
       * @enum {string}
       */
      readonly automatic_tax: "failed" | "not_collecting" | "supported" | "unrecognized_location";
      /** @description A recent IP address of the customer used for tax reporting and tax location inference. */
      readonly ip_address?: string | null;
      /** @description The customer's location as identified by Stripe Tax. */
      readonly location?: components["schemas"]["customer_tax_location"] | null;
    };
    /** CustomerTaxLocation */
    readonly customer_tax_location: {
      /** @description The customer's country as identified by Stripe Tax. */
      readonly country: string;
      /**
       * @description The data source used to infer the customer's location.
       * @enum {string}
       */
      readonly source: "billing_address" | "ip_address" | "payment_method" | "shipping_destination";
      /** @description The customer's state, county, province, or region as identified by Stripe Tax. */
      readonly state?: string | null;
    };
    /** DeletedAccount */
    readonly deleted_account: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "account";
    };
    /** AlipayDeletedAccount */
    readonly deleted_alipay_account: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "alipay_account";
    };
    /** DeletedApplePayDomain */
    readonly deleted_apple_pay_domain: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "apple_pay_domain";
    };
    /** DeletedBankAccount */
    readonly deleted_bank_account: {
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      readonly currency?: string | null;
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "bank_account";
    };
    /** BitcoinDeletedReceiver */
    readonly deleted_bitcoin_receiver: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "bitcoin_receiver";
    };
    /** DeletedCard */
    readonly deleted_card: {
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
      readonly currency?: string | null;
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "card";
    };
    /** DeletedCoupon */
    readonly deleted_coupon: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "coupon";
    };
    /** DeletedCustomer */
    readonly deleted_customer: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "customer";
    };
    /** DeletedDiscount */
    readonly deleted_discount: {
      /** @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
      readonly checkout_session?: string | null;
      readonly coupon: components["schemas"]["coupon"];
      /** @description The ID of the customer associated with this discount. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
      readonly id: string;
      /** @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
      readonly invoice?: string | null;
      /** @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
      readonly invoice_item?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "discount";
      /** @description The promotion code applied to create this discount. */
      readonly promotion_code?: (string | components["schemas"]["promotion_code"]) | null;
      /**
       * Format: unix-time
       * @description Date that the coupon was applied.
       */
      readonly start: number;
      /** @description The subscription that this coupon is applied to, if it is applied to a particular subscription. */
      readonly subscription?: string | null;
    };
    /** Polymorphic */
    readonly deleted_external_account:
      | components["schemas"]["deleted_bank_account"]
      | components["schemas"]["deleted_card"];
    /** DeletedInvoice */
    readonly deleted_invoice: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "invoice";
    };
    /** DeletedInvoiceItem */
    readonly deleted_invoiceitem: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "invoiceitem";
    };
    /** Polymorphic */
    readonly deleted_payment_source:
      | components["schemas"]["deleted_alipay_account"]
      | components["schemas"]["deleted_bank_account"]
      | components["schemas"]["deleted_bitcoin_receiver"]
      | components["schemas"]["deleted_card"];
    /** DeletedPerson */
    readonly deleted_person: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "person";
    };
    /** DeletedPlan */
    readonly deleted_plan: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "plan";
    };
    /** DeletedPrice */
    readonly deleted_price: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "price";
    };
    /** DeletedProduct */
    readonly deleted_product: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "product";
    };
    /** RadarListDeletedList */
    readonly "deleted_radar.value_list": {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "radar.value_list";
    };
    /** RadarListDeletedListItem */
    readonly "deleted_radar.value_list_item": {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "radar.value_list_item";
    };
    /** DeletedTransferRecipient */
    readonly deleted_recipient: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "recipient";
    };
    /** DeletedSku */
    readonly deleted_sku: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "sku";
    };
    /** DeletedSubscriptionItem */
    readonly deleted_subscription_item: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "subscription_item";
    };
    /** deleted_tax_id */
    readonly deleted_tax_id: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "tax_id";
    };
    /** TerminalLocationDeletedLocation */
    readonly "deleted_terminal.location": {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "terminal.location";
    };
    /** TerminalReaderDeletedReader */
    readonly "deleted_terminal.reader": {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "terminal.reader";
    };
    /** NotificationWebhookEndpointDeleted */
    readonly deleted_webhook_endpoint: {
      /**
       * @description Always true for a deleted object
       * @enum {boolean}
       */
      readonly deleted: true;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "webhook_endpoint";
    };
    /** DeliveryEstimate */
    readonly delivery_estimate: {
      /** @description If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. */
      readonly date?: string;
      /** @description If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. */
      readonly earliest?: string;
      /** @description If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. */
      readonly latest?: string;
      /** @description The type of estimate. Must be either `"range"` or `"exact"`. */
      readonly type: string;
    };
    /**
     * Discount
     * @description A discount represents the actual application of a coupon to a particular
     * customer. It contains information about when the discount began and when it
     * will end.
     *
     * Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
     */
    readonly discount: {
      /** @description The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode. */
      readonly checkout_session?: string | null;
      readonly coupon: components["schemas"]["coupon"];
      /** @description The ID of the customer associated with this discount. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /**
       * Format: unix-time
       * @description If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
       */
      readonly end?: number | null;
      /** @description The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array. */
      readonly id: string;
      /** @description The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice. */
      readonly invoice?: string | null;
      /** @description The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item. */
      readonly invoice_item?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "discount";
      /** @description The promotion code applied to create this discount. */
      readonly promotion_code?: (string | components["schemas"]["promotion_code"]) | null;
      /**
       * Format: unix-time
       * @description Date that the coupon was applied.
       */
      readonly start: number;
      /** @description The subscription that this coupon is applied to, if it is applied to a particular subscription. */
      readonly subscription?: string | null;
    };
    /** DiscountsResourceDiscountAmount */
    readonly discounts_resource_discount_amount: {
      /** @description The amount, in %s, of the discount. */
      readonly amount: number;
      /** @description The discount that was applied to get this discount amount. */
      readonly discount: string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"];
    };
    /**
     * Dispute
     * @description A dispute occurs when a customer questions your charge with their card issuer.
     * When this happens, you're given the opportunity to respond to the dispute with
     * evidence that shows that the charge is legitimate. You can find more
     * information about the dispute process in our [Disputes and
     * Fraud](/docs/disputes) documentation.
     *
     * Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
     */
    readonly dispute: {
      /** @description Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). */
      readonly amount: number;
      /** @description List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
      readonly balance_transactions: readonly components["schemas"]["balance_transaction"][];
      /** @description ID of the charge that was disputed. */
      readonly charge: string | components["schemas"]["charge"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      readonly evidence: components["schemas"]["dispute_evidence"];
      readonly evidence_details: components["schemas"]["dispute_evidence_details"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. */
      readonly is_charge_refundable: boolean;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "dispute";
      /** @description ID of the PaymentIntent that was disputed. */
      readonly payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
      /** @description Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
      readonly reason: string;
      /**
       * @description Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
       * @enum {string}
       */
      readonly status:
        | "charge_refunded"
        | "lost"
        | "needs_response"
        | "under_review"
        | "warning_closed"
        | "warning_needs_response"
        | "warning_under_review"
        | "won";
    };
    /** DisputeEvidence */
    readonly dispute_evidence: {
      /** @description Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
      readonly access_activity_log?: string | null;
      /** @description The billing address provided by the customer. */
      readonly billing_address?: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
      readonly cancellation_policy?: (string | components["schemas"]["file"]) | null;
      /** @description An explanation of how and when the customer was shown your refund policy prior to purchase. */
      readonly cancellation_policy_disclosure?: string | null;
      /** @description A justification for why the customer's subscription was not canceled. */
      readonly cancellation_rebuttal?: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
      readonly customer_communication?: (string | components["schemas"]["file"]) | null;
      /** @description The email address of the customer. */
      readonly customer_email_address?: string | null;
      /** @description The name of the customer. */
      readonly customer_name?: string | null;
      /** @description The IP address that the customer used when making the purchase. */
      readonly customer_purchase_ip?: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
      readonly customer_signature?: (string | components["schemas"]["file"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
      readonly duplicate_charge_documentation?: (string | components["schemas"]["file"]) | null;
      /** @description An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
      readonly duplicate_charge_explanation?: string | null;
      /** @description The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
      readonly duplicate_charge_id?: string | null;
      /** @description A description of the product or service that was sold. */
      readonly product_description?: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
      readonly receipt?: (string | components["schemas"]["file"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
      readonly refund_policy?: (string | components["schemas"]["file"]) | null;
      /** @description Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
      readonly refund_policy_disclosure?: string | null;
      /** @description A justification for why the customer is not entitled to a refund. */
      readonly refund_refusal_explanation?: string | null;
      /** @description The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
      readonly service_date?: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
      readonly service_documentation?: (string | components["schemas"]["file"]) | null;
      /** @description The address to which a physical product was shipped. You should try to include as complete address information as possible. */
      readonly shipping_address?: string | null;
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
      readonly shipping_carrier?: string | null;
      /** @description The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
      readonly shipping_date?: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
      readonly shipping_documentation?: (string | components["schemas"]["file"]) | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      readonly shipping_tracking_number?: string | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
      readonly uncategorized_file?: (string | components["schemas"]["file"]) | null;
      /** @description Any additional evidence or statements. */
      readonly uncategorized_text?: string | null;
    };
    /** DisputeEvidenceDetails */
    readonly dispute_evidence_details: {
      /**
       * Format: unix-time
       * @description Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.
       */
      readonly due_by?: number | null;
      /** @description Whether evidence has been staged for this dispute. */
      readonly has_evidence: boolean;
      /** @description Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
      readonly past_due: boolean;
      /** @description The number of times evidence has been submitted. Typically, you may only submit evidence once. */
      readonly submission_count: number;
    };
    /** EphemeralKey */
    readonly ephemeral_key: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * Format: unix-time
       * @description Time at which the key will expire. Measured in seconds since the Unix epoch.
       */
      readonly expires: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "ephemeral_key";
      /** @description The key's secret. You can use this value to make authorized requests to the Stripe API. */
      readonly secret?: string;
    };
    /** @description An error response from the Stripe API */
    readonly error: {
      readonly error: components["schemas"]["api_errors"];
    };
    /**
     * NotificationEvent
     * @description Events are our way of letting you know when something interesting happens in
     * your account. When an interesting event occurs, we create a new `Event`
     * object. For example, when a charge succeeds, we create a `charge.succeeded`
     * event; and when an invoice payment attempt fails, we create an
     * `invoice.payment_failed` event. Note that many API requests may cause multiple
     * events to be created. For example, if you create a new subscription for a
     * customer, you will receive both a `customer.subscription.created` event and a
     * `charge.succeeded` event.
     *
     * Events occur when the state of another API resource changes. The state of that
     * resource at the time of the change is embedded in the event's data field. For
     * example, a `charge.succeeded` event will contain a charge, and an
     * `invoice.payment_failed` event will contain an invoice.
     *
     * As with other API resources, you can use endpoints to retrieve an
     * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
     * from the API. We also have a separate
     * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
     * `Event` objects directly to an endpoint on your server. Webhooks are managed
     * in your
     * [account settings](https://dashboard.stripe.com/account/webhooks),
     * and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
     *
     * When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
     * events that occur in connected accounts. For these events, there will be an
     * additional `account` attribute in the received `Event` object.
     *
     * **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
     * guaranteed only for 30 days.
     */
    readonly event: {
      /** @description The connected account that originated the event. */
      readonly account?: string;
      /** @description The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*. */
      readonly api_version?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      readonly data: components["schemas"]["notification_event_data"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "event";
      /** @description Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified. */
      readonly pending_webhooks: number;
      /** @description Information on the API request that instigated the event. */
      readonly request?: components["schemas"]["notification_event_request"] | null;
      /** @description Description of the event (e.g., `invoice.created` or `charge.refunded`). */
      readonly type: string;
    };
    /**
     * ExchangeRate
     * @description `Exchange Rate` objects allow you to determine the rates that Stripe is
     * currently using to convert from one currency to another. Since this number is
     * variable throughout the day, there are various reasons why you might want to
     * know the current rate (for example, to dynamically price an item for a user
     * with a default payment in a foreign currency).
     *
     * If you want a guarantee that the charge is made with a certain exchange rate
     * you expect is current, you can pass in `exchange_rate` to charges endpoints.
     * If the value is no longer up to date, the charge won't go through. Please
     * refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
     * details.
     */
    readonly exchange_rate: {
      /** @description Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "exchange_rate";
      /** @description Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. */
      readonly rates: { readonly [key: string]: number };
    };
    /** Polymorphic */
    readonly external_account: components["schemas"]["bank_account"] | components["schemas"]["card"];
    /** Fee */
    readonly fee: {
      /** @description Amount of the fee, in cents. */
      readonly amount: number;
      /** @description ID of the Connect application that earned the fee. */
      readonly application?: string | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. */
      readonly type: string;
    };
    /**
     * FeeRefund
     * @description `Application Fee Refund` objects allow you to refund an application fee that
     * has previously been created but not yet refunded. Funds will be refunded to
     * the Stripe account from which the fee was originally collected.
     *
     * Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
     */
    readonly fee_refund: {
      /** @description Amount, in %s. */
      readonly amount: number;
      /** @description Balance transaction that describes the impact on your account balance. */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description ID of the application fee that was refunded. */
      readonly fee: string | components["schemas"]["application_fee"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "fee_refund";
    };
    /**
     * File
     * @description This is an object representing a file hosted on Stripe's servers. The
     * file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
     * request (for example, when uploading dispute evidence) or it may have
     * been created by Stripe (for example, the results of a [Sigma scheduled
     * query](#scheduled_queries)).
     *
     * Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
     */
    readonly file: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * Format: unix-time
       * @description The time at which the file expires and is no longer available in epoch seconds.
       */
      readonly expires_at?: number | null;
      /** @description A filename for the file, suitable for saving to a filesystem. */
      readonly filename?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * FileFileLinkList
       * @description A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
       */
      readonly links?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["file_link"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "file";
      /**
       * @description The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
       * @enum {string}
       */
      readonly purpose:
        | "account_requirement"
        | "additional_verification"
        | "business_icon"
        | "business_logo"
        | "customer_signature"
        | "dispute_evidence"
        | "document_provider_identity_document"
        | "finance_report_run"
        | "identity_document"
        | "identity_document_downloadable"
        | "pci_document"
        | "selfie"
        | "sigma_scheduled_query"
        | "tax_document_user_upload";
      /** @description The size in bytes of the file object. */
      readonly size: number;
      /** @description A user friendly title for the document. */
      readonly title?: string | null;
      /** @description The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
      readonly type?: string | null;
      /** @description The URL from which the file can be downloaded using your live secret API key. */
      readonly url?: string | null;
    };
    /**
     * FileLink
     * @description To share the contents of a `File` object with non-Stripe users, you can
     * create a `FileLink`. `FileLink`s contain a URL that can be used to
     * retrieve the contents of the file without authentication.
     */
    readonly file_link: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Whether this link is already expired. */
      readonly expired: boolean;
      /**
       * Format: unix-time
       * @description Time at which the link expires.
       */
      readonly expires_at?: number | null;
      /** @description The file object this link points to. */
      readonly file: string | components["schemas"]["file"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "file_link";
      /** @description The publicly accessible URL to download the file. */
      readonly url?: string | null;
    };
    /** FinancialReportingFinanceReportRunRunParameters */
    readonly financial_reporting_finance_report_run_run_parameters: {
      /** @description The set of output columns requested for inclusion in the report run. */
      readonly columns?: readonly string[];
      /** @description Connected account ID by which to filter the report run. */
      readonly connected_account?: string;
      /** @description Currency of objects to be included in the report run. */
      readonly currency?: string;
      /**
       * Format: unix-time
       * @description Ending timestamp of data to be included in the report run (exclusive).
       */
      readonly interval_end?: number;
      /**
       * Format: unix-time
       * @description Starting timestamp of data to be included in the report run.
       */
      readonly interval_start?: number;
      /** @description Payout ID by which to filter the report run. */
      readonly payout?: string;
      /** @description Category of balance transactions to be included in the report run. */
      readonly reporting_category?: string;
      /** @description Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`. */
      readonly timezone?: string;
    };
    /**
     * GelatoDataDocumentReportDateOfBirth
     * @description Point in Time
     */
    readonly gelato_data_document_report_date_of_birth: {
      /** @description Numerical day between 1 and 31. */
      readonly day?: number | null;
      /** @description Numerical month between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year. */
      readonly year?: number | null;
    };
    /**
     * GelatoDataDocumentReportExpirationDate
     * @description Point in Time
     */
    readonly gelato_data_document_report_expiration_date: {
      /** @description Numerical day between 1 and 31. */
      readonly day?: number | null;
      /** @description Numerical month between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year. */
      readonly year?: number | null;
    };
    /**
     * GelatoDataDocumentReportIssuedDate
     * @description Point in Time
     */
    readonly gelato_data_document_report_issued_date: {
      /** @description Numerical day between 1 and 31. */
      readonly day?: number | null;
      /** @description Numerical month between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year. */
      readonly year?: number | null;
    };
    /**
     * GelatoDataIdNumberReportDate
     * @description Point in Time
     */
    readonly gelato_data_id_number_report_date: {
      /** @description Numerical day between 1 and 31. */
      readonly day?: number | null;
      /** @description Numerical month between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year. */
      readonly year?: number | null;
    };
    /**
     * GelatoDataVerifiedOutputsDate
     * @description Point in Time
     */
    readonly gelato_data_verified_outputs_date: {
      /** @description Numerical day between 1 and 31. */
      readonly day?: number | null;
      /** @description Numerical month between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year. */
      readonly year?: number | null;
    };
    /**
     * GelatoDocumentReport
     * @description Result from a document check
     */
    readonly gelato_document_report: {
      /** @description Address as it appears in the document. */
      readonly address?: components["schemas"]["address"] | null;
      /** @description Date of birth as it appears in the document. */
      readonly dob?: components["schemas"]["gelato_data_document_report_date_of_birth"] | null;
      /** @description Details on the verification error. Present when status is `unverified`. */
      readonly error?: components["schemas"]["gelato_document_report_error"] | null;
      /** @description Expiration date of the document. */
      readonly expiration_date?: components["schemas"]["gelato_data_document_report_expiration_date"] | null;
      /** @description Array of [File](https://stripe.com/docs/api/files) ids containing images for this document. */
      readonly files?: readonly string[] | null;
      /** @description First name as it appears in the document. */
      readonly first_name?: string | null;
      /** @description Issued date of the document. */
      readonly issued_date?: components["schemas"]["gelato_data_document_report_issued_date"] | null;
      /** @description Issuing country of the document. */
      readonly issuing_country?: string | null;
      /** @description Last name as it appears in the document. */
      readonly last_name?: string | null;
      /** @description Document ID number. */
      readonly number?: string | null;
      /**
       * @description Status of this `document` check.
       * @enum {string}
       */
      readonly status: "unverified" | "verified";
      /**
       * @description Type of the document.
       * @enum {string|null}
       */
      readonly type?: ("driving_license" | "id_card" | "passport") | null;
    };
    /** GelatoDocumentReportError */
    readonly gelato_document_report_error: {
      /**
       * @description A short machine-readable string giving the reason for the verification failure.
       * @enum {string|null}
       */
      readonly code?: ("document_expired" | "document_type_not_supported" | "document_unverified_other") | null;
      /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
      readonly reason?: string | null;
    };
    /**
     * GelatoIdNumberReport
     * @description Result from an id_number check
     */
    readonly gelato_id_number_report: {
      /** @description Date of birth. */
      readonly dob?: components["schemas"]["gelato_data_id_number_report_date"] | null;
      /** @description Details on the verification error. Present when status is `unverified`. */
      readonly error?: components["schemas"]["gelato_id_number_report_error"] | null;
      /** @description First name. */
      readonly first_name?: string | null;
      /** @description ID number. */
      readonly id_number?: string | null;
      /**
       * @description Type of ID number.
       * @enum {string|null}
       */
      readonly id_number_type?: ("br_cpf" | "sg_nric" | "us_ssn") | null;
      /** @description Last name. */
      readonly last_name?: string | null;
      /**
       * @description Status of this `id_number` check.
       * @enum {string}
       */
      readonly status: "unverified" | "verified";
    };
    /** GelatoIdNumberReportError */
    readonly gelato_id_number_report_error: {
      /**
       * @description A short machine-readable string giving the reason for the verification failure.
       * @enum {string|null}
       */
      readonly code?:
        | ("id_number_insufficient_document_data" | "id_number_mismatch" | "id_number_unverified_other")
        | null;
      /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
      readonly reason?: string | null;
    };
    /** GelatoReportDocumentOptions */
    readonly gelato_report_document_options: {
      /** @description Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
      readonly allowed_types?: readonly ("driving_license" | "id_card" | "passport")[];
      /** @description Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
      readonly require_id_number?: boolean;
      /** @description Disable image uploads, identity document images have to be captured using the device’s camera. */
      readonly require_live_capture?: boolean;
      /** @description Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
      readonly require_matching_selfie?: boolean;
    };
    /** GelatoReportIdNumberOptions */
    readonly gelato_report_id_number_options: { readonly [key: string]: unknown };
    /**
     * GelatoSelfieReport
     * @description Result from a selfie check
     */
    readonly gelato_selfie_report: {
      /** @description ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check. */
      readonly document?: string | null;
      /** @description Details on the verification error. Present when status is `unverified`. */
      readonly error?: components["schemas"]["gelato_selfie_report_error"] | null;
      /** @description ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check. */
      readonly selfie?: string | null;
      /**
       * @description Status of this `selfie` check.
       * @enum {string}
       */
      readonly status: "unverified" | "verified";
    };
    /** GelatoSelfieReportError */
    readonly gelato_selfie_report_error: {
      /**
       * @description A short machine-readable string giving the reason for the verification failure.
       * @enum {string|null}
       */
      readonly code?:
        | ("selfie_document_missing_photo" | "selfie_face_mismatch" | "selfie_manipulated" | "selfie_unverified_other")
        | null;
      /** @description A human-readable message giving the reason for the failure. These messages can be shown to your users. */
      readonly reason?: string | null;
    };
    /** GelatoSessionDocumentOptions */
    readonly gelato_session_document_options: {
      /** @description Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code. */
      readonly allowed_types?: readonly ("driving_license" | "id_card" | "passport")[];
      /** @description Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth. */
      readonly require_id_number?: boolean;
      /** @description Disable image uploads, identity document images have to be captured using the device’s camera. */
      readonly require_live_capture?: boolean;
      /** @description Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie). */
      readonly require_matching_selfie?: boolean;
    };
    /** GelatoSessionIdNumberOptions */
    readonly gelato_session_id_number_options: { readonly [key: string]: unknown };
    /**
     * GelatoSessionLastError
     * @description Shows last VerificationSession error
     */
    readonly gelato_session_last_error: {
      /**
       * @description A short machine-readable string giving the reason for the verification or user-session failure.
       * @enum {string|null}
       */
      readonly code?:
        | (
            | "abandoned"
            | "consent_declined"
            | "country_not_supported"
            | "device_not_supported"
            | "document_expired"
            | "document_type_not_supported"
            | "document_unverified_other"
            | "id_number_insufficient_document_data"
            | "id_number_mismatch"
            | "id_number_unverified_other"
            | "selfie_document_missing_photo"
            | "selfie_face_mismatch"
            | "selfie_manipulated"
            | "selfie_unverified_other"
            | "under_supported_age"
          )
        | null;
      /** @description A message that explains the reason for verification or user-session failure. */
      readonly reason?: string | null;
    };
    /** GelatoVerificationReportOptions */
    readonly gelato_verification_report_options: {
      readonly document?: components["schemas"]["gelato_report_document_options"];
      readonly id_number?: components["schemas"]["gelato_report_id_number_options"];
    };
    /** GelatoVerificationSessionOptions */
    readonly gelato_verification_session_options: {
      readonly document?: components["schemas"]["gelato_session_document_options"];
      readonly id_number?: components["schemas"]["gelato_session_id_number_options"];
    };
    /** GelatoVerifiedOutputs */
    readonly gelato_verified_outputs: {
      /** @description The user's verified address. */
      readonly address?: components["schemas"]["address"] | null;
      /** @description The user’s verified date of birth. */
      readonly dob?: components["schemas"]["gelato_data_verified_outputs_date"] | null;
      /** @description The user's verified first name. */
      readonly first_name?: string | null;
      /** @description The user's verified id number. */
      readonly id_number?: string | null;
      /**
       * @description The user's verified id number type.
       * @enum {string|null}
       */
      readonly id_number_type?: ("br_cpf" | "sg_nric" | "us_ssn") | null;
      /** @description The user's verified last name. */
      readonly last_name?: string | null;
    };
    /**
     * GelatoVerificationReport
     * @description A VerificationReport is the result of an attempt to collect and verify data from a user.
     * The collection of verification checks performed is determined from the `type` and `options`
     * parameters used. You can find the result of each verification check performed in the
     * appropriate sub-resource: `document`, `id_number`, `selfie`.
     *
     * Each VerificationReport contains a copy of any data collected by the user as well as
     * reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
     * API. To configure and create VerificationReports, use the
     * [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
     *
     * Related guides: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
     */
    readonly "identity.verification_report": {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      readonly document?: components["schemas"]["gelato_document_report"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      readonly id_number?: components["schemas"]["gelato_id_number_report"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "identity.verification_report";
      readonly options: components["schemas"]["gelato_verification_report_options"];
      readonly selfie?: components["schemas"]["gelato_selfie_report"];
      /**
       * @description Type of report.
       * @enum {string}
       */
      readonly type: "document" | "id_number";
      /** @description ID of the VerificationSession that created this report. */
      readonly verification_session?: string | null;
    };
    /**
     * GelatoVerificationSession
     * @description A VerificationSession guides you through the process of collecting and verifying the identities
     * of your users. It contains details about the type of verification, such as what [verification
     * check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
     * each verification in your system.
     *
     * A VerificationSession transitions through [multiple
     * statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
     * the verification flow. The VerificationSession contains the user’s verified data after
     * verification checks are complete.
     *
     * Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
     */
    readonly "identity.verification_session": {
      /** @description The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more. */
      readonly client_secret?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description If present, this property tells you the last error encountered when processing the verification. */
      readonly last_error?: components["schemas"]["gelato_session_last_error"] | null;
      /** @description ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results) */
      readonly last_verification_report?: (string | components["schemas"]["identity.verification_report"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "identity.verification_session";
      readonly options: components["schemas"]["gelato_verification_session_options"];
      /** @description Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null. */
      readonly redaction?: components["schemas"]["verification_session_redaction"] | null;
      /**
       * @description Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
       * @enum {string}
       */
      readonly status: "canceled" | "processing" | "requires_input" | "verified";
      /**
       * @description The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
       * @enum {string}
       */
      readonly type: "document" | "id_number";
      /** @description The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe. */
      readonly url?: string | null;
      /** @description The user’s verified data. */
      readonly verified_outputs?: components["schemas"]["gelato_verified_outputs"] | null;
    };
    /**
     * Invoice
     * @description Invoices are statements of amounts owed by a customer, and are either
     * generated one-off, or generated periodically from a subscription.
     *
     * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
     * that may be caused by subscription upgrades/downgrades (if necessary).
     *
     * If your invoice is configured to be billed through automatic charges,
     * Stripe automatically finalizes your invoice and attempts payment. Note
     * that finalizing the invoice,
     * [when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
     * not happen immediately as the invoice is created. Stripe waits
     * until one hour after the last webhook was successfully sent (or the last
     * webhook timed out after failing). If you (and the platforms you may have
     * connected to) have no webhooks configured, Stripe waits one hour after
     * creation to finalize the invoice.
     *
     * If your invoice is configured to be billed by sending an email, then based on your
     * [email settings](https://dashboard.stripe.com/account/billing/automatic),
     * Stripe will email the invoice to your customer and await payment. These
     * emails can contain a link to a hosted page to pay the invoice.
     *
     * Stripe applies any customer credit on the account before determining the
     * amount due for the invoice (i.e., the amount that will be actually
     * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
     * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
     * invoice is automatically marked paid, and we add the amount due to the
     * customer's credit balance which is applied to the next invoice.
     *
     * More details on the customer's credit balance are
     * [here](https://stripe.com/docs/billing/customer/balance).
     *
     * Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
     */
    readonly invoice: {
      /** @description The country of the business associated with this invoice, most often the business creating the invoice. */
      readonly account_country?: string | null;
      /** @description The public name of the business associated with this invoice, most often the business creating the invoice. */
      readonly account_name?: string | null;
      /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
      readonly account_tax_ids?:
        | readonly (string | components["schemas"]["tax_id"] | components["schemas"]["deleted_tax_id"])[]
        | null;
      /** @description Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
      readonly amount_due: number;
      /** @description The amount, in %s, that was paid. */
      readonly amount_paid: number;
      /** @description The amount remaining, in %s, that is due. */
      readonly amount_remaining: number;
      /** @description The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
      readonly application_fee_amount?: number | null;
      /** @description Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. */
      readonly attempt_count: number;
      /** @description Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
      readonly attempted: boolean;
      /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
      readonly auto_advance?: boolean;
      readonly automatic_tax: components["schemas"]["automatic_tax"];
      /**
       * @description Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
       * @enum {string|null}
       */
      readonly billing_reason?:
        | (
            | "automatic_pending_invoice_item_invoice"
            | "manual"
            | "quote_accept"
            | "subscription"
            | "subscription_create"
            | "subscription_cycle"
            | "subscription_threshold"
            | "subscription_update"
            | "upcoming"
          )
        | null;
      /** @description ID of the latest charge generated for this invoice, if any. */
      readonly charge?: (string | components["schemas"]["charge"]) | null;
      /**
       * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
       * @enum {string}
       */
      readonly collection_method: "charge_automatically" | "send_invoice";
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Custom fields displayed on the invoice. */
      readonly custom_fields?: readonly components["schemas"]["invoice_setting_custom_field"][] | null;
      /** @description The ID of the customer who will be billed. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated. */
      readonly customer_address?: components["schemas"]["address"] | null;
      /** @description The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
      readonly customer_email?: string | null;
      /** @description The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
      readonly customer_name?: string | null;
      /** @description The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
      readonly customer_phone?: string | null;
      /** @description The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated. */
      readonly customer_shipping?: components["schemas"]["shipping"] | null;
      /**
       * @description The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
       * @enum {string|null}
       */
      readonly customer_tax_exempt?: ("exempt" | "none" | "reverse") | null;
      /** @description The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
      readonly customer_tax_ids?: readonly components["schemas"]["invoices_resource_invoice_tax_id"][] | null;
      /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
      readonly default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
      /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
      readonly default_source?:
        | (
            | string
            | components["schemas"]["alipay_account"]
            | components["schemas"]["bank_account"]
            | components["schemas"]["bitcoin_receiver"]
            | components["schemas"]["card"]
            | components["schemas"]["source"]
          )
        | null;
      /** @description The tax rates applied to this invoice, if any. */
      readonly default_tax_rates: readonly components["schemas"]["tax_rate"][];
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
      readonly description?: string | null;
      /** @description Describes the current discount applied to this invoice, if there is one. Not populated if there are multiple discounts. */
      readonly discount?: components["schemas"]["discount"] | null;
      /** @description The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      readonly discounts?:
        | readonly (string | components["schemas"]["discount"] | components["schemas"]["deleted_discount"])[]
        | null;
      /**
       * Format: unix-time
       * @description The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
       */
      readonly due_date?: number | null;
      /** @description Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
      readonly ending_balance?: number | null;
      /** @description Footer displayed on the invoice. */
      readonly footer?: string | null;
      /** @description The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
      readonly hosted_invoice_url?: string | null;
      /** @description Unique identifier for the object. */
      readonly id?: string;
      /** @description The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
      readonly invoice_pdf?: string | null;
      /** @description The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized. */
      readonly last_finalization_error?: components["schemas"]["api_errors"] | null;
      /**
       * InvoiceLinesList
       * @description The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
       */
      readonly lines: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["line_item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * Format: unix-time
       * @description The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
       */
      readonly next_payment_attempt?: number | null;
      /** @description A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
      readonly number?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "invoice";
      /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
      readonly on_behalf_of?: (string | components["schemas"]["account"]) | null;
      /** @description Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
      readonly paid: boolean;
      /** @description Returns true if the invoice was manually marked paid, returns false if the invoice hasn't been paid yet or was paid on Stripe. */
      readonly paid_out_of_band: boolean;
      /** @description The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
      readonly payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
      readonly payment_settings: components["schemas"]["invoices_payment_settings"];
      /**
       * Format: unix-time
       * @description End of the usage period during which invoice items were added to this invoice.
       */
      readonly period_end: number;
      /**
       * Format: unix-time
       * @description Start of the usage period during which invoice items were added to this invoice.
       */
      readonly period_start: number;
      /** @description Total amount of all post-payment credit notes issued for this invoice. */
      readonly post_payment_credit_notes_amount: number;
      /** @description Total amount of all pre-payment credit notes issued for this invoice. */
      readonly pre_payment_credit_notes_amount: number;
      /** @description The quote this invoice was generated from. */
      readonly quote?: (string | components["schemas"]["quote"]) | null;
      /** @description This is the transaction number that appears on email receipts sent for this invoice. */
      readonly receipt_number?: string | null;
      /** @description Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. */
      readonly starting_balance: number;
      /** @description Extra information about an invoice for the customer's credit card statement. */
      readonly statement_descriptor?: string | null;
      /**
       * @description The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
       * @enum {string|null}
       */
      readonly status?: ("deleted" | "draft" | "open" | "paid" | "uncollectible" | "void") | null;
      readonly status_transitions: components["schemas"]["invoices_status_transitions"];
      /** @description The subscription that this invoice was prepared for, if any. */
      readonly subscription?: (string | components["schemas"]["subscription"]) | null;
      /** @description Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
      readonly subscription_proration_date?: number;
      /** @description Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated */
      readonly subtotal: number;
      /** @description The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
      readonly tax?: number | null;
      readonly threshold_reason?: components["schemas"]["invoice_threshold_reason"];
      /** @description Total after discounts and taxes. */
      readonly total: number;
      /** @description The aggregate amounts calculated per discount across all line items. */
      readonly total_discount_amounts?: readonly components["schemas"]["discounts_resource_discount_amount"][] | null;
      /** @description The aggregate amounts calculated per tax rate for all line items. */
      readonly total_tax_amounts: readonly components["schemas"]["invoice_tax_amount"][];
      /** @description The account (if any) the payment will be attributed to for tax reporting, and where funds from the payment will be transferred to for the invoice. */
      readonly transfer_data?: components["schemas"]["invoice_transfer_data"] | null;
      /**
       * Format: unix-time
       * @description Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
       */
      readonly webhooks_delivered_at?: number | null;
    };
    /** InvoiceItemThresholdReason */
    readonly invoice_item_threshold_reason: {
      /** @description The IDs of the line items that triggered the threshold invoice. */
      readonly line_item_ids: readonly string[];
      /** @description The quantity threshold boundary that applied to the given line item. */
      readonly usage_gte: number;
    };
    /** InvoiceLineItemPeriod */
    readonly invoice_line_item_period: {
      /**
       * Format: unix-time
       * @description End of the line item's billing period
       */
      readonly end: number;
      /**
       * Format: unix-time
       * @description Start of the line item's billing period
       */
      readonly start: number;
    };
    /** invoice_mandate_options_card */
    readonly invoice_mandate_options_card: {
      /** @description Amount to be charged for future payments. */
      readonly amount?: number | null;
      /**
       * @description One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
       * @enum {string|null}
       */
      readonly amount_type?: ("fixed" | "maximum") | null;
      /** @description A description of the mandate or subscription that is meant to be displayed to the customer. */
      readonly description?: string | null;
    };
    /** invoice_payment_method_options_acss_debit */
    readonly invoice_payment_method_options_acss_debit: {
      readonly mandate_options?: components["schemas"]["invoice_payment_method_options_acss_debit_mandate_options"];
      /**
       * @description Bank account verification method.
       * @enum {string}
       */
      readonly verification_method?: "automatic" | "instant" | "microdeposits";
    };
    /** invoice_payment_method_options_acss_debit_mandate_options */
    readonly invoice_payment_method_options_acss_debit_mandate_options: {
      /**
       * @description Transaction type of the mandate.
       * @enum {string|null}
       */
      readonly transaction_type?: ("business" | "personal") | null;
    };
    /** invoice_payment_method_options_bancontact */
    readonly invoice_payment_method_options_bancontact: {
      /**
       * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
       * @enum {string}
       */
      readonly preferred_language: "de" | "en" | "fr" | "nl";
    };
    /** invoice_payment_method_options_card */
    readonly invoice_payment_method_options_card: {
      /**
       * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
       * @enum {string|null}
       */
      readonly request_three_d_secure?: ("any" | "automatic") | null;
    };
    /** InvoiceSettingCustomField */
    readonly invoice_setting_custom_field: {
      /** @description The name of the custom field. */
      readonly name: string;
      /** @description The value of the custom field. */
      readonly value: string;
    };
    /** InvoiceSettingCustomerSetting */
    readonly invoice_setting_customer_setting: {
      /** @description Default custom fields to be displayed on invoices for this customer. */
      readonly custom_fields?: readonly components["schemas"]["invoice_setting_custom_field"][] | null;
      /** @description ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
      readonly default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
      /** @description Default footer to be displayed on invoices for this customer. */
      readonly footer?: string | null;
    };
    /** InvoiceSettingQuoteSetting */
    readonly invoice_setting_quote_setting: {
      /** @description Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`. */
      readonly days_until_due?: number | null;
    };
    /** InvoiceSettingSubscriptionScheduleSetting */
    readonly invoice_setting_subscription_schedule_setting: {
      /** @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
      readonly days_until_due?: number | null;
    };
    /** InvoiceTaxAmount */
    readonly invoice_tax_amount: {
      /** @description The amount, in %s, of the tax. */
      readonly amount: number;
      /** @description Whether this tax amount is inclusive or exclusive. */
      readonly inclusive: boolean;
      /** @description The tax rate that was applied to get this tax amount. */
      readonly tax_rate: string | components["schemas"]["tax_rate"];
    };
    /** InvoiceThresholdReason */
    readonly invoice_threshold_reason: {
      /** @description The total invoice amount threshold boundary if it triggered the threshold invoice. */
      readonly amount_gte?: number | null;
      /** @description Indicates which line items triggered a threshold invoice. */
      readonly item_reasons: readonly components["schemas"]["invoice_item_threshold_reason"][];
    };
    /** InvoiceTransferData */
    readonly invoice_transfer_data: {
      /** @description The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
      readonly amount?: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      readonly destination: string | components["schemas"]["account"];
    };
    /**
     * InvoiceItem
     * @description Sometimes you want to add a charge or credit to a customer, but actually
     * charge or credit the customer's card only at the end of a regular billing
     * cycle. This is useful for combining several charges (to minimize
     * per-transaction fees), or for having Stripe tabulate your usage-based billing
     * totals.
     *
     * Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
     */
    readonly invoiceitem: {
      /** @description Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description The ID of the customer who will be billed when this invoice item is billed. */
      readonly customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly date: number;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description If true, discounts will apply to this invoice item. Always false for prorations. */
      readonly discountable: boolean;
      /** @description The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      readonly discounts?: readonly (string | components["schemas"]["discount"])[] | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The ID of the invoice this invoice item belongs to. */
      readonly invoice?: (string | components["schemas"]["invoice"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "invoiceitem";
      readonly period: components["schemas"]["invoice_line_item_period"];
      /** @description The price of the invoice item. */
      readonly price?: components["schemas"]["price"] | null;
      /** @description Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
      readonly proration: boolean;
      /** @description Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
      readonly quantity: number;
      /** @description The subscription that this invoice item has been created for, if any. */
      readonly subscription?: (string | components["schemas"]["subscription"]) | null;
      /** @description The subscription item that this invoice item has been created for, if any. */
      readonly subscription_item?: string;
      /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
      readonly tax_rates?: readonly components["schemas"]["tax_rate"][] | null;
      /** @description Unit amount (in the `currency` specified) of the invoice item. */
      readonly unit_amount?: number | null;
      /**
       * Format: decimal
       * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
       */
      readonly unit_amount_decimal?: string | null;
    };
    /** InvoicesPaymentMethodOptions */
    readonly invoices_payment_method_options: {
      /** @description If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent. */
      readonly acss_debit?: components["schemas"]["invoice_payment_method_options_acss_debit"] | null;
      /** @description If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent. */
      readonly bancontact?: components["schemas"]["invoice_payment_method_options_bancontact"] | null;
      /** @description If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent. */
      readonly card?: components["schemas"]["invoice_payment_method_options_card"] | null;
    };
    /** InvoicesPaymentSettings */
    readonly invoices_payment_settings: {
      /** @description Payment-method-specific configuration to provide to the invoice’s PaymentIntent. */
      readonly payment_method_options?: components["schemas"]["invoices_payment_method_options"] | null;
      /** @description The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
      readonly payment_method_types?:
        | readonly (
            | "ach_credit_transfer"
            | "ach_debit"
            | "acss_debit"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "boleto"
            | "card"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "sepa_debit"
            | "sofort"
            | "wechat_pay"
          )[]
        | null;
    };
    /** InvoicesResourceInvoiceTaxID */
    readonly invoices_resource_invoice_tax_id: {
      /**
       * @description The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, or `unknown`
       * @enum {string}
       */
      readonly type:
        | "ae_trn"
        | "au_abn"
        | "au_arn"
        | "br_cnpj"
        | "br_cpf"
        | "ca_bn"
        | "ca_gst_hst"
        | "ca_pst_bc"
        | "ca_pst_mb"
        | "ca_pst_sk"
        | "ca_qst"
        | "ch_vat"
        | "cl_tin"
        | "es_cif"
        | "eu_vat"
        | "gb_vat"
        | "ge_vat"
        | "hk_br"
        | "id_npwp"
        | "il_vat"
        | "in_gst"
        | "is_vat"
        | "jp_cn"
        | "jp_rn"
        | "kr_brn"
        | "li_uid"
        | "mx_rfc"
        | "my_frp"
        | "my_itn"
        | "my_sst"
        | "no_vat"
        | "nz_gst"
        | "ru_inn"
        | "ru_kpp"
        | "sa_vat"
        | "sg_gst"
        | "sg_uen"
        | "th_vat"
        | "tw_vat"
        | "ua_vat"
        | "unknown"
        | "us_ein"
        | "za_vat";
      /** @description The value of the tax ID. */
      readonly value?: string | null;
    };
    /** InvoicesStatusTransitions */
    readonly invoices_status_transitions: {
      /**
       * Format: unix-time
       * @description The time that the invoice draft was finalized.
       */
      readonly finalized_at?: number | null;
      /**
       * Format: unix-time
       * @description The time that the invoice was marked uncollectible.
       */
      readonly marked_uncollectible_at?: number | null;
      /**
       * Format: unix-time
       * @description The time that the invoice was paid.
       */
      readonly paid_at?: number | null;
      /**
       * Format: unix-time
       * @description The time that the invoice was voided.
       */
      readonly voided_at?: number | null;
    };
    /**
     * IssuerFraudRecord
     * @description This resource has been renamed to [Early Fraud
     * Warning](#early_fraud_warning_object) and will be removed in a future API
     * version.
     */
    readonly issuer_fraud_record: {
      /** @description An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later. */
      readonly actionable: boolean;
      /** @description ID of the charge this issuer fraud record is for, optionally expanded. */
      readonly charge: string | components["schemas"]["charge"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
      readonly fraud_type: string;
      /** @description If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments). */
      readonly has_liability_shift: boolean;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "issuer_fraud_record";
      /** @description The timestamp at which the card issuer posted the issuer fraud record. */
      readonly post_date: number;
    };
    /**
     * IssuingAuthorization
     * @description When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
     * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
     * purchase to be completed successfully.
     *
     * Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
     */
    readonly "issuing.authorization": {
      /** @description The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
      /** @description Whether the authorization has been approved. */
      readonly approved: boolean;
      /**
       * @description How the card details were provided.
       * @enum {string}
       */
      readonly authorization_method: "chip" | "contactless" | "keyed_in" | "online" | "swipe";
      /** @description List of balance transactions associated with this authorization. */
      readonly balance_transactions: readonly components["schemas"]["balance_transaction"][];
      readonly card: components["schemas"]["issuing.card"];
      /** @description The cardholder to whom this authorization belongs. */
      readonly cardholder?: (string | components["schemas"]["issuing.cardholder"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly merchant_amount: number;
      /** @description The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly merchant_currency: string;
      readonly merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "issuing.authorization";
      /** @description The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook. */
      readonly pending_request?: components["schemas"]["issuing_authorization_pending_request"] | null;
      /** @description History of every time `pending_request` was approved/denied, either by you directly or by Stripe (e.g. based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous requests for the authorization. */
      readonly request_history: readonly components["schemas"]["issuing_authorization_request"][];
      /**
       * @description The current status of the authorization in its lifecycle.
       * @enum {string}
       */
      readonly status: "closed" | "pending" | "reversed";
      /** @description List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
      readonly transactions: readonly components["schemas"]["issuing.transaction"][];
      readonly verification_data: components["schemas"]["issuing_authorization_verification_data"];
      /** @description The digital wallet used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
      readonly wallet?: string | null;
    };
    /**
     * IssuingCard
     * @description You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
     */
    readonly "issuing.card": {
      /** @description The brand of the card. */
      readonly brand: string;
      /**
       * @description The reason why the card was canceled.
       * @enum {string|null}
       */
      readonly cancellation_reason?: ("lost" | "stolen") | null;
      readonly cardholder: components["schemas"]["issuing.cardholder"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      readonly cvc?: string;
      /** @description The expiration month of the card. */
      readonly exp_month: number;
      /** @description The expiration year of the card. */
      readonly exp_year: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The last 4 digits of the card number. */
      readonly last4: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
      readonly number?: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "issuing.card";
      /** @description The latest card that replaces this card, if any. */
      readonly replaced_by?: (string | components["schemas"]["issuing.card"]) | null;
      /** @description The card this card replaces, if any. */
      readonly replacement_for?: (string | components["schemas"]["issuing.card"]) | null;
      /**
       * @description The reason why the previous card needed to be replaced.
       * @enum {string|null}
       */
      readonly replacement_reason?: ("damaged" | "expired" | "lost" | "stolen") | null;
      /** @description Where and how the card will be shipped. */
      readonly shipping?: components["schemas"]["issuing_card_shipping"] | null;
      readonly spending_controls: components["schemas"]["issuing_card_authorization_controls"];
      /**
       * @description Whether authorizations can be approved on this card.
       * @enum {string}
       */
      readonly status: "active" | "canceled" | "inactive";
      /**
       * @description The type of the card.
       * @enum {string}
       */
      readonly type: "physical" | "virtual";
      /** @description Information relating to digital wallets (like Apple Pay and Google Pay). */
      readonly wallets?: components["schemas"]["issuing_card_wallets"] | null;
    };
    /**
     * IssuingCardholder
     * @description An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
     *
     * Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
     */
    readonly "issuing.cardholder": {
      readonly billing: components["schemas"]["issuing_cardholder_address"];
      /** @description Additional information about a `company` cardholder. */
      readonly company?: components["schemas"]["issuing_cardholder_company"] | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The cardholder's email address. */
      readonly email?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Additional information about an `individual` cardholder. */
      readonly individual?: components["schemas"]["issuing_cardholder_individual"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description The cardholder's name. This will be printed on cards issued to them. */
      readonly name: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "issuing.cardholder";
      /** @description The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
      readonly phone_number?: string | null;
      readonly requirements: components["schemas"]["issuing_cardholder_requirements"];
      /** @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details. */
      readonly spending_controls?: components["schemas"]["issuing_cardholder_authorization_controls"] | null;
      /**
       * @description Specifies whether to permit authorizations on this cardholder's cards.
       * @enum {string}
       */
      readonly status: "active" | "blocked" | "inactive";
      /**
       * @description One of `individual` or `company`.
       * @enum {string}
       */
      readonly type: "company" | "individual";
    };
    /**
     * IssuingDispute
     * @description As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
     *
     * Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
     */
    readonly "issuing.dispute": {
      /** @description Disputed amount. Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation). */
      readonly amount: number;
      /** @description List of balance transactions associated with the dispute. */
      readonly balance_transactions?: readonly components["schemas"]["balance_transaction"][] | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The currency the `transaction` was made in. */
      readonly currency: string;
      readonly evidence: components["schemas"]["issuing_dispute_evidence"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "issuing.dispute";
      /**
       * @description Current status of the dispute.
       * @enum {string}
       */
      readonly status: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
      /** @description The transaction being disputed. */
      readonly transaction: string | components["schemas"]["issuing.transaction"];
    };
    /**
     * IssuingSettlement
     * @description When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
     */
    readonly "issuing.settlement": {
      /** @description The Bank Identification Number reflecting this settlement record. */
      readonly bin: string;
      /** @description The date that the transactions are cleared and posted to user's accounts. */
      readonly clearing_date: number;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The total interchange received as reimbursement for the transactions. */
      readonly interchange_fees: number;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description The total net amount required to settle with the network. */
      readonly net_total: number;
      /**
       * @description The card network for this settlement report. One of ["visa"]
       * @enum {string}
       */
      readonly network: "visa";
      /** @description The total amount of fees owed to the network. */
      readonly network_fees: number;
      /** @description The Settlement Identification Number assigned by the network. */
      readonly network_settlement_identifier: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "issuing.settlement";
      /** @description One of `international` or `uk_national_net`. */
      readonly settlement_service: string;
      /** @description The total number of transactions reflected in this settlement. */
      readonly transaction_count: number;
      /** @description The total transaction amount reflected in this settlement. */
      readonly transaction_volume: number;
    };
    /**
     * IssuingTransaction
     * @description Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
     * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
     * `Transaction` object.
     *
     * Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
     */
    readonly "issuing.transaction": {
      /** @description The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly amount_details?: components["schemas"]["issuing_transaction_amount_details"] | null;
      /** @description The `Authorization` object that led to this transaction. */
      readonly authorization?: (string | components["schemas"]["issuing.authorization"]) | null;
      /** @description ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /** @description The card used to make this transaction. */
      readonly card: string | components["schemas"]["issuing.card"];
      /** @description The cardholder to whom this transaction belongs. */
      readonly cardholder?: (string | components["schemas"]["issuing.cardholder"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description If you've disputed the transaction, the ID of the dispute. */
      readonly dispute?: (string | components["schemas"]["issuing.dispute"]) | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
      readonly merchant_amount: number;
      /** @description The currency with which the merchant is taking payment. */
      readonly merchant_currency: string;
      readonly merchant_data: components["schemas"]["issuing_authorization_merchant_data"];
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "issuing.transaction";
      /** @description Additional purchase information that is optionally provided by the merchant. */
      readonly purchase_details?: components["schemas"]["issuing_transaction_purchase_details"] | null;
      /**
       * @description The nature of the transaction.
       * @enum {string}
       */
      readonly type: "capture" | "refund";
      /**
       * @description The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
       * @enum {string|null}
       */
      readonly wallet?: ("apple_pay" | "google_pay" | "samsung_pay") | null;
    };
    /** IssuingAuthorizationAmountDetails */
    readonly issuing_authorization_amount_details: {
      /** @description The fee charged by the ATM for the cash withdrawal. */
      readonly atm_fee?: number | null;
    };
    /** IssuingAuthorizationMerchantData */
    readonly issuing_authorization_merchant_data: {
      /** @description A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
      readonly category: string;
      /** @description The merchant category code for the seller’s business */
      readonly category_code: string;
      /** @description City where the seller is located */
      readonly city?: string | null;
      /** @description Country where the seller is located */
      readonly country?: string | null;
      /** @description Name of the seller */
      readonly name?: string | null;
      /** @description Identifier assigned to the seller by the card brand */
      readonly network_id: string;
      /** @description Postal code where the seller is located */
      readonly postal_code?: string | null;
      /** @description State where the seller is located */
      readonly state?: string | null;
    };
    /** IssuingAuthorizationPendingRequest */
    readonly issuing_authorization_pending_request: {
      /** @description The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
      readonly is_amount_controllable: boolean;
      /** @description The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly merchant_amount: number;
      /** @description The local currency the merchant is requesting to authorize. */
      readonly merchant_currency: string;
    };
    /** IssuingAuthorizationRequest */
    readonly issuing_authorization_request: {
      /** @description The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
      readonly amount: number;
      /** @description Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly amount_details?: components["schemas"]["issuing_authorization_amount_details"] | null;
      /** @description Whether this request was approved. */
      readonly approved: boolean;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
      readonly merchant_amount: number;
      /** @description The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly merchant_currency: string;
      /**
       * @description The reason for the approval or decline.
       * @enum {string}
       */
      readonly reason:
        | "account_disabled"
        | "card_active"
        | "card_inactive"
        | "cardholder_inactive"
        | "cardholder_verification_required"
        | "insufficient_funds"
        | "not_allowed"
        | "spending_controls"
        | "suspected_fraud"
        | "verification_failed"
        | "webhook_approved"
        | "webhook_declined"
        | "webhook_timeout";
    };
    /** IssuingAuthorizationVerificationData */
    readonly issuing_authorization_verification_data: {
      /**
       * @description Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
       * @enum {string}
       */
      readonly address_line1_check: "match" | "mismatch" | "not_provided";
      /**
       * @description Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
       * @enum {string}
       */
      readonly address_postal_code_check: "match" | "mismatch" | "not_provided";
      /**
       * @description Whether the cardholder provided a CVC and if it matched Stripe’s record.
       * @enum {string}
       */
      readonly cvc_check: "match" | "mismatch" | "not_provided";
      /**
       * @description Whether the cardholder provided an expiry date and if it matched Stripe’s record.
       * @enum {string}
       */
      readonly expiry_check: "match" | "mismatch" | "not_provided";
    };
    /** IssuingCardApplePay */
    readonly issuing_card_apple_pay: {
      /** @description Apple Pay Eligibility */
      readonly eligible: boolean;
      /**
       * @description Reason the card is ineligible for Apple Pay
       * @enum {string|null}
       */
      readonly ineligible_reason?: ("missing_agreement" | "missing_cardholder_contact" | "unsupported_region") | null;
    };
    /** IssuingCardAuthorizationControls */
    readonly issuing_card_authorization_controls: {
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
      readonly allowed_categories?:
        | readonly (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
      readonly blocked_categories?:
        | readonly (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** @description Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain). */
      readonly spending_limits?: readonly components["schemas"]["issuing_card_spending_limit"][] | null;
      /** @description Currency of the amounts within `spending_limits`. Always the same as the currency of the card. */
      readonly spending_limits_currency?: string | null;
    };
    /** IssuingCardGooglePay */
    readonly issuing_card_google_pay: {
      /** @description Google Pay Eligibility */
      readonly eligible: boolean;
      /**
       * @description Reason the card is ineligible for Google Pay
       * @enum {string|null}
       */
      readonly ineligible_reason?: ("missing_agreement" | "missing_cardholder_contact" | "unsupported_region") | null;
    };
    /** IssuingCardShipping */
    readonly issuing_card_shipping: {
      readonly address: components["schemas"]["address"];
      /**
       * @description The delivery company that shipped a card.
       * @enum {string|null}
       */
      readonly carrier?: ("dhl" | "fedex" | "royal_mail" | "usps") | null;
      /**
       * Format: unix-time
       * @description A unix timestamp representing a best estimate of when the card will be delivered.
       */
      readonly eta?: number | null;
      /** @description Recipient name. */
      readonly name: string;
      /**
       * @description Shipment service, such as `standard` or `express`.
       * @enum {string}
       */
      readonly service: "express" | "priority" | "standard";
      /**
       * @description The delivery status of the card.
       * @enum {string|null}
       */
      readonly status?: ("canceled" | "delivered" | "failure" | "pending" | "returned" | "shipped") | null;
      /** @description A tracking number for a card shipment. */
      readonly tracking_number?: string | null;
      /** @description A link to the shipping carrier's site where you can view detailed information about a card shipment. */
      readonly tracking_url?: string | null;
      /**
       * @description Packaging options.
       * @enum {string}
       */
      readonly type: "bulk" | "individual";
    };
    /** IssuingCardSpendingLimit */
    readonly issuing_card_spending_limit: {
      /** @description Maximum amount allowed to spend per interval. */
      readonly amount: number;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
      readonly categories?:
        | readonly (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /**
       * @description Interval (or event) to which the amount applies.
       * @enum {string}
       */
      readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
    };
    /** IssuingCardWallets */
    readonly issuing_card_wallets: {
      readonly apple_pay: components["schemas"]["issuing_card_apple_pay"];
      readonly google_pay: components["schemas"]["issuing_card_google_pay"];
      /** @description Unique identifier for a card used with digital wallets */
      readonly primary_account_identifier?: string | null;
    };
    /** IssuingCardholderAddress */
    readonly issuing_cardholder_address: {
      readonly address: components["schemas"]["address"];
    };
    /** IssuingCardholderAuthorizationControls */
    readonly issuing_cardholder_authorization_controls: {
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`. */
      readonly allowed_categories?:
        | readonly (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`. */
      readonly blocked_categories?:
        | readonly (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /** @description Limit spending with amount-based rules that apply across this cardholder's cards. */
      readonly spending_limits?: readonly components["schemas"]["issuing_cardholder_spending_limit"][] | null;
      /** @description Currency of the amounts within `spending_limits`. */
      readonly spending_limits_currency?: string | null;
    };
    /** IssuingCardholderCompany */
    readonly issuing_cardholder_company: {
      /** @description Whether the company's business ID number was provided. */
      readonly tax_id_provided: boolean;
    };
    /** IssuingCardholderIdDocument */
    readonly issuing_cardholder_id_document: {
      /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      readonly back?: (string | components["schemas"]["file"]) | null;
      /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      readonly front?: (string | components["schemas"]["file"]) | null;
    };
    /** IssuingCardholderIndividual */
    readonly issuing_cardholder_individual: {
      /** @description The date of birth of this cardholder. */
      readonly dob?: components["schemas"]["issuing_cardholder_individual_dob"] | null;
      /** @description The first name of this cardholder. */
      readonly first_name: string;
      /** @description The last name of this cardholder. */
      readonly last_name: string;
      /** @description Government-issued ID document for this cardholder. */
      readonly verification?: components["schemas"]["issuing_cardholder_verification"] | null;
    };
    /** IssuingCardholderIndividualDOB */
    readonly issuing_cardholder_individual_dob: {
      /** @description The day of birth, between 1 and 31. */
      readonly day?: number | null;
      /** @description The month of birth, between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year of birth. */
      readonly year?: number | null;
    };
    /** IssuingCardholderRequirements */
    readonly issuing_cardholder_requirements: {
      /**
       * @description If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
       * @enum {string|null}
       */
      readonly disabled_reason?: ("listed" | "rejected.listed" | "under_review") | null;
      /** @description Array of fields that need to be collected in order to verify and re-enable the cardholder. */
      readonly past_due?:
        | readonly (
            | "company.tax_id"
            | "individual.dob.day"
            | "individual.dob.month"
            | "individual.dob.year"
            | "individual.first_name"
            | "individual.last_name"
            | "individual.verification.document"
          )[]
        | null;
    };
    /** IssuingCardholderSpendingLimit */
    readonly issuing_cardholder_spending_limit: {
      /** @description Maximum amount allowed to spend per interval. */
      readonly amount: number;
      /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories. */
      readonly categories?:
        | readonly (
            | "ac_refrigeration_repair"
            | "accounting_bookkeeping_services"
            | "advertising_services"
            | "agricultural_cooperative"
            | "airlines_air_carriers"
            | "airports_flying_fields"
            | "ambulance_services"
            | "amusement_parks_carnivals"
            | "antique_reproductions"
            | "antique_shops"
            | "aquariums"
            | "architectural_surveying_services"
            | "art_dealers_and_galleries"
            | "artists_supply_and_craft_shops"
            | "auto_and_home_supply_stores"
            | "auto_body_repair_shops"
            | "auto_paint_shops"
            | "auto_service_shops"
            | "automated_cash_disburse"
            | "automated_fuel_dispensers"
            | "automobile_associations"
            | "automotive_parts_and_accessories_stores"
            | "automotive_tire_stores"
            | "bail_and_bond_payments"
            | "bakeries"
            | "bands_orchestras"
            | "barber_and_beauty_shops"
            | "betting_casino_gambling"
            | "bicycle_shops"
            | "billiard_pool_establishments"
            | "boat_dealers"
            | "boat_rentals_and_leases"
            | "book_stores"
            | "books_periodicals_and_newspapers"
            | "bowling_alleys"
            | "bus_lines"
            | "business_secretarial_schools"
            | "buying_shopping_services"
            | "cable_satellite_and_other_pay_television_and_radio"
            | "camera_and_photographic_supply_stores"
            | "candy_nut_and_confectionery_stores"
            | "car_and_truck_dealers_new_used"
            | "car_and_truck_dealers_used_only"
            | "car_rental_agencies"
            | "car_washes"
            | "carpentry_services"
            | "carpet_upholstery_cleaning"
            | "caterers"
            | "charitable_and_social_service_organizations_fundraising"
            | "chemicals_and_allied_products"
            | "child_care_services"
            | "childrens_and_infants_wear_stores"
            | "chiropodists_podiatrists"
            | "chiropractors"
            | "cigar_stores_and_stands"
            | "civic_social_fraternal_associations"
            | "cleaning_and_maintenance"
            | "clothing_rental"
            | "colleges_universities"
            | "commercial_equipment"
            | "commercial_footwear"
            | "commercial_photography_art_and_graphics"
            | "commuter_transport_and_ferries"
            | "computer_network_services"
            | "computer_programming"
            | "computer_repair"
            | "computer_software_stores"
            | "computers_peripherals_and_software"
            | "concrete_work_services"
            | "construction_materials"
            | "consulting_public_relations"
            | "correspondence_schools"
            | "cosmetic_stores"
            | "counseling_services"
            | "country_clubs"
            | "courier_services"
            | "court_costs"
            | "credit_reporting_agencies"
            | "cruise_lines"
            | "dairy_products_stores"
            | "dance_hall_studios_schools"
            | "dating_escort_services"
            | "dentists_orthodontists"
            | "department_stores"
            | "detective_agencies"
            | "digital_goods_applications"
            | "digital_goods_games"
            | "digital_goods_large_volume"
            | "digital_goods_media"
            | "direct_marketing_catalog_merchant"
            | "direct_marketing_combination_catalog_and_retail_merchant"
            | "direct_marketing_inbound_telemarketing"
            | "direct_marketing_insurance_services"
            | "direct_marketing_other"
            | "direct_marketing_outbound_telemarketing"
            | "direct_marketing_subscription"
            | "direct_marketing_travel"
            | "discount_stores"
            | "doctors"
            | "door_to_door_sales"
            | "drapery_window_covering_and_upholstery_stores"
            | "drinking_places"
            | "drug_stores_and_pharmacies"
            | "drugs_drug_proprietaries_and_druggist_sundries"
            | "dry_cleaners"
            | "durable_goods"
            | "duty_free_stores"
            | "eating_places_restaurants"
            | "educational_services"
            | "electric_razor_stores"
            | "electrical_parts_and_equipment"
            | "electrical_services"
            | "electronics_repair_shops"
            | "electronics_stores"
            | "elementary_secondary_schools"
            | "employment_temp_agencies"
            | "equipment_rental"
            | "exterminating_services"
            | "family_clothing_stores"
            | "fast_food_restaurants"
            | "financial_institutions"
            | "fines_government_administrative_entities"
            | "fireplace_fireplace_screens_and_accessories_stores"
            | "floor_covering_stores"
            | "florists"
            | "florists_supplies_nursery_stock_and_flowers"
            | "freezer_and_locker_meat_provisioners"
            | "fuel_dealers_non_automotive"
            | "funeral_services_crematories"
            | "furniture_home_furnishings_and_equipment_stores_except_appliances"
            | "furniture_repair_refinishing"
            | "furriers_and_fur_shops"
            | "general_services"
            | "gift_card_novelty_and_souvenir_shops"
            | "glass_paint_and_wallpaper_stores"
            | "glassware_crystal_stores"
            | "golf_courses_public"
            | "government_services"
            | "grocery_stores_supermarkets"
            | "hardware_equipment_and_supplies"
            | "hardware_stores"
            | "health_and_beauty_spas"
            | "hearing_aids_sales_and_supplies"
            | "heating_plumbing_a_c"
            | "hobby_toy_and_game_shops"
            | "home_supply_warehouse_stores"
            | "hospitals"
            | "hotels_motels_and_resorts"
            | "household_appliance_stores"
            | "industrial_supplies"
            | "information_retrieval_services"
            | "insurance_default"
            | "insurance_underwriting_premiums"
            | "intra_company_purchases"
            | "jewelry_stores_watches_clocks_and_silverware_stores"
            | "landscaping_services"
            | "laundries"
            | "laundry_cleaning_services"
            | "legal_services_attorneys"
            | "luggage_and_leather_goods_stores"
            | "lumber_building_materials_stores"
            | "manual_cash_disburse"
            | "marinas_service_and_supplies"
            | "masonry_stonework_and_plaster"
            | "massage_parlors"
            | "medical_and_dental_labs"
            | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
            | "medical_services"
            | "membership_organizations"
            | "mens_and_boys_clothing_and_accessories_stores"
            | "mens_womens_clothing_stores"
            | "metal_service_centers"
            | "miscellaneous"
            | "miscellaneous_apparel_and_accessory_shops"
            | "miscellaneous_auto_dealers"
            | "miscellaneous_business_services"
            | "miscellaneous_food_stores"
            | "miscellaneous_general_merchandise"
            | "miscellaneous_general_services"
            | "miscellaneous_home_furnishing_specialty_stores"
            | "miscellaneous_publishing_and_printing"
            | "miscellaneous_recreation_services"
            | "miscellaneous_repair_shops"
            | "miscellaneous_specialty_retail"
            | "mobile_home_dealers"
            | "motion_picture_theaters"
            | "motor_freight_carriers_and_trucking"
            | "motor_homes_dealers"
            | "motor_vehicle_supplies_and_new_parts"
            | "motorcycle_shops_and_dealers"
            | "motorcycle_shops_dealers"
            | "music_stores_musical_instruments_pianos_and_sheet_music"
            | "news_dealers_and_newsstands"
            | "non_fi_money_orders"
            | "non_fi_stored_value_card_purchase_load"
            | "nondurable_goods"
            | "nurseries_lawn_and_garden_supply_stores"
            | "nursing_personal_care"
            | "office_and_commercial_furniture"
            | "opticians_eyeglasses"
            | "optometrists_ophthalmologist"
            | "orthopedic_goods_prosthetic_devices"
            | "osteopaths"
            | "package_stores_beer_wine_and_liquor"
            | "paints_varnishes_and_supplies"
            | "parking_lots_garages"
            | "passenger_railways"
            | "pawn_shops"
            | "pet_shops_pet_food_and_supplies"
            | "petroleum_and_petroleum_products"
            | "photo_developing"
            | "photographic_photocopy_microfilm_equipment_and_supplies"
            | "photographic_studios"
            | "picture_video_production"
            | "piece_goods_notions_and_other_dry_goods"
            | "plumbing_heating_equipment_and_supplies"
            | "political_organizations"
            | "postal_services_government_only"
            | "precious_stones_and_metals_watches_and_jewelry"
            | "professional_services"
            | "public_warehousing_and_storage"
            | "quick_copy_repro_and_blueprint"
            | "railroads"
            | "real_estate_agents_and_managers_rentals"
            | "record_stores"
            | "recreational_vehicle_rentals"
            | "religious_goods_stores"
            | "religious_organizations"
            | "roofing_siding_sheet_metal"
            | "secretarial_support_services"
            | "security_brokers_dealers"
            | "service_stations"
            | "sewing_needlework_fabric_and_piece_goods_stores"
            | "shoe_repair_hat_cleaning"
            | "shoe_stores"
            | "small_appliance_repair"
            | "snowmobile_dealers"
            | "special_trade_services"
            | "specialty_cleaning"
            | "sporting_goods_stores"
            | "sporting_recreation_camps"
            | "sports_and_riding_apparel_stores"
            | "sports_clubs_fields"
            | "stamp_and_coin_stores"
            | "stationary_office_supplies_printing_and_writing_paper"
            | "stationery_stores_office_and_school_supply_stores"
            | "swimming_pools_sales"
            | "t_ui_travel_germany"
            | "tailors_alterations"
            | "tax_payments_government_agencies"
            | "tax_preparation_services"
            | "taxicabs_limousines"
            | "telecommunication_equipment_and_telephone_sales"
            | "telecommunication_services"
            | "telegraph_services"
            | "tent_and_awning_shops"
            | "testing_laboratories"
            | "theatrical_ticket_agencies"
            | "timeshares"
            | "tire_retreading_and_repair"
            | "tolls_bridge_fees"
            | "tourist_attractions_and_exhibits"
            | "towing_services"
            | "trailer_parks_campgrounds"
            | "transportation_services"
            | "travel_agencies_tour_operators"
            | "truck_stop_iteration"
            | "truck_utility_trailer_rentals"
            | "typesetting_plate_making_and_related_services"
            | "typewriter_stores"
            | "u_s_federal_government_agencies_or_departments"
            | "uniforms_commercial_clothing"
            | "used_merchandise_and_secondhand_stores"
            | "utilities"
            | "variety_stores"
            | "veterinary_services"
            | "video_amusement_game_supplies"
            | "video_game_arcades"
            | "video_tape_rental_stores"
            | "vocational_trade_schools"
            | "watch_jewelry_repair"
            | "welding_repair"
            | "wholesale_clubs"
            | "wig_and_toupee_stores"
            | "wires_money_orders"
            | "womens_accessory_and_specialty_shops"
            | "womens_ready_to_wear_stores"
            | "wrecking_and_salvage_yards"
          )[]
        | null;
      /**
       * @description Interval (or event) to which the amount applies.
       * @enum {string}
       */
      readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
    };
    /** IssuingCardholderVerification */
    readonly issuing_cardholder_verification: {
      /** @description An identifying document, either a passport or local ID card. */
      readonly document?: components["schemas"]["issuing_cardholder_id_document"] | null;
    };
    /** IssuingDisputeCanceledEvidence */
    readonly issuing_dispute_canceled_evidence: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      readonly additional_documentation?: (string | components["schemas"]["file"]) | null;
      /**
       * Format: unix-time
       * @description Date when order was canceled.
       */
      readonly canceled_at?: number | null;
      /** @description Whether the cardholder was provided with a cancellation policy. */
      readonly cancellation_policy_provided?: boolean | null;
      /** @description Reason for canceling the order. */
      readonly cancellation_reason?: string | null;
      /**
       * Format: unix-time
       * @description Date when the cardholder expected to receive the product.
       */
      readonly expected_at?: number | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      readonly explanation?: string | null;
      /** @description Description of the merchandise or service that was purchased. */
      readonly product_description?: string | null;
      /**
       * @description Whether the product was a merchandise or service.
       * @enum {string|null}
       */
      readonly product_type?: ("merchandise" | "service") | null;
      /**
       * @description Result of cardholder's attempt to return the product.
       * @enum {string|null}
       */
      readonly return_status?: ("merchant_rejected" | "successful") | null;
      /**
       * Format: unix-time
       * @description Date when the product was returned or attempted to be returned.
       */
      readonly returned_at?: number | null;
    };
    /** IssuingDisputeDuplicateEvidence */
    readonly issuing_dispute_duplicate_evidence: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      readonly additional_documentation?: (string | components["schemas"]["file"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for. */
      readonly card_statement?: (string | components["schemas"]["file"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash. */
      readonly cash_receipt?: (string | components["schemas"]["file"]) | null;
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product. */
      readonly check_image?: (string | components["schemas"]["file"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      readonly explanation?: string | null;
      /** @description Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one. */
      readonly original_transaction?: string | null;
    };
    /** IssuingDisputeEvidence */
    readonly issuing_dispute_evidence: {
      readonly canceled?: components["schemas"]["issuing_dispute_canceled_evidence"];
      readonly duplicate?: components["schemas"]["issuing_dispute_duplicate_evidence"];
      readonly fraudulent?: components["schemas"]["issuing_dispute_fraudulent_evidence"];
      readonly merchandise_not_as_described?: components["schemas"]["issuing_dispute_merchandise_not_as_described_evidence"];
      readonly not_received?: components["schemas"]["issuing_dispute_not_received_evidence"];
      readonly other?: components["schemas"]["issuing_dispute_other_evidence"];
      /**
       * @description The reason for filing the dispute. Its value will match the field containing the evidence.
       * @enum {string}
       */
      readonly reason:
        | "canceled"
        | "duplicate"
        | "fraudulent"
        | "merchandise_not_as_described"
        | "not_received"
        | "other"
        | "service_not_as_described";
      readonly service_not_as_described?: components["schemas"]["issuing_dispute_service_not_as_described_evidence"];
    };
    /** IssuingDisputeFraudulentEvidence */
    readonly issuing_dispute_fraudulent_evidence: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      readonly additional_documentation?: (string | components["schemas"]["file"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      readonly explanation?: string | null;
    };
    /** IssuingDisputeMerchandiseNotAsDescribedEvidence */
    readonly issuing_dispute_merchandise_not_as_described_evidence: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      readonly additional_documentation?: (string | components["schemas"]["file"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      readonly explanation?: string | null;
      /**
       * Format: unix-time
       * @description Date when the product was received.
       */
      readonly received_at?: number | null;
      /** @description Description of the cardholder's attempt to return the product. */
      readonly return_description?: string | null;
      /**
       * @description Result of cardholder's attempt to return the product.
       * @enum {string|null}
       */
      readonly return_status?: ("merchant_rejected" | "successful") | null;
      /**
       * Format: unix-time
       * @description Date when the product was returned or attempted to be returned.
       */
      readonly returned_at?: number | null;
    };
    /** IssuingDisputeNotReceivedEvidence */
    readonly issuing_dispute_not_received_evidence: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      readonly additional_documentation?: (string | components["schemas"]["file"]) | null;
      /**
       * Format: unix-time
       * @description Date when the cardholder expected to receive the product.
       */
      readonly expected_at?: number | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      readonly explanation?: string | null;
      /** @description Description of the merchandise or service that was purchased. */
      readonly product_description?: string | null;
      /**
       * @description Whether the product was a merchandise or service.
       * @enum {string|null}
       */
      readonly product_type?: ("merchandise" | "service") | null;
    };
    /** IssuingDisputeOtherEvidence */
    readonly issuing_dispute_other_evidence: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      readonly additional_documentation?: (string | components["schemas"]["file"]) | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      readonly explanation?: string | null;
      /** @description Description of the merchandise or service that was purchased. */
      readonly product_description?: string | null;
      /**
       * @description Whether the product was a merchandise or service.
       * @enum {string|null}
       */
      readonly product_type?: ("merchandise" | "service") | null;
    };
    /** IssuingDisputeServiceNotAsDescribedEvidence */
    readonly issuing_dispute_service_not_as_described_evidence: {
      /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute. */
      readonly additional_documentation?: (string | components["schemas"]["file"]) | null;
      /**
       * Format: unix-time
       * @description Date when order was canceled.
       */
      readonly canceled_at?: number | null;
      /** @description Reason for canceling the order. */
      readonly cancellation_reason?: string | null;
      /** @description Explanation of why the cardholder is disputing this transaction. */
      readonly explanation?: string | null;
      /**
       * Format: unix-time
       * @description Date when the product was received.
       */
      readonly received_at?: number | null;
    };
    /** IssuingTransactionAmountDetails */
    readonly issuing_transaction_amount_details: {
      /** @description The fee charged by the ATM for the cash withdrawal. */
      readonly atm_fee?: number | null;
    };
    /** IssuingTransactionFlightData */
    readonly issuing_transaction_flight_data: {
      /** @description The time that the flight departed. */
      readonly departure_at?: number | null;
      /** @description The name of the passenger. */
      readonly passenger_name?: string | null;
      /** @description Whether the ticket is refundable. */
      readonly refundable?: boolean | null;
      /** @description The legs of the trip. */
      readonly segments?: readonly components["schemas"]["issuing_transaction_flight_data_leg"][] | null;
      /** @description The travel agency that issued the ticket. */
      readonly travel_agency?: string | null;
    };
    /** IssuingTransactionFlightDataLeg */
    readonly issuing_transaction_flight_data_leg: {
      /** @description The three-letter IATA airport code of the flight's destination. */
      readonly arrival_airport_code?: string | null;
      /** @description The airline carrier code. */
      readonly carrier?: string | null;
      /** @description The three-letter IATA airport code that the flight departed from. */
      readonly departure_airport_code?: string | null;
      /** @description The flight number. */
      readonly flight_number?: string | null;
      /** @description The flight's service class. */
      readonly service_class?: string | null;
      /** @description Whether a stopover is allowed on this flight. */
      readonly stopover_allowed?: boolean | null;
    };
    /** IssuingTransactionFuelData */
    readonly issuing_transaction_fuel_data: {
      /** @description The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`. */
      readonly type: string;
      /** @description The units for `volume_decimal`. One of `us_gallon` or `liter`. */
      readonly unit: string;
      /**
       * Format: decimal
       * @description The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
       */
      readonly unit_cost_decimal: string;
      /**
       * Format: decimal
       * @description The volume of the fuel that was pumped, represented as a decimal string with at most 12 decimal places.
       */
      readonly volume_decimal?: string | null;
    };
    /** IssuingTransactionLodgingData */
    readonly issuing_transaction_lodging_data: {
      /** @description The time of checking into the lodging. */
      readonly check_in_at?: number | null;
      /** @description The number of nights stayed at the lodging. */
      readonly nights?: number | null;
    };
    /** IssuingTransactionPurchaseDetails */
    readonly issuing_transaction_purchase_details: {
      /** @description Information about the flight that was purchased with this transaction. */
      readonly flight?: components["schemas"]["issuing_transaction_flight_data"] | null;
      /** @description Information about fuel that was purchased with this transaction. */
      readonly fuel?: components["schemas"]["issuing_transaction_fuel_data"] | null;
      /** @description Information about lodging that was purchased with this transaction. */
      readonly lodging?: components["schemas"]["issuing_transaction_lodging_data"] | null;
      /** @description The line items in the purchase. */
      readonly receipt?: readonly components["schemas"]["issuing_transaction_receipt_data"][] | null;
      /** @description A merchant-specific order number. */
      readonly reference?: string | null;
    };
    /** IssuingTransactionReceiptData */
    readonly issuing_transaction_receipt_data: {
      /** @description The description of the item. The maximum length of this field is 26 characters. */
      readonly description?: string | null;
      /** @description The quantity of the item. */
      readonly quantity?: number | null;
      /** @description The total for this line item in cents. */
      readonly total?: number | null;
      /** @description The unit cost of the item in cents. */
      readonly unit_cost?: number | null;
    };
    /**
     * LineItem
     * @description A line item.
     */
    readonly item: {
      /** @description Total before any discounts or taxes are applied. */
      readonly amount_subtotal: number;
      /** @description Total after discounts and taxes. */
      readonly amount_total: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name. */
      readonly description: string;
      /** @description The discounts applied to the line item. */
      readonly discounts?: readonly components["schemas"]["line_items_discount_amount"][];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "item";
      /** @description The price used to generate the line item. */
      readonly price?: components["schemas"]["price"] | null;
      /** @description The quantity of products being purchased. */
      readonly quantity?: number | null;
      /** @description The taxes applied to the line item. */
      readonly taxes?: readonly components["schemas"]["line_items_tax_amount"][];
    };
    /** LegalEntityCompany */
    readonly legal_entity_company: {
      readonly address?: components["schemas"]["address"];
      /** @description The Kana variation of the company's primary address (Japan only). */
      readonly address_kana?: components["schemas"]["legal_entity_japan_address"] | null;
      /** @description The Kanji variation of the company's primary address (Japan only). */
      readonly address_kanji?: components["schemas"]["legal_entity_japan_address"] | null;
      /** @description Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
      readonly directors_provided?: boolean;
      /** @description Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
      readonly executives_provided?: boolean;
      /** @description The company's legal name. */
      readonly name?: string | null;
      /** @description The Kana variation of the company's legal name (Japan only). */
      readonly name_kana?: string | null;
      /** @description The Kanji variation of the company's legal name (Japan only). */
      readonly name_kanji?: string | null;
      /** @description Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
      readonly owners_provided?: boolean;
      /** @description This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct. */
      readonly ownership_declaration?: components["schemas"]["legal_entity_ubo_declaration"] | null;
      /** @description The company's phone number (used for verification). */
      readonly phone?: string | null;
      /**
       * @description The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
       * @enum {string}
       */
      readonly structure?:
        | "free_zone_establishment"
        | "free_zone_llc"
        | "government_instrumentality"
        | "governmental_unit"
        | "incorporated_non_profit"
        | "limited_liability_partnership"
        | "llc"
        | "multi_member_llc"
        | "private_company"
        | "private_corporation"
        | "private_partnership"
        | "public_company"
        | "public_corporation"
        | "public_partnership"
        | "single_member_llc"
        | "sole_establishment"
        | "sole_proprietorship"
        | "tax_exempt_government_instrumentality"
        | "unincorporated_association"
        | "unincorporated_non_profit";
      /** @description Whether the company's business ID number was provided. */
      readonly tax_id_provided?: boolean;
      /** @description The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
      readonly tax_id_registrar?: string;
      /** @description Whether the company's business VAT number was provided. */
      readonly vat_id_provided?: boolean;
      /** @description Information on the verification state of the company. */
      readonly verification?: components["schemas"]["legal_entity_company_verification"] | null;
    };
    /** LegalEntityCompanyVerification */
    readonly legal_entity_company_verification: {
      readonly document: components["schemas"]["legal_entity_company_verification_document"];
    };
    /** LegalEntityCompanyVerificationDocument */
    readonly legal_entity_company_verification_document: {
      /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
      readonly back?: (string | components["schemas"]["file"]) | null;
      /** @description A user-displayable string describing the verification state of this document. */
      readonly details?: string | null;
      /** @description One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
      readonly details_code?: string | null;
      /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
      readonly front?: (string | components["schemas"]["file"]) | null;
    };
    /** LegalEntityDOB */
    readonly legal_entity_dob: {
      /** @description The day of birth, between 1 and 31. */
      readonly day?: number | null;
      /** @description The month of birth, between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year of birth. */
      readonly year?: number | null;
    };
    /** LegalEntityJapanAddress */
    readonly legal_entity_japan_address: {
      /** @description City/Ward. */
      readonly city?: string | null;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      readonly country?: string | null;
      /** @description Block/Building number. */
      readonly line1?: string | null;
      /** @description Building details. */
      readonly line2?: string | null;
      /** @description ZIP or postal code. */
      readonly postal_code?: string | null;
      /** @description Prefecture. */
      readonly state?: string | null;
      /** @description Town/cho-me. */
      readonly town?: string | null;
    };
    /** LegalEntityPersonVerification */
    readonly legal_entity_person_verification: {
      /** @description A document showing address, either a passport, local ID card, or utility bill from a well-known utility company. */
      readonly additional_document?: components["schemas"]["legal_entity_person_verification_document"] | null;
      /** @description A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
      readonly details?: string | null;
      /** @description One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
      readonly details_code?: string | null;
      readonly document?: components["schemas"]["legal_entity_person_verification_document"];
      /** @description The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
      readonly status: string;
    };
    /** LegalEntityPersonVerificationDocument */
    readonly legal_entity_person_verification_document: {
      /** @description The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      readonly back?: (string | components["schemas"]["file"]) | null;
      /** @description A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
      readonly details?: string | null;
      /** @description One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
      readonly details_code?: string | null;
      /** @description The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
      readonly front?: (string | components["schemas"]["file"]) | null;
    };
    /** LegalEntityUBODeclaration */
    readonly legal_entity_ubo_declaration: {
      /**
       * Format: unix-time
       * @description The Unix timestamp marking when the beneficial owner attestation was made.
       */
      readonly date?: number | null;
      /** @description The IP address from which the beneficial owner attestation was made. */
      readonly ip?: string | null;
      /** @description The user-agent string from the browser where the beneficial owner attestation was made. */
      readonly user_agent?: string | null;
    };
    /** InvoiceLineItem */
    readonly line_item: {
      /** @description The amount, in %s. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description The amount of discount calculated per discount for this line item. */
      readonly discount_amounts?: readonly components["schemas"]["discounts_resource_discount_amount"][] | null;
      /** @description If true, discounts will apply to this line item. Always false for prorations. */
      readonly discountable: boolean;
      /** @description The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount. */
      readonly discounts?: readonly (string | components["schemas"]["discount"])[] | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
      readonly invoice_item?: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "line_item";
      readonly period: components["schemas"]["invoice_line_item_period"];
      /** @description The price of the line item. */
      readonly price?: components["schemas"]["price"] | null;
      /** @description Whether this is a proration. */
      readonly proration: boolean;
      /** @description The quantity of the subscription, if the line item is a subscription or a proration. */
      readonly quantity?: number | null;
      /** @description The subscription that the invoice item pertains to, if any. */
      readonly subscription?: string | null;
      /** @description The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. */
      readonly subscription_item?: string;
      /** @description The amount of tax calculated per tax rate for this line item */
      readonly tax_amounts?: readonly components["schemas"]["invoice_tax_amount"][];
      /** @description The tax rates which apply to the line item. */
      readonly tax_rates?: readonly components["schemas"]["tax_rate"][];
      /**
       * @description A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
       * @enum {string}
       */
      readonly type: "invoiceitem" | "subscription";
    };
    /** LineItemsDiscountAmount */
    readonly line_items_discount_amount: {
      /** @description The amount discounted. */
      readonly amount: number;
      readonly discount: components["schemas"]["discount"];
    };
    /** LineItemsTaxAmount */
    readonly line_items_tax_amount: {
      /** @description Amount of tax applied for this rate. */
      readonly amount: number;
      readonly rate: components["schemas"]["tax_rate"];
    };
    /** LoginLink */
    readonly login_link: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "login_link";
      /** @description The URL for the login link. */
      readonly url: string;
    };
    /**
     * Mandate
     * @description A Mandate is a record of the permission a customer has given you to debit their payment method.
     */
    readonly mandate: {
      readonly customer_acceptance: components["schemas"]["customer_acceptance"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      readonly multi_use?: components["schemas"]["mandate_multi_use"];
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "mandate";
      /** @description ID of the payment method associated with this mandate. */
      readonly payment_method: string | components["schemas"]["payment_method"];
      readonly payment_method_details: components["schemas"]["mandate_payment_method_details"];
      readonly single_use?: components["schemas"]["mandate_single_use"];
      /**
       * @description The status of the mandate, which indicates whether it can be used to initiate a payment.
       * @enum {string}
       */
      readonly status: "active" | "inactive" | "pending";
      /**
       * @description The type of the mandate.
       * @enum {string}
       */
      readonly type: "multi_use" | "single_use";
    };
    /** mandate_acss_debit */
    readonly mandate_acss_debit: {
      /** @description List of Stripe products where this mandate can be selected automatically. */
      readonly default_for?: readonly ("invoice" | "subscription")[];
      /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      readonly interval_description?: string | null;
      /**
       * @description Payment schedule for the mandate.
       * @enum {string}
       */
      readonly payment_schedule: "combined" | "interval" | "sporadic";
      /**
       * @description Transaction type of the mandate.
       * @enum {string}
       */
      readonly transaction_type: "business" | "personal";
    };
    /** mandate_au_becs_debit */
    readonly mandate_au_becs_debit: {
      /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
      readonly url: string;
    };
    /** mandate_bacs_debit */
    readonly mandate_bacs_debit: {
      /**
       * @description The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
       * @enum {string}
       */
      readonly network_status: "accepted" | "pending" | "refused" | "revoked";
      /** @description The unique reference identifying the mandate on the Bacs network. */
      readonly reference: string;
      /** @description The URL that will contain the mandate that the customer has signed. */
      readonly url: string;
    };
    /** mandate_multi_use */
    readonly mandate_multi_use: { readonly [key: string]: unknown };
    /** mandate_payment_method_details */
    readonly mandate_payment_method_details: {
      readonly acss_debit?: components["schemas"]["mandate_acss_debit"];
      readonly au_becs_debit?: components["schemas"]["mandate_au_becs_debit"];
      readonly bacs_debit?: components["schemas"]["mandate_bacs_debit"];
      readonly card?: components["schemas"]["card_mandate_payment_method_details"];
      readonly sepa_debit?: components["schemas"]["mandate_sepa_debit"];
      /** @description The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method. */
      readonly type: string;
    };
    /** mandate_sepa_debit */
    readonly mandate_sepa_debit: {
      /** @description The unique reference of the mandate. */
      readonly reference: string;
      /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
      readonly url: string;
    };
    /** mandate_single_use */
    readonly mandate_single_use: {
      /** @description On a single use mandate, the amount of the payment. */
      readonly amount: number;
      /** @description On a single use mandate, the currency of the payment. */
      readonly currency: string;
    };
    /** networks */
    readonly networks: {
      /** @description All available networks for the card. */
      readonly available: readonly string[];
      /** @description The preferred network for the card. */
      readonly preferred?: string | null;
    };
    /** NotificationEventData */
    readonly notification_event_data: {
      /** @description Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
      readonly object: { readonly [key: string]: unknown };
      /** @description Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events). */
      readonly previous_attributes?: { readonly [key: string]: unknown };
    };
    /** NotificationEventRequest */
    readonly notification_event_request: {
      /** @description ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
      readonly id?: string | null;
      /** @description The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
      readonly idempotency_key?: string | null;
    };
    /** offline_acceptance */
    readonly offline_acceptance: { readonly [key: string]: unknown };
    /** online_acceptance */
    readonly online_acceptance: {
      /** @description The IP address from which the Mandate was accepted by the customer. */
      readonly ip_address?: string | null;
      /** @description The user agent of the browser from which the Mandate was accepted by the customer. */
      readonly user_agent?: string | null;
    };
    /**
     * Order
     * @description Order objects are created to handle end customers' purchases of previously
     * defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
     * as list all orders. Orders are identified by a unique, random ID.
     *
     * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
     */
    readonly order: {
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
      readonly amount: number;
      /** @description The total amount that was returned to the customer. */
      readonly amount_returned?: number | null;
      /** @description ID of the Connect Application that created the order. */
      readonly application?: string | null;
      /** @description A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation. */
      readonly application_fee?: number | null;
      /** @description The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`. */
      readonly charge?: (string | components["schemas"]["charge"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description The customer used for the order. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description The email address of the customer placing the order. */
      readonly email?: string | null;
      /** @description External coupon code to load for this order. */
      readonly external_coupon_code?: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description List of items constituting the order. An order can have up to 25 items. */
      readonly items: readonly components["schemas"]["order_item"][];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "order";
      /**
       * OrdersResourceOrderReturnList
       * @description A list of returns that have taken place for this order.
       */
      readonly returns?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["order_return"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      } | null;
      /** @description The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. */
      readonly selected_shipping_method?: string | null;
      /** @description The shipping address for the order. Present if the order is for goods to be shipped. */
      readonly shipping?: components["schemas"]["shipping"] | null;
      /** @description A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. */
      readonly shipping_methods?: readonly components["schemas"]["shipping_method"][] | null;
      /** @description Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
      readonly status: string;
      /** @description The timestamps at which the order status was updated. */
      readonly status_transitions?: components["schemas"]["status_transitions"] | null;
      /**
       * Format: unix-time
       * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
       */
      readonly updated?: number | null;
      /** @description The user's order ID if it is different from the Stripe order ID. */
      readonly upstream_id?: string;
    };
    /**
     * OrderItem
     * @description A representation of the constituent items of any given order. Can be used to
     * represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.
     *
     * Related guide: [Orders](https://stripe.com/docs/orders/guide).
     */
    readonly order_item: {
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). */
      readonly description: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "order_item";
      /** @description The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
      readonly parent?: (string | components["schemas"]["sku"]) | null;
      /** @description A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. */
      readonly quantity?: number | null;
      /** @description The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. */
      readonly type: string;
    };
    /**
     * OrderReturn
     * @description A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
     * Returns always belong to an order, and may optionally contain a refund.
     *
     * Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
     */
    readonly order_return: {
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. */
      readonly amount: number;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The items included in this order return. */
      readonly items: readonly components["schemas"]["order_item"][];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "order_return";
      /** @description The order that this return includes items from. */
      readonly order?: (string | components["schemas"]["order"]) | null;
      /** @description The ID of the refund issued for this return. */
      readonly refund?: (string | components["schemas"]["refund"]) | null;
    };
    /** PackageDimensions */
    readonly package_dimensions: {
      /** @description Height, in inches. */
      readonly height: number;
      /** @description Length, in inches. */
      readonly length: number;
      /** @description Weight, in ounces. */
      readonly weight: number;
      /** @description Width, in inches. */
      readonly width: number;
    };
    /** PaymentFlowsAutomaticPaymentMethodsPaymentIntent */
    readonly payment_flows_automatic_payment_methods_payment_intent: {
      /** @description Automatically calculates compatible payment methods */
      readonly enabled: boolean;
    };
    /** PaymentFlowsPrivatePaymentMethodsAlipay */
    readonly payment_flows_private_payment_methods_alipay: { readonly [key: string]: unknown };
    /** PaymentFlowsPrivatePaymentMethodsAlipayDetails */
    readonly payment_flows_private_payment_methods_alipay_details: {
      /** @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
      readonly buyer_id?: string;
      /** @description Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Transaction ID of this particular Alipay transaction. */
      readonly transaction_id?: string | null;
    };
    /** PaymentFlowsPrivatePaymentMethodsKlarnaDOB */
    readonly payment_flows_private_payment_methods_klarna_dob: {
      /** @description The day of birth, between 1 and 31. */
      readonly day?: number | null;
      /** @description The month of birth, between 1 and 12. */
      readonly month?: number | null;
      /** @description The four-digit year of birth. */
      readonly year?: number | null;
    };
    /**
     * PaymentIntent
     * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
     * We recommend that you create exactly one PaymentIntent for each order or
     * customer session in your system. You can reference the PaymentIntent later to
     * see the history of payment attempts for a particular session.
     *
     * A PaymentIntent transitions through
     * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
     * throughout its lifetime as it interfaces with Stripe.js to perform
     * authentication flows and ultimately creates at most one successful charge.
     *
     * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
     */
    readonly payment_intent: {
      /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      readonly amount: number;
      /** @description Amount that can be captured from this PaymentIntent. */
      readonly amount_capturable?: number;
      /** @description Amount that was collected by this PaymentIntent. */
      readonly amount_received?: number;
      /** @description ID of the Connect application that created the PaymentIntent. */
      readonly application?: (string | components["schemas"]["application"]) | null;
      /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
      readonly application_fee_amount?: number | null;
      /** @description Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods) */
      readonly automatic_payment_methods?:
        | components["schemas"]["payment_flows_automatic_payment_methods_payment_intent"]
        | null;
      /**
       * Format: unix-time
       * @description Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
       */
      readonly canceled_at?: number | null;
      /**
       * @description Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
       * @enum {string|null}
       */
      readonly cancellation_reason?:
        | (
            | "abandoned"
            | "automatic"
            | "duplicate"
            | "failed_invoice"
            | "fraudulent"
            | "requested_by_customer"
            | "void_invoice"
          )
        | null;
      /**
       * @description Controls when the funds will be captured from the customer's account.
       * @enum {string}
       */
      readonly capture_method: "automatic" | "manual";
      /**
       * PaymentFlowsPaymentIntentResourceChargeList
       * @description Charges that were created by this PaymentIntent, if any.
       */
      readonly charges?: {
        /** @description This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent). */
        readonly data: readonly components["schemas"]["charge"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /**
       * @description The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       *
       * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?integration=elements) and learn about how `client_secret` should be handled.
       */
      readonly client_secret?: string | null;
      /** @enum {string} */
      readonly confirmation_method: "automatic" | "manual";
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /**
       * @description ID of the Customer this PaymentIntent belongs to, if one exists.
       *
       * Payment methods attached to other Customers cannot be used with this PaymentIntent.
       *
       * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
       */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description ID of the invoice that created this PaymentIntent, if it exists. */
      readonly invoice?: (string | components["schemas"]["invoice"]) | null;
      /** @description The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason. */
      readonly last_payment_error?: components["schemas"]["api_errors"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
      readonly metadata?: { readonly [key: string]: string };
      /** @description If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source. */
      readonly next_action?: components["schemas"]["payment_intent_next_action"] | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "payment_intent";
      /** @description The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      readonly on_behalf_of?: (string | components["schemas"]["account"]) | null;
      /** @description ID of the payment method used in this PaymentIntent. */
      readonly payment_method?: (string | components["schemas"]["payment_method"]) | null;
      /** @description Payment-method-specific configuration for this PaymentIntent. */
      readonly payment_method_options?: components["schemas"]["payment_intent_payment_method_options"] | null;
      /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
      readonly payment_method_types: readonly string[];
      /** @description If present, this property tells you about the processing state of the payment. */
      readonly processing?: components["schemas"]["payment_intent_processing"] | null;
      /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
      readonly receipt_email?: string | null;
      /** @description ID of the review associated with this PaymentIntent, if any. */
      readonly review?: (string | components["schemas"]["review"]) | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
       *
       * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
       * @enum {string|null}
       */
      readonly setup_future_usage?: ("off_session" | "on_session") | null;
      /** @description Shipping information for this PaymentIntent. */
      readonly shipping?: components["schemas"]["shipping"] | null;
      /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
      readonly statement_descriptor?: string | null;
      /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
      readonly statement_descriptor_suffix?: string | null;
      /**
       * @description Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
       * @enum {string}
       */
      readonly status:
        | "canceled"
        | "processing"
        | "requires_action"
        | "requires_capture"
        | "requires_confirmation"
        | "requires_payment_method"
        | "succeeded";
      /** @description The data with which to automatically create a Transfer when the payment is finalized. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      readonly transfer_data?: components["schemas"]["transfer_data"] | null;
      /** @description A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
      readonly transfer_group?: string | null;
    };
    /** PaymentIntentCardProcessing */
    readonly payment_intent_card_processing: { readonly [key: string]: unknown };
    /** PaymentIntentNextAction */
    readonly payment_intent_next_action: {
      readonly alipay_handle_redirect?: components["schemas"]["payment_intent_next_action_alipay_handle_redirect"];
      readonly boleto_display_details?: components["schemas"]["payment_intent_next_action_boleto"];
      readonly oxxo_display_details?: components["schemas"]["payment_intent_next_action_display_oxxo_details"];
      readonly redirect_to_url?: components["schemas"]["payment_intent_next_action_redirect_to_url"];
      /** @description Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
      readonly type: string;
      /** @description When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
      readonly use_stripe_sdk?: { readonly [key: string]: unknown };
      readonly verify_with_microdeposits?: components["schemas"]["payment_intent_next_action_verify_with_microdeposits"];
      readonly wechat_pay_display_qr_code?: components["schemas"]["payment_intent_next_action_wechat_pay_display_qr_code"];
      readonly wechat_pay_redirect_to_android_app?: components["schemas"]["payment_intent_next_action_wechat_pay_redirect_to_android_app"];
      readonly wechat_pay_redirect_to_ios_app?: components["schemas"]["payment_intent_next_action_wechat_pay_redirect_to_ios_app"];
    };
    /** PaymentIntentNextActionAlipayHandleRedirect */
    readonly payment_intent_next_action_alipay_handle_redirect: {
      /** @description The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App. */
      readonly native_data?: string | null;
      /** @description The native URL you must redirect your customer to in order to authenticate the payment in an iOS App. */
      readonly native_url?: string | null;
      /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      readonly return_url?: string | null;
      /** @description The URL you must redirect your customer to in order to authenticate the payment. */
      readonly url?: string | null;
    };
    /** payment_intent_next_action_boleto */
    readonly payment_intent_next_action_boleto: {
      /**
       * Format: unix-time
       * @description The timestamp after which the boleto expires.
       */
      readonly expires_at?: number | null;
      /** @description The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher. */
      readonly hosted_voucher_url?: string | null;
      /** @description The boleto number. */
      readonly number?: string | null;
      /** @description The URL to the downloadable boleto voucher PDF. */
      readonly pdf?: string | null;
    };
    /** PaymentIntentNextActionDisplayOxxoDetails */
    readonly payment_intent_next_action_display_oxxo_details: {
      /**
       * Format: unix-time
       * @description The timestamp after which the OXXO voucher expires.
       */
      readonly expires_after?: number | null;
      /** @description The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher. */
      readonly hosted_voucher_url?: string | null;
      /** @description OXXO reference number. */
      readonly number?: string | null;
    };
    /** PaymentIntentNextActionRedirectToUrl */
    readonly payment_intent_next_action_redirect_to_url: {
      /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      readonly return_url?: string | null;
      /** @description The URL you must redirect your customer to in order to authenticate the payment. */
      readonly url?: string | null;
    };
    /** PaymentIntentNextActionVerifyWithMicrodeposits */
    readonly payment_intent_next_action_verify_with_microdeposits: {
      /**
       * Format: unix-time
       * @description The timestamp when the microdeposits are expected to land.
       */
      readonly arrival_date: number;
      /** @description The URL for the hosted verification page, which allows customers to verify their bank account. */
      readonly hosted_verification_url: string;
    };
    /** PaymentIntentNextActionWechatPayDisplayQrCode */
    readonly payment_intent_next_action_wechat_pay_display_qr_code: {
      /** @description The data being used to generate QR code */
      readonly data: string;
      /** @description The base64 image data for a pre-generated QR code */
      readonly image_data_url: string;
      /** @description The image_url_png string used to render QR code */
      readonly image_url_png: string;
      /** @description The image_url_svg string used to render QR code */
      readonly image_url_svg: string;
    };
    /** PaymentIntentNextActionWechatPayRedirectToAndroidApp */
    readonly payment_intent_next_action_wechat_pay_redirect_to_android_app: {
      /** @description app_id is the APP ID registered on WeChat open platform */
      readonly app_id: string;
      /** @description nonce_str is a random string */
      readonly nonce_str: string;
      /** @description package is static value */
      readonly package: string;
      /** @description an unique merchant ID assigned by Wechat Pay */
      readonly partner_id: string;
      /** @description an unique trading ID assigned by Wechat Pay */
      readonly prepay_id: string;
      /** @description A signature */
      readonly sign: string;
      /** @description Specifies the current time in epoch format */
      readonly timestamp: string;
    };
    /** PaymentIntentNextActionWechatPayRedirectToIOSApp */
    readonly payment_intent_next_action_wechat_pay_redirect_to_ios_app: {
      /** @description An universal link that redirect to Wechat Pay APP */
      readonly native_url: string;
    };
    /** PaymentIntentPaymentMethodOptions */
    readonly payment_intent_payment_method_options: {
      readonly acss_debit?:
        | components["schemas"]["payment_intent_payment_method_options_acss_debit"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly afterpay_clearpay?:
        | components["schemas"]["payment_method_options_afterpay_clearpay"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly alipay?:
        | components["schemas"]["payment_method_options_alipay"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly au_becs_debit?:
        | components["schemas"]["payment_intent_payment_method_options_au_becs_debit"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly bacs_debit?:
        | components["schemas"]["payment_method_options_bacs_debit"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly bancontact?:
        | components["schemas"]["payment_method_options_bancontact"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly boleto?:
        | components["schemas"]["payment_method_options_boleto"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly card?:
        | components["schemas"]["payment_intent_payment_method_options_card"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly card_present?:
        | components["schemas"]["payment_method_options_card_present"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly eps?:
        | components["schemas"]["payment_intent_payment_method_options_eps"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly fpx?:
        | components["schemas"]["payment_method_options_fpx"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly giropay?:
        | components["schemas"]["payment_method_options_giropay"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly grabpay?:
        | components["schemas"]["payment_method_options_grabpay"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly ideal?:
        | components["schemas"]["payment_method_options_ideal"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly interac_present?:
        | components["schemas"]["payment_method_options_interac_present"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly klarna?:
        | components["schemas"]["payment_method_options_klarna"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly oxxo?:
        | components["schemas"]["payment_method_options_oxxo"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly p24?:
        | components["schemas"]["payment_method_options_p24"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly sepa_debit?:
        | components["schemas"]["payment_intent_payment_method_options_sepa_debit"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly sofort?:
        | components["schemas"]["payment_method_options_sofort"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
      readonly wechat_pay?:
        | components["schemas"]["payment_method_options_wechat_pay"]
        | components["schemas"]["payment_intent_type_specific_payment_method_options_client"];
    };
    /** payment_intent_payment_method_options_acss_debit */
    readonly payment_intent_payment_method_options_acss_debit: {
      readonly mandate_options?: components["schemas"]["payment_intent_payment_method_options_mandate_options_acss_debit"];
      /**
       * @description Bank account verification method.
       * @enum {string}
       */
      readonly verification_method?: "automatic" | "instant" | "microdeposits";
    };
    /** payment_intent_payment_method_options_au_becs_debit */
    readonly payment_intent_payment_method_options_au_becs_debit: { readonly [key: string]: unknown };
    /** payment_intent_payment_method_options_card */
    readonly payment_intent_payment_method_options_card: {
      /**
       * @description Installment details for this payment (Mexico only).
       *
       * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
       */
      readonly installments?: components["schemas"]["payment_method_options_card_installments"] | null;
      /**
       * @description Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
       * @enum {string|null}
       */
      readonly network?:
        | (
            | "amex"
            | "cartes_bancaires"
            | "diners"
            | "discover"
            | "interac"
            | "jcb"
            | "mastercard"
            | "unionpay"
            | "unknown"
            | "visa"
          )
        | null;
      /**
       * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
       * @enum {string|null}
       */
      readonly request_three_d_secure?: ("any" | "automatic" | "challenge_only") | null;
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
       *
       * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
       * @enum {string}
       */
      readonly setup_future_usage?: "none" | "off_session" | "on_session";
    };
    /** payment_intent_payment_method_options_eps */
    readonly payment_intent_payment_method_options_eps: { readonly [key: string]: unknown };
    /** payment_intent_payment_method_options_mandate_options_acss_debit */
    readonly payment_intent_payment_method_options_mandate_options_acss_debit: {
      /** @description A URL for custom mandate text */
      readonly custom_mandate_url?: string;
      /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      readonly interval_description?: string | null;
      /**
       * @description Payment schedule for the mandate.
       * @enum {string|null}
       */
      readonly payment_schedule?: ("combined" | "interval" | "sporadic") | null;
      /**
       * @description Transaction type of the mandate.
       * @enum {string|null}
       */
      readonly transaction_type?: ("business" | "personal") | null;
    };
    /** payment_intent_payment_method_options_mandate_options_sepa_debit */
    readonly payment_intent_payment_method_options_mandate_options_sepa_debit: { readonly [key: string]: unknown };
    /** payment_intent_payment_method_options_sepa_debit */
    readonly payment_intent_payment_method_options_sepa_debit: {
      readonly mandate_options?: components["schemas"]["payment_intent_payment_method_options_mandate_options_sepa_debit"];
    };
    /** PaymentIntentProcessing */
    readonly payment_intent_processing: {
      readonly card?: components["schemas"]["payment_intent_card_processing"];
      /**
       * @description Type of the payment method for which payment is in `processing` state, one of `card`.
       * @enum {string}
       */
      readonly type: "card";
    };
    /** PaymentIntentTypeSpecificPaymentMethodOptionsClient */
    readonly payment_intent_type_specific_payment_method_options_client: {
      /**
       * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
       *
       * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
       *
       * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
       * @enum {string}
       */
      readonly setup_future_usage?: "none" | "off_session" | "on_session";
    };
    /**
     * PaymentLink
     * @description A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.
     *
     * When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.
     *
     * Related guide: [Payment Links API](https://stripe.com/docs/payments/payment-links/api)
     */
    readonly payment_link: {
      /** @description Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated. */
      readonly active: boolean;
      readonly after_completion: components["schemas"]["payment_links_resource_after_completion"];
      /** @description Whether user redeemable promotion codes are enabled. */
      readonly allow_promotion_codes: boolean;
      /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. */
      readonly application_fee_amount?: number | null;
      /** @description This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
      readonly application_fee_percent?: number | null;
      readonly automatic_tax: components["schemas"]["payment_links_resource_automatic_tax"];
      /**
       * @description Configuration for collecting the customer's billing address.
       * @enum {string}
       */
      readonly billing_address_collection: "auto" | "required";
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * PaymentLinksResourceListLineItems
       * @description The line items representing what is being sold.
       */
      readonly line_items?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "payment_link";
      /** @description The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
      readonly on_behalf_of?: (string | components["schemas"]["account"]) | null;
      /** @description The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
      readonly payment_method_types?: readonly "card"[] | null;
      readonly phone_number_collection: components["schemas"]["payment_links_resource_phone_number_collection"];
      /** @description Configuration for collecting the customer's shipping address. */
      readonly shipping_address_collection?:
        | components["schemas"]["payment_links_resource_shipping_address_collection"]
        | null;
      /** @description When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`. */
      readonly subscription_data?: components["schemas"]["payment_links_resource_subscription_data"] | null;
      /** @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to. */
      readonly transfer_data?: components["schemas"]["payment_links_resource_transfer_data"] | null;
      /** @description The public URL that can be shared with customers. */
      readonly url: string;
    };
    /** PaymentLinksResourceAfterCompletion */
    readonly payment_links_resource_after_completion: {
      readonly hosted_confirmation?: components["schemas"]["payment_links_resource_completion_behavior_confirmation_page"];
      readonly redirect?: components["schemas"]["payment_links_resource_completion_behavior_redirect"];
      /**
       * @description The specified behavior after the purchase is complete.
       * @enum {string}
       */
      readonly type: "hosted_confirmation" | "redirect";
    };
    /** PaymentLinksResourceAutomaticTax */
    readonly payment_links_resource_automatic_tax: {
      /** @description If `true`, tax will be calculated automatically using the customer's location. */
      readonly enabled: boolean;
    };
    /** PaymentLinksResourceCompletionBehaviorConfirmationPage */
    readonly payment_links_resource_completion_behavior_confirmation_page: {
      /** @description The custom message that is displayed to the customer after the purchase is complete. */
      readonly custom_message?: string | null;
    };
    /** PaymentLinksResourceCompletionBehaviorRedirect */
    readonly payment_links_resource_completion_behavior_redirect: {
      /** @description The URL the customer will be redirected to after the purchase is complete. */
      readonly url: string;
    };
    /** PaymentLinksResourcePhoneNumberCollection */
    readonly payment_links_resource_phone_number_collection: {
      /** @description If `true`, a phone number will be collected during checkout. */
      readonly enabled: boolean;
    };
    /** PaymentLinksResourceShippingAddressCollection */
    readonly payment_links_resource_shipping_address_collection: {
      /** @description An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`. */
      readonly allowed_countries: readonly (
        | "AC"
        | "AD"
        | "AE"
        | "AF"
        | "AG"
        | "AI"
        | "AL"
        | "AM"
        | "AO"
        | "AQ"
        | "AR"
        | "AT"
        | "AU"
        | "AW"
        | "AX"
        | "AZ"
        | "BA"
        | "BB"
        | "BD"
        | "BE"
        | "BF"
        | "BG"
        | "BH"
        | "BI"
        | "BJ"
        | "BL"
        | "BM"
        | "BN"
        | "BO"
        | "BQ"
        | "BR"
        | "BS"
        | "BT"
        | "BV"
        | "BW"
        | "BY"
        | "BZ"
        | "CA"
        | "CD"
        | "CF"
        | "CG"
        | "CH"
        | "CI"
        | "CK"
        | "CL"
        | "CM"
        | "CN"
        | "CO"
        | "CR"
        | "CV"
        | "CW"
        | "CY"
        | "CZ"
        | "DE"
        | "DJ"
        | "DK"
        | "DM"
        | "DO"
        | "DZ"
        | "EC"
        | "EE"
        | "EG"
        | "EH"
        | "ER"
        | "ES"
        | "ET"
        | "FI"
        | "FJ"
        | "FK"
        | "FO"
        | "FR"
        | "GA"
        | "GB"
        | "GD"
        | "GE"
        | "GF"
        | "GG"
        | "GH"
        | "GI"
        | "GL"
        | "GM"
        | "GN"
        | "GP"
        | "GQ"
        | "GR"
        | "GS"
        | "GT"
        | "GU"
        | "GW"
        | "GY"
        | "HK"
        | "HN"
        | "HR"
        | "HT"
        | "HU"
        | "ID"
        | "IE"
        | "IL"
        | "IM"
        | "IN"
        | "IO"
        | "IQ"
        | "IS"
        | "IT"
        | "JE"
        | "JM"
        | "JO"
        | "JP"
        | "KE"
        | "KG"
        | "KH"
        | "KI"
        | "KM"
        | "KN"
        | "KR"
        | "KW"
        | "KY"
        | "KZ"
        | "LA"
        | "LB"
        | "LC"
        | "LI"
        | "LK"
        | "LR"
        | "LS"
        | "LT"
        | "LU"
        | "LV"
        | "LY"
        | "MA"
        | "MC"
        | "MD"
        | "ME"
        | "MF"
        | "MG"
        | "MK"
        | "ML"
        | "MM"
        | "MN"
        | "MO"
        | "MQ"
        | "MR"
        | "MS"
        | "MT"
        | "MU"
        | "MV"
        | "MW"
        | "MX"
        | "MY"
        | "MZ"
        | "NA"
        | "NC"
        | "NE"
        | "NG"
        | "NI"
        | "NL"
        | "NO"
        | "NP"
        | "NR"
        | "NU"
        | "NZ"
        | "OM"
        | "PA"
        | "PE"
        | "PF"
        | "PG"
        | "PH"
        | "PK"
        | "PL"
        | "PM"
        | "PN"
        | "PR"
        | "PS"
        | "PT"
        | "PY"
        | "QA"
        | "RE"
        | "RO"
        | "RS"
        | "RU"
        | "RW"
        | "SA"
        | "SB"
        | "SC"
        | "SE"
        | "SG"
        | "SH"
        | "SI"
        | "SJ"
        | "SK"
        | "SL"
        | "SM"
        | "SN"
        | "SO"
        | "SR"
        | "SS"
        | "ST"
        | "SV"
        | "SX"
        | "SZ"
        | "TA"
        | "TC"
        | "TD"
        | "TF"
        | "TG"
        | "TH"
        | "TJ"
        | "TK"
        | "TL"
        | "TM"
        | "TN"
        | "TO"
        | "TR"
        | "TT"
        | "TV"
        | "TW"
        | "TZ"
        | "UA"
        | "UG"
        | "US"
        | "UY"
        | "UZ"
        | "VA"
        | "VC"
        | "VE"
        | "VG"
        | "VN"
        | "VU"
        | "WF"
        | "WS"
        | "XK"
        | "YE"
        | "YT"
        | "ZA"
        | "ZM"
        | "ZW"
        | "ZZ"
      )[];
    };
    /** PaymentLinksResourceSubscriptionData */
    readonly payment_links_resource_subscription_data: {
      /** @description Integer representing the number of trial period days before the customer is charged for the first time. */
      readonly trial_period_days?: number | null;
    };
    /** PaymentLinksResourceTransferData */
    readonly payment_links_resource_transfer_data: {
      /** @description The amount in %s that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
      readonly amount?: number | null;
      /** @description The connected account receiving the transfer. */
      readonly destination: string | components["schemas"]["account"];
    };
    /**
     * PaymentMethod
     * @description PaymentMethod objects represent your customer's payment instruments.
     * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
     * Customer objects to store instrument details for future payments.
     *
     * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
     */
    readonly payment_method: {
      readonly acss_debit?: components["schemas"]["payment_method_acss_debit"];
      readonly afterpay_clearpay?: components["schemas"]["payment_method_afterpay_clearpay"];
      readonly alipay?: components["schemas"]["payment_flows_private_payment_methods_alipay"];
      readonly au_becs_debit?: components["schemas"]["payment_method_au_becs_debit"];
      readonly bacs_debit?: components["schemas"]["payment_method_bacs_debit"];
      readonly bancontact?: components["schemas"]["payment_method_bancontact"];
      readonly billing_details: components["schemas"]["billing_details"];
      readonly boleto?: components["schemas"]["payment_method_boleto"];
      readonly card?: components["schemas"]["payment_method_card"];
      readonly card_present?: components["schemas"]["payment_method_card_present"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
      readonly customer?: (string | components["schemas"]["customer"]) | null;
      readonly eps?: components["schemas"]["payment_method_eps"];
      readonly fpx?: components["schemas"]["payment_method_fpx"];
      readonly giropay?: components["schemas"]["payment_method_giropay"];
      readonly grabpay?: components["schemas"]["payment_method_grabpay"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      readonly ideal?: components["schemas"]["payment_method_ideal"];
      readonly interac_present?: components["schemas"]["payment_method_interac_present"];
      readonly klarna?: components["schemas"]["payment_method_klarna"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "payment_method";
      readonly oxxo?: components["schemas"]["payment_method_oxxo"];
      readonly p24?: components["schemas"]["payment_method_p24"];
      readonly sepa_debit?: components["schemas"]["payment_method_sepa_debit"];
      readonly sofort?: components["schemas"]["payment_method_sofort"];
      /**
       * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
       * @enum {string}
       */
      readonly type:
        | "acss_debit"
        | "afterpay_clearpay"
        | "alipay"
        | "au_becs_debit"
        | "bacs_debit"
        | "bancontact"
        | "boleto"
        | "card"
        | "card_present"
        | "eps"
        | "fpx"
        | "giropay"
        | "grabpay"
        | "ideal"
        | "interac_present"
        | "klarna"
        | "oxxo"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "wechat_pay";
      readonly wechat_pay?: components["schemas"]["payment_method_wechat_pay"];
    };
    /** payment_method_acss_debit */
    readonly payment_method_acss_debit: {
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Institution number of the bank account. */
      readonly institution_number?: string | null;
      /** @description Last four digits of the bank account number. */
      readonly last4?: string | null;
      /** @description Transit number of the bank account. */
      readonly transit_number?: string | null;
    };
    /** payment_method_afterpay_clearpay */
    readonly payment_method_afterpay_clearpay: { readonly [key: string]: unknown };
    /** payment_method_au_becs_debit */
    readonly payment_method_au_becs_debit: {
      /** @description Six-digit number identifying bank and branch associated with this bank account. */
      readonly bsb_number?: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Last four digits of the bank account number. */
      readonly last4?: string | null;
    };
    /** payment_method_bacs_debit */
    readonly payment_method_bacs_debit: {
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Last four digits of the bank account number. */
      readonly last4?: string | null;
      /** @description Sort code of the bank account. (e.g., `10-20-30`) */
      readonly sort_code?: string | null;
    };
    /** payment_method_bancontact */
    readonly payment_method_bancontact: { readonly [key: string]: unknown };
    /** payment_method_boleto */
    readonly payment_method_boleto: {
      /** @description Uniquely identifies the customer tax id (CNPJ or CPF) */
      readonly tax_id: string;
    };
    /** payment_method_card */
    readonly payment_method_card: {
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      readonly brand: string;
      /** @description Checks on Card address and CVC if provided. */
      readonly checks?: components["schemas"]["payment_method_card_checks"] | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      readonly country?: string | null;
      /** @description Two-digit number representing the card's expiration month. */
      readonly exp_month: number;
      /** @description Four-digit number representing the card's expiration year. */
      readonly exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
       */
      readonly fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      readonly funding: string;
      /** @description Details of the original PaymentMethod that created this object. */
      readonly generated_from?: components["schemas"]["payment_method_card_generated_card"] | null;
      /** @description The last four digits of the card. */
      readonly last4: string;
      /** @description Contains information about card networks that can be used to process the payment. */
      readonly networks?: components["schemas"]["networks"] | null;
      /** @description Contains details on how this Card maybe be used for 3D Secure authentication. */
      readonly three_d_secure_usage?: components["schemas"]["three_d_secure_usage"] | null;
      /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
      readonly wallet?: components["schemas"]["payment_method_card_wallet"] | null;
    };
    /** payment_method_card_checks */
    readonly payment_method_card_checks: {
      /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly address_line1_check?: string | null;
      /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly address_postal_code_check?: string | null;
      /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly cvc_check?: string | null;
    };
    /** payment_method_card_generated_card */
    readonly payment_method_card_generated_card: {
      /** @description The charge that created this object. */
      readonly charge?: string | null;
      /** @description Transaction-specific details of the payment method used in the payment. */
      readonly payment_method_details?: components["schemas"]["card_generated_from_payment_method_details"] | null;
      /** @description The ID of the SetupAttempt that generated this PaymentMethod, if any. */
      readonly setup_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
    };
    /** payment_method_card_present */
    readonly payment_method_card_present: { readonly [key: string]: unknown };
    /** payment_method_card_wallet */
    readonly payment_method_card_wallet: {
      readonly amex_express_checkout?: components["schemas"]["payment_method_card_wallet_amex_express_checkout"];
      readonly apple_pay?: components["schemas"]["payment_method_card_wallet_apple_pay"];
      /** @description (For tokenized numbers only.) The last four digits of the device account number. */
      readonly dynamic_last4?: string | null;
      readonly google_pay?: components["schemas"]["payment_method_card_wallet_google_pay"];
      readonly masterpass?: components["schemas"]["payment_method_card_wallet_masterpass"];
      readonly samsung_pay?: components["schemas"]["payment_method_card_wallet_samsung_pay"];
      /**
       * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
       * @enum {string}
       */
      readonly type:
        | "amex_express_checkout"
        | "apple_pay"
        | "google_pay"
        | "masterpass"
        | "samsung_pay"
        | "visa_checkout";
      readonly visa_checkout?: components["schemas"]["payment_method_card_wallet_visa_checkout"];
    };
    /** payment_method_card_wallet_amex_express_checkout */
    readonly payment_method_card_wallet_amex_express_checkout: { readonly [key: string]: unknown };
    /** payment_method_card_wallet_apple_pay */
    readonly payment_method_card_wallet_apple_pay: { readonly [key: string]: unknown };
    /** payment_method_card_wallet_google_pay */
    readonly payment_method_card_wallet_google_pay: { readonly [key: string]: unknown };
    /** payment_method_card_wallet_masterpass */
    readonly payment_method_card_wallet_masterpass: {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly billing_address?: components["schemas"]["address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly email?: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly name?: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly shipping_address?: components["schemas"]["address"] | null;
    };
    /** payment_method_card_wallet_samsung_pay */
    readonly payment_method_card_wallet_samsung_pay: { readonly [key: string]: unknown };
    /** payment_method_card_wallet_visa_checkout */
    readonly payment_method_card_wallet_visa_checkout: {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly billing_address?: components["schemas"]["address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly email?: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly name?: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly shipping_address?: components["schemas"]["address"] | null;
    };
    /** payment_method_details */
    readonly payment_method_details: {
      readonly ach_credit_transfer?: components["schemas"]["payment_method_details_ach_credit_transfer"];
      readonly ach_debit?: components["schemas"]["payment_method_details_ach_debit"];
      readonly acss_debit?: components["schemas"]["payment_method_details_acss_debit"];
      readonly afterpay_clearpay?: components["schemas"]["payment_method_details_afterpay_clearpay"];
      readonly alipay?: components["schemas"]["payment_flows_private_payment_methods_alipay_details"];
      readonly au_becs_debit?: components["schemas"]["payment_method_details_au_becs_debit"];
      readonly bacs_debit?: components["schemas"]["payment_method_details_bacs_debit"];
      readonly bancontact?: components["schemas"]["payment_method_details_bancontact"];
      readonly boleto?: components["schemas"]["payment_method_details_boleto"];
      readonly card?: components["schemas"]["payment_method_details_card"];
      readonly card_present?: components["schemas"]["payment_method_details_card_present"];
      readonly eps?: components["schemas"]["payment_method_details_eps"];
      readonly fpx?: components["schemas"]["payment_method_details_fpx"];
      readonly giropay?: components["schemas"]["payment_method_details_giropay"];
      readonly grabpay?: components["schemas"]["payment_method_details_grabpay"];
      readonly ideal?: components["schemas"]["payment_method_details_ideal"];
      readonly interac_present?: components["schemas"]["payment_method_details_interac_present"];
      readonly klarna?: components["schemas"]["payment_method_details_klarna"];
      readonly multibanco?: components["schemas"]["payment_method_details_multibanco"];
      readonly oxxo?: components["schemas"]["payment_method_details_oxxo"];
      readonly p24?: components["schemas"]["payment_method_details_p24"];
      readonly sepa_debit?: components["schemas"]["payment_method_details_sepa_debit"];
      readonly sofort?: components["schemas"]["payment_method_details_sofort"];
      readonly stripe_account?: components["schemas"]["payment_method_details_stripe_account"];
      /**
       * @description The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `acss_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
       * An additional hash is included on `payment_method_details` with a name matching this value.
       * It contains information specific to the payment method.
       */
      readonly type: string;
      readonly wechat?: components["schemas"]["payment_method_details_wechat"];
      readonly wechat_pay?: components["schemas"]["payment_method_details_wechat_pay"];
    };
    /** payment_method_details_ach_credit_transfer */
    readonly payment_method_details_ach_credit_transfer: {
      /** @description Account number to transfer funds to. */
      readonly account_number?: string | null;
      /** @description Name of the bank associated with the routing number. */
      readonly bank_name?: string | null;
      /** @description Routing transit number for the bank account to transfer funds to. */
      readonly routing_number?: string | null;
      /** @description SWIFT code of the bank associated with the routing number. */
      readonly swift_code?: string | null;
    };
    /** payment_method_details_ach_debit */
    readonly payment_method_details_ach_debit: {
      /**
       * @description Type of entity that holds the account. This can be either `individual` or `company`.
       * @enum {string|null}
       */
      readonly account_holder_type?: ("company" | "individual") | null;
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      readonly country?: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Last four digits of the bank account number. */
      readonly last4?: string | null;
      /** @description Routing transit number of the bank account. */
      readonly routing_number?: string | null;
    };
    /** payment_method_details_acss_debit */
    readonly payment_method_details_acss_debit: {
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Institution number of the bank account */
      readonly institution_number?: string | null;
      /** @description Last four digits of the bank account number. */
      readonly last4?: string | null;
      /** @description ID of the mandate used to make this payment. */
      readonly mandate?: string;
      /** @description Transit number of the bank account. */
      readonly transit_number?: string | null;
    };
    /** payment_method_details_afterpay_clearpay */
    readonly payment_method_details_afterpay_clearpay: {
      /** @description Order identifier shown to the merchant in Afterpay’s online portal. */
      readonly reference?: string | null;
    };
    /** payment_method_details_au_becs_debit */
    readonly payment_method_details_au_becs_debit: {
      /** @description Bank-State-Branch number of the bank account. */
      readonly bsb_number?: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Last four digits of the bank account number. */
      readonly last4?: string | null;
      /** @description ID of the mandate used to make this payment. */
      readonly mandate?: string;
    };
    /** payment_method_details_bacs_debit */
    readonly payment_method_details_bacs_debit: {
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Last four digits of the bank account number. */
      readonly last4?: string | null;
      /** @description ID of the mandate used to make this payment. */
      readonly mandate?: string | null;
      /** @description Sort code of the bank account. (e.g., `10-20-30`) */
      readonly sort_code?: string | null;
    };
    /** payment_method_details_bancontact */
    readonly payment_method_details_bancontact: {
      /** @description Bank code of bank associated with the bank account. */
      readonly bank_code?: string | null;
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      readonly bic?: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      readonly generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      readonly generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      readonly iban_last4?: string | null;
      /**
       * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
       * Can be one of `en`, `de`, `fr`, or `nl`
       * @enum {string|null}
       */
      readonly preferred_language?: ("de" | "en" | "fr" | "nl") | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Bancontact directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      readonly verified_name?: string | null;
    };
    /** payment_method_details_boleto */
    readonly payment_method_details_boleto: {
      /** @description The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers) */
      readonly tax_id: string;
    };
    /** payment_method_details_card */
    readonly payment_method_details_card: {
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      readonly brand?: string | null;
      /** @description Check results by Card networks on Card address and CVC at time of payment. */
      readonly checks?: components["schemas"]["payment_method_details_card_checks"] | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      readonly country?: string | null;
      /** @description Two-digit number representing the card's expiration month. */
      readonly exp_month: number;
      /** @description Four-digit number representing the card's expiration year. */
      readonly exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
       */
      readonly fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      readonly funding?: string | null;
      /**
       * @description Installment details for this payment (Mexico only).
       *
       * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
       */
      readonly installments?: components["schemas"]["payment_method_details_card_installments"] | null;
      /** @description The last four digits of the card. */
      readonly last4?: string | null;
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      readonly network?: string | null;
      /** @description Populated if this transaction used 3D Secure authentication. */
      readonly three_d_secure?: components["schemas"]["three_d_secure_details"] | null;
      /** @description If this Card is part of a card wallet, this contains the details of the card wallet. */
      readonly wallet?: components["schemas"]["payment_method_details_card_wallet"] | null;
    };
    /** payment_method_details_card_checks */
    readonly payment_method_details_card_checks: {
      /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly address_line1_check?: string | null;
      /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly address_postal_code_check?: string | null;
      /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
      readonly cvc_check?: string | null;
    };
    /** payment_method_details_card_installments */
    readonly payment_method_details_card_installments: {
      /** @description Installment plan selected for the payment. */
      readonly plan?: components["schemas"]["payment_method_details_card_installments_plan"] | null;
    };
    /** payment_method_details_card_installments_plan */
    readonly payment_method_details_card_installments_plan: {
      /** @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
      readonly count?: number | null;
      /**
       * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
       * One of `month`.
       * @enum {string|null}
       */
      readonly interval?: "month" | null;
      /**
       * @description Type of installment plan, one of `fixed_count`.
       * @enum {string}
       */
      readonly type: "fixed_count";
    };
    /** payment_method_details_card_present */
    readonly payment_method_details_card_present: {
      /** @description The authorized amount */
      readonly amount_authorized?: number | null;
      /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      readonly brand?: string | null;
      /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
      readonly cardholder_name?: string | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      readonly country?: string | null;
      /** @description Authorization response cryptogram. */
      readonly emv_auth_data?: string | null;
      /** @description Two-digit number representing the card's expiration month. */
      readonly exp_month: number;
      /** @description Four-digit number representing the card's expiration year. */
      readonly exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
       */
      readonly fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      readonly funding?: string | null;
      /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
      readonly generated_card?: string | null;
      /** @description The last four digits of the card. */
      readonly last4?: string | null;
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      readonly network?: string | null;
      /** @description Defines whether the authorized amount can be over-captured or not */
      readonly overcapture_supported?: boolean | null;
      /**
       * @description How card details were read in this transaction.
       * @enum {string|null}
       */
      readonly read_method?:
        | (
            | "contact_emv"
            | "contactless_emv"
            | "contactless_magstripe_mode"
            | "magnetic_stripe_fallback"
            | "magnetic_stripe_track2"
          )
        | null;
      /** @description A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
      readonly receipt?: components["schemas"]["payment_method_details_card_present_receipt"] | null;
    };
    /** payment_method_details_card_present_receipt */
    readonly payment_method_details_card_present_receipt: {
      /**
       * @description The type of account being debited or credited
       * @enum {string}
       */
      readonly account_type?: "checking" | "credit" | "prepaid" | "unknown";
      /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
      readonly application_cryptogram?: string | null;
      /** @description Mnenomic of the Application Identifier. */
      readonly application_preferred_name?: string | null;
      /** @description Identifier for this transaction. */
      readonly authorization_code?: string | null;
      /** @description EMV tag 8A. A code returned by the card issuer. */
      readonly authorization_response_code?: string | null;
      /** @description How the cardholder verified ownership of the card. */
      readonly cardholder_verification_method?: string | null;
      /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
      readonly dedicated_file_name?: string | null;
      /** @description The outcome of a series of EMV functions performed by the card reader. */
      readonly terminal_verification_results?: string | null;
      /** @description An indication of various EMV functions performed during the transaction. */
      readonly transaction_status_information?: string | null;
    };
    /** payment_method_details_card_wallet */
    readonly payment_method_details_card_wallet: {
      readonly amex_express_checkout?: components["schemas"]["payment_method_details_card_wallet_amex_express_checkout"];
      readonly apple_pay?: components["schemas"]["payment_method_details_card_wallet_apple_pay"];
      /** @description (For tokenized numbers only.) The last four digits of the device account number. */
      readonly dynamic_last4?: string | null;
      readonly google_pay?: components["schemas"]["payment_method_details_card_wallet_google_pay"];
      readonly masterpass?: components["schemas"]["payment_method_details_card_wallet_masterpass"];
      readonly samsung_pay?: components["schemas"]["payment_method_details_card_wallet_samsung_pay"];
      /**
       * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
       * @enum {string}
       */
      readonly type:
        | "amex_express_checkout"
        | "apple_pay"
        | "google_pay"
        | "masterpass"
        | "samsung_pay"
        | "visa_checkout";
      readonly visa_checkout?: components["schemas"]["payment_method_details_card_wallet_visa_checkout"];
    };
    /** payment_method_details_card_wallet_amex_express_checkout */
    readonly payment_method_details_card_wallet_amex_express_checkout: { readonly [key: string]: unknown };
    /** payment_method_details_card_wallet_apple_pay */
    readonly payment_method_details_card_wallet_apple_pay: { readonly [key: string]: unknown };
    /** payment_method_details_card_wallet_google_pay */
    readonly payment_method_details_card_wallet_google_pay: { readonly [key: string]: unknown };
    /** payment_method_details_card_wallet_masterpass */
    readonly payment_method_details_card_wallet_masterpass: {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly billing_address?: components["schemas"]["address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly email?: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly name?: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly shipping_address?: components["schemas"]["address"] | null;
    };
    /** payment_method_details_card_wallet_samsung_pay */
    readonly payment_method_details_card_wallet_samsung_pay: { readonly [key: string]: unknown };
    /** payment_method_details_card_wallet_visa_checkout */
    readonly payment_method_details_card_wallet_visa_checkout: {
      /** @description Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly billing_address?: components["schemas"]["address"] | null;
      /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly email?: string | null;
      /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly name?: string | null;
      /** @description Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly shipping_address?: components["schemas"]["address"] | null;
    };
    /** payment_method_details_eps */
    readonly payment_method_details_eps: {
      /**
       * @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
       * @enum {string|null}
       */
      readonly bank?:
        | (
            | "arzte_und_apotheker_bank"
            | "austrian_anadi_bank_ag"
            | "bank_austria"
            | "bankhaus_carl_spangler"
            | "bankhaus_schelhammer_und_schattera_ag"
            | "bawag_psk_ag"
            | "bks_bank_ag"
            | "brull_kallmus_bank_ag"
            | "btv_vier_lander_bank"
            | "capital_bank_grawe_gruppe_ag"
            | "dolomitenbank"
            | "easybank_ag"
            | "erste_bank_und_sparkassen"
            | "hypo_alpeadriabank_international_ag"
            | "hypo_bank_burgenland_aktiengesellschaft"
            | "hypo_noe_lb_fur_niederosterreich_u_wien"
            | "hypo_oberosterreich_salzburg_steiermark"
            | "hypo_tirol_bank_ag"
            | "hypo_vorarlberg_bank_ag"
            | "marchfelder_bank"
            | "oberbank_ag"
            | "raiffeisen_bankengruppe_osterreich"
            | "schoellerbank_ag"
            | "sparda_bank_wien"
            | "volksbank_gruppe"
            | "volkskreditbank_ag"
            | "vr_bank_braunau"
          )
        | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by EPS directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       * EPS rarely provides this information so the attribute is usually empty.
       */
      readonly verified_name?: string | null;
    };
    /** payment_method_details_fpx */
    readonly payment_method_details_fpx: {
      /**
       * @description The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
       * @enum {string}
       */
      readonly bank:
        | "affin_bank"
        | "agrobank"
        | "alliance_bank"
        | "ambank"
        | "bank_islam"
        | "bank_muamalat"
        | "bank_rakyat"
        | "bsn"
        | "cimb"
        | "deutsche_bank"
        | "hong_leong_bank"
        | "hsbc"
        | "kfh"
        | "maybank2e"
        | "maybank2u"
        | "ocbc"
        | "pb_enterprise"
        | "public_bank"
        | "rhb"
        | "standard_chartered"
        | "uob";
      /** @description Unique transaction id generated by FPX for every request from the merchant */
      readonly transaction_id?: string | null;
    };
    /** payment_method_details_giropay */
    readonly payment_method_details_giropay: {
      /** @description Bank code of bank associated with the bank account. */
      readonly bank_code?: string | null;
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      readonly bic?: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Giropay directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       * Giropay rarely provides this information so the attribute is usually empty.
       */
      readonly verified_name?: string | null;
    };
    /** payment_method_details_grabpay */
    readonly payment_method_details_grabpay: {
      /** @description Unique transaction id generated by GrabPay */
      readonly transaction_id?: string | null;
    };
    /** payment_method_details_ideal */
    readonly payment_method_details_ideal: {
      /**
       * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
       * @enum {string|null}
       */
      readonly bank?:
        | (
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot"
          )
        | null;
      /**
       * @description The Bank Identifier Code of the customer's bank.
       * @enum {string|null}
       */
      readonly bic?:
        | (
            | "ABNANL2A"
            | "ASNBNL21"
            | "BUNQNL2A"
            | "FVLBNL22"
            | "HANDNL2A"
            | "INGBNL2A"
            | "KNABNL2H"
            | "MOYONL21"
            | "RABONL2U"
            | "RBRBNL21"
            | "REVOLT21"
            | "SNSBNL2A"
            | "TRIONL2U"
          )
        | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      readonly generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      readonly generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      readonly iban_last4?: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by iDEAL directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      readonly verified_name?: string | null;
    };
    /** payment_method_details_interac_present */
    readonly payment_method_details_interac_present: {
      /** @description Card brand. Can be `interac`, `mastercard` or `visa`. */
      readonly brand?: string | null;
      /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay. */
      readonly cardholder_name?: string | null;
      /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
      readonly country?: string | null;
      /** @description Authorization response cryptogram. */
      readonly emv_auth_data?: string | null;
      /** @description Two-digit number representing the card's expiration month. */
      readonly exp_month: number;
      /** @description Four-digit number representing the card's expiration year. */
      readonly exp_year: number;
      /**
       * @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
       *
       * *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*
       */
      readonly fingerprint?: string | null;
      /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
      readonly funding?: string | null;
      /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
      readonly generated_card?: string | null;
      /** @description The last four digits of the card. */
      readonly last4?: string | null;
      /** @description Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
      readonly network?: string | null;
      /** @description EMV tag 5F2D. Preferred languages specified by the integrated circuit chip. */
      readonly preferred_locales?: readonly string[] | null;
      /**
       * @description How card details were read in this transaction.
       * @enum {string|null}
       */
      readonly read_method?:
        | (
            | "contact_emv"
            | "contactless_emv"
            | "contactless_magstripe_mode"
            | "magnetic_stripe_fallback"
            | "magnetic_stripe_track2"
          )
        | null;
      /** @description A collection of fields required to be displayed on receipts. Only required for EMV transactions. */
      readonly receipt?: components["schemas"]["payment_method_details_interac_present_receipt"] | null;
    };
    /** payment_method_details_interac_present_receipt */
    readonly payment_method_details_interac_present_receipt: {
      /**
       * @description The type of account being debited or credited
       * @enum {string}
       */
      readonly account_type?: "checking" | "savings" | "unknown";
      /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
      readonly application_cryptogram?: string | null;
      /** @description Mnenomic of the Application Identifier. */
      readonly application_preferred_name?: string | null;
      /** @description Identifier for this transaction. */
      readonly authorization_code?: string | null;
      /** @description EMV tag 8A. A code returned by the card issuer. */
      readonly authorization_response_code?: string | null;
      /** @description How the cardholder verified ownership of the card. */
      readonly cardholder_verification_method?: string | null;
      /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
      readonly dedicated_file_name?: string | null;
      /** @description The outcome of a series of EMV functions performed by the card reader. */
      readonly terminal_verification_results?: string | null;
      /** @description An indication of various EMV functions performed during the transaction. */
      readonly transaction_status_information?: string | null;
    };
    /** payment_method_details_klarna */
    readonly payment_method_details_klarna: {
      /**
       * @description The Klarna payment method used for this transaction.
       * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
       */
      readonly payment_method_category?: string | null;
      /**
       * @description Preferred language of the Klarna authorization page that the customer is redirected to.
       * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, or `en-FR`
       */
      readonly preferred_locale?: string | null;
    };
    /** payment_method_details_multibanco */
    readonly payment_method_details_multibanco: {
      /** @description Entity number associated with this Multibanco payment. */
      readonly entity?: string | null;
      /** @description Reference number associated with this Multibanco payment. */
      readonly reference?: string | null;
    };
    /** payment_method_details_oxxo */
    readonly payment_method_details_oxxo: {
      /** @description OXXO reference number */
      readonly number?: string | null;
    };
    /** payment_method_details_p24 */
    readonly payment_method_details_p24: {
      /**
       * @description The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
       * @enum {string|null}
       */
      readonly bank?:
        | (
            | "alior_bank"
            | "bank_millennium"
            | "bank_nowy_bfg_sa"
            | "bank_pekao_sa"
            | "banki_spbdzielcze"
            | "blik"
            | "bnp_paribas"
            | "boz"
            | "citi_handlowy"
            | "credit_agricole"
            | "envelobank"
            | "etransfer_pocztowy24"
            | "getin_bank"
            | "ideabank"
            | "ing"
            | "inteligo"
            | "mbank_mtransfer"
            | "nest_przelew"
            | "noble_pay"
            | "pbac_z_ipko"
            | "plus_bank"
            | "santander_przelew24"
            | "tmobile_usbugi_bankowe"
            | "toyota_bank"
            | "volkswagen_bank"
          )
        | null;
      /** @description Unique reference for this Przelewy24 payment. */
      readonly reference?: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Przelewy24 directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       * Przelewy24 rarely provides this information so the attribute is usually empty.
       */
      readonly verified_name?: string | null;
    };
    /** payment_method_details_sepa_debit */
    readonly payment_method_details_sepa_debit: {
      /** @description Bank code of bank associated with the bank account. */
      readonly bank_code?: string | null;
      /** @description Branch code of bank associated with the bank account. */
      readonly branch_code?: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      readonly country?: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Last four characters of the IBAN. */
      readonly last4?: string | null;
      /** @description ID of the mandate used to make this payment. */
      readonly mandate?: string | null;
    };
    /** payment_method_details_sofort */
    readonly payment_method_details_sofort: {
      /** @description Bank code of bank associated with the bank account. */
      readonly bank_code?: string | null;
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      readonly bic?: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      readonly country?: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      readonly generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge. */
      readonly generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      readonly iban_last4?: string | null;
      /**
       * @description Preferred language of the SOFORT authorization page that the customer is redirected to.
       * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
       * @enum {string|null}
       */
      readonly preferred_language?: ("de" | "en" | "es" | "fr" | "it" | "nl" | "pl") | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by SOFORT directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      readonly verified_name?: string | null;
    };
    /** payment_method_details_stripe_account */
    readonly payment_method_details_stripe_account: { readonly [key: string]: unknown };
    /** payment_method_details_wechat */
    readonly payment_method_details_wechat: { readonly [key: string]: unknown };
    /** payment_method_details_wechat_pay */
    readonly payment_method_details_wechat_pay: {
      /** @description Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Transaction ID of this particular WeChat Pay transaction. */
      readonly transaction_id?: string | null;
    };
    /** payment_method_eps */
    readonly payment_method_eps: {
      /**
       * @description The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
       * @enum {string|null}
       */
      readonly bank?:
        | (
            | "arzte_und_apotheker_bank"
            | "austrian_anadi_bank_ag"
            | "bank_austria"
            | "bankhaus_carl_spangler"
            | "bankhaus_schelhammer_und_schattera_ag"
            | "bawag_psk_ag"
            | "bks_bank_ag"
            | "brull_kallmus_bank_ag"
            | "btv_vier_lander_bank"
            | "capital_bank_grawe_gruppe_ag"
            | "dolomitenbank"
            | "easybank_ag"
            | "erste_bank_und_sparkassen"
            | "hypo_alpeadriabank_international_ag"
            | "hypo_bank_burgenland_aktiengesellschaft"
            | "hypo_noe_lb_fur_niederosterreich_u_wien"
            | "hypo_oberosterreich_salzburg_steiermark"
            | "hypo_tirol_bank_ag"
            | "hypo_vorarlberg_bank_ag"
            | "marchfelder_bank"
            | "oberbank_ag"
            | "raiffeisen_bankengruppe_osterreich"
            | "schoellerbank_ag"
            | "sparda_bank_wien"
            | "volksbank_gruppe"
            | "volkskreditbank_ag"
            | "vr_bank_braunau"
          )
        | null;
    };
    /** payment_method_fpx */
    readonly payment_method_fpx: {
      /**
       * @description The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
       * @enum {string}
       */
      readonly bank:
        | "affin_bank"
        | "agrobank"
        | "alliance_bank"
        | "ambank"
        | "bank_islam"
        | "bank_muamalat"
        | "bank_rakyat"
        | "bsn"
        | "cimb"
        | "deutsche_bank"
        | "hong_leong_bank"
        | "hsbc"
        | "kfh"
        | "maybank2e"
        | "maybank2u"
        | "ocbc"
        | "pb_enterprise"
        | "public_bank"
        | "rhb"
        | "standard_chartered"
        | "uob";
    };
    /** payment_method_giropay */
    readonly payment_method_giropay: { readonly [key: string]: unknown };
    /** payment_method_grabpay */
    readonly payment_method_grabpay: { readonly [key: string]: unknown };
    /** payment_method_ideal */
    readonly payment_method_ideal: {
      /**
       * @description The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
       * @enum {string|null}
       */
      readonly bank?:
        | (
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot"
          )
        | null;
      /**
       * @description The Bank Identifier Code of the customer's bank, if the bank was provided.
       * @enum {string|null}
       */
      readonly bic?:
        | (
            | "ABNANL2A"
            | "ASNBNL21"
            | "BUNQNL2A"
            | "FVLBNL22"
            | "HANDNL2A"
            | "INGBNL2A"
            | "KNABNL2H"
            | "MOYONL21"
            | "RABONL2U"
            | "RBRBNL21"
            | "REVOLT21"
            | "SNSBNL2A"
            | "TRIONL2U"
          )
        | null;
    };
    /** payment_method_interac_present */
    readonly payment_method_interac_present: { readonly [key: string]: unknown };
    /** payment_method_klarna */
    readonly payment_method_klarna: {
      /** @description The customer's date of birth, if provided. */
      readonly dob?: components["schemas"]["payment_flows_private_payment_methods_klarna_dob"] | null;
    };
    /** payment_method_options_afterpay_clearpay */
    readonly payment_method_options_afterpay_clearpay: {
      /**
       * @description Order identifier shown to the merchant in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about
       * the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.
       */
      readonly reference?: string | null;
    };
    /** payment_method_options_alipay */
    readonly payment_method_options_alipay: { readonly [key: string]: unknown };
    /** payment_method_options_bacs_debit */
    readonly payment_method_options_bacs_debit: { readonly [key: string]: unknown };
    /** payment_method_options_bancontact */
    readonly payment_method_options_bancontact: {
      /**
       * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
       * @enum {string}
       */
      readonly preferred_language: "de" | "en" | "fr" | "nl";
    };
    /** payment_method_options_boleto */
    readonly payment_method_options_boleto: {
      /** @description The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time. */
      readonly expires_after_days: number;
    };
    /** payment_method_options_card_installments */
    readonly payment_method_options_card_installments: {
      /** @description Installment plans that may be selected for this PaymentIntent. */
      readonly available_plans?:
        | readonly components["schemas"]["payment_method_details_card_installments_plan"][]
        | null;
      /** @description Whether Installments are enabled for this PaymentIntent. */
      readonly enabled: boolean;
      /** @description Installment plan selected for this PaymentIntent. */
      readonly plan?: components["schemas"]["payment_method_details_card_installments_plan"] | null;
    };
    /** payment_method_options_card_present */
    readonly payment_method_options_card_present: { readonly [key: string]: unknown };
    /** payment_method_options_fpx */
    readonly payment_method_options_fpx: { readonly [key: string]: unknown };
    /** payment_method_options_giropay */
    readonly payment_method_options_giropay: { readonly [key: string]: unknown };
    /** payment_method_options_grabpay */
    readonly payment_method_options_grabpay: { readonly [key: string]: unknown };
    /** payment_method_options_ideal */
    readonly payment_method_options_ideal: { readonly [key: string]: unknown };
    /** payment_method_options_interac_present */
    readonly payment_method_options_interac_present: { readonly [key: string]: unknown };
    /** payment_method_options_klarna */
    readonly payment_method_options_klarna: {
      /** @description Preferred locale of the Klarna checkout page that the customer is redirected to. */
      readonly preferred_locale?: string | null;
    };
    /** payment_method_options_oxxo */
    readonly payment_method_options_oxxo: {
      /** @description The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time. */
      readonly expires_after_days: number;
    };
    /** payment_method_options_p24 */
    readonly payment_method_options_p24: { readonly [key: string]: unknown };
    /** payment_method_options_sofort */
    readonly payment_method_options_sofort: {
      /**
       * @description Preferred language of the SOFORT authorization page that the customer is redirected to.
       * @enum {string|null}
       */
      readonly preferred_language?: ("de" | "en" | "es" | "fr" | "it" | "nl" | "pl") | null;
    };
    /** payment_method_options_wechat_pay */
    readonly payment_method_options_wechat_pay: {
      /** @description The app ID registered with WeChat Pay. Only required when client is ios or android. */
      readonly app_id?: string | null;
      /**
       * @description The client type that the end customer will pay from
       * @enum {string|null}
       */
      readonly client?: ("android" | "ios" | "web") | null;
    };
    /** payment_method_oxxo */
    readonly payment_method_oxxo: { readonly [key: string]: unknown };
    /** payment_method_p24 */
    readonly payment_method_p24: {
      /**
       * @description The customer's bank, if provided.
       * @enum {string|null}
       */
      readonly bank?:
        | (
            | "alior_bank"
            | "bank_millennium"
            | "bank_nowy_bfg_sa"
            | "bank_pekao_sa"
            | "banki_spbdzielcze"
            | "blik"
            | "bnp_paribas"
            | "boz"
            | "citi_handlowy"
            | "credit_agricole"
            | "envelobank"
            | "etransfer_pocztowy24"
            | "getin_bank"
            | "ideabank"
            | "ing"
            | "inteligo"
            | "mbank_mtransfer"
            | "nest_przelew"
            | "noble_pay"
            | "pbac_z_ipko"
            | "plus_bank"
            | "santander_przelew24"
            | "tmobile_usbugi_bankowe"
            | "toyota_bank"
            | "volkswagen_bank"
          )
        | null;
    };
    /** payment_method_sepa_debit */
    readonly payment_method_sepa_debit: {
      /** @description Bank code of bank associated with the bank account. */
      readonly bank_code?: string | null;
      /** @description Branch code of bank associated with the bank account. */
      readonly branch_code?: string | null;
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      readonly country?: string | null;
      /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
      readonly fingerprint?: string | null;
      /** @description Information about the object that generated this PaymentMethod. */
      readonly generated_from?: components["schemas"]["sepa_debit_generated_from"] | null;
      /** @description Last four characters of the IBAN. */
      readonly last4?: string | null;
    };
    /** payment_method_sofort */
    readonly payment_method_sofort: {
      /** @description Two-letter ISO code representing the country the bank account is located in. */
      readonly country?: string | null;
    };
    /** payment_method_wechat_pay */
    readonly payment_method_wechat_pay: { readonly [key: string]: unknown };
    /** PaymentPagesCheckoutSessionAfterExpiration */
    readonly payment_pages_checkout_session_after_expiration: {
      /** @description When set, configuration used to recover the Checkout Session on expiry. */
      readonly recovery?: components["schemas"]["payment_pages_checkout_session_after_expiration_recovery"] | null;
    };
    /** PaymentPagesCheckoutSessionAfterExpirationRecovery */
    readonly payment_pages_checkout_session_after_expiration_recovery: {
      /** @description Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false` */
      readonly allow_promotion_codes: boolean;
      /**
       * @description If `true`, a recovery url will be generated to recover this Checkout Session if it
       * expires before a transaction is completed. It will be attached to the
       * Checkout Session object upon expiration.
       */
      readonly enabled: boolean;
      /**
       * Format: unix-time
       * @description The timestamp at which the recovery URL will expire.
       */
      readonly expires_at?: number | null;
      /** @description URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session */
      readonly url?: string | null;
    };
    /** PaymentPagesCheckoutSessionAutomaticTax */
    readonly payment_pages_checkout_session_automatic_tax: {
      /** @description Indicates whether automatic tax is enabled for the session */
      readonly enabled: boolean;
      /**
       * @description The status of the most recent automated tax calculation for this session.
       * @enum {string|null}
       */
      readonly status?: ("complete" | "failed" | "requires_location_inputs") | null;
    };
    /** PaymentPagesCheckoutSessionConsent */
    readonly payment_pages_checkout_session_consent: {
      /**
       * @description If `opt_in`, the customer consents to receiving promotional communications
       * from the merchant about this Checkout Session.
       * @enum {string|null}
       */
      readonly promotions?: ("opt_in" | "opt_out") | null;
    };
    /** PaymentPagesCheckoutSessionConsentCollection */
    readonly payment_pages_checkout_session_consent_collection: {
      /**
       * @description If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
       * Session will determine whether to display an option to opt into promotional communication
       * from the merchant depending on the customer's locale. Only available to US merchants.
       * @enum {string|null}
       */
      readonly promotions?: "auto" | null;
    };
    /** PaymentPagesCheckoutSessionCustomerDetails */
    readonly payment_pages_checkout_session_customer_details: {
      /**
       * @description The email associated with the Customer, if one exists, on the Checkout Session at the time of checkout or at time of session expiry.
       * Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
       */
      readonly email?: string | null;
      /** @description The customer's phone number at the time of checkout */
      readonly phone?: string | null;
      /**
       * @description The customer’s tax exempt status at time of checkout.
       * @enum {string|null}
       */
      readonly tax_exempt?: ("exempt" | "none" | "reverse") | null;
      /** @description The customer’s tax IDs at time of checkout. */
      readonly tax_ids?: readonly components["schemas"]["payment_pages_checkout_session_tax_id"][] | null;
    };
    /** PaymentPagesCheckoutSessionPhoneNumberCollection */
    readonly payment_pages_checkout_session_phone_number_collection: {
      /** @description Indicates whether phone number collection is enabled for the session */
      readonly enabled: boolean;
    };
    /** PaymentPagesCheckoutSessionShippingAddressCollection */
    readonly payment_pages_checkout_session_shipping_address_collection: {
      /**
       * @description An array of two-letter ISO country codes representing which countries Checkout should provide as options for
       * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
       */
      readonly allowed_countries: readonly (
        | "AC"
        | "AD"
        | "AE"
        | "AF"
        | "AG"
        | "AI"
        | "AL"
        | "AM"
        | "AO"
        | "AQ"
        | "AR"
        | "AT"
        | "AU"
        | "AW"
        | "AX"
        | "AZ"
        | "BA"
        | "BB"
        | "BD"
        | "BE"
        | "BF"
        | "BG"
        | "BH"
        | "BI"
        | "BJ"
        | "BL"
        | "BM"
        | "BN"
        | "BO"
        | "BQ"
        | "BR"
        | "BS"
        | "BT"
        | "BV"
        | "BW"
        | "BY"
        | "BZ"
        | "CA"
        | "CD"
        | "CF"
        | "CG"
        | "CH"
        | "CI"
        | "CK"
        | "CL"
        | "CM"
        | "CN"
        | "CO"
        | "CR"
        | "CV"
        | "CW"
        | "CY"
        | "CZ"
        | "DE"
        | "DJ"
        | "DK"
        | "DM"
        | "DO"
        | "DZ"
        | "EC"
        | "EE"
        | "EG"
        | "EH"
        | "ER"
        | "ES"
        | "ET"
        | "FI"
        | "FJ"
        | "FK"
        | "FO"
        | "FR"
        | "GA"
        | "GB"
        | "GD"
        | "GE"
        | "GF"
        | "GG"
        | "GH"
        | "GI"
        | "GL"
        | "GM"
        | "GN"
        | "GP"
        | "GQ"
        | "GR"
        | "GS"
        | "GT"
        | "GU"
        | "GW"
        | "GY"
        | "HK"
        | "HN"
        | "HR"
        | "HT"
        | "HU"
        | "ID"
        | "IE"
        | "IL"
        | "IM"
        | "IN"
        | "IO"
        | "IQ"
        | "IS"
        | "IT"
        | "JE"
        | "JM"
        | "JO"
        | "JP"
        | "KE"
        | "KG"
        | "KH"
        | "KI"
        | "KM"
        | "KN"
        | "KR"
        | "KW"
        | "KY"
        | "KZ"
        | "LA"
        | "LB"
        | "LC"
        | "LI"
        | "LK"
        | "LR"
        | "LS"
        | "LT"
        | "LU"
        | "LV"
        | "LY"
        | "MA"
        | "MC"
        | "MD"
        | "ME"
        | "MF"
        | "MG"
        | "MK"
        | "ML"
        | "MM"
        | "MN"
        | "MO"
        | "MQ"
        | "MR"
        | "MS"
        | "MT"
        | "MU"
        | "MV"
        | "MW"
        | "MX"
        | "MY"
        | "MZ"
        | "NA"
        | "NC"
        | "NE"
        | "NG"
        | "NI"
        | "NL"
        | "NO"
        | "NP"
        | "NR"
        | "NU"
        | "NZ"
        | "OM"
        | "PA"
        | "PE"
        | "PF"
        | "PG"
        | "PH"
        | "PK"
        | "PL"
        | "PM"
        | "PN"
        | "PR"
        | "PS"
        | "PT"
        | "PY"
        | "QA"
        | "RE"
        | "RO"
        | "RS"
        | "RU"
        | "RW"
        | "SA"
        | "SB"
        | "SC"
        | "SE"
        | "SG"
        | "SH"
        | "SI"
        | "SJ"
        | "SK"
        | "SL"
        | "SM"
        | "SN"
        | "SO"
        | "SR"
        | "SS"
        | "ST"
        | "SV"
        | "SX"
        | "SZ"
        | "TA"
        | "TC"
        | "TD"
        | "TF"
        | "TG"
        | "TH"
        | "TJ"
        | "TK"
        | "TL"
        | "TM"
        | "TN"
        | "TO"
        | "TR"
        | "TT"
        | "TV"
        | "TW"
        | "TZ"
        | "UA"
        | "UG"
        | "US"
        | "UY"
        | "UZ"
        | "VA"
        | "VC"
        | "VE"
        | "VG"
        | "VN"
        | "VU"
        | "WF"
        | "WS"
        | "XK"
        | "YE"
        | "YT"
        | "ZA"
        | "ZM"
        | "ZW"
        | "ZZ"
      )[];
    };
    /** PaymentPagesCheckoutSessionShippingOption */
    readonly payment_pages_checkout_session_shipping_option: {
      /** @description A non-negative integer in cents representing how much to charge. */
      readonly shipping_amount: number;
      /** @description The shipping rate. */
      readonly shipping_rate: string | components["schemas"]["shipping_rate"];
    };
    /** PaymentPagesCheckoutSessionTaxID */
    readonly payment_pages_checkout_session_tax_id: {
      /**
       * @description The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, or `unknown`
       * @enum {string}
       */
      readonly type:
        | "ae_trn"
        | "au_abn"
        | "au_arn"
        | "br_cnpj"
        | "br_cpf"
        | "ca_bn"
        | "ca_gst_hst"
        | "ca_pst_bc"
        | "ca_pst_mb"
        | "ca_pst_sk"
        | "ca_qst"
        | "ch_vat"
        | "cl_tin"
        | "es_cif"
        | "eu_vat"
        | "gb_vat"
        | "ge_vat"
        | "hk_br"
        | "id_npwp"
        | "il_vat"
        | "in_gst"
        | "is_vat"
        | "jp_cn"
        | "jp_rn"
        | "kr_brn"
        | "li_uid"
        | "mx_rfc"
        | "my_frp"
        | "my_itn"
        | "my_sst"
        | "no_vat"
        | "nz_gst"
        | "ru_inn"
        | "ru_kpp"
        | "sa_vat"
        | "sg_gst"
        | "sg_uen"
        | "th_vat"
        | "tw_vat"
        | "ua_vat"
        | "unknown"
        | "us_ein"
        | "za_vat";
      /** @description The value of the tax ID. */
      readonly value?: string | null;
    };
    /** PaymentPagesCheckoutSessionTaxIDCollection */
    readonly payment_pages_checkout_session_tax_id_collection: {
      /** @description Indicates whether tax ID collection is enabled for the session */
      readonly enabled: boolean;
    };
    /** PaymentPagesCheckoutSessionTotalDetails */
    readonly payment_pages_checkout_session_total_details: {
      /** @description This is the sum of all the line item discounts. */
      readonly amount_discount: number;
      /** @description This is the sum of all the line item shipping amounts. */
      readonly amount_shipping?: number | null;
      /** @description This is the sum of all the line item tax amounts. */
      readonly amount_tax: number;
      readonly breakdown?: components["schemas"]["payment_pages_checkout_session_total_details_resource_breakdown"];
    };
    /** PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown */
    readonly payment_pages_checkout_session_total_details_resource_breakdown: {
      /** @description The aggregated line item discounts. */
      readonly discounts: readonly components["schemas"]["line_items_discount_amount"][];
      /** @description The aggregated line item tax amounts by rate. */
      readonly taxes: readonly components["schemas"]["line_items_tax_amount"][];
    };
    /** Polymorphic */
    readonly payment_source:
      | components["schemas"]["account"]
      | components["schemas"]["alipay_account"]
      | components["schemas"]["bank_account"]
      | components["schemas"]["bitcoin_receiver"]
      | components["schemas"]["card"]
      | components["schemas"]["source"];
    /**
     * Payout
     * @description A `Payout` object is created when you receive funds from Stripe, or when you
     * initiate a payout to either a bank account or debit card of a [connected
     * Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
     * as well as list all payouts. Payouts are made on [varying
     * schedules](/docs/connect/manage-payout-schedule), depending on your country and
     * industry.
     *
     * Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
     */
    readonly payout: {
      /** @description Amount (in %s) to be transferred to your bank account or debit card. */
      readonly amount: number;
      /**
       * Format: unix-time
       * @description Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.
       */
      readonly arrival_date: number;
      /** @description Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
      readonly automatic: boolean;
      /** @description ID of the balance transaction that describes the impact of this payout on your account balance. */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description ID of the bank account or card the payout was sent to. */
      readonly destination?:
        | (
            | string
            | components["schemas"]["bank_account"]
            | components["schemas"]["card"]
            | components["schemas"]["deleted_bank_account"]
            | components["schemas"]["deleted_card"]
          )
        | null;
      /** @description If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance. */
      readonly failure_balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /** @description Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. */
      readonly failure_code?: string | null;
      /** @description Message to user further explaining reason for payout failure if available. */
      readonly failure_message?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /** @description The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.) */
      readonly method: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "payout";
      /** @description If the payout reverses another, this is the ID of the original payout. */
      readonly original_payout?: (string | components["schemas"]["payout"]) | null;
      /** @description If the payout was reversed, this is the ID of the payout that reverses this payout. */
      readonly reversed_by?: (string | components["schemas"]["payout"]) | null;
      /** @description The source balance this payout came from. One of `card`, `fpx`, or `bank_account`. */
      readonly source_type: string;
      /** @description Extra information about a payout to be displayed on the user's bank statement. */
      readonly statement_descriptor?: string | null;
      /** @description Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`. */
      readonly status: string;
      /**
       * @description Can be `bank_account` or `card`.
       * @enum {string}
       */
      readonly type: "bank_account" | "card";
    };
    /** Period */
    readonly period: {
      /**
       * Format: unix-time
       * @description The end date of this usage period. All usage up to and including this point in time is included.
       */
      readonly end?: number | null;
      /**
       * Format: unix-time
       * @description The start date of this usage period. All usage after this point in time is included.
       */
      readonly start?: number | null;
    };
    /**
     * Person
     * @description This is an object representing a person associated with a Stripe account.
     *
     * A platform cannot access a Standard or Express account's persons after the account starts onboarding, such as after generating an account link for the account.
     * See the [Standard onboarding](https://stripe.com/docs/connect/standard-accounts) or [Express onboarding documentation](https://stripe.com/docs/connect/express-accounts) for information about platform pre-filling and account onboarding steps.
     *
     * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
     */
    readonly person: {
      /** @description The account the person is associated with. */
      readonly account: string;
      readonly address?: components["schemas"]["address"];
      readonly address_kana?: components["schemas"]["legal_entity_japan_address"] | null;
      readonly address_kanji?: components["schemas"]["legal_entity_japan_address"] | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      readonly dob?: components["schemas"]["legal_entity_dob"];
      /** @description The person's email address. */
      readonly email?: string | null;
      /** @description The person's first name. */
      readonly first_name?: string | null;
      /** @description The Kana variation of the person's first name (Japan only). */
      readonly first_name_kana?: string | null;
      /** @description The Kanji variation of the person's first name (Japan only). */
      readonly first_name_kanji?: string | null;
      /** @description A list of alternate names or aliases that the person is known by. */
      readonly full_name_aliases?: readonly string[];
      readonly future_requirements?: components["schemas"]["person_future_requirements"] | null;
      /** @description The person's gender (International regulations require either "male" or "female"). */
      readonly gender?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Whether the person's `id_number` was provided. */
      readonly id_number_provided?: boolean;
      /** @description The person's last name. */
      readonly last_name?: string | null;
      /** @description The Kana variation of the person's last name (Japan only). */
      readonly last_name_kana?: string | null;
      /** @description The Kanji variation of the person's last name (Japan only). */
      readonly last_name_kanji?: string | null;
      /** @description The person's maiden name. */
      readonly maiden_name?: string | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string };
      /** @description The country where the person is a national. */
      readonly nationality?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "person";
      /** @description The person's phone number. */
      readonly phone?: string | null;
      /**
       * @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
       * @enum {string}
       */
      readonly political_exposure?: "existing" | "none";
      readonly relationship?: components["schemas"]["person_relationship"];
      readonly requirements?: components["schemas"]["person_requirements"] | null;
      /** @description Whether the last four digits of the person's Social Security number have been provided (U.S. only). */
      readonly ssn_last_4_provided?: boolean;
      readonly verification?: components["schemas"]["legal_entity_person_verification"];
    };
    /** PersonFutureRequirements */
    readonly person_future_requirements: {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      readonly alternatives?: readonly components["schemas"]["account_requirements_alternative"][] | null;
      /** @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition. */
      readonly currently_due: readonly string[];
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      readonly errors: readonly components["schemas"]["account_requirements_error"][];
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set. */
      readonly eventually_due: readonly string[];
      /** @description Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`. */
      readonly past_due: readonly string[];
      /** @description Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. */
      readonly pending_verification: readonly string[];
    };
    /** PersonRelationship */
    readonly person_relationship: {
      /** @description Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
      readonly director?: boolean | null;
      /** @description Whether the person has significant responsibility to control, manage, or direct the organization. */
      readonly executive?: boolean | null;
      /** @description Whether the person is an owner of the account’s legal entity. */
      readonly owner?: boolean | null;
      /** @description The percent owned by the person of the account's legal entity. */
      readonly percent_ownership?: number | null;
      /** @description Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
      readonly representative?: boolean | null;
      /** @description The person's title (e.g., CEO, Support Engineer). */
      readonly title?: string | null;
    };
    /** PersonRequirements */
    readonly person_requirements: {
      /** @description Fields that are due and can be satisfied by providing the corresponding alternative fields instead. */
      readonly alternatives?: readonly components["schemas"]["account_requirements_alternative"][] | null;
      /** @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
      readonly currently_due: readonly string[];
      /** @description Fields that are `currently_due` and need to be collected again because validation or verification failed. */
      readonly errors: readonly components["schemas"]["account_requirements_error"][];
      /** @description Fields that need to be collected assuming all volume thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set. */
      readonly eventually_due: readonly string[];
      /** @description Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account. */
      readonly past_due: readonly string[];
      /** @description Fields that may become required depending on the results of verification or review. Will be an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. */
      readonly pending_verification: readonly string[];
    };
    /**
     * Plan
     * @description You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
     *
     * Plans define the base price, currency, and billing cycle for recurring purchases of products.
     * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
     *
     * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
     *
     * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
     */
    readonly plan: {
      /** @description Whether the plan can be used for new purchases. */
      readonly active: boolean;
      /**
       * @description Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
       * @enum {string|null}
       */
      readonly aggregate_usage?: ("last_during_period" | "last_ever" | "max" | "sum") | null;
      /** @description The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
      readonly amount?: number | null;
      /**
       * Format: decimal
       * @description The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
       */
      readonly amount_decimal?: string | null;
      /**
       * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
       * @enum {string}
       */
      readonly billing_scheme: "per_unit" | "tiered";
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
       * @enum {string}
       */
      readonly interval: "day" | "month" | "week" | "year";
      /** @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
      readonly interval_count: number;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /** @description A brief description of the plan, hidden from customers. */
      readonly nickname?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "plan";
      /** @description The product whose pricing this plan determines. */
      readonly product?: (string | components["schemas"]["product"] | components["schemas"]["deleted_product"]) | null;
      /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      readonly tiers?: readonly components["schemas"]["plan_tier"][];
      /**
       * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
       * @enum {string|null}
       */
      readonly tiers_mode?: ("graduated" | "volume") | null;
      /** @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
      readonly transform_usage?: components["schemas"]["transform_usage"] | null;
      /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
      readonly trial_period_days?: number | null;
      /**
       * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
       * @enum {string}
       */
      readonly usage_type: "licensed" | "metered";
    };
    /** PlanTier */
    readonly plan_tier: {
      /** @description Price for the entire tier. */
      readonly flat_amount?: number | null;
      /**
       * Format: decimal
       * @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
       */
      readonly flat_amount_decimal?: string | null;
      /** @description Per unit price for units relevant to the tier. */
      readonly unit_amount?: number | null;
      /**
       * Format: decimal
       * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
       */
      readonly unit_amount_decimal?: string | null;
      /** @description Up to and including to this quantity will be contained in the tier. */
      readonly up_to?: number | null;
    };
    /** PlatformTax */
    readonly platform_tax_fee: {
      /** @description The Connected account that incurred this charge. */
      readonly account: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "platform_tax_fee";
      /** @description The payment object that caused this tax to be inflicted. */
      readonly source_transaction: string;
      /** @description The type of tax (VAT). */
      readonly type: string;
    };
    /** PortalBusinessProfile */
    readonly portal_business_profile: {
      /** @description The messaging shown to customers in the portal. */
      readonly headline?: string | null;
      /** @description A link to the business’s publicly available privacy policy. */
      readonly privacy_policy_url: string;
      /** @description A link to the business’s publicly available terms of service. */
      readonly terms_of_service_url: string;
    };
    /** PortalCustomerUpdate */
    readonly portal_customer_update: {
      /** @description The types of customer updates that are supported. When empty, customers are not updateable. */
      readonly allowed_updates: readonly ("address" | "email" | "phone" | "shipping" | "tax_id")[];
      /** @description Whether the feature is enabled. */
      readonly enabled: boolean;
    };
    /** PortalFeatures */
    readonly portal_features: {
      readonly customer_update: components["schemas"]["portal_customer_update"];
      readonly invoice_history: components["schemas"]["portal_invoice_list"];
      readonly payment_method_update: components["schemas"]["portal_payment_method_update"];
      readonly subscription_cancel: components["schemas"]["portal_subscription_cancel"];
      readonly subscription_pause: components["schemas"]["portal_subscription_pause"];
      readonly subscription_update: components["schemas"]["portal_subscription_update"];
    };
    /** PortalInvoiceList */
    readonly portal_invoice_list: {
      /** @description Whether the feature is enabled. */
      readonly enabled: boolean;
    };
    /** PortalPaymentMethodUpdate */
    readonly portal_payment_method_update: {
      /** @description Whether the feature is enabled. */
      readonly enabled: boolean;
    };
    /** PortalSubscriptionCancel */
    readonly portal_subscription_cancel: {
      readonly cancellation_reason: components["schemas"]["portal_subscription_cancellation_reason"];
      /** @description Whether the feature is enabled. */
      readonly enabled: boolean;
      /**
       * @description Whether to cancel subscriptions immediately or at the end of the billing period.
       * @enum {string}
       */
      readonly mode: "at_period_end" | "immediately";
      /**
       * @description Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
       * @enum {string}
       */
      readonly proration_behavior: "always_invoice" | "create_prorations" | "none";
    };
    /** PortalSubscriptionCancellationReason */
    readonly portal_subscription_cancellation_reason: {
      /** @description Whether the feature is enabled. */
      readonly enabled: boolean;
      /** @description Which cancellation reasons will be given as options to the customer. */
      readonly options: readonly (
        | "customer_service"
        | "low_quality"
        | "missing_features"
        | "other"
        | "switched_service"
        | "too_complex"
        | "too_expensive"
        | "unused"
      )[];
    };
    /** PortalSubscriptionPause */
    readonly portal_subscription_pause: {
      /** @description Whether the feature is enabled. */
      readonly enabled: boolean;
    };
    /** PortalSubscriptionUpdate */
    readonly portal_subscription_update: {
      /** @description The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable. */
      readonly default_allowed_updates: readonly ("price" | "promotion_code" | "quantity")[];
      /** @description Whether the feature is enabled. */
      readonly enabled: boolean;
      /** @description The list of products that support subscription updates. */
      readonly products?: readonly components["schemas"]["portal_subscription_update_product"][] | null;
      /**
       * @description Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`.
       * @enum {string}
       */
      readonly proration_behavior: "always_invoice" | "create_prorations" | "none";
    };
    /** PortalSubscriptionUpdateProduct */
    readonly portal_subscription_update_product: {
      /** @description The list of price IDs which, when subscribed to, a subscription can be updated. */
      readonly prices: readonly string[];
      /** @description The product ID. */
      readonly product: string;
    };
    /**
     * Price
     * @description Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
     * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
     *
     * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
     *
     * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
     */
    readonly price: {
      /** @description Whether the price can be used for new purchases. */
      readonly active: boolean;
      /**
       * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
       * @enum {string}
       */
      readonly billing_scheme: "per_unit" | "tiered";
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
      readonly lookup_key?: string | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description A brief description of the price, hidden from customers. */
      readonly nickname?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "price";
      /** @description The ID of the product this price is associated with. */
      readonly product: string | components["schemas"]["product"] | components["schemas"]["deleted_product"];
      /** @description The recurring components of a price such as `interval` and `usage_type`. */
      readonly recurring?: components["schemas"]["recurring"] | null;
      /**
       * @description Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
       * @enum {string|null}
       */
      readonly tax_behavior?: ("exclusive" | "inclusive" | "unspecified") | null;
      /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
      readonly tiers?: readonly components["schemas"]["price_tier"][];
      /**
       * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
       * @enum {string|null}
       */
      readonly tiers_mode?: ("graduated" | "volume") | null;
      /** @description Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`. */
      readonly transform_quantity?: components["schemas"]["transform_quantity"] | null;
      /**
       * @description One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
       * @enum {string}
       */
      readonly type: "one_time" | "recurring";
      /** @description The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`. */
      readonly unit_amount?: number | null;
      /**
       * Format: decimal
       * @description The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
       */
      readonly unit_amount_decimal?: string | null;
    };
    /** PriceTier */
    readonly price_tier: {
      /** @description Price for the entire tier. */
      readonly flat_amount?: number | null;
      /**
       * Format: decimal
       * @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
       */
      readonly flat_amount_decimal?: string | null;
      /** @description Per unit price for units relevant to the tier. */
      readonly unit_amount?: number | null;
      /**
       * Format: decimal
       * @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
       */
      readonly unit_amount_decimal?: string | null;
      /** @description Up to and including to this quantity will be contained in the tier. */
      readonly up_to?: number | null;
    };
    /**
     * Product
     * @description Products describe the specific goods or services you offer to your customers.
     * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
     * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
     *
     * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
     * [share a Payment Link](https://stripe.com/docs/payments/payment-links/overview),
     * [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
     * and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
     */
    readonly product: {
      /** @description Whether the product is currently available for purchase. */
      readonly active: boolean;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
      readonly description?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
      readonly images: readonly string[];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
      readonly name: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "product";
      /** @description The dimensions of this product for shipping purposes. */
      readonly package_dimensions?: components["schemas"]["package_dimensions"] | null;
      /** @description Whether this product is shipped (i.e., physical goods). */
      readonly shippable?: boolean | null;
      /** @description Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. */
      readonly statement_descriptor?: string | null;
      /** @description A [tax code](https://stripe.com/docs/tax/tax-codes) ID. */
      readonly tax_code?: (string | components["schemas"]["tax_code"]) | null;
      /** @description A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
      readonly unit_label?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
       */
      readonly updated: number;
      /** @description A URL of a publicly-accessible webpage for this product. */
      readonly url?: string | null;
    };
    /**
     * PromotionCode
     * @description A Promotion Code represents a customer-redeemable code for a coupon. It can be used to
     * create multiple codes for a single coupon.
     */
    readonly promotion_code: {
      /** @description Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid. */
      readonly active: boolean;
      /** @description The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. */
      readonly code: string;
      readonly coupon: components["schemas"]["coupon"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The customer that this promotion code can be used by. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /**
       * Format: unix-time
       * @description Date at which the promotion code can no longer be redeemed.
       */
      readonly expires_at?: number | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Maximum number of times this promotion code can be redeemed. */
      readonly max_redemptions?: number | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "promotion_code";
      readonly restrictions: components["schemas"]["promotion_codes_resource_restrictions"];
      /** @description Number of times this promotion code has been used. */
      readonly times_redeemed: number;
    };
    /** PromotionCodesResourceRestrictions */
    readonly promotion_codes_resource_restrictions: {
      /** @description A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices */
      readonly first_time_transaction: boolean;
      /** @description Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work). */
      readonly minimum_amount?: number | null;
      /** @description Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount */
      readonly minimum_amount_currency?: string | null;
    };
    /**
     * Quote
     * @description A Quote is a way to model prices that you'd like to provide to a customer.
     * Once accepted, it will automatically create an invoice, subscription or subscription schedule.
     */
    readonly quote: {
      /** @description Total before any discounts or taxes are applied. */
      readonly amount_subtotal: number;
      /** @description Total after discounts and taxes are applied. */
      readonly amount_total: number;
      /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote. */
      readonly application_fee_amount?: number | null;
      /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote. */
      readonly application_fee_percent?: number | null;
      readonly automatic_tax: components["schemas"]["quotes_resource_automatic_tax"];
      /**
       * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
       * @enum {string}
       */
      readonly collection_method: "charge_automatically" | "send_invoice";
      readonly computed: components["schemas"]["quotes_resource_computed"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency?: string | null;
      /** @description The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description The tax rates applied to this quote. */
      readonly default_tax_rates?: readonly (string | components["schemas"]["tax_rate"])[];
      /** @description A description that will be displayed on the quote PDF. */
      readonly description?: string | null;
      /** @description The discounts applied to this quote. */
      readonly discounts: readonly (string | components["schemas"]["discount"])[];
      /**
       * Format: unix-time
       * @description The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
       */
      readonly expires_at: number;
      /** @description A footer that will be displayed on the quote PDF. */
      readonly footer?: string | null;
      /** @description Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details. */
      readonly from_quote?: components["schemas"]["quotes_resource_from_quote"] | null;
      /** @description A header that will be displayed on the quote PDF. */
      readonly header?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The invoice that was created from this quote. */
      readonly invoice?: (string | components["schemas"]["invoice"] | components["schemas"]["deleted_invoice"]) | null;
      /** @description All invoices will be billed using the specified settings. */
      readonly invoice_settings?: components["schemas"]["invoice_setting_quote_setting"] | null;
      /**
       * QuotesResourceListLineItems
       * @description A list of items the customer is being quoted for.
       */
      readonly line_items?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize). */
      readonly number?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "quote";
      /** @description The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details. */
      readonly on_behalf_of?: (string | components["schemas"]["account"]) | null;
      /**
       * @description The status of the quote.
       * @enum {string}
       */
      readonly status: "accepted" | "canceled" | "draft" | "open";
      readonly status_transitions: components["schemas"]["quotes_resource_status_transitions"];
      /** @description The subscription that was created or updated from this quote. */
      readonly subscription?: (string | components["schemas"]["subscription"]) | null;
      readonly subscription_data: components["schemas"]["quotes_resource_subscription_data"];
      /** @description The subscription schedule that was created or updated from this quote. */
      readonly subscription_schedule?: (string | components["schemas"]["subscription_schedule"]) | null;
      readonly total_details: components["schemas"]["quotes_resource_total_details"];
      /** @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices. */
      readonly transfer_data?: components["schemas"]["quotes_resource_transfer_data"] | null;
    };
    /** QuotesResourceAutomaticTax */
    readonly quotes_resource_automatic_tax: {
      /** @description Automatically calculate taxes */
      readonly enabled: boolean;
      /**
       * @description The status of the most recent automated tax calculation for this quote.
       * @enum {string|null}
       */
      readonly status?: ("complete" | "failed" | "requires_location_inputs") | null;
    };
    /** QuotesResourceComputed */
    readonly quotes_resource_computed: {
      /** @description The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices. */
      readonly recurring?: components["schemas"]["quotes_resource_recurring"] | null;
      readonly upfront: components["schemas"]["quotes_resource_upfront"];
    };
    /** QuotesResourceFromQuote */
    readonly quotes_resource_from_quote: {
      /** @description Whether this quote is a revision of a different quote. */
      readonly is_revision: boolean;
      /** @description The quote that was cloned. */
      readonly quote: string | components["schemas"]["quote"];
    };
    /** QuotesResourceRecurring */
    readonly quotes_resource_recurring: {
      /** @description Total before any discounts or taxes are applied. */
      readonly amount_subtotal: number;
      /** @description Total after discounts and taxes are applied. */
      readonly amount_total: number;
      /**
       * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
       * @enum {string}
       */
      readonly interval: "day" | "month" | "week" | "year";
      /** @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
      readonly interval_count: number;
      readonly total_details: components["schemas"]["quotes_resource_total_details"];
    };
    /** QuotesResourceStatusTransitions */
    readonly quotes_resource_status_transitions: {
      /**
       * Format: unix-time
       * @description The time that the quote was accepted. Measured in seconds since Unix epoch.
       */
      readonly accepted_at?: number | null;
      /**
       * Format: unix-time
       * @description The time that the quote was canceled. Measured in seconds since Unix epoch.
       */
      readonly canceled_at?: number | null;
      /**
       * Format: unix-time
       * @description The time that the quote was finalized. Measured in seconds since Unix epoch.
       */
      readonly finalized_at?: number | null;
    };
    /** QuotesResourceSubscriptionData */
    readonly quotes_resource_subscription_data: {
      /**
       * Format: unix-time
       * @description When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
       */
      readonly effective_date?: number | null;
      /** @description Integer representing the number of trial period days before the customer is charged for the first time. */
      readonly trial_period_days?: number | null;
    };
    /** QuotesResourceTotalDetails */
    readonly quotes_resource_total_details: {
      /** @description This is the sum of all the line item discounts. */
      readonly amount_discount: number;
      /** @description This is the sum of all the line item shipping amounts. */
      readonly amount_shipping?: number | null;
      /** @description This is the sum of all the line item tax amounts. */
      readonly amount_tax: number;
      readonly breakdown?: components["schemas"]["quotes_resource_total_details_resource_breakdown"];
    };
    /** QuotesResourceTotalDetailsResourceBreakdown */
    readonly quotes_resource_total_details_resource_breakdown: {
      /** @description The aggregated line item discounts. */
      readonly discounts: readonly components["schemas"]["line_items_discount_amount"][];
      /** @description The aggregated line item tax amounts by rate. */
      readonly taxes: readonly components["schemas"]["line_items_tax_amount"][];
    };
    /** QuotesResourceTransferData */
    readonly quotes_resource_transfer_data: {
      /** @description The amount in %s that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination. */
      readonly amount?: number | null;
      /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount will be transferred to the destination. */
      readonly amount_percent?: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      readonly destination: string | components["schemas"]["account"];
    };
    /** QuotesResourceUpfront */
    readonly quotes_resource_upfront: {
      /** @description Total before any discounts or taxes are applied. */
      readonly amount_subtotal: number;
      /** @description Total after discounts and taxes are applied. */
      readonly amount_total: number;
      /**
       * QuotesResourceListLineItems
       * @description The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
       */
      readonly line_items?: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      readonly total_details: components["schemas"]["quotes_resource_total_details"];
    };
    /**
     * RadarEarlyFraudWarning
     * @description An early fraud warning indicates that the card issuer has notified us that a
     * charge may be fraudulent.
     *
     * Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
     */
    readonly "radar.early_fraud_warning": {
      /** @description An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. */
      readonly actionable: boolean;
      /** @description ID of the charge this early fraud warning is for, optionally expanded. */
      readonly charge: string | components["schemas"]["charge"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
      readonly fraud_type: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "radar.early_fraud_warning";
      /** @description ID of the Payment Intent this early fraud warning is for, optionally expanded. */
      readonly payment_intent?: string | components["schemas"]["payment_intent"];
    };
    /**
     * RadarListList
     * @description Value lists allow you to group values together which can then be referenced in rules.
     *
     * Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
     */
    readonly "radar.value_list": {
      /** @description The name of the value list for use in rules. */
      readonly alias: string;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The name or email address of the user who created this value list. */
      readonly created_by: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
       * @enum {string}
       */
      readonly item_type:
        | "card_bin"
        | "card_fingerprint"
        | "case_sensitive_string"
        | "country"
        | "customer_id"
        | "email"
        | "ip_address"
        | "string";
      /**
       * RadarListListItemList
       * @description List of items contained within this value list.
       */
      readonly list_items: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["radar.value_list_item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description The name of the value list. */
      readonly name: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "radar.value_list";
    };
    /**
     * RadarListListItem
     * @description Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
     *
     * Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
     */
    readonly "radar.value_list_item": {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The name or email address of the user who added this item to the value list. */
      readonly created_by: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "radar.value_list_item";
      /** @description The value of the item. */
      readonly value: string;
      /** @description The identifier of the value list this item belongs to. */
      readonly value_list: string;
    };
    /** RadarReviewResourceLocation */
    readonly radar_review_resource_location: {
      /** @description The city where the payment originated. */
      readonly city?: string | null;
      /** @description Two-letter ISO code representing the country where the payment originated. */
      readonly country?: string | null;
      /** @description The geographic latitude where the payment originated. */
      readonly latitude?: number | null;
      /** @description The geographic longitude where the payment originated. */
      readonly longitude?: number | null;
      /** @description The state/county/province/region where the payment originated. */
      readonly region?: string | null;
    };
    /** RadarReviewResourceSession */
    readonly radar_review_resource_session: {
      /** @description The browser used in this browser session (e.g., `Chrome`). */
      readonly browser?: string | null;
      /** @description Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
      readonly device?: string | null;
      /** @description The platform for the browser session (e.g., `Macintosh`). */
      readonly platform?: string | null;
      /** @description The version for the browser session (e.g., `61.0.3163.100`). */
      readonly version?: string | null;
    };
    /**
     * TransferRecipient
     * @description With `Recipient` objects, you can transfer money from your Stripe account to a
     * third-party bank account or debit card. The API allows you to create, delete,
     * and update your recipients. You can retrieve individual recipients as well as
     * a list of all your recipients.
     *
     * **`Recipient` objects have been deprecated in favor of
     * [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
     * [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
     * recipients can no longer begin doing so. Please use `Account` objects
     * instead.**
     */
    readonly recipient: {
      /** @description Hash describing the current account on the recipient, if there is one. */
      readonly active_account?: components["schemas"]["bank_account"] | null;
      /** CardList */
      readonly cards?: {
        readonly data: readonly components["schemas"]["card"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      } | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The default card to use for creating transfers to this recipient. */
      readonly default_card?: (string | components["schemas"]["card"]) | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      readonly email?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /** @description The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead. */
      readonly migrated_to?: (string | components["schemas"]["account"]) | null;
      /** @description Full, legal name of the recipient. */
      readonly name?: string | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "recipient";
      readonly rolled_back_from?: string | components["schemas"]["account"];
      /** @description Type of the recipient, one of `individual` or `corporation`. */
      readonly type: string;
    };
    /** Recurring */
    readonly recurring: {
      /**
       * @description Specifies a usage aggregation strategy for prices of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
       * @enum {string|null}
       */
      readonly aggregate_usage?: ("last_during_period" | "last_ever" | "max" | "sum") | null;
      /**
       * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
       * @enum {string}
       */
      readonly interval: "day" | "month" | "week" | "year";
      /** @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
      readonly interval_count: number;
      /**
       * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
       * @enum {string}
       */
      readonly usage_type: "licensed" | "metered";
    };
    /**
     * Refund
     * @description `Refund` objects allow you to refund a charge that has previously been created
     * but not yet refunded. Funds will be refunded to the credit or debit card that
     * was originally charged.
     *
     * Related guide: [Refunds](https://stripe.com/docs/refunds).
     */
    readonly refund: {
      /** @description Amount, in %s. */
      readonly amount: number;
      /** @description Balance transaction that describes the impact on your account balance. */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /** @description ID of the charge that was refunded. */
      readonly charge?: (string | components["schemas"]["charge"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
      readonly description?: string;
      /** @description If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
      readonly failure_balance_transaction?: string | components["schemas"]["balance_transaction"];
      /** @description If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
      readonly failure_reason?: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "refund";
      /** @description ID of the PaymentIntent that was refunded. */
      readonly payment_intent?: (string | components["schemas"]["payment_intent"]) | null;
      /**
       * @description Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
       * @enum {string|null}
       */
      readonly reason?: ("duplicate" | "expired_uncaptured_charge" | "fraudulent" | "requested_by_customer") | null;
      /** @description This is the transaction number that appears on email receipts sent for this refund. */
      readonly receipt_number?: string | null;
      /** @description The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. */
      readonly source_transfer_reversal?: (string | components["schemas"]["transfer_reversal"]) | null;
      /** @description Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
      readonly status?: string | null;
      /** @description If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. */
      readonly transfer_reversal?: (string | components["schemas"]["transfer_reversal"]) | null;
    };
    /**
     * reporting_report_run
     * @description The Report Run object represents an instance of a report type generated with
     * specific run parameters. Once the object is created, Stripe begins processing the report.
     * When the report has finished running, it will give you a reference to a file
     * where you can retrieve your results. For an overview, see
     * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
     *
     * Note that certain report types can only be run based on your live-mode data (not test-mode
     * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
     */
    readonly "reporting.report_run": {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * @description If something should go wrong during the run, a message about the failure (populated when
       *  `status=failed`).
       */
      readonly error?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description `true` if the report is run on live mode data and `false` if it is run on test mode data. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "reporting.report_run";
      readonly parameters: components["schemas"]["financial_reporting_finance_report_run_run_parameters"];
      /** @description The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`. */
      readonly report_type: string;
      /**
       * @description The file object representing the result of the report run (populated when
       *  `status=succeeded`).
       */
      readonly result?: components["schemas"]["file"] | null;
      /**
       * @description Status of this report run. This will be `pending` when the run is initially created.
       *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
       *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
       */
      readonly status: string;
      /**
       * Format: unix-time
       * @description Timestamp at which this run successfully finished (populated when
       *  `status=succeeded`). Measured in seconds since the Unix epoch.
       */
      readonly succeeded_at?: number | null;
    };
    /**
     * reporting_report_type
     * @description The Report Type resource corresponds to a particular type of report, such as
     * the "Activity summary" or "Itemized payouts" reports. These objects are
     * identified by an ID belonging to a set of enumerated values. See
     * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
     * for those Report Type IDs, along with required and optional parameters.
     *
     * Note that certain report types can only be run based on your live-mode data (not test-mode
     * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
     */
    readonly "reporting.report_type": {
      /**
       * Format: unix-time
       * @description Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
       */
      readonly data_available_end: number;
      /**
       * Format: unix-time
       * @description Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
       */
      readonly data_available_start: number;
      /** @description List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) */
      readonly default_columns?: readonly string[] | null;
      /** @description The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Human-readable name of the Report Type */
      readonly name: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "reporting.report_type";
      /**
       * Format: unix-time
       * @description When this Report Type was latest updated. Measured in seconds since the Unix epoch.
       */
      readonly updated: number;
      /** @description Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. */
      readonly version: number;
    };
    /** ReserveTransaction */
    readonly reserve_transaction: {
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "reserve_transaction";
    };
    /**
     * RadarReview
     * @description Reviews can be used to supplement automated fraud detection with human expertise.
     *
     * Learn more about [Radar](/radar) and reviewing payments
     * [here](https://stripe.com/docs/radar/reviews).
     */
    readonly review: {
      /** @description The ZIP or postal code of the card used, if applicable. */
      readonly billing_zip?: string | null;
      /** @description The charge associated with this review. */
      readonly charge?: (string | components["schemas"]["charge"]) | null;
      /**
       * @description The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.
       * @enum {string|null}
       */
      readonly closed_reason?: ("approved" | "disputed" | "redacted" | "refunded" | "refunded_as_fraud") | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The IP address where the payment originated. */
      readonly ip_address?: string | null;
      /** @description Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address. */
      readonly ip_address_location?: components["schemas"]["radar_review_resource_location"] | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "review";
      /** @description If `true`, the review needs action. */
      readonly open: boolean;
      /**
       * @description The reason the review was opened. One of `rule` or `manual`.
       * @enum {string}
       */
      readonly opened_reason: "manual" | "rule";
      /** @description The PaymentIntent ID associated with this review, if one exists. */
      readonly payment_intent?: string | components["schemas"]["payment_intent"];
      /** @description The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`. */
      readonly reason: string;
      /** @description Information related to the browsing session of the user who initiated the payment. */
      readonly session?: components["schemas"]["radar_review_resource_session"] | null;
    };
    /** RadarRule */
    readonly rule: {
      /** @description The action taken on the payment. */
      readonly action: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The predicate to evaluate the payment against. */
      readonly predicate: string;
    };
    /**
     * ScheduledQueryRun
     * @description If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
     * receive a `sigma.scheduled_query_run.created` webhook each time the query
     * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
     * retrieve the query results.
     */
    readonly scheduled_query_run: {
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * Format: unix-time
       * @description When the query was run, Sigma contained a snapshot of your Stripe data at this time.
       */
      readonly data_load_time: number;
      readonly error?: components["schemas"]["sigma_scheduled_query_run_error"];
      /** @description The file object representing the results of the query. */
      readonly file?: components["schemas"]["file"] | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "scheduled_query_run";
      /**
       * Format: unix-time
       * @description Time at which the result expires and is no longer available for download.
       */
      readonly result_available_until: number;
      /** @description SQL for the query. */
      readonly sql: string;
      /** @description The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. */
      readonly status: string;
      /** @description Title of the query. */
      readonly title: string;
    };
    /** SchedulesPhaseAutomaticTax */
    readonly schedules_phase_automatic_tax: {
      /** @description Whether Stripe automatically computes tax on invoices created during this phase. */
      readonly enabled: boolean;
    };
    /** sepa_debit_generated_from */
    readonly sepa_debit_generated_from: {
      /** @description The ID of the Charge that generated this PaymentMethod, if any. */
      readonly charge?: (string | components["schemas"]["charge"]) | null;
      /** @description The ID of the SetupAttempt that generated this PaymentMethod, if any. */
      readonly setup_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
    };
    /**
     * PaymentFlowsSetupIntentSetupAttempt
     * @description A SetupAttempt describes one attempted confirmation of a SetupIntent,
     * whether that confirmation was successful or unsuccessful. You can use
     * SetupAttempts to inspect details of a specific attempt at setting up a
     * payment method using a SetupIntent.
     */
    readonly setup_attempt: {
      /** @description The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation. */
      readonly application?: (string | components["schemas"]["application"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation. */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "setup_attempt";
      /** @description The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation. */
      readonly on_behalf_of?: (string | components["schemas"]["account"]) | null;
      /** @description ID of the payment method used with this SetupAttempt. */
      readonly payment_method: string | components["schemas"]["payment_method"];
      readonly payment_method_details: components["schemas"]["setup_attempt_payment_method_details"];
      /** @description The error encountered during this attempt to confirm the SetupIntent, if any. */
      readonly setup_error?: components["schemas"]["api_errors"] | null;
      /** @description ID of the SetupIntent that this attempt belongs to. */
      readonly setup_intent: string | components["schemas"]["setup_intent"];
      /** @description Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`. */
      readonly status: string;
      /** @description The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`. */
      readonly usage: string;
    };
    /** SetupAttemptPaymentMethodDetails */
    readonly setup_attempt_payment_method_details: {
      readonly acss_debit?: components["schemas"]["setup_attempt_payment_method_details_acss_debit"];
      readonly au_becs_debit?: components["schemas"]["setup_attempt_payment_method_details_au_becs_debit"];
      readonly bacs_debit?: components["schemas"]["setup_attempt_payment_method_details_bacs_debit"];
      readonly bancontact?: components["schemas"]["setup_attempt_payment_method_details_bancontact"];
      readonly boleto?: components["schemas"]["setup_attempt_payment_method_details_boleto"];
      readonly card?: components["schemas"]["setup_attempt_payment_method_details_card"];
      readonly card_present?: components["schemas"]["setup_attempt_payment_method_details_card_present"];
      readonly ideal?: components["schemas"]["setup_attempt_payment_method_details_ideal"];
      readonly sepa_debit?: components["schemas"]["setup_attempt_payment_method_details_sepa_debit"];
      readonly sofort?: components["schemas"]["setup_attempt_payment_method_details_sofort"];
      /** @description The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method. */
      readonly type: string;
    };
    /** setup_attempt_payment_method_details_acss_debit */
    readonly setup_attempt_payment_method_details_acss_debit: { readonly [key: string]: unknown };
    /** setup_attempt_payment_method_details_au_becs_debit */
    readonly setup_attempt_payment_method_details_au_becs_debit: { readonly [key: string]: unknown };
    /** setup_attempt_payment_method_details_bacs_debit */
    readonly setup_attempt_payment_method_details_bacs_debit: { readonly [key: string]: unknown };
    /** setup_attempt_payment_method_details_bancontact */
    readonly setup_attempt_payment_method_details_bancontact: {
      /** @description Bank code of bank associated with the bank account. */
      readonly bank_code?: string | null;
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      readonly bic?: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      readonly generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      readonly generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      readonly iban_last4?: string | null;
      /**
       * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
       * Can be one of `en`, `de`, `fr`, or `nl`
       * @enum {string|null}
       */
      readonly preferred_language?: ("de" | "en" | "fr" | "nl") | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Bancontact directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      readonly verified_name?: string | null;
    };
    /** setup_attempt_payment_method_details_boleto */
    readonly setup_attempt_payment_method_details_boleto: { readonly [key: string]: unknown };
    /** setup_attempt_payment_method_details_card */
    readonly setup_attempt_payment_method_details_card: {
      /** @description Populated if this authorization used 3D Secure authentication. */
      readonly three_d_secure?: components["schemas"]["three_d_secure_details"] | null;
    };
    /** setup_attempt_payment_method_details_card_present */
    readonly setup_attempt_payment_method_details_card_present: {
      /** @description The ID of the Card PaymentMethod which was generated by this SetupAttempt. */
      readonly generated_card?: (string | components["schemas"]["payment_method"]) | null;
    };
    /** setup_attempt_payment_method_details_ideal */
    readonly setup_attempt_payment_method_details_ideal: {
      /**
       * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
       * @enum {string|null}
       */
      readonly bank?:
        | (
            | "abn_amro"
            | "asn_bank"
            | "bunq"
            | "handelsbanken"
            | "ing"
            | "knab"
            | "moneyou"
            | "rabobank"
            | "regiobank"
            | "revolut"
            | "sns_bank"
            | "triodos_bank"
            | "van_lanschot"
          )
        | null;
      /**
       * @description The Bank Identifier Code of the customer's bank.
       * @enum {string|null}
       */
      readonly bic?:
        | (
            | "ABNANL2A"
            | "ASNBNL21"
            | "BUNQNL2A"
            | "FVLBNL22"
            | "HANDNL2A"
            | "INGBNL2A"
            | "KNABNL2H"
            | "MOYONL21"
            | "RABONL2U"
            | "RBRBNL21"
            | "REVOLT21"
            | "SNSBNL2A"
            | "TRIONL2U"
          )
        | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      readonly generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      readonly generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      readonly iban_last4?: string | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by iDEAL directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      readonly verified_name?: string | null;
    };
    /** setup_attempt_payment_method_details_sepa_debit */
    readonly setup_attempt_payment_method_details_sepa_debit: { readonly [key: string]: unknown };
    /** setup_attempt_payment_method_details_sofort */
    readonly setup_attempt_payment_method_details_sofort: {
      /** @description Bank code of bank associated with the bank account. */
      readonly bank_code?: string | null;
      /** @description Name of the bank associated with the bank account. */
      readonly bank_name?: string | null;
      /** @description Bank Identifier Code of the bank associated with the bank account. */
      readonly bic?: string | null;
      /** @description The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      readonly generated_sepa_debit?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt. */
      readonly generated_sepa_debit_mandate?: (string | components["schemas"]["mandate"]) | null;
      /** @description Last four characters of the IBAN. */
      readonly iban_last4?: string | null;
      /**
       * @description Preferred language of the Sofort authorization page that the customer is redirected to.
       * Can be one of `en`, `de`, `fr`, or `nl`
       * @enum {string|null}
       */
      readonly preferred_language?: ("de" | "en" | "fr" | "nl") | null;
      /**
       * @description Owner's verified full name. Values are verified or provided by Sofort directly
       * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
       */
      readonly verified_name?: string | null;
    };
    /**
     * SetupIntent
     * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
     * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
     * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
     *
     * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
     * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
     * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
     * you through the setup process.
     *
     * Successful SetupIntents result in payment credentials that are optimized for future payments.
     * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
     * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
     * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
     * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
     * it will automatically attach the resulting payment method to that Customer.
     * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
     * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
     *
     * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
     * even as regulations change over time.
     *
     * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
     */
    readonly setup_intent: {
      /** @description ID of the Connect application that created the SetupIntent. */
      readonly application?: (string | components["schemas"]["application"]) | null;
      /**
       * @description Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
       * @enum {string|null}
       */
      readonly cancellation_reason?: ("abandoned" | "duplicate" | "requested_by_customer") | null;
      /**
       * @description The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
       *
       * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
       */
      readonly client_secret?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * @description ID of the Customer this SetupIntent belongs to, if one exists.
       *
       * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
       */
      readonly customer?:
        | (string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"])
        | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The error encountered in the previous SetupIntent confirmation. */
      readonly last_setup_error?: components["schemas"]["api_errors"] | null;
      /** @description The most recent SetupAttempt for this SetupIntent. */
      readonly latest_attempt?: (string | components["schemas"]["setup_attempt"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description ID of the multi use Mandate generated by the SetupIntent. */
      readonly mandate?: (string | components["schemas"]["mandate"]) | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /** @description If present, this property tells you what actions you need to take in order for your customer to continue payment setup. */
      readonly next_action?: components["schemas"]["setup_intent_next_action"] | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "setup_intent";
      /** @description The account (if any) for which the setup is intended. */
      readonly on_behalf_of?: (string | components["schemas"]["account"]) | null;
      /** @description ID of the payment method used with this SetupIntent. */
      readonly payment_method?: (string | components["schemas"]["payment_method"]) | null;
      /** @description Payment-method-specific configuration for this SetupIntent. */
      readonly payment_method_options?: components["schemas"]["setup_intent_payment_method_options"] | null;
      /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
      readonly payment_method_types: readonly string[];
      /** @description ID of the single_use Mandate generated by the SetupIntent. */
      readonly single_use_mandate?: (string | components["schemas"]["mandate"]) | null;
      /**
       * @description [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
       * @enum {string}
       */
      readonly status:
        | "canceled"
        | "processing"
        | "requires_action"
        | "requires_confirmation"
        | "requires_payment_method"
        | "succeeded";
      /**
       * @description Indicates how the payment method is intended to be used in the future.
       *
       * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
       */
      readonly usage: string;
    };
    /** SetupIntentNextAction */
    readonly setup_intent_next_action: {
      readonly redirect_to_url?: components["schemas"]["setup_intent_next_action_redirect_to_url"];
      /** @description Type of the next action to perform, one of `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`. */
      readonly type: string;
      /** @description When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
      readonly use_stripe_sdk?: { readonly [key: string]: unknown };
      readonly verify_with_microdeposits?: components["schemas"]["setup_intent_next_action_verify_with_microdeposits"];
    };
    /** SetupIntentNextActionRedirectToUrl */
    readonly setup_intent_next_action_redirect_to_url: {
      /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
      readonly return_url?: string | null;
      /** @description The URL you must redirect your customer to in order to authenticate. */
      readonly url?: string | null;
    };
    /** SetupIntentNextActionVerifyWithMicrodeposits */
    readonly setup_intent_next_action_verify_with_microdeposits: {
      /**
       * Format: unix-time
       * @description The timestamp when the microdeposits are expected to land.
       */
      readonly arrival_date: number;
      /** @description The URL for the hosted verification page, which allows customers to verify their bank account. */
      readonly hosted_verification_url: string;
    };
    /** SetupIntentPaymentMethodOptions */
    readonly setup_intent_payment_method_options: {
      readonly acss_debit?: components["schemas"]["setup_intent_payment_method_options_acss_debit"];
      readonly card?: components["schemas"]["setup_intent_payment_method_options_card"];
      readonly sepa_debit?: components["schemas"]["setup_intent_payment_method_options_sepa_debit"];
    };
    /** setup_intent_payment_method_options_acss_debit */
    readonly setup_intent_payment_method_options_acss_debit: {
      /**
       * @description Currency supported by the bank account
       * @enum {string|null}
       */
      readonly currency?: ("cad" | "usd") | null;
      readonly mandate_options?: components["schemas"]["setup_intent_payment_method_options_mandate_options_acss_debit"];
      /**
       * @description Bank account verification method.
       * @enum {string}
       */
      readonly verification_method?: "automatic" | "instant" | "microdeposits";
    };
    /** setup_intent_payment_method_options_card */
    readonly setup_intent_payment_method_options_card: {
      /**
       * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
       * @enum {string|null}
       */
      readonly request_three_d_secure?: ("any" | "automatic" | "challenge_only") | null;
    };
    /** setup_intent_payment_method_options_mandate_options_acss_debit */
    readonly setup_intent_payment_method_options_mandate_options_acss_debit: {
      /** @description A URL for custom mandate text */
      readonly custom_mandate_url?: string;
      /** @description List of Stripe products where this mandate can be selected automatically. */
      readonly default_for?: readonly ("invoice" | "subscription")[];
      /** @description Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'. */
      readonly interval_description?: string | null;
      /**
       * @description Payment schedule for the mandate.
       * @enum {string|null}
       */
      readonly payment_schedule?: ("combined" | "interval" | "sporadic") | null;
      /**
       * @description Transaction type of the mandate.
       * @enum {string|null}
       */
      readonly transaction_type?: ("business" | "personal") | null;
    };
    /** setup_intent_payment_method_options_mandate_options_sepa_debit */
    readonly setup_intent_payment_method_options_mandate_options_sepa_debit: { readonly [key: string]: unknown };
    /** setup_intent_payment_method_options_sepa_debit */
    readonly setup_intent_payment_method_options_sepa_debit: {
      readonly mandate_options?: components["schemas"]["setup_intent_payment_method_options_mandate_options_sepa_debit"];
    };
    /** Shipping */
    readonly shipping: {
      readonly address?: components["schemas"]["address"];
      /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
      readonly carrier?: string | null;
      /** @description Recipient name. */
      readonly name?: string | null;
      /** @description Recipient phone (including extension). */
      readonly phone?: string | null;
      /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
      readonly tracking_number?: string | null;
    };
    /** ShippingMethod */
    readonly shipping_method: {
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description The estimated delivery date for the given shipping method. Can be either a specific date or a range. */
      readonly delivery_estimate?: components["schemas"]["delivery_estimate"] | null;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
    };
    /**
     * ShippingRate
     * @description Shipping rates describe the price of shipping presented to your customers and can be
     * applied to [Checkout Sessions](https://stripe.com/docs/payments/checkout/shipping) to collect shipping costs.
     */
    readonly shipping_rate: {
      /** @description Whether the shipping rate can be used for new purchases. Defaults to `true`. */
      readonly active: boolean;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions. */
      readonly delivery_estimate?: components["schemas"]["shipping_rate_delivery_estimate"] | null;
      /** @description The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
      readonly display_name?: string | null;
      readonly fixed_amount?: components["schemas"]["shipping_rate_fixed_amount"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "shipping_rate";
      /**
       * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
       * @enum {string|null}
       */
      readonly tax_behavior?: ("exclusive" | "inclusive" | "unspecified") | null;
      /** @description A [tax code](https://stripe.com/docs/tax/tax-codes) ID. The Shipping tax code is `txcd_92010001`. */
      readonly tax_code?: (string | components["schemas"]["tax_code"]) | null;
      /**
       * @description The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
       * @enum {string}
       */
      readonly type: "fixed_amount";
    };
    /** ShippingRateDeliveryEstimate */
    readonly shipping_rate_delivery_estimate: {
      /** @description The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite. */
      readonly maximum?: components["schemas"]["shipping_rate_delivery_estimate_bound"] | null;
      /** @description The lower bound of the estimated range. If empty, represents no lower bound. */
      readonly minimum?: components["schemas"]["shipping_rate_delivery_estimate_bound"] | null;
    };
    /** ShippingRateDeliveryEstimateBound */
    readonly shipping_rate_delivery_estimate_bound: {
      /**
       * @description A unit of time.
       * @enum {string}
       */
      readonly unit: "business_day" | "day" | "hour" | "month" | "week";
      /** @description Must be greater than 0. */
      readonly value: number;
    };
    /** ShippingRateFixedAmount */
    readonly shipping_rate_fixed_amount: {
      /** @description A non-negative integer in cents representing how much to charge. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
    };
    /** SigmaScheduledQueryRunError */
    readonly sigma_scheduled_query_run_error: {
      /** @description Information about the run failure. */
      readonly message: string;
    };
    /**
     * Sku
     * @description Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
     * SKUs describe specific product variations, taking into account any combination of: attributes,
     * currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
     * the `size: large`, `color: red` version of that shirt.
     *
     * Can also be used to manage inventory.
     *
     * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
     */
    readonly sku: {
      /** @description Whether the SKU is available for purchase. */
      readonly active: boolean;
      /** @description A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
      readonly attributes: { readonly [key: string]: string };
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The URL of an image for this SKU, meant to be displayable to the customer. */
      readonly image?: string | null;
      readonly inventory: components["schemas"]["sku_inventory"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "sku";
      /** @description The dimensions of this SKU for shipping purposes. */
      readonly package_dimensions?: components["schemas"]["package_dimensions"] | null;
      /** @description The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
      readonly price: number;
      /** @description The ID of the product this SKU is associated with. The product must be currently active. */
      readonly product: string | components["schemas"]["product"];
      /**
       * Format: unix-time
       * @description Time at which the object was last updated. Measured in seconds since the Unix epoch.
       */
      readonly updated: number;
    };
    /** SKUInventory */
    readonly sku_inventory: {
      /** @description The count of inventory available. Will be present if and only if `type` is `finite`. */
      readonly quantity?: number | null;
      /** @description Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
      readonly type: string;
      /** @description An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
      readonly value?: string | null;
    };
    /**
     * Source
     * @description `Source` objects allow you to accept a variety of payment methods. They
     * represent a customer's payment instrument, and can be used with the Stripe API
     * just like a `Card` object: once chargeable, they can be charged, or can be
     * attached to customers.
     *
     * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
     */
    readonly source: {
      readonly ach_credit_transfer?: components["schemas"]["source_type_ach_credit_transfer"];
      readonly ach_debit?: components["schemas"]["source_type_ach_debit"];
      readonly acss_debit?: components["schemas"]["source_type_acss_debit"];
      readonly alipay?: components["schemas"]["source_type_alipay"];
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
      readonly amount?: number | null;
      readonly au_becs_debit?: components["schemas"]["source_type_au_becs_debit"];
      readonly bancontact?: components["schemas"]["source_type_bancontact"];
      readonly card?: components["schemas"]["source_type_card"];
      readonly card_present?: components["schemas"]["source_type_card_present"];
      /** @description The client secret of the source. Used for client-side retrieval using a publishable key. */
      readonly client_secret: string;
      readonly code_verification?: components["schemas"]["source_code_verification_flow"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
      readonly currency?: string | null;
      /** @description The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
      readonly customer?: string;
      readonly eps?: components["schemas"]["source_type_eps"];
      /** @description The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
      readonly flow: string;
      readonly giropay?: components["schemas"]["source_type_giropay"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      readonly ideal?: components["schemas"]["source_type_ideal"];
      readonly klarna?: components["schemas"]["source_type_klarna"];
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      readonly multibanco?: components["schemas"]["source_type_multibanco"];
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "source";
      /** @description Information about the owner of the payment instrument that may be used or required by particular source types. */
      readonly owner?: components["schemas"]["source_owner"] | null;
      readonly p24?: components["schemas"]["source_type_p24"];
      readonly receiver?: components["schemas"]["source_receiver_flow"];
      readonly redirect?: components["schemas"]["source_redirect_flow"];
      readonly sepa_debit?: components["schemas"]["source_type_sepa_debit"];
      readonly sofort?: components["schemas"]["source_type_sofort"];
      readonly source_order?: components["schemas"]["source_order"];
      /** @description Extra information about a source. This will appear on your customer's statement every time you charge the source. */
      readonly statement_descriptor?: string | null;
      /** @description The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
      readonly status: string;
      readonly three_d_secure?: components["schemas"]["source_type_three_d_secure"];
      /**
       * @description The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
       * @enum {string}
       */
      readonly type:
        | "ach_credit_transfer"
        | "ach_debit"
        | "acss_debit"
        | "alipay"
        | "au_becs_debit"
        | "bancontact"
        | "card"
        | "card_present"
        | "eps"
        | "giropay"
        | "ideal"
        | "klarna"
        | "multibanco"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "three_d_secure"
        | "wechat";
      /** @description Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
      readonly usage?: string | null;
      readonly wechat?: components["schemas"]["source_type_wechat"];
    };
    /** SourceCodeVerificationFlow */
    readonly source_code_verification_flow: {
      /** @description The number of attempts remaining to authenticate the source object with a verification code. */
      readonly attempts_remaining: number;
      /** @description The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
      readonly status: string;
    };
    /**
     * SourceMandateNotification
     * @description Source mandate notifications should be created when a notification related to
     * a source mandate must be sent to the payer. They will trigger a webhook or
     * deliver an email to the customer.
     */
    readonly source_mandate_notification: {
      readonly acss_debit?: components["schemas"]["source_mandate_notification_acss_debit_data"];
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. */
      readonly amount?: number | null;
      readonly bacs_debit?: components["schemas"]["source_mandate_notification_bacs_debit_data"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "source_mandate_notification";
      /** @description The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. */
      readonly reason: string;
      readonly sepa_debit?: components["schemas"]["source_mandate_notification_sepa_debit_data"];
      readonly source: components["schemas"]["source"];
      /** @description The status of the mandate notification. Valid statuses are `pending` or `submitted`. */
      readonly status: string;
      /** @description The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. */
      readonly type: string;
    };
    /** SourceMandateNotificationAcssDebitData */
    readonly source_mandate_notification_acss_debit_data: {
      /** @description The statement descriptor associate with the debit. */
      readonly statement_descriptor?: string;
    };
    /** SourceMandateNotificationBacsDebitData */
    readonly source_mandate_notification_bacs_debit_data: {
      /** @description Last 4 digits of the account number associated with the debit. */
      readonly last4?: string;
    };
    /** SourceMandateNotificationSepaDebitData */
    readonly source_mandate_notification_sepa_debit_data: {
      /** @description SEPA creditor ID. */
      readonly creditor_identifier?: string;
      /** @description Last 4 digits of the account number associated with the debit. */
      readonly last4?: string;
      /** @description Mandate reference associated with the debit. */
      readonly mandate_reference?: string;
    };
    /** SourceOrder */
    readonly source_order: {
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
      readonly amount: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description The email address of the customer placing the order. */
      readonly email?: string;
      /** @description List of items constituting the order. */
      readonly items?: readonly components["schemas"]["source_order_item"][] | null;
      readonly shipping?: components["schemas"]["shipping"];
    };
    /** SourceOrderItem */
    readonly source_order_item: {
      /** @description The amount (price) for this order item. */
      readonly amount?: number | null;
      /** @description This currency of this order item. Required when `amount` is present. */
      readonly currency?: string | null;
      /** @description Human-readable description for this order item. */
      readonly description?: string | null;
      /** @description The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
      readonly parent?: string | null;
      /** @description The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
      readonly quantity?: number;
      /** @description The type of this order item. Must be `sku`, `tax`, or `shipping`. */
      readonly type?: string | null;
    };
    /** SourceOwner */
    readonly source_owner: {
      /** @description Owner's address. */
      readonly address?: components["schemas"]["address"] | null;
      /** @description Owner's email address. */
      readonly email?: string | null;
      /** @description Owner's full name. */
      readonly name?: string | null;
      /** @description Owner's phone number (including extension). */
      readonly phone?: string | null;
      /** @description Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly verified_address?: components["schemas"]["address"] | null;
      /** @description Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly verified_email?: string | null;
      /** @description Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly verified_name?: string | null;
      /** @description Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
      readonly verified_phone?: string | null;
    };
    /** SourceReceiverFlow */
    readonly source_receiver_flow: {
      /** @description The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
      readonly address?: string | null;
      /** @description The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
      readonly amount_charged: number;
      /** @description The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
      readonly amount_received: number;
      /** @description The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
      readonly amount_returned: number;
      /** @description Type of refund attribute method, one of `email`, `manual`, or `none`. */
      readonly refund_attributes_method: string;
      /** @description Type of refund attribute status, one of `missing`, `requested`, or `available`. */
      readonly refund_attributes_status: string;
    };
    /** SourceRedirectFlow */
    readonly source_redirect_flow: {
      /** @description The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
      readonly failure_reason?: string | null;
      /** @description The URL you provide to redirect the customer to after they authenticated their payment. */
      readonly return_url: string;
      /** @description The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
      readonly status: string;
      /** @description The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
      readonly url: string;
    };
    /**
     * SourceTransaction
     * @description Some payment methods have no required amount that a customer must send.
     * Customers can be instructed to send any amount, and it can be made up of
     * multiple transactions. As such, sources can have multiple associated
     * transactions.
     */
    readonly source_transaction: {
      readonly ach_credit_transfer?: components["schemas"]["source_transaction_ach_credit_transfer_data"];
      /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. */
      readonly amount: number;
      readonly chf_credit_transfer?: components["schemas"]["source_transaction_chf_credit_transfer_data"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      readonly gbp_credit_transfer?: components["schemas"]["source_transaction_gbp_credit_transfer_data"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "source_transaction";
      readonly paper_check?: components["schemas"]["source_transaction_paper_check_data"];
      readonly sepa_credit_transfer?: components["schemas"]["source_transaction_sepa_credit_transfer_data"];
      /** @description The ID of the source this transaction is attached to. */
      readonly source: string;
      /** @description The status of the transaction, one of `succeeded`, `pending`, or `failed`. */
      readonly status: string;
      /**
       * @description The type of source this transaction is attached to.
       * @enum {string}
       */
      readonly type:
        | "ach_credit_transfer"
        | "ach_debit"
        | "alipay"
        | "bancontact"
        | "card"
        | "card_present"
        | "eps"
        | "giropay"
        | "ideal"
        | "klarna"
        | "multibanco"
        | "p24"
        | "sepa_debit"
        | "sofort"
        | "three_d_secure"
        | "wechat";
    };
    /** SourceTransactionAchCreditTransferData */
    readonly source_transaction_ach_credit_transfer_data: {
      /** @description Customer data associated with the transfer. */
      readonly customer_data?: string;
      /** @description Bank account fingerprint associated with the transfer. */
      readonly fingerprint?: string;
      /** @description Last 4 digits of the account number associated with the transfer. */
      readonly last4?: string;
      /** @description Routing number associated with the transfer. */
      readonly routing_number?: string;
    };
    /** SourceTransactionChfCreditTransferData */
    readonly source_transaction_chf_credit_transfer_data: {
      /** @description Reference associated with the transfer. */
      readonly reference?: string;
      /** @description Sender's country address. */
      readonly sender_address_country?: string;
      /** @description Sender's line 1 address. */
      readonly sender_address_line1?: string;
      /** @description Sender's bank account IBAN. */
      readonly sender_iban?: string;
      /** @description Sender's name. */
      readonly sender_name?: string;
    };
    /** SourceTransactionGbpCreditTransferData */
    readonly source_transaction_gbp_credit_transfer_data: {
      /** @description Bank account fingerprint associated with the Stripe owned bank account receiving the transfer. */
      readonly fingerprint?: string;
      /** @description The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported. */
      readonly funding_method?: string;
      /** @description Last 4 digits of sender account number associated with the transfer. */
      readonly last4?: string;
      /** @description Sender entered arbitrary information about the transfer. */
      readonly reference?: string;
      /** @description Sender account number associated with the transfer. */
      readonly sender_account_number?: string;
      /** @description Sender name associated with the transfer. */
      readonly sender_name?: string;
      /** @description Sender sort code associated with the transfer. */
      readonly sender_sort_code?: string;
    };
    /** SourceTransactionPaperCheckData */
    readonly source_transaction_paper_check_data: {
      /** @description Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch. */
      readonly available_at?: string;
      /** @description Comma-separated list of invoice IDs associated with the paper check. */
      readonly invoices?: string;
    };
    /** SourceTransactionSepaCreditTransferData */
    readonly source_transaction_sepa_credit_transfer_data: {
      /** @description Reference associated with the transfer. */
      readonly reference?: string;
      /** @description Sender's bank account IBAN. */
      readonly sender_iban?: string;
      /** @description Sender's name. */
      readonly sender_name?: string;
    };
    readonly source_type_ach_credit_transfer: {
      readonly account_number?: string | null;
      readonly bank_name?: string | null;
      readonly fingerprint?: string | null;
      readonly refund_account_holder_name?: string | null;
      readonly refund_account_holder_type?: string | null;
      readonly refund_routing_number?: string | null;
      readonly routing_number?: string | null;
      readonly swift_code?: string | null;
    };
    readonly source_type_ach_debit: {
      readonly bank_name?: string | null;
      readonly country?: string | null;
      readonly fingerprint?: string | null;
      readonly last4?: string | null;
      readonly routing_number?: string | null;
      readonly type?: string | null;
    };
    readonly source_type_acss_debit: {
      readonly bank_address_city?: string | null;
      readonly bank_address_line_1?: string | null;
      readonly bank_address_line_2?: string | null;
      readonly bank_address_postal_code?: string | null;
      readonly bank_name?: string | null;
      readonly category?: string | null;
      readonly country?: string | null;
      readonly fingerprint?: string | null;
      readonly last4?: string | null;
      readonly routing_number?: string | null;
    };
    readonly source_type_alipay: {
      readonly data_string?: string | null;
      readonly native_url?: string | null;
      readonly statement_descriptor?: string | null;
    };
    readonly source_type_au_becs_debit: {
      readonly bsb_number?: string | null;
      readonly fingerprint?: string | null;
      readonly last4?: string | null;
    };
    readonly source_type_bancontact: {
      readonly bank_code?: string | null;
      readonly bank_name?: string | null;
      readonly bic?: string | null;
      readonly iban_last4?: string | null;
      readonly preferred_language?: string | null;
      readonly statement_descriptor?: string | null;
    };
    readonly source_type_card: {
      readonly address_line1_check?: string | null;
      readonly address_zip_check?: string | null;
      readonly brand?: string | null;
      readonly country?: string | null;
      readonly cvc_check?: string | null;
      readonly dynamic_last4?: string | null;
      readonly exp_month?: number | null;
      readonly exp_year?: number | null;
      readonly fingerprint?: string;
      readonly funding?: string | null;
      readonly last4?: string | null;
      readonly name?: string | null;
      readonly three_d_secure?: string;
      readonly tokenization_method?: string | null;
    };
    readonly source_type_card_present: {
      readonly application_cryptogram?: string;
      readonly application_preferred_name?: string;
      readonly authorization_code?: string | null;
      readonly authorization_response_code?: string;
      readonly brand?: string | null;
      readonly country?: string | null;
      readonly cvm_type?: string;
      readonly data_type?: string | null;
      readonly dedicated_file_name?: string;
      readonly emv_auth_data?: string;
      readonly evidence_customer_signature?: string | null;
      readonly evidence_transaction_certificate?: string | null;
      readonly exp_month?: number | null;
      readonly exp_year?: number | null;
      readonly fingerprint?: string;
      readonly funding?: string | null;
      readonly last4?: string | null;
      readonly pos_device_id?: string | null;
      readonly pos_entry_mode?: string;
      readonly read_method?: string | null;
      readonly reader?: string | null;
      readonly terminal_verification_results?: string;
      readonly transaction_status_information?: string;
    };
    readonly source_type_eps: {
      readonly reference?: string | null;
      readonly statement_descriptor?: string | null;
    };
    readonly source_type_giropay: {
      readonly bank_code?: string | null;
      readonly bank_name?: string | null;
      readonly bic?: string | null;
      readonly statement_descriptor?: string | null;
    };
    readonly source_type_ideal: {
      readonly bank?: string | null;
      readonly bic?: string | null;
      readonly iban_last4?: string | null;
      readonly statement_descriptor?: string | null;
    };
    readonly source_type_klarna: {
      readonly background_image_url?: string;
      readonly client_token?: string | null;
      readonly first_name?: string;
      readonly last_name?: string;
      readonly locale?: string;
      readonly logo_url?: string;
      readonly page_title?: string;
      readonly pay_later_asset_urls_descriptive?: string;
      readonly pay_later_asset_urls_standard?: string;
      readonly pay_later_name?: string;
      readonly pay_later_redirect_url?: string;
      readonly pay_now_asset_urls_descriptive?: string;
      readonly pay_now_asset_urls_standard?: string;
      readonly pay_now_name?: string;
      readonly pay_now_redirect_url?: string;
      readonly pay_over_time_asset_urls_descriptive?: string;
      readonly pay_over_time_asset_urls_standard?: string;
      readonly pay_over_time_name?: string;
      readonly pay_over_time_redirect_url?: string;
      readonly payment_method_categories?: string;
      readonly purchase_country?: string;
      readonly purchase_type?: string;
      readonly redirect_url?: string;
      readonly shipping_delay?: number;
      readonly shipping_first_name?: string;
      readonly shipping_last_name?: string;
    };
    readonly source_type_multibanco: {
      readonly entity?: string | null;
      readonly reference?: string | null;
      readonly refund_account_holder_address_city?: string | null;
      readonly refund_account_holder_address_country?: string | null;
      readonly refund_account_holder_address_line1?: string | null;
      readonly refund_account_holder_address_line2?: string | null;
      readonly refund_account_holder_address_postal_code?: string | null;
      readonly refund_account_holder_address_state?: string | null;
      readonly refund_account_holder_name?: string | null;
      readonly refund_iban?: string | null;
    };
    readonly source_type_p24: {
      readonly reference?: string | null;
    };
    readonly source_type_sepa_debit: {
      readonly bank_code?: string | null;
      readonly branch_code?: string | null;
      readonly country?: string | null;
      readonly fingerprint?: string | null;
      readonly last4?: string | null;
      readonly mandate_reference?: string | null;
      readonly mandate_url?: string | null;
    };
    readonly source_type_sofort: {
      readonly bank_code?: string | null;
      readonly bank_name?: string | null;
      readonly bic?: string | null;
      readonly country?: string | null;
      readonly iban_last4?: string | null;
      readonly preferred_language?: string | null;
      readonly statement_descriptor?: string | null;
    };
    readonly source_type_three_d_secure: {
      readonly address_line1_check?: string | null;
      readonly address_zip_check?: string | null;
      readonly authenticated?: boolean | null;
      readonly brand?: string | null;
      readonly card?: string | null;
      readonly country?: string | null;
      readonly customer?: string | null;
      readonly cvc_check?: string | null;
      readonly dynamic_last4?: string | null;
      readonly exp_month?: number | null;
      readonly exp_year?: number | null;
      readonly fingerprint?: string;
      readonly funding?: string | null;
      readonly last4?: string | null;
      readonly name?: string | null;
      readonly three_d_secure?: string;
      readonly tokenization_method?: string | null;
    };
    readonly source_type_wechat: {
      readonly prepay_id?: string;
      readonly qr_code_url?: string | null;
      readonly statement_descriptor?: string;
    };
    /** StatusTransitions */
    readonly status_transitions: {
      /**
       * Format: unix-time
       * @description The time that the order was canceled.
       */
      readonly canceled?: number | null;
      /**
       * Format: unix-time
       * @description The time that the order was fulfilled.
       */
      readonly fulfiled?: number | null;
      /**
       * Format: unix-time
       * @description The time that the order was paid.
       */
      readonly paid?: number | null;
      /**
       * Format: unix-time
       * @description The time that the order was returned.
       */
      readonly returned?: number | null;
    };
    /**
     * Subscription
     * @description Subscriptions allow you to charge a customer on a recurring basis.
     *
     * Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
     */
    readonly subscription: {
      /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
      readonly application_fee_percent?: number | null;
      readonly automatic_tax: components["schemas"]["subscription_automatic_tax"];
      /**
       * Format: unix-time
       * @description Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
       */
      readonly billing_cycle_anchor: number;
      /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      readonly billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
      /**
       * Format: unix-time
       * @description A date in the future at which the subscription will automatically get canceled
       */
      readonly cancel_at?: number | null;
      /** @description If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. */
      readonly cancel_at_period_end: boolean;
      /**
       * Format: unix-time
       * @description If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
       */
      readonly canceled_at?: number | null;
      /**
       * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
       * @enum {string}
       */
      readonly collection_method: "charge_automatically" | "send_invoice";
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /**
       * Format: unix-time
       * @description End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.
       */
      readonly current_period_end: number;
      /**
       * Format: unix-time
       * @description Start of the current period that the subscription has been invoiced for.
       */
      readonly current_period_start: number;
      /** @description ID of the customer who owns the subscription. */
      readonly customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
      /** @description Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
      readonly days_until_due?: number | null;
      /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
      readonly default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
      /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
      readonly default_source?:
        | (
            | string
            | components["schemas"]["alipay_account"]
            | components["schemas"]["bank_account"]
            | components["schemas"]["bitcoin_receiver"]
            | components["schemas"]["card"]
            | components["schemas"]["source"]
          )
        | null;
      /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
      readonly default_tax_rates?: readonly components["schemas"]["tax_rate"][] | null;
      /** @description Describes the current discount applied to this subscription, if there is one. When billing, a discount applied to a subscription overrides a discount applied on a customer-wide basis. */
      readonly discount?: components["schemas"]["discount"] | null;
      /**
       * Format: unix-time
       * @description If the subscription has ended, the date the subscription ended.
       */
      readonly ended_at?: number | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * SubscriptionItemList
       * @description List of subscription items, each with an attached price.
       */
      readonly items: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["subscription_item"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description The most recent invoice this subscription has generated. */
      readonly latest_invoice?: (string | components["schemas"]["invoice"]) | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * Format: unix-time
       * @description Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
       */
      readonly next_pending_invoice_item_invoice?: number | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "subscription";
      /** @description If specified, payment collection for this subscription will be paused. */
      readonly pause_collection?: components["schemas"]["subscriptions_resource_pause_collection"] | null;
      /** @description Payment settings passed on to invoices created by the subscription. */
      readonly payment_settings?: components["schemas"]["subscriptions_resource_payment_settings"] | null;
      /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
      readonly pending_invoice_item_interval?:
        | components["schemas"]["subscription_pending_invoice_item_interval"]
        | null;
      /** @description You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
      readonly pending_setup_intent?: (string | components["schemas"]["setup_intent"]) | null;
      /** @description If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid. */
      readonly pending_update?: components["schemas"]["subscriptions_resource_pending_update"] | null;
      /** @description The schedule attached to the subscription */
      readonly schedule?: (string | components["schemas"]["subscription_schedule"]) | null;
      /**
       * Format: unix-time
       * @description Date when the subscription was first created. The date might differ from the `created` date due to backdating.
       */
      readonly start_date: number;
      /**
       * @description Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
       *
       * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
       *
       * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
       *
       * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
       *
       * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
       * @enum {string}
       */
      readonly status: "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "trialing" | "unpaid";
      /** @description The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      readonly transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
      /**
       * Format: unix-time
       * @description If the subscription has a trial, the end of that trial.
       */
      readonly trial_end?: number | null;
      /**
       * Format: unix-time
       * @description If the subscription has a trial, the beginning of that trial.
       */
      readonly trial_start?: number | null;
    };
    /** SubscriptionAutomaticTax */
    readonly subscription_automatic_tax: {
      /** @description Whether Stripe automatically computes tax on this subscription. */
      readonly enabled: boolean;
    };
    /** SubscriptionBillingThresholds */
    readonly subscription_billing_thresholds: {
      /** @description Monetary threshold that triggers the subscription to create an invoice */
      readonly amount_gte?: number | null;
      /** @description Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
      readonly reset_billing_cycle_anchor?: boolean | null;
    };
    /**
     * SubscriptionItem
     * @description Subscription items allow you to create customer subscriptions with more than
     * one plan, making it easy to represent complex billing relationships.
     */
    readonly subscription_item: {
      /** @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      readonly billing_thresholds?: components["schemas"]["subscription_item_billing_thresholds"] | null;
      /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
      readonly created: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "subscription_item";
      readonly price: components["schemas"]["price"];
      /** @description The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
      readonly quantity?: number;
      /** @description The `subscription` this `subscription_item` belongs to. */
      readonly subscription: string;
      /** @description The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
      readonly tax_rates?: readonly components["schemas"]["tax_rate"][] | null;
    };
    /** SubscriptionItemBillingThresholds */
    readonly subscription_item_billing_thresholds: {
      /** @description Usage threshold that triggers the subscription to create an invoice */
      readonly usage_gte?: number | null;
    };
    /** subscription_payment_method_options_card */
    readonly subscription_payment_method_options_card: {
      readonly mandate_options?: components["schemas"]["invoice_mandate_options_card"];
      /**
       * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
       * @enum {string|null}
       */
      readonly request_three_d_secure?: ("any" | "automatic") | null;
    };
    /** SubscriptionPendingInvoiceItemInterval */
    readonly subscription_pending_invoice_item_interval: {
      /**
       * @description Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
       * @enum {string}
       */
      readonly interval: "day" | "month" | "week" | "year";
      /** @description The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
      readonly interval_count: number;
    };
    /**
     * SubscriptionSchedule
     * @description A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
     *
     * Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
     */
    readonly subscription_schedule: {
      /**
       * Format: unix-time
       * @description Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
       */
      readonly canceled_at?: number | null;
      /**
       * Format: unix-time
       * @description Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
       */
      readonly completed_at?: number | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`. */
      readonly current_phase?: components["schemas"]["subscription_schedule_current_phase"] | null;
      /** @description ID of the customer who owns the subscription schedule. */
      readonly customer: string | components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
      readonly default_settings: components["schemas"]["subscription_schedules_resource_default_settings"];
      /**
       * @description Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` and `cancel`.
       * @enum {string}
       */
      readonly end_behavior: "cancel" | "none" | "release" | "renew";
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "subscription_schedule";
      /** @description Configuration for the subscription schedule's phases. */
      readonly phases: readonly components["schemas"]["subscription_schedule_phase_configuration"][];
      /**
       * Format: unix-time
       * @description Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
       */
      readonly released_at?: number | null;
      /** @description ID of the subscription once managed by the subscription schedule (if it is released). */
      readonly released_subscription?: string | null;
      /**
       * @description The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
       * @enum {string}
       */
      readonly status: "active" | "canceled" | "completed" | "not_started" | "released";
      /** @description ID of the subscription managed by the subscription schedule. */
      readonly subscription?: (string | components["schemas"]["subscription"]) | null;
    };
    /**
     * SubscriptionScheduleAddInvoiceItem
     * @description An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
     */
    readonly subscription_schedule_add_invoice_item: {
      /** @description ID of the price used to generate the invoice item. */
      readonly price: string | components["schemas"]["price"] | components["schemas"]["deleted_price"];
      /** @description The quantity of the invoice item. */
      readonly quantity?: number | null;
      /** @description The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item. */
      readonly tax_rates?: readonly components["schemas"]["tax_rate"][] | null;
    };
    /**
     * SubscriptionScheduleConfigurationItem
     * @description A phase item describes the price and quantity of a phase.
     */
    readonly subscription_schedule_configuration_item: {
      /** @description Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period */
      readonly billing_thresholds?: components["schemas"]["subscription_item_billing_thresholds"] | null;
      /** @description ID of the price to which the customer should be subscribed. */
      readonly price: string | components["schemas"]["price"] | components["schemas"]["deleted_price"];
      /** @description Quantity of the plan to which the customer should be subscribed. */
      readonly quantity?: number;
      /** @description The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
      readonly tax_rates?: readonly components["schemas"]["tax_rate"][] | null;
    };
    /** SubscriptionScheduleCurrentPhase */
    readonly subscription_schedule_current_phase: {
      /**
       * Format: unix-time
       * @description The end of this phase of the subscription schedule.
       */
      readonly end_date: number;
      /**
       * Format: unix-time
       * @description The start of this phase of the subscription schedule.
       */
      readonly start_date: number;
    };
    /**
     * SubscriptionSchedulePhaseConfiguration
     * @description A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
     */
    readonly subscription_schedule_phase_configuration: {
      /** @description A list of prices and quantities that will generate invoice items appended to the first invoice for this phase. */
      readonly add_invoice_items: readonly components["schemas"]["subscription_schedule_add_invoice_item"][];
      /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
      readonly application_fee_percent?: number | null;
      readonly automatic_tax?: components["schemas"]["schedules_phase_automatic_tax"];
      /**
       * @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
       * @enum {string|null}
       */
      readonly billing_cycle_anchor?: ("automatic" | "phase_start") | null;
      /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      readonly billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
      /**
       * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
       * @enum {string|null}
       */
      readonly collection_method?: ("charge_automatically" | "send_invoice") | null;
      /** @description ID of the coupon to use during this phase of the subscription schedule. */
      readonly coupon?: (string | components["schemas"]["coupon"] | components["schemas"]["deleted_coupon"]) | null;
      /** @description ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
      readonly default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The default tax rates to apply to the subscription during this phase of the subscription schedule. */
      readonly default_tax_rates?: readonly components["schemas"]["tax_rate"][] | null;
      /**
       * Format: unix-time
       * @description The end of this phase of the subscription schedule.
       */
      readonly end_date: number;
      /** @description The invoice settings applicable during this phase. */
      readonly invoice_settings?: components["schemas"]["invoice_setting_subscription_schedule_setting"] | null;
      /** @description Subscription items to configure the subscription to during this phase of the subscription schedule. */
      readonly items: readonly components["schemas"]["subscription_schedule_configuration_item"][];
      /**
       * @description If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
       * @enum {string}
       */
      readonly proration_behavior: "always_invoice" | "create_prorations" | "none";
      /**
       * Format: unix-time
       * @description The start of this phase of the subscription schedule.
       */
      readonly start_date: number;
      /** @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      readonly transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
      /**
       * Format: unix-time
       * @description When the trial ends within the phase.
       */
      readonly trial_end?: number | null;
    };
    /** SubscriptionSchedulesResourceDefaultSettings */
    readonly subscription_schedules_resource_default_settings: {
      /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
      readonly application_fee_percent?: number | null;
      readonly automatic_tax?: components["schemas"]["subscription_schedules_resource_default_settings_automatic_tax"];
      /**
       * @description Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
       * @enum {string}
       */
      readonly billing_cycle_anchor: "automatic" | "phase_start";
      /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period */
      readonly billing_thresholds?: components["schemas"]["subscription_billing_thresholds"] | null;
      /**
       * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
       * @enum {string|null}
       */
      readonly collection_method?: ("charge_automatically" | "send_invoice") | null;
      /** @description ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
      readonly default_payment_method?: (string | components["schemas"]["payment_method"]) | null;
      /** @description The subscription schedule's default invoice settings. */
      readonly invoice_settings?: components["schemas"]["invoice_setting_subscription_schedule_setting"] | null;
      /** @description The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices. */
      readonly transfer_data?: components["schemas"]["subscription_transfer_data"] | null;
    };
    /** SubscriptionSchedulesResourceDefaultSettingsAutomaticTax */
    readonly subscription_schedules_resource_default_settings_automatic_tax: {
      /** @description Whether Stripe automatically computes tax on invoices created during this phase. */
      readonly enabled: boolean;
    };
    /** SubscriptionTransferData */
    readonly subscription_transfer_data: {
      /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the destination account. By default, the entire amount is transferred to the destination. */
      readonly amount_percent?: number | null;
      /** @description The account where funds from the payment will be transferred to upon payment success. */
      readonly destination: string | components["schemas"]["account"];
    };
    /**
     * SubscriptionsResourcePauseCollection
     * @description The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
     * should be paused.
     */
    readonly subscriptions_resource_pause_collection: {
      /**
       * @description The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
       * @enum {string}
       */
      readonly behavior: "keep_as_draft" | "mark_uncollectible" | "void";
      /**
       * Format: unix-time
       * @description The time after which the subscription will resume collecting payments.
       */
      readonly resumes_at?: number | null;
    };
    /** SubscriptionsResourcePaymentMethodOptions */
    readonly subscriptions_resource_payment_method_options: {
      /** @description This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription. */
      readonly acss_debit?: components["schemas"]["invoice_payment_method_options_acss_debit"] | null;
      /** @description This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription. */
      readonly bancontact?: components["schemas"]["invoice_payment_method_options_bancontact"] | null;
      /** @description This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription. */
      readonly card?: components["schemas"]["subscription_payment_method_options_card"] | null;
    };
    /** SubscriptionsResourcePaymentSettings */
    readonly subscriptions_resource_payment_settings: {
      /** @description Payment-method-specific configuration to provide to invoices created by the subscription. */
      readonly payment_method_options?: components["schemas"]["subscriptions_resource_payment_method_options"] | null;
      /** @description The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice). */
      readonly payment_method_types?:
        | readonly (
            | "ach_credit_transfer"
            | "ach_debit"
            | "acss_debit"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "boleto"
            | "card"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "sepa_debit"
            | "sofort"
            | "wechat_pay"
          )[]
        | null;
    };
    /**
     * SubscriptionsResourcePendingUpdate
     * @description Pending Updates store the changes pending from a previous update that will be applied
     * to the Subscription upon successful payment.
     */
    readonly subscriptions_resource_pending_update: {
      /**
       * Format: unix-time
       * @description If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
       */
      readonly billing_cycle_anchor?: number | null;
      /**
       * Format: unix-time
       * @description The point after which the changes reflected by this update will be discarded and no longer applied.
       */
      readonly expires_at: number;
      /** @description List of subscription items, each with an attached plan, that will be set if the update is applied. */
      readonly subscription_items?: readonly components["schemas"]["subscription_item"][] | null;
      /**
       * Format: unix-time
       * @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
       */
      readonly trial_end?: number | null;
      /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
      readonly trial_from_plan?: boolean | null;
    };
    /**
     * TaxProductResourceTaxCode
     * @description [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods and services for tax purposes.
     */
    readonly tax_code: {
      /** @description A detailed description of which types of products the tax code represents. */
      readonly description: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description A short name for the tax code. */
      readonly name: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "tax_code";
    };
    /** TaxDeductedAtSource */
    readonly tax_deducted_at_source: {
      /** @description Unique identifier for the object. */
      readonly id: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "tax_deducted_at_source";
      /**
       * Format: unix-time
       * @description The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
       */
      readonly period_end: number;
      /**
       * Format: unix-time
       * @description The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
       */
      readonly period_start: number;
      /** @description The TAN that was supplied to Stripe when TDS was assessed */
      readonly tax_deduction_account_number: string;
    };
    /**
     * tax_id
     * @description You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
     * A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
     *
     * Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
     */
    readonly tax_id: {
      /** @description Two-letter ISO code representing the country of the tax ID. */
      readonly country?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description ID of the customer. */
      readonly customer?: (string | components["schemas"]["customer"]) | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "tax_id";
      /**
       * @description Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
       * @enum {string}
       */
      readonly type:
        | "ae_trn"
        | "au_abn"
        | "au_arn"
        | "br_cnpj"
        | "br_cpf"
        | "ca_bn"
        | "ca_gst_hst"
        | "ca_pst_bc"
        | "ca_pst_mb"
        | "ca_pst_sk"
        | "ca_qst"
        | "ch_vat"
        | "cl_tin"
        | "es_cif"
        | "eu_vat"
        | "gb_vat"
        | "ge_vat"
        | "hk_br"
        | "id_npwp"
        | "il_vat"
        | "in_gst"
        | "is_vat"
        | "jp_cn"
        | "jp_rn"
        | "kr_brn"
        | "li_uid"
        | "mx_rfc"
        | "my_frp"
        | "my_itn"
        | "my_sst"
        | "no_vat"
        | "nz_gst"
        | "ru_inn"
        | "ru_kpp"
        | "sa_vat"
        | "sg_gst"
        | "sg_uen"
        | "th_vat"
        | "tw_vat"
        | "ua_vat"
        | "unknown"
        | "us_ein"
        | "za_vat";
      /** @description Value of the tax ID. */
      readonly value: string;
      /** @description Tax ID verification information. */
      readonly verification?: components["schemas"]["tax_id_verification"] | null;
    };
    /** tax_id_verification */
    readonly tax_id_verification: {
      /**
       * @description Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
       * @enum {string}
       */
      readonly status: "pending" | "unavailable" | "unverified" | "verified";
      /** @description Verified address. */
      readonly verified_address?: string | null;
      /** @description Verified name. */
      readonly verified_name?: string | null;
    };
    /**
     * TaxRate
     * @description Tax rates can be applied to [invoices](https://stripe.com/docs/billing/invoices/tax-rates), [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes) and [Checkout Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates) to collect tax.
     *
     * Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
     */
    readonly tax_rate: {
      /** @description Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
      readonly active: boolean;
      /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
      readonly country?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
      readonly description?: string | null;
      /** @description The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
      readonly display_name: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description This specifies if the tax rate is inclusive or exclusive. */
      readonly inclusive: boolean;
      /** @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
      readonly jurisdiction?: string | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "tax_rate";
      /** @description This represents the tax rate percent out of 100. */
      readonly percentage: number;
      /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
      readonly state?: string | null;
      /**
       * @description The high-level tax type, such as `vat` or `sales_tax`.
       * @enum {string|null}
       */
      readonly tax_type?: ("gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat") | null;
    };
    /**
     * TerminalConnectionToken
     * @description A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
     *
     * Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
     */
    readonly "terminal.connection_token": {
      /** @description The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens). */
      readonly location?: string;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "terminal.connection_token";
      /** @description Your application should pass this token to the Stripe Terminal SDK. */
      readonly secret: string;
    };
    /**
     * TerminalLocationLocation
     * @description A Location represents a grouping of readers.
     *
     * Related guide: [Fleet Management](https://stripe.com/docs/terminal/fleet/locations).
     */
    readonly "terminal.location": {
      readonly address: components["schemas"]["address"];
      /** @description The display name of the location. */
      readonly display_name: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "terminal.location";
    };
    /**
     * TerminalReaderReader
     * @description A Reader represents a physical device for accepting payment details.
     *
     * Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/payments/connect-reader).
     */
    readonly "terminal.reader": {
      /** @description The current software version of the reader. */
      readonly device_sw_version?: string | null;
      /**
       * @description Type of reader, one of `bbpos_chipper2x`, `bbpos_wisepos_e`, or `verifone_P400`.
       * @enum {string}
       */
      readonly device_type: "bbpos_chipper2x" | "bbpos_wisepos_e" | "verifone_P400";
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The local IP address of the reader. */
      readonly ip_address?: string | null;
      /** @description Custom label given to the reader for easier identification. */
      readonly label: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description The location identifier of the reader. */
      readonly location?: (string | components["schemas"]["terminal.location"]) | null;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "terminal.reader";
      /** @description Serial number of the reader. */
      readonly serial_number: string;
      /** @description The networking status of the reader. */
      readonly status?: string | null;
    };
    /**
     * ThreeDSecure
     * @description Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
     * object. Once the object has been created, you can use it to authenticate the
     * cardholder and create a charge.
     */
    readonly three_d_secure: {
      /** @description Amount of the charge that you will create when authentication completes. */
      readonly amount: number;
      /** @description True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded. */
      readonly authenticated: boolean;
      readonly card: components["schemas"]["card"];
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "three_d_secure";
      /** @description If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback". */
      readonly redirect_url?: string | null;
      /** @description Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully. */
      readonly status: string;
    };
    /** three_d_secure_details */
    readonly three_d_secure_details: {
      /**
       * @description For authenticated transactions: how the customer was authenticated by
       * the issuing bank.
       * @enum {string|null}
       */
      readonly authentication_flow?: ("challenge" | "frictionless") | null;
      /**
       * @description Indicates the outcome of 3D Secure authentication.
       * @enum {string|null}
       */
      readonly result?:
        | ("attempt_acknowledged" | "authenticated" | "failed" | "not_supported" | "processing_error")
        | null;
      /**
       * @description Additional information about why 3D Secure succeeded or failed based
       * on the `result`.
       * @enum {string|null}
       */
      readonly result_reason?:
        | (
            | "abandoned"
            | "bypassed"
            | "canceled"
            | "card_not_enrolled"
            | "network_not_supported"
            | "protocol_error"
            | "rejected"
          )
        | null;
      /**
       * @description The version of 3D Secure that was used.
       * @enum {string|null}
       */
      readonly version?: ("1.0.2" | "2.1.0" | "2.2.0") | null;
    };
    /** three_d_secure_usage */
    readonly three_d_secure_usage: {
      /** @description Whether 3D Secure is supported on this card. */
      readonly supported: boolean;
    };
    /**
     * Token
     * @description Tokenization is the process Stripe uses to collect sensitive card or bank
     * account details, or personally identifiable information (PII), directly from
     * your customers in a secure manner. A token representing this information is
     * returned to your server to use. You should use our
     * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
     * client-side. This ensures that no sensitive card data touches your server,
     * and allows your integration to operate in a PCI-compliant way.
     *
     * If you cannot use client-side tokenization, you can also create tokens using
     * the API with either your publishable or secret API key. Keep in mind that if
     * your integration uses this method, you are responsible for any PCI compliance
     * that may be required, and you must keep your secret API key safe. Unlike with
     * client-side tokenization, your customer's information is not sent directly to
     * Stripe, so we cannot determine how it is handled or stored.
     *
     * Tokens cannot be stored or used more than once. To store card or bank account
     * information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
     * objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
     * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
     * performs best with integrations that use client-side tokenization.
     *
     * Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
     */
    readonly token: {
      readonly bank_account?: components["schemas"]["bank_account"];
      readonly card?: components["schemas"]["card"];
      /** @description IP address of the client that generated the token. */
      readonly client_ip?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "token";
      /** @description Type of the token: `account`, `bank_account`, `card`, or `pii`. */
      readonly type: string;
      /** @description Whether this token has already been used (tokens can be used only once). */
      readonly used: boolean;
    };
    /**
     * Topup
     * @description To top up your Stripe balance, you create a top-up object. You can retrieve
     * individual top-ups, as well as list all top-ups. Top-ups are identified by a
     * unique, random ID.
     *
     * Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
     */
    readonly topup: {
      /** @description Amount transferred. */
      readonly amount: number;
      /** @description ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
      readonly expected_availability_date?: number | null;
      /** @description Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
      readonly failure_code?: string | null;
      /** @description Message to user further explaining reason for top-up failure if available. */
      readonly failure_message?: string | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "topup";
      readonly source: components["schemas"]["source"];
      /** @description Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
      readonly statement_descriptor?: string | null;
      /**
       * @description The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
       * @enum {string}
       */
      readonly status: "canceled" | "failed" | "pending" | "reversed" | "succeeded";
      /** @description A string that identifies this top-up as part of a group. */
      readonly transfer_group?: string | null;
    };
    /**
     * Transfer
     * @description A `Transfer` object is created when you move funds between Stripe accounts as
     * part of Connect.
     *
     * Before April 6, 2017, transfers also represented movement of funds from a
     * Stripe account to a card or bank account. This behavior has since been split
     * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
     * information, read about the
     * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
     *
     * Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
     */
    readonly transfer: {
      /** @description Amount in %s to be transferred. */
      readonly amount: number;
      /** @description Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
      readonly amount_reversed: number;
      /** @description Balance transaction that describes the impact of this transfer on your account balance. */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /**
       * Format: unix-time
       * @description Time that this record of the transfer was first created.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
      readonly description?: string | null;
      /** @description ID of the Stripe account the transfer was sent to. */
      readonly destination?: (string | components["schemas"]["account"]) | null;
      /** @description If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
      readonly destination_payment?: string | components["schemas"]["charge"];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "transfer";
      /**
       * TransferReversalList
       * @description A list of reversals that have been applied to the transfer.
       */
      readonly reversals: {
        /** @description Details about each object. */
        readonly data: readonly components["schemas"]["transfer_reversal"][];
        /** @description True if this list has another page of items after this one that can be fetched. */
        readonly has_more: boolean;
        /**
         * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         * @enum {string}
         */
        readonly object: "list";
        /** @description The URL where this list can be accessed. */
        readonly url: string;
      };
      /** @description Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
      readonly reversed: boolean;
      /** @description ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance. */
      readonly source_transaction?: (string | components["schemas"]["charge"]) | null;
      /** @description The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
      readonly source_type?: string | null;
      /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
      readonly transfer_group?: string | null;
    };
    /** transfer_data */
    readonly transfer_data: {
      /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
      readonly amount?: number;
      /**
       * @description The account (if any) the payment will be attributed to for tax
       * reporting, and where funds from the payment will be transferred to upon
       * payment success.
       */
      readonly destination: string | components["schemas"]["account"];
    };
    /**
     * TransferReversal
     * @description [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
     * connected account, either entirely or partially, and can also specify whether
     * to refund any related application fees. Transfer reversals add to the
     * platform's balance and subtract from the destination account's balance.
     *
     * Reversing a transfer that was made for a [destination
     * charge](/docs/connect/destination-charges) is allowed only up to the amount of
     * the charge. It is possible to reverse a
     * [transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
     * transfer only if the destination account has enough balance to cover the
     * reversal.
     *
     * Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
     */
    readonly transfer_reversal: {
      /** @description Amount, in %s. */
      readonly amount: number;
      /** @description Balance transaction that describes the impact on your account balance. */
      readonly balance_transaction?: (string | components["schemas"]["balance_transaction"]) | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
      readonly currency: string;
      /** @description Linked payment refund for the transfer reversal. */
      readonly destination_payment_refund?: (string | components["schemas"]["refund"]) | null;
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata?: { readonly [key: string]: string } | null;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "transfer_reversal";
      /** @description ID of the refund responsible for the transfer reversal. */
      readonly source_refund?: (string | components["schemas"]["refund"]) | null;
      /** @description ID of the transfer that was reversed. */
      readonly transfer: string | components["schemas"]["transfer"];
    };
    /** TransferSchedule */
    readonly transfer_schedule: {
      /** @description The number of days charges for the account will be held before being paid out. */
      readonly delay_days: number;
      /** @description How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
      readonly interval: string;
      /** @description The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
      readonly monthly_anchor?: number;
      /** @description The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
      readonly weekly_anchor?: string;
    };
    /** TransformQuantity */
    readonly transform_quantity: {
      /** @description Divide usage by this number. */
      readonly divide_by: number;
      /**
       * @description After division, either round the result `up` or `down`.
       * @enum {string}
       */
      readonly round: "down" | "up";
    };
    /** TransformUsage */
    readonly transform_usage: {
      /** @description Divide usage by this number. */
      readonly divide_by: number;
      /**
       * @description After division, either round the result `up` or `down`.
       * @enum {string}
       */
      readonly round: "down" | "up";
    };
    /**
     * UsageRecord
     * @description Usage records allow you to report customer usage and metrics to Stripe for
     * metered billing of subscription prices.
     *
     * Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
     */
    readonly usage_record: {
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "usage_record";
      /** @description The usage quantity for the specified date. */
      readonly quantity: number;
      /** @description The ID of the subscription item this usage record contains data for. */
      readonly subscription_item: string;
      /**
       * Format: unix-time
       * @description The timestamp when this usage occurred.
       */
      readonly timestamp: number;
    };
    /** UsageRecordSummary */
    readonly usage_record_summary: {
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description The invoice in which this usage period has been billed for. */
      readonly invoice?: string | null;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "usage_record_summary";
      readonly period: components["schemas"]["period"];
      /** @description The ID of the subscription item this summary is describing. */
      readonly subscription_item: string;
      /** @description The total usage within this usage period. */
      readonly total_usage: number;
    };
    /** verification_session_redaction */
    readonly verification_session_redaction: {
      /**
       * @description Indicates whether this object and its related objects have been redacted or not.
       * @enum {string}
       */
      readonly status: "processing" | "redacted";
    };
    /**
     * NotificationWebhookEndpoint
     * @description You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
     * notified about events that happen in your Stripe account or connected
     * accounts.
     *
     * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
     *
     * Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
     */
    readonly webhook_endpoint: {
      /** @description The API version events are rendered as for this webhook endpoint. */
      readonly api_version?: string | null;
      /** @description The ID of the associated Connect application. */
      readonly application?: string | null;
      /**
       * Format: unix-time
       * @description Time at which the object was created. Measured in seconds since the Unix epoch.
       */
      readonly created: number;
      /** @description An optional description of what the webhook is used for. */
      readonly description?: string | null;
      /** @description The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection. */
      readonly enabled_events: readonly string[];
      /** @description Unique identifier for the object. */
      readonly id: string;
      /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
      readonly livemode: boolean;
      /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
      readonly metadata: { readonly [key: string]: string };
      /**
       * @description String representing the object's type. Objects of the same type share the same value.
       * @enum {string}
       */
      readonly object: "webhook_endpoint";
      /** @description The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation. */
      readonly secret?: string;
      /** @description The status of the webhook. It can be `enabled` or `disabled`. */
      readonly status: string;
      /** @description The URL of the webhook endpoint. */
      readonly url: string;
    };
  };
}

export interface operations {
  /** <p>Initiate 3D Secure authentication.</p> */
  readonly Post3dSecure: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["three_d_secure"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Amount of the charge that you will create when authentication completes. */
          readonly amount: number;
          /** @description The ID of a card token, or the ID of a card belonging to the given customer. */
          readonly card?: string;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description The customer associated with this 3D secure authentication. */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The URL that the cardholder's browser will be returned to when authentication completes. */
          readonly return_url: string;
        };
      };
    };
  };
  /** <p>Retrieves a 3D Secure object.</p> */
  readonly Get3dSecureThreeDSecure: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly three_d_secure: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["three_d_secure"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the details of an account.</p> */
  readonly GetAccount: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   */
  readonly PostAccount: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          readonly account_token?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                /** @enum {string} */
                readonly account_type?: "checking" | "futsu" | "savings" | "toza";
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /**
           * business_profile_specs
           * @description Business information about the account.
           */
          readonly business_profile?: {
            readonly mcc?: string;
            readonly name?: string;
            readonly product_description?: string;
            /** address_specs */
            readonly support_address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly support_email?: string;
            readonly support_phone?: string;
            readonly support_url?: string | "";
            readonly url?: string;
          };
          /**
           * @description The business type.
           * @enum {string}
           */
          readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /**
           * capabilities_param
           * @description Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
           */
          readonly capabilities?: {
            /** capability_param */
            readonly acss_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly afterpay_clearpay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly au_becs_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly bacs_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly bancontact_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly boleto_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly card_issuing?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly card_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly cartes_bancaires_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly eps_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly fpx_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly giropay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly grabpay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly ideal_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly jcb_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly klarna_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly legacy_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly oxxo_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly p24_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly sepa_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly sofort_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly tax_reporting_us_1099_k?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly tax_reporting_us_1099_misc?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly transfers?: {
              readonly requested?: boolean;
            };
          };
          /**
           * company_specs
           * @description Information about the company or business. This field is available for any `business_type`.
           */
          readonly company?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly directors_provided?: boolean;
            readonly executives_provided?: boolean;
            readonly name?: string;
            readonly name_kana?: string;
            readonly name_kanji?: string;
            readonly owners_provided?: boolean;
            /** company_ownership_declaration */
            readonly ownership_declaration?: {
              /** Format: unix-time */
              readonly date?: number;
              readonly ip?: string;
              readonly user_agent?: string;
            };
            readonly phone?: string;
            readonly registration_number?: string;
            /** @enum {string} */
            readonly structure?:
              | ""
              | "free_zone_establishment"
              | "free_zone_llc"
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "llc"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "single_member_llc"
              | "sole_establishment"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            readonly tax_id?: string;
            readonly tax_id_registrar?: string;
            readonly vat_id?: string;
            /** verification_specs */
            readonly verification?: {
              /** verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          readonly default_currency?: string;
          /**
           * documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly bank_account_ownership_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_license?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_memorandum_of_association?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_ministerial_decree?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_registration_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_tax_id_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly proof_of_registration?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The email address of the account holder. This is only to make the account easier to identify to you. Stripe only emails Custom accounts with your consent. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          readonly external_account?: string;
          /**
           * individual_specs
           * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
           */
          readonly individual?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?:
              | {
                  readonly day: number;
                  readonly month: number;
                  readonly year: number;
                }
              | "";
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly full_name_aliases?: readonly string[] | "";
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: { readonly [key: string]: string } | "";
            readonly phone?: string;
            /** @enum {string} */
            readonly political_exposure?: "existing" | "none";
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /**
           * settings_specs_update
           * @description Options for customizing how the account functions within Stripe.
           */
          readonly settings?: {
            /** branding_settings_specs */
            readonly branding?: {
              readonly icon?: string;
              readonly logo?: string;
              readonly primary_color?: string;
              readonly secondary_color?: string;
            };
            /** card_issuing_settings_specs */
            readonly card_issuing?: {
              /** settings_terms_of_service_specs */
              readonly tos_acceptance?: {
                /** Format: unix-time */
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
            };
            /** card_payments_settings_specs */
            readonly card_payments?: {
              /** decline_charge_on_specs */
              readonly decline_on?: {
                readonly avs_failure?: boolean;
                readonly cvc_failure?: boolean;
              };
              readonly statement_descriptor_prefix?: string;
            };
            /** payments_settings_specs */
            readonly payments?: {
              readonly statement_descriptor?: string;
              readonly statement_descriptor_kana?: string;
              readonly statement_descriptor_kanji?: string;
            };
            /** payout_settings_specs */
            readonly payouts?: {
              readonly debit_negative_balances?: boolean;
              /** transfer_schedule_specs */
              readonly schedule?: {
                readonly delay_days?: "minimum" | number;
                /** @enum {string} */
                readonly interval?: "daily" | "manual" | "monthly" | "weekly";
                readonly monthly_anchor?: number;
                /** @enum {string} */
                readonly weekly_anchor?:
                  | "friday"
                  | "monday"
                  | "saturday"
                  | "sunday"
                  | "thursday"
                  | "tuesday"
                  | "wednesday";
              };
              readonly statement_descriptor?: string;
            };
          };
          /**
           * tos_acceptance_specs
           * @description Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
           */
          readonly tos_acceptance?: {
            /** Format: unix-time */
            readonly date?: number;
            readonly ip?: string;
            readonly service_agreement?: string;
            readonly user_agent?: string;
          };
        };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   */
  readonly DeleteAccount: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly account?: string;
        };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountBankAccounts: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                /** @enum {string} */
                readonly account_type?: "checking" | "futsu" | "savings" | "toza";
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountBankAccountsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /**
           * @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
           * @enum {string}
           */
          readonly account_type?: "checking" | "futsu" | "savings" | "toza";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
  readonly GetAccountCapabilities: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["capability"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves information about the specified Account Capability.</p> */
  readonly GetAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly path: {
        readonly capability: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing Account Capability.</p> */
  readonly PostAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly path: {
        readonly capability: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
          readonly requested?: boolean;
        };
      };
    };
  };
  /** <p>List external accounts for an account.</p> */
  readonly GetAccountExternalAccounts: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
            readonly data: readonly (components["schemas"]["bank_account"] | components["schemas"]["card"])[];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountExternalAccounts: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                /** @enum {string} */
                readonly account_type?: "checking" | "futsu" | "savings" | "toza";
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountExternalAccountsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /**
           * @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
           * @enum {string}
           */
          readonly account_type?: "checking" | "futsu" | "savings" | "toza";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  readonly PostAccountLoginLinks: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["login_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly account: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Where to redirect the user after they log out of their dashboard. */
          readonly redirect_url?: string;
        };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountPeople: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: {
          readonly director?: boolean;
          readonly executive?: boolean;
          readonly owner?: boolean;
          readonly representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["person"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountPeople: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountPeoplePerson: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountPersons: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: {
          readonly director?: boolean;
          readonly executive?: boolean;
          readonly owner?: boolean;
          readonly representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["person"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountPersons: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountPersonsPerson: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in order to take them through the Connect Onboarding flow.</p> */
  readonly PostAccountLinks: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["account_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The identifier of the account to create an account link for. */
          readonly account: string;
          /**
           * @description Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
           * @enum {string}
           */
          readonly collect?: "currently_due" | "eventually_due";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The URL the user will be redirected to if the account link is expired, has been previously-visited, or is otherwise invalid. The URL you specify should attempt to generate a new account link with the same parameters used to create the original account link, then redirect the user to the new account link's URL so they can continue with Connect Onboarding. If a new account link cannot be generated or the redirect fails you should display a useful error to the user. */
          readonly refresh_url?: string;
          /** @description The URL that the user will be redirected to upon leaving or completing the linked flow. */
          readonly return_url?: string;
          /**
           * @description The type of account link the user is requesting. Possible values are `account_onboarding` or `account_update`.
           * @enum {string}
           */
          readonly type: "account_onboarding" | "account_update";
        };
      };
    };
  };
  /** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p> */
  readonly GetAccounts: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["account"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
   * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
   */
  readonly PostAccounts: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          readonly account_token?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                /** @enum {string} */
                readonly account_type?: "checking" | "futsu" | "savings" | "toza";
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /**
           * business_profile_specs
           * @description Business information about the account.
           */
          readonly business_profile?: {
            readonly mcc?: string;
            readonly name?: string;
            readonly product_description?: string;
            /** address_specs */
            readonly support_address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly support_email?: string;
            readonly support_phone?: string;
            readonly support_url?: string | "";
            readonly url?: string;
          };
          /**
           * @description The business type.
           * @enum {string}
           */
          readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /**
           * capabilities_param
           * @description Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
           */
          readonly capabilities?: {
            /** capability_param */
            readonly acss_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly afterpay_clearpay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly au_becs_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly bacs_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly bancontact_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly boleto_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly card_issuing?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly card_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly cartes_bancaires_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly eps_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly fpx_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly giropay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly grabpay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly ideal_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly jcb_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly klarna_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly legacy_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly oxxo_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly p24_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly sepa_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly sofort_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly tax_reporting_us_1099_k?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly tax_reporting_us_1099_misc?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly transfers?: {
              readonly requested?: boolean;
            };
          };
          /**
           * company_specs
           * @description Information about the company or business. This field is available for any `business_type`.
           */
          readonly company?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly directors_provided?: boolean;
            readonly executives_provided?: boolean;
            readonly name?: string;
            readonly name_kana?: string;
            readonly name_kanji?: string;
            readonly owners_provided?: boolean;
            /** company_ownership_declaration */
            readonly ownership_declaration?: {
              /** Format: unix-time */
              readonly date?: number;
              readonly ip?: string;
              readonly user_agent?: string;
            };
            readonly phone?: string;
            readonly registration_number?: string;
            /** @enum {string} */
            readonly structure?:
              | ""
              | "free_zone_establishment"
              | "free_zone_llc"
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "llc"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "single_member_llc"
              | "sole_establishment"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            readonly tax_id?: string;
            readonly tax_id_registrar?: string;
            readonly vat_id?: string;
            /** verification_specs */
            readonly verification?: {
              /** verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. */
          readonly country?: string;
          /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          readonly default_currency?: string;
          /**
           * documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly bank_account_ownership_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_license?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_memorandum_of_association?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_ministerial_decree?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_registration_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_tax_id_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly proof_of_registration?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The email address of the account holder. This is only to make the account easier to identify to you. Stripe only emails Custom accounts with your consent. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          readonly external_account?: string;
          /**
           * individual_specs
           * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
           */
          readonly individual?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?:
              | {
                  readonly day: number;
                  readonly month: number;
                  readonly year: number;
                }
              | "";
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly full_name_aliases?: readonly string[] | "";
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: { readonly [key: string]: string } | "";
            readonly phone?: string;
            /** @enum {string} */
            readonly political_exposure?: "existing" | "none";
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /**
           * settings_specs
           * @description Options for customizing how the account functions within Stripe.
           */
          readonly settings?: {
            /** branding_settings_specs */
            readonly branding?: {
              readonly icon?: string;
              readonly logo?: string;
              readonly primary_color?: string;
              readonly secondary_color?: string;
            };
            /** card_issuing_settings_specs */
            readonly card_issuing?: {
              /** settings_terms_of_service_specs */
              readonly tos_acceptance?: {
                /** Format: unix-time */
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
            };
            /** card_payments_settings_specs */
            readonly card_payments?: {
              /** decline_charge_on_specs */
              readonly decline_on?: {
                readonly avs_failure?: boolean;
                readonly cvc_failure?: boolean;
              };
              readonly statement_descriptor_prefix?: string;
            };
            /** payments_settings_specs */
            readonly payments?: {
              readonly statement_descriptor?: string;
              readonly statement_descriptor_kana?: string;
              readonly statement_descriptor_kanji?: string;
            };
            /** payout_settings_specs */
            readonly payouts?: {
              readonly debit_negative_balances?: boolean;
              /** transfer_schedule_specs */
              readonly schedule?: {
                readonly delay_days?: "minimum" | number;
                /** @enum {string} */
                readonly interval?: "daily" | "manual" | "monthly" | "weekly";
                readonly monthly_anchor?: number;
                /** @enum {string} */
                readonly weekly_anchor?:
                  | "friday"
                  | "monday"
                  | "saturday"
                  | "sunday"
                  | "thursday"
                  | "tuesday"
                  | "wednesday";
              };
              readonly statement_descriptor?: string;
            };
          };
          /**
           * tos_acceptance_specs
           * @description Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
           */
          readonly tos_acceptance?: {
            /** Format: unix-time */
            readonly date?: number;
            readonly ip?: string;
            readonly service_agreement?: string;
            readonly user_agent?: string;
          };
          /**
           * @description The type of Stripe account to create. May be one of `custom`, `express` or `standard`.
           * @enum {string}
           */
          readonly type?: "custom" | "express" | "standard";
        };
      };
    };
  };
  /** <p>Retrieves the details of an account.</p> */
  readonly GetAccountsAccount: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates a <a href="/docs/connect/accounts">connected account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are not supported for Standard accounts.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   */
  readonly PostAccountsAccount: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          readonly account_token?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                /** @enum {string} */
                readonly account_type?: "checking" | "futsu" | "savings" | "toza";
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /**
           * business_profile_specs
           * @description Business information about the account.
           */
          readonly business_profile?: {
            readonly mcc?: string;
            readonly name?: string;
            readonly product_description?: string;
            /** address_specs */
            readonly support_address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly support_email?: string;
            readonly support_phone?: string;
            readonly support_url?: string | "";
            readonly url?: string;
          };
          /**
           * @description The business type.
           * @enum {string}
           */
          readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /**
           * capabilities_param
           * @description Each key of the dictionary represents a capability, and each capability maps to its settings (e.g. whether it has been requested or not). Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive.
           */
          readonly capabilities?: {
            /** capability_param */
            readonly acss_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly afterpay_clearpay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly au_becs_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly bacs_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly bancontact_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly boleto_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly card_issuing?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly card_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly cartes_bancaires_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly eps_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly fpx_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly giropay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly grabpay_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly ideal_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly jcb_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly klarna_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly legacy_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly oxxo_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly p24_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly sepa_debit_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly sofort_payments?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly tax_reporting_us_1099_k?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly tax_reporting_us_1099_misc?: {
              readonly requested?: boolean;
            };
            /** capability_param */
            readonly transfers?: {
              readonly requested?: boolean;
            };
          };
          /**
           * company_specs
           * @description Information about the company or business. This field is available for any `business_type`.
           */
          readonly company?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly directors_provided?: boolean;
            readonly executives_provided?: boolean;
            readonly name?: string;
            readonly name_kana?: string;
            readonly name_kanji?: string;
            readonly owners_provided?: boolean;
            /** company_ownership_declaration */
            readonly ownership_declaration?: {
              /** Format: unix-time */
              readonly date?: number;
              readonly ip?: string;
              readonly user_agent?: string;
            };
            readonly phone?: string;
            readonly registration_number?: string;
            /** @enum {string} */
            readonly structure?:
              | ""
              | "free_zone_establishment"
              | "free_zone_llc"
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "llc"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "single_member_llc"
              | "sole_establishment"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            readonly tax_id?: string;
            readonly tax_id_registrar?: string;
            readonly vat_id?: string;
            /** verification_specs */
            readonly verification?: {
              /** verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          readonly default_currency?: string;
          /**
           * documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly bank_account_ownership_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_license?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_memorandum_of_association?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_ministerial_decree?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_registration_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly company_tax_id_verification?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly proof_of_registration?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The email address of the account holder. This is only to make the account easier to identify to you. Stripe only emails Custom accounts with your consent. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A card or bank account to attach to the account for receiving [payouts](https://stripe.com/docs/connect/bank-debit-card-payouts) (you won’t be able to use it for top-ups). You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          readonly external_account?: string;
          /**
           * individual_specs
           * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
           */
          readonly individual?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?:
              | {
                  readonly day: number;
                  readonly month: number;
                  readonly year: number;
                }
              | "";
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly full_name_aliases?: readonly string[] | "";
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: { readonly [key: string]: string } | "";
            readonly phone?: string;
            /** @enum {string} */
            readonly political_exposure?: "existing" | "none";
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /**
           * settings_specs_update
           * @description Options for customizing how the account functions within Stripe.
           */
          readonly settings?: {
            /** branding_settings_specs */
            readonly branding?: {
              readonly icon?: string;
              readonly logo?: string;
              readonly primary_color?: string;
              readonly secondary_color?: string;
            };
            /** card_issuing_settings_specs */
            readonly card_issuing?: {
              /** settings_terms_of_service_specs */
              readonly tos_acceptance?: {
                /** Format: unix-time */
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
            };
            /** card_payments_settings_specs */
            readonly card_payments?: {
              /** decline_charge_on_specs */
              readonly decline_on?: {
                readonly avs_failure?: boolean;
                readonly cvc_failure?: boolean;
              };
              readonly statement_descriptor_prefix?: string;
            };
            /** payments_settings_specs */
            readonly payments?: {
              readonly statement_descriptor?: string;
              readonly statement_descriptor_kana?: string;
              readonly statement_descriptor_kanji?: string;
            };
            /** payout_settings_specs */
            readonly payouts?: {
              readonly debit_negative_balances?: boolean;
              /** transfer_schedule_specs */
              readonly schedule?: {
                readonly delay_days?: "minimum" | number;
                /** @enum {string} */
                readonly interval?: "daily" | "manual" | "monthly" | "weekly";
                readonly monthly_anchor?: number;
                /** @enum {string} */
                readonly weekly_anchor?:
                  | "friday"
                  | "monday"
                  | "saturday"
                  | "sunday"
                  | "thursday"
                  | "tuesday"
                  | "wednesday";
              };
              readonly statement_descriptor?: string;
            };
          };
          /**
           * tos_acceptance_specs
           * @description Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
           */
          readonly tos_acceptance?: {
            /** Format: unix-time */
            readonly date?: number;
            readonly ip?: string;
            readonly service_agreement?: string;
            readonly user_agent?: string;
          };
        };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   */
  readonly DeleteAccountsAccount: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountsAccountBankAccounts: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                /** @enum {string} */
                readonly account_type?: "checking" | "futsu" | "savings" | "toza";
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountsAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountsAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /**
           * @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
           * @enum {string}
           */
          readonly account_type?: "checking" | "futsu" | "savings" | "toza";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountsAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
  readonly GetAccountsAccountCapabilities: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["capability"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves information about the specified Account Capability.</p> */
  readonly GetAccountsAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly capability: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing Account Capability.</p> */
  readonly PostAccountsAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly capability: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["capability"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
          readonly requested?: boolean;
        };
      };
    };
  };
  /** <p>List external accounts for an account.</p> */
  readonly GetAccountsAccountExternalAccounts: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
            readonly data: readonly (components["schemas"]["bank_account"] | components["schemas"]["card"])[];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountsAccountExternalAccounts: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                /** @enum {string} */
                readonly account_type?: "checking" | "futsu" | "savings" | "toza";
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountsAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   *
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountsAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /**
           * @description The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
           * @enum {string}
           */
          readonly account_type?: "checking" | "futsu" | "savings" | "toza";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountsAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_external_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  readonly PostAccountsAccountLoginLinks: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["login_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Where to redirect the user after they log out of their dashboard. */
          readonly redirect_url?: string;
        };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountsAccountPeople: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: {
          readonly director?: boolean;
          readonly executive?: boolean;
          readonly owner?: boolean;
          readonly representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["person"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountsAccountPeople: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountsAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountsAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountsAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountsAccountPersons: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: {
          readonly director?: boolean;
          readonly executive?: boolean;
          readonly owner?: boolean;
          readonly representative?: boolean;
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["person"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountsAccountPersons: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountsAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountsAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?:
            | {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              }
            | "";
          /**
           * person_documents_specs
           * @description Documents that may be submitted to satisfy various informational requests.
           */
          readonly documents?: {
            /** documents_param */
            readonly company_authorization?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly passport?: {
              readonly files?: readonly string[];
            };
            /** documents_param */
            readonly visa?: {
              readonly files?: readonly string[];
            };
          };
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description A list of alternate names or aliases that the person is known by. */
          readonly full_name_aliases?: readonly string[] | "";
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/js/tokens_sources/create_token?type=pii). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The country where the person is a national. Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)), or "XX" if unavailable. */
          readonly nationality?: string;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /** @description Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction. */
          readonly political_exposure?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: number | "";
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last four digits of the person's Social Security number (U.S. only). */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountsAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_person"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
   *
   * <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
   */
  readonly PostAccountsAccountReject: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`. */
          readonly reason: string;
        };
      };
    };
  };
  /** <p>List apple pay domains.</p> */
  readonly GetApplePayDomains: {
    readonly parameters: {
      readonly query: {
        readonly domain_name?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["apple_pay_domain"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Create an apple pay domain.</p> */
  readonly PostApplePayDomains: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["apple_pay_domain"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly domain_name: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Retrieve an apple pay domain.</p> */
  readonly GetApplePayDomainsDomain: {
    readonly parameters: {
      readonly path: {
        readonly domain: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["apple_pay_domain"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Delete an apple pay domain.</p> */
  readonly DeleteApplePayDomainsDomain: {
    readonly parameters: {
      readonly path: {
        readonly domain: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_apple_pay_domain"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p> */
  readonly GetApplicationFees: {
    readonly parameters: {
      readonly query: {
        /** Only return application fees for the charge specified by this charge ID. */
        readonly charge?: string;
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["application_fee"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p> */
  readonly GetApplicationFeesFeeRefundsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly fee: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["fee_refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata as an argument.</p>
   */
  readonly PostApplicationFeesFeeRefundsId: {
    readonly parameters: {
      readonly path: {
        readonly fee: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["fee_refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p> */
  readonly GetApplicationFeesId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["application_fee"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  readonly PostApplicationFeesIdRefund: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["application_fee"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly amount?: number;
          readonly directive?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
  readonly GetApplicationFeesIdRefunds: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["fee_refund"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Refunds an application fee that has previously been collected but not yet refunded.
   * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
   *
   * <p>You can optionally refund only part of an application fee.
   * You can do so multiple times, until the entire fee has been refunded.</p>
   *
   * <p>Once entirely refunded, an application fee can’t be refunded again.
   * This method will raise an error when called on an already-refunded application fee,
   * or when trying to refund more money than is left on an application fee.</p>
   */
  readonly PostApplicationFeesIdRefunds: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["fee_refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A positive integer, in _%s_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee. */
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /**
   * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
   *  For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
   */
  readonly GetBalance: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["balance"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   */
  readonly GetBalanceHistory: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
        readonly currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
        readonly payout?: string;
        /** Only returns the original transaction. */
        readonly source?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */
        readonly type?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["balance_transaction"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   */
  readonly GetBalanceHistoryId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["balance_transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   */
  readonly GetBalanceTransactions: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
        readonly currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
        readonly payout?: string;
        /** Only returns the original transaction. */
        readonly source?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only returns transactions of the given type. One of: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. */
        readonly type?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["balance_transaction"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   */
  readonly GetBalanceTransactionsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["balance_transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of configurations that describe the functionality of the customer portal.</p> */
  readonly GetBillingPortalConfigurations: {
    readonly parameters: {
      readonly query: {
        /** Only return configurations that are active or inactive (e.g., pass `true` to only list active configurations). */
        readonly active?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Only return the default or non-default configurations (e.g., pass `true` to only list the default configuration). */
        readonly is_default?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["billing_portal.configuration"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p> */
  readonly PostBillingPortalConfigurations: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["billing_portal.configuration"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * business_profile_create_param
           * @description The business information shown to customers in the portal.
           */
          readonly business_profile: {
            readonly headline?: string;
            readonly privacy_policy_url: string;
            readonly terms_of_service_url: string;
          };
          /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
          readonly default_return_url?: string | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * features_creation_param
           * @description Information about the features available in the portal.
           */
          readonly features: {
            /** customer_update_creation_param */
            readonly customer_update?: {
              readonly allowed_updates: readonly ("address" | "email" | "phone" | "shipping" | "tax_id")[] | "";
              readonly enabled: boolean;
            };
            /** invoice_list_param */
            readonly invoice_history?: {
              readonly enabled: boolean;
            };
            /** payment_method_update_param */
            readonly payment_method_update?: {
              readonly enabled: boolean;
            };
            /** subscription_cancel_creation_param */
            readonly subscription_cancel?: {
              /** subscription_cancellation_reason_creation_param */
              readonly cancellation_reason?: {
                readonly enabled: boolean;
                readonly options:
                  | readonly (
                      | "customer_service"
                      | "low_quality"
                      | "missing_features"
                      | "other"
                      | "switched_service"
                      | "too_complex"
                      | "too_expensive"
                      | "unused"
                    )[]
                  | "";
              };
              readonly enabled: boolean;
              /** @enum {string} */
              readonly mode?: "at_period_end" | "immediately";
              /** @enum {string} */
              readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            };
            /** subscription_pause_param */
            readonly subscription_pause?: {
              readonly enabled?: boolean;
            };
            /** subscription_update_creation_param */
            readonly subscription_update?: {
              readonly default_allowed_updates: readonly ("price" | "promotion_code" | "quantity")[] | "";
              readonly enabled: boolean;
              readonly products:
                | readonly {
                    readonly prices: readonly string[];
                    readonly product: string;
                  }[]
                | "";
              /** @enum {string} */
              readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Retrieves a configuration that describes the functionality of the customer portal.</p> */
  readonly GetBillingPortalConfigurationsConfiguration: {
    readonly parameters: {
      readonly path: {
        readonly configuration: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["billing_portal.configuration"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates a configuration that describes the functionality of the customer portal.</p> */
  readonly PostBillingPortalConfigurationsConfiguration: {
    readonly parameters: {
      readonly path: {
        readonly configuration: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["billing_portal.configuration"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the configuration is active and can be used to create portal sessions. */
          readonly active?: boolean;
          /**
           * business_profile_update_param
           * @description The business information shown to customers in the portal.
           */
          readonly business_profile?: {
            readonly headline?: string;
            readonly privacy_policy_url?: string;
            readonly terms_of_service_url?: string;
          };
          /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session. */
          readonly default_return_url?: string | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * features_updating_param
           * @description Information about the features available in the portal.
           */
          readonly features?: {
            /** customer_update_updating_param */
            readonly customer_update?: {
              readonly allowed_updates?: readonly ("address" | "email" | "phone" | "shipping" | "tax_id")[] | "";
              readonly enabled?: boolean;
            };
            /** invoice_list_param */
            readonly invoice_history?: {
              readonly enabled: boolean;
            };
            /** payment_method_update_param */
            readonly payment_method_update?: {
              readonly enabled: boolean;
            };
            /** subscription_cancel_updating_param */
            readonly subscription_cancel?: {
              /** subscription_cancellation_reason_updating_param */
              readonly cancellation_reason?: {
                readonly enabled: boolean;
                readonly options?:
                  | readonly (
                      | "customer_service"
                      | "low_quality"
                      | "missing_features"
                      | "other"
                      | "switched_service"
                      | "too_complex"
                      | "too_expensive"
                      | "unused"
                    )[]
                  | "";
              };
              readonly enabled?: boolean;
              /** @enum {string} */
              readonly mode?: "at_period_end" | "immediately";
              /** @enum {string} */
              readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            };
            /** subscription_pause_param */
            readonly subscription_pause?: {
              readonly enabled?: boolean;
            };
            /** subscription_update_updating_param */
            readonly subscription_update?: {
              readonly default_allowed_updates?: readonly ("price" | "promotion_code" | "quantity")[] | "";
              readonly enabled?: boolean;
              readonly products?:
                | readonly {
                    readonly prices: readonly string[];
                    readonly product: string;
                  }[]
                | "";
              /** @enum {string} */
              readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Creates a session of the customer portal.</p> */
  readonly PostBillingPortalSessions: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["billing_portal.session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The ID of an existing [configuration](https://stripe.com/docs/api/customer_portal/configuration) to use for this session, describing its functionality and features. If not specified, the session uses the default configuration. */
          readonly configuration?: string;
          /** @description The ID of an existing customer. */
          readonly customer: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
           * @enum {string}
           */
          readonly locale?:
            | "auto"
            | "bg"
            | "cs"
            | "da"
            | "de"
            | "el"
            | "en"
            | "en-AU"
            | "en-CA"
            | "en-GB"
            | "en-IE"
            | "en-IN"
            | "en-NZ"
            | "en-SG"
            | "es"
            | "es-419"
            | "et"
            | "fi"
            | "fil"
            | "fr"
            | "fr-CA"
            | "hr"
            | "hu"
            | "id"
            | "it"
            | "ja"
            | "ko"
            | "lt"
            | "lv"
            | "ms"
            | "mt"
            | "nb"
            | "nl"
            | "pl"
            | "pt"
            | "pt-BR"
            | "ro"
            | "ru"
            | "sk"
            | "sl"
            | "sv"
            | "th"
            | "tr"
            | "vi"
            | "zh"
            | "zh-HK"
            | "zh-TW";
          /** @description The `on_behalf_of` account to use for this session. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays. */
          readonly on_behalf_of?: string;
          /** @description The default URL to redirect customers to when they click on the portal's link to return to your website. */
          readonly return_url?: string;
        };
      };
    };
  };
  /** <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p> */
  readonly GetBitcoinReceivers: {
    readonly parameters: {
      readonly query: {
        /** Filter for active receivers. */
        readonly active?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Filter for filled receivers. */
        readonly filled?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Filter for receivers with uncaptured funds. */
        readonly uncaptured_funds?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["bitcoin_receiver"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the Bitcoin receiver with the given ID.</p> */
  readonly GetBitcoinReceiversId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["bitcoin_receiver"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>List bitcoin transacitons for a given receiver.</p> */
  readonly GetBitcoinReceiversReceiverTransactions: {
    readonly parameters: {
      readonly query: {
        /** Only return transactions for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly receiver: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["bitcoin_transaction"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>List bitcoin transacitons for a given receiver.</p> */
  readonly GetBitcoinTransactions: {
    readonly parameters: {
      readonly query: {
        /** Only return transactions for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        readonly receiver?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["bitcoin_transaction"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p> */
  readonly GetCharges: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return charges for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return charges for this transfer group. */
        readonly transfer_group?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["charge"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p> */
  readonly PostCharges: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          readonly amount?: number;
          readonly application_fee?: number;
          /** @description A fee in %s that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
          readonly application_fee_amount?: number;
          /** @description Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire after a set number of days (7 by default). For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation. */
          readonly capture?: boolean;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
          readonly card?:
            | {
                readonly address_city?: string;
                readonly address_country?: string;
                readonly address_line1?: string;
                readonly address_line2?: string;
                readonly address_state?: string;
                readonly address_zip?: string;
                readonly cvc?: string;
                readonly exp_month: number;
                readonly exp_year: number;
                readonly metadata?: { readonly [key: string]: string };
                readonly name?: string;
                readonly number: string;
                /** @enum {string} */
                readonly object?: "card";
              }
            | string;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /** @description The ID of an existing customer that will be charged in this request. */
          readonly customer?: string;
          /** @description An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
          readonly description?: string;
          readonly destination?:
            | {
                readonly account: string;
                readonly amount?: number;
              }
            | string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). */
          readonly on_behalf_of?: string;
          /** @description The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
          readonly receipt_email?: string;
          /**
           * optional_fields_shipping
           * @description Shipping information for the charge. Helps prevent fraud on charges for physical goods.
           */
          readonly shipping?: {
            /** optional_fields_address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly carrier?: string;
            readonly name: string;
            readonly phone?: string;
            readonly tracking_number?: string;
          };
          /** @description A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer. */
          readonly source?: string;
          /** @description For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_specs
           * @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
           */
          readonly transfer_data?: {
            readonly amount?: number;
            readonly destination: string;
          };
          /** @description A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#transfer-options). */
          readonly transfer_group?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p> */
  readonly GetChargesCharge: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostChargesCharge: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge. */
          readonly customer?: string;
          /** @description An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * fraud_details
           * @description A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms.
           */
          readonly fraud_details?: {
            /** @enum {string} */
            readonly user_report: "" | "fraudulent" | "safe";
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address. */
          readonly receipt_email?: string;
          /**
           * optional_fields_shipping
           * @description Shipping information for the charge. Helps prevent fraud on charges for physical goods.
           */
          readonly shipping?: {
            /** optional_fields_address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly carrier?: string;
            readonly name: string;
            readonly phone?: string;
            readonly tracking_number?: string;
          };
          /** @description A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          readonly transfer_group?: string;
        };
      };
    };
  };
  /**
   * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
   *
   * <p>Uncaptured payments expire a set number of days after they are created (<a href="/docs/charges/placing-a-hold">7 by default</a>). If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
   */
  readonly PostChargesChargeCapture: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. */
          readonly amount?: number;
          /** @description An application fee to add on to this charge. */
          readonly application_fee?: number;
          /** @description An application fee amount to add on to this charge, which must be less than or equal to the original amount. */
          readonly application_fee_amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode. */
          readonly receipt_email?: string;
          /** @description For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_specs
           * @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
           */
          readonly transfer_data?: {
            readonly amount?: number;
          };
          /** @description A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          readonly transfer_group?: string;
        };
      };
    };
  };
  /** <p>Retrieve a dispute for a specified charge.</p> */
  readonly GetChargesChargeDispute: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  readonly PostChargesChargeDispute: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * dispute_evidence_params
           * @description Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.
           */
          readonly evidence?: {
            readonly access_activity_log?: string;
            readonly billing_address?: string;
            readonly cancellation_policy?: string;
            readonly cancellation_policy_disclosure?: string;
            readonly cancellation_rebuttal?: string;
            readonly customer_communication?: string;
            readonly customer_email_address?: string;
            readonly customer_name?: string;
            readonly customer_purchase_ip?: string;
            readonly customer_signature?: string;
            readonly duplicate_charge_documentation?: string;
            readonly duplicate_charge_explanation?: string;
            readonly duplicate_charge_id?: string;
            readonly product_description?: string;
            readonly receipt?: string;
            readonly refund_policy?: string;
            readonly refund_policy_disclosure?: string;
            readonly refund_refusal_explanation?: string;
            readonly service_date?: string;
            readonly service_documentation?: string;
            readonly shipping_address?: string;
            readonly shipping_carrier?: string;
            readonly shipping_date?: string;
            readonly shipping_documentation?: string;
            readonly shipping_tracking_number?: string;
            readonly uncategorized_file?: string;
            readonly uncategorized_text?: string;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
          readonly submit?: boolean;
        };
      };
    };
  };
  readonly PostChargesChargeDisputeClose: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /**
   * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
   *
   * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
   * Funds will be refunded to the credit or debit card that was originally charged.</p>
   *
   * <p>You can optionally refund only part of a charge.
   * You can do so multiple times, until the entire charge has been refunded.</p>
   *
   * <p>Once entirely refunded, a charge can’t be refunded again.
   * This method will raise an error when called on an already-refunded charge,
   * or when trying to refund more money than is left on a charge.</p>
   */
  readonly PostChargesChargeRefund: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["charge"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          readonly payment_intent?: string;
          /** @enum {string} */
          readonly reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          readonly refund_application_fee?: boolean;
          readonly reverse_transfer?: boolean;
        };
      };
    };
  };
  /** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
  readonly GetChargesChargeRefunds: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["refund"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Create a refund.</p> */
  readonly PostChargesChargeRefunds: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          readonly payment_intent?: string;
          /** @enum {string} */
          readonly reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          readonly refund_application_fee?: boolean;
          readonly reverse_transfer?: boolean;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing refund.</p> */
  readonly GetChargesChargeRefundsRefund: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
        readonly refund: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Update a specified refund.</p> */
  readonly PostChargesChargeRefundsRefund: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
        readonly refund: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of Checkout Sessions.</p> */
  readonly GetCheckoutSessions: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return the Checkout Session for the PaymentIntent specified. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return the Checkout Session for the subscription specified. */
        readonly subscription?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["checkout.session"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a Session object.</p> */
  readonly PostCheckoutSessions: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["checkout.session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * after_expiration_params
           * @description Configure actions after a Checkout Session has expired.
           */
          readonly after_expiration?: {
            /** recovery_params */
            readonly recovery?: {
              readonly allow_promotion_codes?: boolean;
              readonly enabled: boolean;
            };
          };
          /** @description Enables user redeemable promotion codes. */
          readonly allow_promotion_codes?: boolean;
          /**
           * automatic_tax_params
           * @description Settings for automatic tax lookup for this session and resulting payments, invoices, and subscriptions.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Specify whether Checkout should collect the customer's billing address.
           * @enum {string}
           */
          readonly billing_address_collection?: "auto" | "required";
          /** @description The URL the customer will be directed to if they decide to cancel payment and return to your website. */
          readonly cancel_url: string;
          /**
           * @description A unique string to reference the Checkout Session. This can be a
           * customer ID, a cart ID, or similar, and can be used to reconcile the
           * session with your internal systems.
           */
          readonly client_reference_id?: string;
          /**
           * consent_collection_params
           * @description Configure fields for the Checkout Session to gather active consent from customers.
           */
          readonly consent_collection?: {
            /** @enum {string} */
            readonly promotions?: "auto";
          };
          /**
           * @description ID of an existing Customer, if one exists. In `payment` mode, the customer’s most recent card
           * payment method will be used to prefill the email, name, card details, and billing address
           * on the Checkout page. In `subscription` mode, the customer’s [default payment method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method)
           * will be used if it’s a card, and otherwise the most recent card will be used. A valid billing address, billing name and billing email are required on the payment method for Checkout to prefill the customer's card details.
           *
           * If the Customer already has a valid [email](https://stripe.com/docs/api/customers/object#customer_object-email) set, the email will be prefilled and not editable in Checkout.
           * If the Customer does not have a valid `email`, Checkout will set the email entered during the session on the Customer.
           *
           * If blank for Checkout Sessions in `payment` or `subscription` mode, Checkout will create a new Customer object based on information provided during the payment flow.
           *
           * You can set [`payment_intent_data.setup_future_usage`](https://stripe.com/docs/api/checkout/sessions/create#create_checkout_session-payment_intent_data-setup_future_usage) to have Checkout automatically attach the payment method to the Customer you pass in for future reuse.
           */
          readonly customer?: string;
          /**
           * @description Configure whether a Checkout Session creates a [Customer](https://stripe.com/docs/api/customers) during Session confirmation.
           *
           * When a Customer is not created, you can still retrieve email, address, and other customer data entered in Checkout
           * with [customer_details](https://stripe.com/docs/api/checkout/sessions/object#checkout_session_object-customer_details).
           *
           * Sessions that do not create Customers will instead create [Guest Customers](https://support.stripe.com/questions/guest-customer-faq) in the Dashboard.
           *
           * Can only be set in `payment` and `setup` mode.
           * @enum {string}
           */
          readonly customer_creation?: "always" | "if_required";
          /**
           * @description If provided, this value will be used when the Customer object is created.
           * If not provided, customers will be asked to enter their email address.
           * Use this parameter to prefill customer data if you already have an email
           * on file. To access information about the customer once a session is
           * complete, use the `customer` field.
           */
          readonly customer_email?: string;
          /**
           * customer_update_params
           * @description Controls what fields on Customer can be updated by the Checkout Session. Can only be provided when `customer` is provided.
           */
          readonly customer_update?: {
            /** @enum {string} */
            readonly address?: "auto" | "never";
            /** @enum {string} */
            readonly name?: "auto" | "never";
            /** @enum {string} */
            readonly shipping?: "auto" | "never";
          };
          /** @description The coupon or promotion code to apply to this Session. Currently, only up to one may be specified. */
          readonly discounts?: readonly {
            readonly coupon?: string;
            readonly promotion_code?: string;
          }[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * Format: unix-time
           * @description The Epoch time in seconds at which the Checkout Session will expire. It can be anywhere from 1 to 24 hours after Checkout Session creation. By default, this value is 24 hours from creation.
           */
          readonly expires_at?: number;
          /**
           * @description A list of items the customer is purchasing. Use this parameter to pass one-time or recurring [Prices](https://stripe.com/docs/api/prices).
           *
           * For `payment` mode, there is a maximum of 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.
           *
           * For `subscription` mode, there is a maximum of 20 line items with recurring Prices and 20 line items with one-time Prices. Line items with one-time Prices in will be on the initial invoice only.
           */
          readonly line_items?: readonly {
            /** adjustable_quantity_params */
            readonly adjustable_quantity?: {
              readonly enabled: boolean;
              readonly maximum?: number;
              readonly minimum?: number;
            };
            readonly description?: string;
            readonly dynamic_tax_rates?: readonly string[];
            readonly price?: string;
            /** price_data_with_product_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product?: string;
              /** product_data */
              readonly product_data?: {
                readonly description?: string;
                readonly images?: readonly string[];
                readonly metadata?: { readonly [key: string]: string };
                readonly name: string;
                readonly tax_code?: string;
              };
              /** recurring_adhoc */
              readonly recurring?: {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[];
          }[];
          /**
           * @description The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
           * @enum {string}
           */
          readonly locale?:
            | "auto"
            | "bg"
            | "cs"
            | "da"
            | "de"
            | "el"
            | "en"
            | "en-GB"
            | "es"
            | "es-419"
            | "et"
            | "fi"
            | "fil"
            | "fr"
            | "fr-CA"
            | "hr"
            | "hu"
            | "id"
            | "it"
            | "ja"
            | "ko"
            | "lt"
            | "lv"
            | "ms"
            | "mt"
            | "nb"
            | "nl"
            | "pl"
            | "pt"
            | "pt-BR"
            | "ro"
            | "ru"
            | "sk"
            | "sl"
            | "sv"
            | "th"
            | "tr"
            | "vi"
            | "zh"
            | "zh-HK"
            | "zh-TW";
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * @description The mode of the Checkout Session. Required when using prices or `setup` mode. Pass `subscription` if the Checkout Session includes at least one recurring item.
           * @enum {string}
           */
          readonly mode?: "payment" | "setup" | "subscription";
          /**
           * payment_intent_data_params
           * @description A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.
           */
          readonly payment_intent_data?: {
            readonly application_fee_amount?: number;
            /** @enum {string} */
            readonly capture_method?: "automatic" | "manual";
            readonly description?: string;
            readonly metadata?: { readonly [key: string]: string };
            readonly on_behalf_of?: string;
            readonly receipt_email?: string;
            /** @enum {string} */
            readonly setup_future_usage?: "off_session" | "on_session";
            /** shipping */
            readonly shipping?: {
              /** address */
              readonly address: {
                readonly city?: string;
                readonly country?: string;
                readonly line1: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              readonly carrier?: string;
              readonly name: string;
              readonly phone?: string;
              readonly tracking_number?: string;
            };
            readonly statement_descriptor?: string;
            readonly statement_descriptor_suffix?: string;
            /** transfer_data_params */
            readonly transfer_data?: {
              readonly amount?: number;
              readonly destination: string;
            };
            readonly transfer_group?: string;
          };
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration.
           */
          readonly payment_method_options?: {
            /** payment_method_options_param */
            readonly acss_debit?: {
              /** @enum {string} */
              readonly currency?: "cad" | "usd";
              /** mandate_options_param */
              readonly mandate_options?: {
                readonly custom_mandate_url?: string | "";
                readonly default_for?: readonly ("invoice" | "subscription")[];
                readonly interval_description?: string;
                /** @enum {string} */
                readonly payment_schedule?: "combined" | "interval" | "sporadic";
                /** @enum {string} */
                readonly transaction_type?: "business" | "personal";
              };
              /** @enum {string} */
              readonly verification_method?: "automatic" | "instant" | "microdeposits";
            };
            /** payment_method_options_param */
            readonly boleto?: {
              readonly expires_after_days?: number;
            };
            /** payment_method_options_param */
            readonly oxxo?: {
              readonly expires_after_days?: number;
            };
            /** payment_method_options_param */
            readonly wechat_pay?: {
              readonly app_id?: string;
              /** @enum {string} */
              readonly client: "android" | "ios" | "web";
            };
          };
          /**
           * @description A list of the types of payment methods (e.g., `card`) this Checkout Session can accept.
           *
           * Read more about the supported payment methods and their requirements in our [payment
           * method details guide](/docs/payments/checkout/payment-methods).
           *
           * If multiple payment methods are passed, Checkout will dynamically reorder them to
           * prioritize the most relevant payment methods based on the customer's location and
           * other characteristics.
           */
          readonly payment_method_types?: readonly (
            | "acss_debit"
            | "afterpay_clearpay"
            | "alipay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "boleto"
            | "card"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "klarna"
            | "oxxo"
            | "p24"
            | "sepa_debit"
            | "sofort"
            | "wechat_pay"
          )[];
          /**
           * phone_number_collection_params
           * @description Controls phone number collection settings for the session.
           *
           * We recommend that you review your privacy policy and check with your legal contacts
           * before using this feature. Learn more about [collecting phone numbers with Checkout](https://stripe.com/docs/payments/checkout/phone-numbers).
           */
          readonly phone_number_collection?: {
            readonly enabled: boolean;
          };
          /**
           * setup_intent_data_param
           * @description A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode.
           */
          readonly setup_intent_data?: {
            readonly description?: string;
            readonly metadata?: { readonly [key: string]: string };
            readonly on_behalf_of?: string;
          };
          /**
           * shipping_address_collection_params
           * @description When set, provides configuration for Checkout to collect a shipping address from a customer.
           */
          readonly shipping_address_collection?: {
            readonly allowed_countries: readonly (
              | "AC"
              | "AD"
              | "AE"
              | "AF"
              | "AG"
              | "AI"
              | "AL"
              | "AM"
              | "AO"
              | "AQ"
              | "AR"
              | "AT"
              | "AU"
              | "AW"
              | "AX"
              | "AZ"
              | "BA"
              | "BB"
              | "BD"
              | "BE"
              | "BF"
              | "BG"
              | "BH"
              | "BI"
              | "BJ"
              | "BL"
              | "BM"
              | "BN"
              | "BO"
              | "BQ"
              | "BR"
              | "BS"
              | "BT"
              | "BV"
              | "BW"
              | "BY"
              | "BZ"
              | "CA"
              | "CD"
              | "CF"
              | "CG"
              | "CH"
              | "CI"
              | "CK"
              | "CL"
              | "CM"
              | "CN"
              | "CO"
              | "CR"
              | "CV"
              | "CW"
              | "CY"
              | "CZ"
              | "DE"
              | "DJ"
              | "DK"
              | "DM"
              | "DO"
              | "DZ"
              | "EC"
              | "EE"
              | "EG"
              | "EH"
              | "ER"
              | "ES"
              | "ET"
              | "FI"
              | "FJ"
              | "FK"
              | "FO"
              | "FR"
              | "GA"
              | "GB"
              | "GD"
              | "GE"
              | "GF"
              | "GG"
              | "GH"
              | "GI"
              | "GL"
              | "GM"
              | "GN"
              | "GP"
              | "GQ"
              | "GR"
              | "GS"
              | "GT"
              | "GU"
              | "GW"
              | "GY"
              | "HK"
              | "HN"
              | "HR"
              | "HT"
              | "HU"
              | "ID"
              | "IE"
              | "IL"
              | "IM"
              | "IN"
              | "IO"
              | "IQ"
              | "IS"
              | "IT"
              | "JE"
              | "JM"
              | "JO"
              | "JP"
              | "KE"
              | "KG"
              | "KH"
              | "KI"
              | "KM"
              | "KN"
              | "KR"
              | "KW"
              | "KY"
              | "KZ"
              | "LA"
              | "LB"
              | "LC"
              | "LI"
              | "LK"
              | "LR"
              | "LS"
              | "LT"
              | "LU"
              | "LV"
              | "LY"
              | "MA"
              | "MC"
              | "MD"
              | "ME"
              | "MF"
              | "MG"
              | "MK"
              | "ML"
              | "MM"
              | "MN"
              | "MO"
              | "MQ"
              | "MR"
              | "MS"
              | "MT"
              | "MU"
              | "MV"
              | "MW"
              | "MX"
              | "MY"
              | "MZ"
              | "NA"
              | "NC"
              | "NE"
              | "NG"
              | "NI"
              | "NL"
              | "NO"
              | "NP"
              | "NR"
              | "NU"
              | "NZ"
              | "OM"
              | "PA"
              | "PE"
              | "PF"
              | "PG"
              | "PH"
              | "PK"
              | "PL"
              | "PM"
              | "PN"
              | "PR"
              | "PS"
              | "PT"
              | "PY"
              | "QA"
              | "RE"
              | "RO"
              | "RS"
              | "RU"
              | "RW"
              | "SA"
              | "SB"
              | "SC"
              | "SE"
              | "SG"
              | "SH"
              | "SI"
              | "SJ"
              | "SK"
              | "SL"
              | "SM"
              | "SN"
              | "SO"
              | "SR"
              | "SS"
              | "ST"
              | "SV"
              | "SX"
              | "SZ"
              | "TA"
              | "TC"
              | "TD"
              | "TF"
              | "TG"
              | "TH"
              | "TJ"
              | "TK"
              | "TL"
              | "TM"
              | "TN"
              | "TO"
              | "TR"
              | "TT"
              | "TV"
              | "TW"
              | "TZ"
              | "UA"
              | "UG"
              | "US"
              | "UY"
              | "UZ"
              | "VA"
              | "VC"
              | "VE"
              | "VG"
              | "VN"
              | "VU"
              | "WF"
              | "WS"
              | "XK"
              | "YE"
              | "YT"
              | "ZA"
              | "ZM"
              | "ZW"
              | "ZZ"
            )[];
          };
          /** @description The shipping rate options to apply to this Session. */
          readonly shipping_options?: readonly {
            readonly shipping_rate?: string;
            /** method_params */
            readonly shipping_rate_data?: {
              /** delivery_estimate */
              readonly delivery_estimate?: {
                /** delivery_estimate_bound */
                readonly maximum?: {
                  /** @enum {string} */
                  readonly unit: "business_day" | "day" | "hour" | "month" | "week";
                  readonly value: number;
                };
                /** delivery_estimate_bound */
                readonly minimum?: {
                  /** @enum {string} */
                  readonly unit: "business_day" | "day" | "hour" | "month" | "week";
                  readonly value: number;
                };
              };
              readonly display_name: string;
              /** fixed_amount */
              readonly fixed_amount?: {
                readonly amount: number;
                readonly currency: string;
              };
              readonly metadata?: { readonly [key: string]: string };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly tax_code?: string;
              /** @enum {string} */
              readonly type?: "fixed_amount";
            };
          }[];
          /**
           * @description Describes the type of transaction being performed by Checkout in order to customize
           * relevant text on the page, such as the submit button. `submit_type` can only be
           * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
           * in `subscription` or `setup` mode.
           * @enum {string}
           */
          readonly submit_type?: "auto" | "book" | "donate" | "pay";
          /**
           * subscription_data_params
           * @description A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode.
           */
          readonly subscription_data?: {
            readonly application_fee_percent?: number;
            readonly default_tax_rates?: readonly string[];
            readonly items?: readonly {
              readonly plan: string;
              readonly quantity?: number;
              readonly tax_rates?: readonly string[];
            }[];
            readonly metadata?: { readonly [key: string]: string };
            /** transfer_data_specs */
            readonly transfer_data?: {
              readonly amount_percent?: number;
              readonly destination: string;
            };
            /** Format: unix-time */
            readonly trial_end?: number;
            readonly trial_period_days?: number;
          };
          /**
           * @description The URL to which Stripe should send customers when payment or setup
           * is complete.
           * If you’d like to use information from the successful Checkout Session on your page,
           * read the guide on [customizing your success page](https://stripe.com/docs/payments/checkout/custom-success-page).
           */
          readonly success_url: string;
          /**
           * tax_id_collection_params
           * @description Controls tax ID collection settings for the session.
           */
          readonly tax_id_collection?: {
            readonly enabled: boolean;
          };
        };
      };
    };
  };
  /** <p>Retrieves a Session object.</p> */
  readonly GetCheckoutSessionsSession: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["checkout.session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>A Session can be expired when it is in one of these statuses: <code>open</code> </p>
   *
   * <p>After it expires, a customer can’t complete a Session and customers loading the Session see a message saying the Session is expired.</p>
   */
  readonly PostCheckoutSessionsSessionExpire: {
    readonly parameters: {
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["checkout.session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetCheckoutSessionsSessionLineItems: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Lists all Country Spec objects available in the API.</p> */
  readonly GetCountrySpecs: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["country_spec"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a Country Spec for a given Country code.</p> */
  readonly GetCountrySpecsCountry: {
    readonly parameters: {
      readonly path: {
        readonly country: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["country_spec"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your coupons.</p> */
  readonly GetCoupons: {
    readonly parameters: {
      readonly query: {
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["coupon"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
   *
   * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
   */
  readonly PostCoupons: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["coupon"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed). */
          readonly amount_off?: number;
          /**
           * applies_to_params
           * @description A hash containing directions for what this Coupon will apply discounts to.
           */
          readonly applies_to?: {
            readonly products?: readonly string[];
          };
          /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed). */
          readonly currency?: string;
          /**
           * @description Specifies how long the discount will be in effect if used on a subscription. Can be `forever`, `once`, or `repeating`. Defaults to `once`.
           * @enum {string}
           */
          readonly duration?: "forever" | "once" | "repeating";
          /** @description Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect. */
          readonly duration_in_months?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you. */
          readonly id?: string;
          /** @description A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use. */
          readonly max_redemptions?: number;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
          readonly name?: string;
          /** @description A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed). */
          readonly percent_off?: number;
          /**
           * Format: unix-time
           * @description Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers.
           */
          readonly redeem_by?: number;
        };
      };
    };
  };
  /** <p>Retrieves the coupon with the given ID.</p> */
  readonly GetCouponsCoupon: {
    readonly parameters: {
      readonly path: {
        readonly coupon: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["coupon"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p> */
  readonly PostCouponsCoupon: {
    readonly parameters: {
      readonly path: {
        readonly coupon: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["coupon"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
          readonly name?: string;
        };
      };
    };
  };
  /** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p> */
  readonly DeleteCouponsCoupon: {
    readonly parameters: {
      readonly path: {
        readonly coupon: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_coupon"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of credit notes.</p> */
  readonly GetCreditNotes: {
    readonly parameters: {
      readonly query: {
        /** Only return credit notes for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Only return credit notes for the invoice specified by this invoice ID. */
        readonly invoice?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["credit_note"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
   * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
   * in any combination of the following:</p>
   *
   * <ul>
   * <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
   * <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
   * <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
   * </ul>
   *
   * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
   *
   * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
   * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
   */
  readonly PostCreditNotes: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The integer amount in %s representing the total amount of the credit note. */
          readonly amount?: number;
          /** @description The integer amount in %s representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
          readonly credit_amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description ID of the invoice. */
          readonly invoice: string;
          /** @description Line items that make up the credit note. */
          readonly lines?: readonly {
            readonly amount?: number;
            readonly description?: string;
            readonly invoice_line_item?: string;
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
            /** @enum {string} */
            readonly type: "custom_line_item" | "invoice_line_item";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          }[];
          /** @description The credit note's memo appears on the credit note PDF. */
          readonly memo?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The integer amount in %s representing the amount that is credited outside of Stripe. */
          readonly out_of_band_amount?: number;
          /**
           * @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
           * @enum {string}
           */
          readonly reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
          /** @description ID of an existing refund to link this credit note to. */
          readonly refund?: string;
          /** @description The integer amount in %s representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
          readonly refund_amount?: number;
        };
      };
    };
  };
  /** <p>Get a preview of a credit note without creating it.</p> */
  readonly GetCreditNotesPreview: {
    readonly parameters: {
      readonly query: {
        /** The integer amount in %s representing the total amount of the credit note. */
        readonly amount?: number;
        /** The integer amount in %s representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
        readonly credit_amount?: number;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** ID of the invoice. */
        readonly invoice: string;
        /** Line items that make up the credit note. */
        readonly lines?: readonly {
          readonly amount?: number;
          readonly description?: string;
          readonly invoice_line_item?: string;
          readonly quantity?: number;
          readonly tax_rates?: readonly string[] | "";
          /** @enum {string} */
          readonly type: "custom_line_item" | "invoice_line_item";
          readonly unit_amount?: number;
          /** Format: decimal */
          readonly unit_amount_decimal?: string;
        }[];
        /** The credit note's memo appears on the credit note PDF. */
        readonly memo?: string;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        readonly metadata?: { readonly [key: string]: string };
        /** The integer amount in %s representing the amount that is credited outside of Stripe. */
        readonly out_of_band_amount?: number;
        /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
        readonly reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
        /** ID of an existing refund to link this credit note to. */
        readonly refund?: string;
        /** The integer amount in %s representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
        readonly refund_amount?: number;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p> */
  readonly GetCreditNotesPreviewLines: {
    readonly parameters: {
      readonly query: {
        /** The integer amount in %s representing the total amount of the credit note. */
        readonly amount?: number;
        /** The integer amount in %s representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
        readonly credit_amount?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** ID of the invoice. */
        readonly invoice: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Line items that make up the credit note. */
        readonly lines?: readonly {
          readonly amount?: number;
          readonly description?: string;
          readonly invoice_line_item?: string;
          readonly quantity?: number;
          readonly tax_rates?: readonly string[] | "";
          /** @enum {string} */
          readonly type: "custom_line_item" | "invoice_line_item";
          readonly unit_amount?: number;
          /** Format: decimal */
          readonly unit_amount_decimal?: string;
        }[];
        /** The credit note's memo appears on the credit note PDF. */
        readonly memo?: string;
        /** Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        readonly metadata?: { readonly [key: string]: string };
        /** The integer amount in %s representing the amount that is credited outside of Stripe. */
        readonly out_of_band_amount?: number;
        /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
        readonly reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
        /** ID of an existing refund to link this credit note to. */
        readonly refund?: string;
        /** The integer amount in %s representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
        readonly refund_amount?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["credit_note_line_item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetCreditNotesCreditNoteLines: {
    readonly parameters: {
      readonly path: {
        readonly credit_note: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["credit_note_line_item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the credit note object with the given identifier.</p> */
  readonly GetCreditNotesId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing credit note.</p> */
  readonly PostCreditNotesId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Credit note memo. */
          readonly memo?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p> */
  readonly PostCreditNotesIdVoid: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["credit_note"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p> */
  readonly GetCustomers: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A case-sensitive filter on the list based on the customer's `email` field. The value must be a string. */
        readonly email?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["customer"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new customer object.</p> */
  readonly PostCustomers: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["customer"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The customer's address. */
          readonly address?:
            | {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              }
            | "";
          /** @description An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
          readonly balance?: number;
          readonly coupon?: string;
          /** @description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
          readonly description?: string;
          /** @description Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
          readonly invoice_prefix?: string;
          /**
           * customer_param
           * @description Default invoice settings for this customer.
           */
          readonly invoice_settings?: {
            readonly custom_fields?:
              | readonly {
                  readonly name: string;
                  readonly value: string;
                }[]
              | "";
            readonly default_payment_method?: string;
            readonly footer?: string;
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The customer's full name or business name. */
          readonly name?: string;
          /** @description The sequence to be used on the customer's next invoice. Defaults to 1. */
          readonly next_invoice_sequence?: number;
          readonly payment_method?: string;
          /** @description The customer's phone number. */
          readonly phone?: string;
          /** @description Customer's preferred languages, ordered by preference. */
          readonly preferred_locales?: readonly string[];
          /** @description The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount. */
          readonly promotion_code?: string;
          /** @description The customer's shipping information. Appears on invoices emailed to this customer. */
          readonly shipping?:
            | {
                /** optional_fields_address */
                readonly address: {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                };
                readonly name: string;
                readonly phone?: string;
              }
            | "";
          readonly source?: string;
          /**
           * tax_param
           * @description Tax details about the customer.
           */
          readonly tax?: {
            readonly ip_address?: string | "";
          };
          /**
           * @description The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
           * @enum {string}
           */
          readonly tax_exempt?: "" | "exempt" | "none" | "reverse";
          /** @description The customer's tax IDs. */
          readonly tax_id_data?: readonly {
            /** @enum {string} */
            readonly type:
              | "ae_trn"
              | "au_abn"
              | "au_arn"
              | "br_cnpj"
              | "br_cpf"
              | "ca_bn"
              | "ca_gst_hst"
              | "ca_pst_bc"
              | "ca_pst_mb"
              | "ca_pst_sk"
              | "ca_qst"
              | "ch_vat"
              | "cl_tin"
              | "es_cif"
              | "eu_vat"
              | "gb_vat"
              | "ge_vat"
              | "hk_br"
              | "id_npwp"
              | "il_vat"
              | "in_gst"
              | "is_vat"
              | "jp_cn"
              | "jp_rn"
              | "kr_brn"
              | "li_uid"
              | "mx_rfc"
              | "my_frp"
              | "my_itn"
              | "my_sst"
              | "no_vat"
              | "nz_gst"
              | "ru_inn"
              | "ru_kpp"
              | "sa_vat"
              | "sg_gst"
              | "sg_uen"
              | "th_vat"
              | "tw_vat"
              | "ua_vat"
              | "us_ein"
              | "za_vat";
            readonly value: string;
          }[];
        };
      };
    };
  };
  /** <p>Retrieves a Customer object.</p> */
  readonly GetCustomersCustomer: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["customer"] | components["schemas"]["deleted_customer"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
   *
   * <p>This request accepts mostly the same arguments as the customer creation call.</p>
   */
  readonly PostCustomersCustomer: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["customer"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The customer's address. */
          readonly address?:
            | {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              }
            | "";
          /** @description An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
          readonly balance?: number;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
          readonly card?:
            | {
                readonly address_city?: string;
                readonly address_country?: string;
                readonly address_line1?: string;
                readonly address_line2?: string;
                readonly address_state?: string;
                readonly address_zip?: string;
                readonly cvc?: string;
                readonly exp_month: number;
                readonly exp_year: number;
                readonly metadata?: { readonly [key: string]: string };
                readonly name?: string;
                readonly number: string;
                /** @enum {string} */
                readonly object?: "card";
              }
            | string;
          readonly coupon?: string;
          /** @description ID of Alipay account to make the customer's new default for invoice payments. */
          readonly default_alipay_account?: string;
          /** @description ID of bank account to make the customer's new default for invoice payments. */
          readonly default_bank_account?: string;
          /** @description ID of card to make the customer's new default for invoice payments. */
          readonly default_card?: string;
          /**
           * @description If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
           *
           * Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
           *
           * If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
           */
          readonly default_source?: string;
          /** @description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
          readonly description?: string;
          /** @description Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
          readonly invoice_prefix?: string;
          /**
           * customer_param
           * @description Default invoice settings for this customer.
           */
          readonly invoice_settings?: {
            readonly custom_fields?:
              | readonly {
                  readonly name: string;
                  readonly value: string;
                }[]
              | "";
            readonly default_payment_method?: string;
            readonly footer?: string;
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The customer's full name or business name. */
          readonly name?: string;
          /** @description The sequence to be used on the customer's next invoice. Defaults to 1. */
          readonly next_invoice_sequence?: number;
          /** @description The customer's phone number. */
          readonly phone?: string;
          /** @description Customer's preferred languages, ordered by preference. */
          readonly preferred_locales?: readonly string[];
          /** @description The API ID of a promotion code to apply to the customer. The customer will have a discount applied on all recurring payments. Charges you create through the API will not have the discount. */
          readonly promotion_code?: string;
          /** @description The customer's shipping information. Appears on invoices emailed to this customer. */
          readonly shipping?:
            | {
                /** optional_fields_address */
                readonly address: {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                };
                readonly name: string;
                readonly phone?: string;
              }
            | "";
          readonly source?: string;
          /**
           * tax_param
           * @description Tax details about the customer.
           */
          readonly tax?: {
            readonly ip_address?: string | "";
          };
          /**
           * @description The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
           * @enum {string}
           */
          readonly tax_exempt?: "" | "exempt" | "none" | "reverse";
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: "now" | number;
        };
      };
    };
  };
  /** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p> */
  readonly DeleteCustomersCustomer: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_customer"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p> */
  readonly GetCustomersCustomerBalanceTransactions: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["customer_balance_transaction"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates an immutable transaction that updates the customer’s credit <a href="/docs/billing/customer/balance">balance</a>.</p> */
  readonly PostCustomersCustomerBalanceTransactions: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["customer_balance_transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The integer amount in **%s** to apply to the customer's credit balance. */
          readonly amount: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value. */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Retrieves a specific customer balance transaction that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p> */
  readonly GetCustomersCustomerBalanceTransactionsTransaction: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly transaction: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["customer_balance_transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p> */
  readonly PostCustomersCustomerBalanceTransactionsTransaction: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly transaction: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["customer_balance_transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p> */
  readonly GetCustomersCustomerBankAccounts: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["bank_account"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  readonly PostCustomersCustomerBankAccounts: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
          readonly alipay_account?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
          readonly card?:
            | {
                readonly address_city?: string;
                readonly address_country?: string;
                readonly address_line1?: string;
                readonly address_line2?: string;
                readonly address_state?: string;
                readonly address_zip?: string;
                readonly cvc?: string;
                readonly exp_month: number;
                readonly exp_year: number;
                readonly metadata?: { readonly [key: string]: string };
                readonly name?: string;
                readonly number: string;
                /** @enum {string} */
                readonly object?: "card";
              }
            | string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly source?: string;
        };
      };
    };
  };
  /** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p> */
  readonly GetCustomersCustomerBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["bank_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  readonly PostCustomersCustomerBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["card"]
            | components["schemas"]["bank_account"]
            | components["schemas"]["source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Cardholder name. */
          readonly name?: string;
          /** owner */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
        };
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  readonly DeleteCustomersCustomerBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["payment_source"]
            | components["schemas"]["deleted_payment_source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Verify a specified bank account for a given customer.</p> */
  readonly PostCustomersCustomerBankAccountsIdVerify: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["bank_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          readonly amounts?: readonly number[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /**
   * <p>You can see a list of the cards belonging to a customer.
   * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
   * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
   */
  readonly GetCustomersCustomerCards: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["card"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  readonly PostCustomersCustomerCards: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
          readonly alipay_account?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
          readonly card?:
            | {
                readonly address_city?: string;
                readonly address_country?: string;
                readonly address_line1?: string;
                readonly address_line2?: string;
                readonly address_state?: string;
                readonly address_zip?: string;
                readonly cvc?: string;
                readonly exp_month: number;
                readonly exp_year: number;
                readonly metadata?: { readonly [key: string]: string };
                readonly name?: string;
                readonly number: string;
                /** @enum {string} */
                readonly object?: "card";
              }
            | string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly source?: string;
        };
      };
    };
  };
  /** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p> */
  readonly GetCustomersCustomerCardsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["card"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  readonly PostCustomersCustomerCardsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["card"]
            | components["schemas"]["bank_account"]
            | components["schemas"]["source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Cardholder name. */
          readonly name?: string;
          /** owner */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
        };
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  readonly DeleteCustomersCustomerCardsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["payment_source"]
            | components["schemas"]["deleted_payment_source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  readonly GetCustomersCustomerDiscount: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["discount"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Removes the currently applied discount on a customer.</p> */
  readonly DeleteCustomersCustomerDiscount: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_discount"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of PaymentMethods for a given Customer</p> */
  readonly GetCustomersCustomerPaymentMethods: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** A required filter on the list, based on the object `type` field. */
        readonly type:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "card"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["payment_method"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>List sources for a specified customer.</p> */
  readonly GetCustomersCustomerSources: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filter sources according to a particular object type. */
        readonly object?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly (
              | components["schemas"]["alipay_account"]
              | components["schemas"]["bank_account"]
              | components["schemas"]["bitcoin_receiver"]
              | components["schemas"]["card"]
              | components["schemas"]["source"]
            )[];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  readonly PostCustomersCustomerSources: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A token returned by [Stripe.js](https://stripe.com/docs/js) representing the user’s Alipay account details. */
          readonly alipay_account?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details. */
          readonly bank_account?:
            | {
                readonly account_holder_name?: string;
                /** @enum {string} */
                readonly account_holder_type?: "company" | "individual";
                readonly account_number: string;
                readonly country: string;
                readonly currency?: string;
                /** @enum {string} */
                readonly object?: "bank_account";
                readonly routing_number?: string;
              }
            | string;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/js). */
          readonly card?:
            | {
                readonly address_city?: string;
                readonly address_country?: string;
                readonly address_line1?: string;
                readonly address_line2?: string;
                readonly address_state?: string;
                readonly address_zip?: string;
                readonly cvc?: string;
                readonly exp_month: number;
                readonly exp_year: number;
                readonly metadata?: { readonly [key: string]: string };
                readonly name?: string;
                readonly number: string;
                /** @enum {string} */
                readonly object?: "card";
              }
            | string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly source?: string;
        };
      };
    };
  };
  /** <p>Retrieve a specified source for a given customer.</p> */
  readonly GetCustomersCustomerSourcesId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  readonly PostCustomersCustomerSourcesId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["card"]
            | components["schemas"]["bank_account"]
            | components["schemas"]["source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Cardholder name. */
          readonly name?: string;
          /** owner */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
        };
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  readonly DeleteCustomersCustomerSourcesId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["payment_source"]
            | components["schemas"]["deleted_payment_source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Verify a specified bank account for a given customer.</p> */
  readonly PostCustomersCustomerSourcesIdVerify: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["bank_account"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          readonly amounts?: readonly number[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p> */
  readonly GetCustomersCustomerSubscriptions: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["subscription"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new subscription on an existing customer.</p> */
  readonly PostCustomersCustomerSubscriptions: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
          readonly add_invoice_items?: readonly {
            readonly price?: string;
            /** one_time_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /**
           * automatic_tax_config
           * @description Automatic tax settings for this subscription.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * Format: unix-time
           * @description For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
           */
          readonly backdate_start_date?: number;
          /**
           * Format: unix-time
           * @description A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
           */
          readonly billing_cycle_anchor?: number;
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?:
            | {
                readonly amount_gte?: number;
                readonly reset_billing_cycle_anchor?: boolean;
              }
            | "";
          /**
           * Format: unix-time
           * @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
           */
          readonly cancel_at?: number;
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
          readonly default_tax_rates?: readonly string[] | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 20 subscription items, each with an attached price. */
          readonly items?: readonly {
            readonly billing_thresholds?:
              | {
                  readonly usage_gte: number;
                }
              | "";
            readonly metadata?: { readonly [key: string]: string };
            readonly price?: string;
            /** recurring_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** recurring_adhoc */
              readonly recurring: {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /**
           * @description Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the payment intent on the first invoice. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the payment intent is not confirmed within 23 hours subscriptions transition to `status=incomplete_expired`, which is a terminal state.
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           *
           * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
           * @enum {string}
           */
          readonly payment_behavior?:
            | "allow_incomplete"
            | "default_incomplete"
            | "error_if_incomplete"
            | "pending_if_incomplete";
          /**
           * payment_settings
           * @description Payment settings to pass to invoices created by the subscription.
           */
          readonly payment_settings?: {
            /** payment_method_options */
            readonly payment_method_options?: {
              readonly acss_debit?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      /** @enum {string} */
                      readonly transaction_type?: "business" | "personal";
                    };
                    /** @enum {string} */
                    readonly verification_method?: "automatic" | "instant" | "microdeposits";
                  }
                | "";
              readonly bancontact?:
                | {
                    /** @enum {string} */
                    readonly preferred_language?: "de" | "en" | "fr" | "nl";
                  }
                | "";
              readonly card?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      readonly amount?: number;
                      /** @enum {string} */
                      readonly amount_type?: "fixed" | "maximum";
                      readonly description?: string;
                    };
                    /** @enum {string} */
                    readonly request_three_d_secure?: "any" | "automatic";
                  }
                | "";
            };
            readonly payment_method_types?:
              | readonly (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "sepa_debit"
                  | "sofort"
                  | "wechat_pay"
                )[]
              | "";
          };
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?:
            | {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              }
            | "";
          /** @description The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
          readonly promotion_code?: string;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /**
           * transfer_data_specs
           * @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges.
           */
          readonly transfer_data?: {
            readonly amount_percent?: number;
            readonly destination: string;
          };
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_end?: "now" | number;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_from_plan?: boolean;
          /** @description Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_period_days?: number;
        };
      };
    };
  };
  /** <p>Retrieves the subscription with the given ID.</p> */
  readonly GetCustomersCustomerSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
  readonly PostCustomersCustomerSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
          readonly add_invoice_items?: readonly {
            readonly price?: string;
            /** one_time_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /**
           * automatic_tax_config
           * @description Automatic tax settings for this subscription.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
           * @enum {string}
           */
          readonly billing_cycle_anchor?: "now" | "unchanged";
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?:
            | {
                readonly amount_gte?: number;
                readonly reset_billing_cycle_anchor?: boolean;
              }
            | "";
          /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          readonly cancel_at?: number | "";
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
          readonly default_tax_rates?: readonly string[] | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 20 subscription items, each with an attached price. */
          readonly items?: readonly {
            readonly billing_thresholds?:
              | {
                  readonly usage_gte: number;
                }
              | "";
            readonly clear_usage?: boolean;
            readonly deleted?: boolean;
            readonly id?: string;
            readonly metadata?: { readonly [key: string]: string } | "";
            readonly price?: string;
            /** recurring_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** recurring_adhoc */
              readonly recurring: {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /** @description If specified, payment collection for this subscription will be paused. */
          readonly pause_collection?:
            | {
                /** @enum {string} */
                readonly behavior: "keep_as_draft" | "mark_uncollectible" | "void";
                /** Format: unix-time */
                readonly resumes_at?: number;
              }
            | "";
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?:
            | "allow_incomplete"
            | "default_incomplete"
            | "error_if_incomplete"
            | "pending_if_incomplete";
          /**
           * payment_settings
           * @description Payment settings to pass to invoices created by the subscription.
           */
          readonly payment_settings?: {
            /** payment_method_options */
            readonly payment_method_options?: {
              readonly acss_debit?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      /** @enum {string} */
                      readonly transaction_type?: "business" | "personal";
                    };
                    /** @enum {string} */
                    readonly verification_method?: "automatic" | "instant" | "microdeposits";
                  }
                | "";
              readonly bancontact?:
                | {
                    /** @enum {string} */
                    readonly preferred_language?: "de" | "en" | "fr" | "nl";
                  }
                | "";
              readonly card?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      readonly amount?: number;
                      /** @enum {string} */
                      readonly amount_type?: "fixed" | "maximum";
                      readonly description?: string;
                    };
                    /** @enum {string} */
                    readonly request_three_d_secure?: "any" | "automatic";
                  }
                | "";
            };
            readonly payment_method_types?:
              | readonly (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "sepa_debit"
                  | "sofort"
                  | "wechat_pay"
                )[]
              | "";
          };
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?:
            | {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              }
            | "";
          /** @description The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
          readonly promotion_code?: string;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /**
           * Format: unix-time
           * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
           */
          readonly proration_date?: number;
          /** @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value. */
          readonly transfer_data?:
            | {
                readonly amount_percent?: number;
                readonly destination: string;
              }
            | "";
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: "now" | number;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_from_plan?: boolean;
        };
      };
    };
  };
  /**
   * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   */
  readonly DeleteCustomersCustomerSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
          readonly invoice_now?: boolean;
          /** @description Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
          readonly prorate?: boolean;
        };
      };
    };
  };
  readonly GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["discount"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Removes the currently applied discount on a customer.</p> */
  readonly DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_discount"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of tax IDs for a customer.</p> */
  readonly GetCustomersCustomerTaxIds: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["tax_id"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new <code>TaxID</code> object for a customer.</p> */
  readonly PostCustomersCustomerTaxIds: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["tax_id"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description Type of the tax ID, one of `ae_trn`, `au_abn`, `au_arn`, `br_cnpj`, `br_cpf`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `ch_vat`, `cl_tin`, `es_cif`, `eu_vat`, `gb_vat`, `ge_vat`, `hk_br`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `ua_vat`, `us_ein`, or `za_vat`
           * @enum {string}
           */
          readonly type:
            | "ae_trn"
            | "au_abn"
            | "au_arn"
            | "br_cnpj"
            | "br_cpf"
            | "ca_bn"
            | "ca_gst_hst"
            | "ca_pst_bc"
            | "ca_pst_mb"
            | "ca_pst_sk"
            | "ca_qst"
            | "ch_vat"
            | "cl_tin"
            | "es_cif"
            | "eu_vat"
            | "gb_vat"
            | "ge_vat"
            | "hk_br"
            | "id_npwp"
            | "il_vat"
            | "in_gst"
            | "is_vat"
            | "jp_cn"
            | "jp_rn"
            | "kr_brn"
            | "li_uid"
            | "mx_rfc"
            | "my_frp"
            | "my_itn"
            | "my_sst"
            | "no_vat"
            | "nz_gst"
            | "ru_inn"
            | "ru_kpp"
            | "sa_vat"
            | "sg_gst"
            | "sg_uen"
            | "th_vat"
            | "tw_vat"
            | "ua_vat"
            | "us_ein"
            | "za_vat";
          /** @description Value of the tax ID. */
          readonly value: string;
        };
      };
    };
  };
  /** <p>Retrieves the <code>TaxID</code> object with the given identifier.</p> */
  readonly GetCustomersCustomerTaxIdsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["tax_id"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Deletes an existing <code>TaxID</code> object.</p> */
  readonly DeleteCustomersCustomerTaxIdsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_tax_id"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your disputes.</p> */
  readonly GetDisputes: {
    readonly parameters: {
      readonly query: {
        /** Only return disputes associated to the charge specified by this charge ID. */
        readonly charge?: string;
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["dispute"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the dispute with the given ID.</p> */
  readonly GetDisputesDispute: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
   *
   * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
   */
  readonly PostDisputesDispute: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * dispute_evidence_params
           * @description Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.
           */
          readonly evidence?: {
            readonly access_activity_log?: string;
            readonly billing_address?: string;
            readonly cancellation_policy?: string;
            readonly cancellation_policy_disclosure?: string;
            readonly cancellation_rebuttal?: string;
            readonly customer_communication?: string;
            readonly customer_email_address?: string;
            readonly customer_name?: string;
            readonly customer_purchase_ip?: string;
            readonly customer_signature?: string;
            readonly duplicate_charge_documentation?: string;
            readonly duplicate_charge_explanation?: string;
            readonly duplicate_charge_id?: string;
            readonly product_description?: string;
            readonly receipt?: string;
            readonly refund_policy?: string;
            readonly refund_policy_disclosure?: string;
            readonly refund_refusal_explanation?: string;
            readonly service_date?: string;
            readonly service_documentation?: string;
            readonly shipping_address?: string;
            readonly shipping_carrier?: string;
            readonly shipping_date?: string;
            readonly shipping_documentation?: string;
            readonly shipping_tracking_number?: string;
            readonly uncategorized_file?: string;
            readonly uncategorized_text?: string;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
          readonly submit?: boolean;
        };
      };
    };
  };
  /**
   * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
   *
   * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
   */
  readonly PostDisputesDisputeClose: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Creates a short-lived API key for a given resource.</p> */
  readonly PostEphemeralKeys: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["ephemeral_key"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The ID of the Customer you'd like to modify using the resulting ephemeral key. */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The ID of the Issuing Card you'd like to access using the resulting ephemeral key. */
          readonly issuing_card?: string;
        };
      };
    };
  };
  /** <p>Invalidates a short-lived API key for a given resource.</p> */
  readonly DeleteEphemeralKeysKey: {
    readonly parameters: {
      readonly path: {
        readonly key: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["ephemeral_key"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p> */
  readonly GetEvents: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned. */
        readonly delivery_success?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property. */
        readonly type?: string;
        /** An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both. */
        readonly types?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["event"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p> */
  readonly GetEventsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["event"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p> */
  readonly GetExchangeRates: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["exchange_rate"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the exchange rates from the given currency to every supported currency.</p> */
  readonly GetExchangeRatesRateId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly rate_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["exchange_rate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of file links.</p> */
  readonly GetFileLinks: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Filter links by their expiration status. By default, all links are returned. */
        readonly expired?: boolean;
        /** Only return links for the given file. */
        readonly file?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["file_link"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new file link object.</p> */
  readonly PostFileLinks: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["file_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * Format: unix-time
           * @description A future timestamp after which the link will no longer be usable.
           */
          readonly expires_at?: number;
          /** @description The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document_downloadable`, `pci_document`, `selfie`, `sigma_scheduled_query`, or `tax_document_user_upload`. */
          readonly file: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Retrieves the file link with the given ID.</p> */
  readonly GetFileLinksLink: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly link: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["file_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing file link object. Expired links can no longer be updated.</p> */
  readonly PostFileLinksLink: {
    readonly parameters: {
      readonly path: {
        readonly link: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["file_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately. */
          readonly expires_at?: "now" | number | "";
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p> */
  readonly GetFiles: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The file purpose to filter queries by. If none is provided, files will not be filtered by purpose. */
        readonly purpose?:
          | "account_requirement"
          | "additional_verification"
          | "business_icon"
          | "business_logo"
          | "customer_signature"
          | "dispute_evidence"
          | "document_provider_identity_document"
          | "finance_report_run"
          | "identity_document"
          | "identity_document_downloadable"
          | "pci_document"
          | "selfie"
          | "sigma_scheduled_query"
          | "tax_document_user_upload";
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["file"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
   *
   * <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
   */
  readonly PostFiles: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["file"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "multipart/form-data": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol). */
          readonly file: string;
          /**
           * file_link_creation_params
           * @description Optional parameters to automatically create a [file link](https://stripe.com/docs/api#file_links) for the newly created file.
           */
          readonly file_link_data?: {
            readonly create: boolean;
            /** Format: unix-time */
            readonly expires_at?: number;
            readonly metadata?: { readonly [key: string]: string } | "";
          };
          /**
           * @description The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
           * @enum {string}
           */
          readonly purpose:
            | "account_requirement"
            | "additional_verification"
            | "business_icon"
            | "business_logo"
            | "customer_signature"
            | "dispute_evidence"
            | "identity_document"
            | "pci_document"
            | "tax_document_user_upload";
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p> */
  readonly GetFilesFile: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly file: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["file"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>List all verification reports.</p> */
  readonly GetIdentityVerificationReports: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return VerificationReports of this type */
        readonly type?: "document" | "id_number";
        /** Only return VerificationReports created by this VerificationSession ID. It is allowed to provide a VerificationIntent ID. */
        readonly verification_session?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["identity.verification_report"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves an existing VerificationReport</p> */
  readonly GetIdentityVerificationReportsReport: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly report: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["identity.verification_report"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of VerificationSessions</p> */
  readonly GetIdentityVerificationSessions: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return VerificationSessions with this status. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work). */
        readonly status?: "canceled" | "processing" | "requires_input" | "verified";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["identity.verification_session"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a VerificationSession object.</p>
   *
   * <p>After the VerificationSession is created, display a verification modal using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
   *
   * <p>If your API key is in test mode, verification checks won’t actually process, though everything else will occur as if in live mode.</p>
   *
   * <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity documents</a>.</p>
   */
  readonly PostIdentityVerificationSessions: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["identity.verification_session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * session_options_param
           * @description A set of options for the session’s verification checks.
           */
          readonly options?: {
            readonly document?:
              | {
                  readonly allowed_types?: readonly ("driving_license" | "id_card" | "passport")[];
                  readonly require_id_number?: boolean;
                  readonly require_live_capture?: boolean;
                  readonly require_matching_selfie?: boolean;
                }
              | "";
          };
          /** @description The URL that the user will be redirected to upon completing the verification flow. */
          readonly return_url?: string;
          /**
           * @description The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
           * @enum {string}
           */
          readonly type: "document" | "id_number";
        };
      };
    };
  };
  /**
   * <p>Retrieves the details of a VerificationSession that was previously created.</p>
   *
   * <p>When the session status is <code>requires_input</code>, you can use this method to retrieve a valid
   * <code>client_secret</code> or <code>url</code> to allow re-submission.</p>
   */
  readonly GetIdentityVerificationSessionsSession: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["identity.verification_session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates a VerificationSession object.</p>
   *
   * <p>When the session status is <code>requires_input</code>, you can use this method to update the
   * verification check and options.</p>
   */
  readonly PostIdentityVerificationSessionsSession: {
    readonly parameters: {
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["identity.verification_session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * session_options_param
           * @description A set of options for the session’s verification checks.
           */
          readonly options?: {
            readonly document?:
              | {
                  readonly allowed_types?: readonly ("driving_license" | "id_card" | "passport")[];
                  readonly require_id_number?: boolean;
                  readonly require_live_capture?: boolean;
                  readonly require_matching_selfie?: boolean;
                }
              | "";
          };
          /**
           * @description The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
           * @enum {string}
           */
          readonly type?: "document" | "id_number";
        };
      };
    };
  };
  /**
   * <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a href="/docs/identity/how-sessions-work">status</a>.</p>
   *
   * <p>Once canceled, future submission attempts are disabled. This cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
   */
  readonly PostIdentityVerificationSessionsSessionCancel: {
    readonly parameters: {
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["identity.verification_session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /**
   * <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
   * the VerificationSession and all objects related to it, including VerificationReports, Events,
   * request logs, etc.</p>
   *
   * <p>A VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
   * <a href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in <code>requires_action</code>
   * state will automatically cancel it.</p>
   *
   * <p>The redaction process may take up to four days. When the redaction process is in progress, the
   * VerificationSession’s <code>redaction.status</code> field will be set to <code>processing</code>; when the process is
   * finished, it will change to <code>redacted</code> and an <code>identity.verification_session.redacted</code> event
   * will be emitted.</p>
   *
   * <p>Redaction is irreversible. Redacted objects are still accessible in the Stripe API, but all the
   * fields that contain personal data will be replaced by the string <code>[redacted]</code> or a similar
   * placeholder. The <code>metadata</code> field will also be erased. Redacted objects cannot be updated or
   * used for any purpose.</p>
   *
   * <p><a href="/docs/identity/verification-sessions#redact">Learn more</a>.</p>
   */
  readonly PostIdentityVerificationSessionsSessionRedact: {
    readonly parameters: {
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["identity.verification_session"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p> */
  readonly GetInvoiceitems: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed. */
        readonly invoice?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied. */
        readonly pending?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["invoiceitem"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item will be on the next invoice created for the customer specified.</p> */
  readonly PostInvoiceitems: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoiceitem"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The integer amount in %s of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice. */
          readonly amount?: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /** @description The ID of the customer who will be billed when this invoice item is billed. */
          readonly customer: string;
          /** @description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
          readonly description?: string;
          /** @description Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. */
          readonly discountable?: boolean;
          /** @description The coupons to redeem into discounts for the invoice item or invoice line item. */
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices and there is a maximum of 250 items per invoice. */
          readonly invoice?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /**
           * period
           * @description The period associated with this invoice item.
           */
          readonly period?: {
            /** Format: unix-time */
            readonly end: number;
            /** Format: unix-time */
            readonly start: number;
          };
          /** @description The ID of the price object. */
          readonly price?: string;
          /**
           * one_time_price_data
           * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
           */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          /** @description Non-negative integer. The quantity of units for the invoice item. */
          readonly quantity?: number;
          /** @description The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription. */
          readonly subscription?: string;
          /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
          readonly tax_rates?: readonly string[];
          /** @description The integer unit amount in %s of the charge to be applied to the upcoming invoice. This `unit_amount` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount` will reduce the `amount_due` on the invoice. */
          readonly unit_amount?: number;
          /**
           * Format: decimal
           * @description Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
           */
          readonly unit_amount_decimal?: string;
        };
      };
    };
  };
  /** <p>Retrieves the invoice item with the given ID.</p> */
  readonly GetInvoiceitemsInvoiceitem: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly invoiceitem: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoiceitem"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p> */
  readonly PostInvoiceitemsInvoiceitem: {
    readonly parameters: {
      readonly path: {
        readonly invoiceitem: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoiceitem"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The integer amount in %s of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount. */
          readonly amount?: number;
          /** @description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
          readonly description?: string;
          /** @description Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations. */
          readonly discountable?: boolean;
          /** @description The coupons & existing discounts which apply to the invoice item or invoice line item. Item discounts are applied before invoice discounts. Pass an empty string to remove previously-defined discounts. */
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /**
           * period
           * @description The period associated with this invoice item.
           */
          readonly period?: {
            /** Format: unix-time */
            readonly end: number;
            /** Format: unix-time */
            readonly start: number;
          };
          /** @description The ID of the price object. */
          readonly price?: string;
          /**
           * one_time_price_data
           * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
           */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          /** @description Non-negative integer. The quantity of units for the invoice item. */
          readonly quantity?: number;
          /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates. */
          readonly tax_rates?: readonly string[] | "";
          /** @description The integer unit amount in %s of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount. */
          readonly unit_amount?: number;
          /**
           * Format: decimal
           * @description Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
           */
          readonly unit_amount_decimal?: string;
        };
      };
    };
  };
  /** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p> */
  readonly DeleteInvoiceitemsInvoiceitem: {
    readonly parameters: {
      readonly path: {
        readonly invoiceitem: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_invoiceitem"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p> */
  readonly GetInvoices: {
    readonly parameters: {
      readonly query: {
        /** The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`. */
        readonly collection_method?: "charge_automatically" | "send_invoice";
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return invoices for the customer specified by this customer ID. */
        readonly customer?: string;
        readonly due_date?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
        readonly status?: "draft" | "open" | "paid" | "uncollectible" | "void";
        /** Only return invoices for the subscription specified by this subscription ID. */
        readonly subscription?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["invoice"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations. The invoice remains a draft until you <a href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a href="#send_invoice">send</a> the invoice to your customers.</p> */
  readonly PostInvoices: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
          readonly account_tax_ids?: readonly string[] | "";
          /** @description A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees). */
          readonly application_fee_amount?: number;
          /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
          readonly auto_advance?: boolean;
          /**
           * automatic_tax_param
           * @description Settings for automatic tax lookup for this invoice.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description A list of up to 4 custom fields to be displayed on the invoice. */
          readonly custom_fields?:
            | readonly {
                readonly name: string;
                readonly value: string;
              }[]
            | "";
          /** @description The ID of the customer who will be billed. */
          readonly customer: string;
          /** @description The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. */
          readonly default_tax_rates?: readonly string[];
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
          readonly description?: string;
          /** @description The coupons to redeem into discounts for the invoice. If not specified, inherits the discount from the invoice's customer. Pass an empty string to avoid inheriting any discounts. */
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          /**
           * Format: unix-time
           * @description The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`.
           */
          readonly due_date?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Footer to be displayed on the invoice. */
          readonly footer?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
          readonly on_behalf_of?: string;
          /**
           * payment_settings
           * @description Configuration settings for the PaymentIntent that is generated when the invoice is finalized.
           */
          readonly payment_settings?: {
            /** payment_method_options */
            readonly payment_method_options?: {
              readonly acss_debit?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      /** @enum {string} */
                      readonly transaction_type?: "business" | "personal";
                    };
                    /** @enum {string} */
                    readonly verification_method?: "automatic" | "instant" | "microdeposits";
                  }
                | "";
              readonly bancontact?:
                | {
                    /** @enum {string} */
                    readonly preferred_language?: "de" | "en" | "fr" | "nl";
                  }
                | "";
              readonly card?:
                | {
                    /** @enum {string} */
                    readonly request_three_d_secure?: "any" | "automatic";
                  }
                | "";
            };
            readonly payment_method_types?:
              | readonly (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "sepa_debit"
                  | "sofort"
                  | "wechat_pay"
                )[]
              | "";
          };
          /** @description Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
          readonly statement_descriptor?: string;
          /** @description The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will only include pending invoice items for that subscription and pending invoice items not associated with any subscription. The subscription's billing cycle and regular subscription events won't be affected. */
          readonly subscription?: string;
          /**
           * transfer_data_specs
           * @description If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge.
           */
          readonly transfer_data?: {
            readonly amount?: number;
            readonly destination: string;
          };
        };
      };
    };
  };
  /**
   * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discounts that are applicable to the invoice.</p>
   *
   * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
   *
   * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
   */
  readonly GetInvoicesUpcoming: {
    readonly parameters: {
      readonly query: {
        /** Settings for automatic tax lookup for this invoice preview. */
        readonly automatic_tax?: {
          readonly enabled: boolean;
        };
        /** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */
        readonly coupon?: string;
        /** The identifier of the customer whose upcoming invoice you'd like to retrieve. */
        readonly customer?: string;
        /** Details about the customer you want to invoice or overrides for an existing customer. */
        readonly customer_details?: {
          readonly address?:
            | {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              }
            | "";
          readonly shipping?:
            | {
                /** optional_fields_address */
                readonly address: {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                };
                readonly name: string;
                readonly phone?: string;
              }
            | "";
          /** tax_param */
          readonly tax?: {
            readonly ip_address?: string | "";
          };
          /** @enum {string} */
          readonly tax_exempt?: "" | "exempt" | "none" | "reverse";
          readonly tax_ids?: readonly {
            /** @enum {string} */
            readonly type:
              | "ae_trn"
              | "au_abn"
              | "au_arn"
              | "br_cnpj"
              | "br_cpf"
              | "ca_bn"
              | "ca_gst_hst"
              | "ca_pst_bc"
              | "ca_pst_mb"
              | "ca_pst_sk"
              | "ca_qst"
              | "ch_vat"
              | "cl_tin"
              | "es_cif"
              | "eu_vat"
              | "gb_vat"
              | "ge_vat"
              | "hk_br"
              | "id_npwp"
              | "il_vat"
              | "in_gst"
              | "is_vat"
              | "jp_cn"
              | "jp_rn"
              | "kr_brn"
              | "li_uid"
              | "mx_rfc"
              | "my_frp"
              | "my_itn"
              | "my_sst"
              | "no_vat"
              | "nz_gst"
              | "ru_inn"
              | "ru_kpp"
              | "sa_vat"
              | "sg_gst"
              | "sg_uen"
              | "th_vat"
              | "tw_vat"
              | "ua_vat"
              | "us_ein"
              | "za_vat";
            readonly value: string;
          }[];
        };
        /** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead. */
        readonly discounts?:
          | readonly {
              readonly coupon?: string;
              readonly discount?: string;
            }[]
          | "";
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** List of invoice items to add or update in the upcoming invoice preview. */
        readonly invoice_items?: readonly {
          readonly amount?: number;
          readonly currency?: string;
          readonly description?: string;
          readonly discountable?: boolean;
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          readonly invoiceitem?: string;
          readonly metadata?: { readonly [key: string]: string } | "";
          /** period */
          readonly period?: {
            /** Format: unix-time */
            readonly end: number;
            /** Format: unix-time */
            readonly start: number;
          };
          readonly price?: string;
          /** one_time_price_data */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          readonly quantity?: number;
          readonly tax_rates?: readonly string[] | "";
          readonly unit_amount?: number;
          /** Format: decimal */
          readonly unit_amount_decimal?: string;
        }[];
        /** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
        readonly schedule?: string;
        /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
        readonly subscription?: string;
        /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */
        readonly subscription_billing_cycle_anchor?: ("now" | "unchanged") | number;
        /** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`. */
        readonly subscription_cancel_at?: number | "";
        /** Boolean indicating whether this subscription should cancel at the end of the current period. */
        readonly subscription_cancel_at_period_end?: boolean;
        /** This simulates the subscription being canceled or expired immediately. */
        readonly subscription_cancel_now?: boolean;
        /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */
        readonly subscription_default_tax_rates?: readonly string[] | "";
        /** A list of up to 20 subscription items, each with an attached price. */
        readonly subscription_items?: readonly {
          readonly billing_thresholds?:
            | {
                readonly usage_gte: number;
              }
            | "";
          readonly clear_usage?: boolean;
          readonly deleted?: boolean;
          readonly id?: string;
          readonly metadata?: { readonly [key: string]: string } | "";
          readonly price?: string;
          /** recurring_price_data */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** recurring_adhoc */
            readonly recurring: {
              /** @enum {string} */
              readonly interval: "day" | "month" | "week" | "year";
              readonly interval_count?: number;
            };
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          readonly quantity?: number;
          readonly tax_rates?: readonly string[] | "";
        }[];
        /**
         * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
         *
         * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
         *
         * Prorations can be disabled by passing `none`.
         */
        readonly subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
        /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. */
        readonly subscription_proration_date?: number;
        /** Date a subscription is intended to start (can be future or past) */
        readonly subscription_start_date?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */
        readonly subscription_trial_end?: "now" | number;
        /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
        readonly subscription_trial_from_plan?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetInvoicesUpcomingLines: {
    readonly parameters: {
      readonly query: {
        /** Settings for automatic tax lookup for this invoice preview. */
        readonly automatic_tax?: {
          readonly enabled: boolean;
        };
        /** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */
        readonly coupon?: string;
        /** The identifier of the customer whose upcoming invoice you'd like to retrieve. */
        readonly customer?: string;
        /** Details about the customer you want to invoice or overrides for an existing customer. */
        readonly customer_details?: {
          readonly address?:
            | {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              }
            | "";
          readonly shipping?:
            | {
                /** optional_fields_address */
                readonly address: {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                };
                readonly name: string;
                readonly phone?: string;
              }
            | "";
          /** tax_param */
          readonly tax?: {
            readonly ip_address?: string | "";
          };
          /** @enum {string} */
          readonly tax_exempt?: "" | "exempt" | "none" | "reverse";
          readonly tax_ids?: readonly {
            /** @enum {string} */
            readonly type:
              | "ae_trn"
              | "au_abn"
              | "au_arn"
              | "br_cnpj"
              | "br_cpf"
              | "ca_bn"
              | "ca_gst_hst"
              | "ca_pst_bc"
              | "ca_pst_mb"
              | "ca_pst_sk"
              | "ca_qst"
              | "ch_vat"
              | "cl_tin"
              | "es_cif"
              | "eu_vat"
              | "gb_vat"
              | "ge_vat"
              | "hk_br"
              | "id_npwp"
              | "il_vat"
              | "in_gst"
              | "is_vat"
              | "jp_cn"
              | "jp_rn"
              | "kr_brn"
              | "li_uid"
              | "mx_rfc"
              | "my_frp"
              | "my_itn"
              | "my_sst"
              | "no_vat"
              | "nz_gst"
              | "ru_inn"
              | "ru_kpp"
              | "sa_vat"
              | "sg_gst"
              | "sg_uen"
              | "th_vat"
              | "tw_vat"
              | "ua_vat"
              | "us_ein"
              | "za_vat";
            readonly value: string;
          }[];
        };
        /** The coupons to redeem into discounts for the invoice preview. If not specified, inherits the discount from the customer or subscription. This only works for coupons directly applied to the invoice. To apply a coupon to a subscription, you must use the `coupon` parameter instead. Pass an empty string to avoid inheriting any discounts. To preview the upcoming invoice for a subscription that hasn't been created, use `coupon` instead. */
        readonly discounts?:
          | readonly {
              readonly coupon?: string;
              readonly discount?: string;
            }[]
          | "";
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** List of invoice items to add or update in the upcoming invoice preview. */
        readonly invoice_items?: readonly {
          readonly amount?: number;
          readonly currency?: string;
          readonly description?: string;
          readonly discountable?: boolean;
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          readonly invoiceitem?: string;
          readonly metadata?: { readonly [key: string]: string } | "";
          /** period */
          readonly period?: {
            /** Format: unix-time */
            readonly end: number;
            /** Format: unix-time */
            readonly start: number;
          };
          readonly price?: string;
          /** one_time_price_data */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          readonly quantity?: number;
          readonly tax_rates?: readonly string[] | "";
          readonly unit_amount?: number;
          /** Format: decimal */
          readonly unit_amount_decimal?: string;
        }[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
        readonly schedule?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
        readonly subscription?: string;
        /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */
        readonly subscription_billing_cycle_anchor?: ("now" | "unchanged") | number;
        /** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`. */
        readonly subscription_cancel_at?: number | "";
        /** Boolean indicating whether this subscription should cancel at the end of the current period. */
        readonly subscription_cancel_at_period_end?: boolean;
        /** This simulates the subscription being canceled or expired immediately. */
        readonly subscription_cancel_now?: boolean;
        /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */
        readonly subscription_default_tax_rates?: readonly string[] | "";
        /** A list of up to 20 subscription items, each with an attached price. */
        readonly subscription_items?: readonly {
          readonly billing_thresholds?:
            | {
                readonly usage_gte: number;
              }
            | "";
          readonly clear_usage?: boolean;
          readonly deleted?: boolean;
          readonly id?: string;
          readonly metadata?: { readonly [key: string]: string } | "";
          readonly price?: string;
          /** recurring_price_data */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** recurring_adhoc */
            readonly recurring: {
              /** @enum {string} */
              readonly interval: "day" | "month" | "week" | "year";
              readonly interval_count?: number;
            };
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          readonly quantity?: number;
          readonly tax_rates?: readonly string[] | "";
        }[];
        /**
         * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
         *
         * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
         *
         * Prorations can be disabled by passing `none`.
         */
        readonly subscription_proration_behavior?: "always_invoice" | "create_prorations" | "none";
        /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration_behavior` cannot be set to 'none'. */
        readonly subscription_proration_date?: number;
        /** Date a subscription is intended to start (can be future or past) */
        readonly subscription_start_date?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */
        readonly subscription_trial_end?: "now" | number;
        /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
        readonly subscription_trial_from_plan?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["line_item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the invoice with the given ID.</p> */
  readonly GetInvoicesInvoice: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
   * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
   *
   * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
   * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
   * <code>auto_advance=false</code>.</p>
   */
  readonly PostInvoicesInvoice: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The account tax IDs associated with the invoice. Only editable when the invoice is a draft. */
          readonly account_tax_ids?: readonly string[] | "";
          /** @description A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/billing/invoices/connect#collecting-fees). */
          readonly application_fee_amount?: number;
          /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. */
          readonly auto_advance?: boolean;
          /**
           * automatic_tax_param
           * @description Settings for automatic tax lookup for this invoice.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields. */
          readonly custom_fields?:
            | readonly {
                readonly name: string;
                readonly value: string;
              }[]
            | "";
          /** @description The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates. */
          readonly default_tax_rates?: readonly string[] | "";
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
          readonly description?: string;
          /** @description The discounts that will apply to the invoice. Pass an empty string to remove previously-defined discounts. */
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          /**
           * Format: unix-time
           * @description The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices.
           */
          readonly due_date?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Footer to be displayed on the invoice. */
          readonly footer?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details. */
          readonly on_behalf_of?: string | "";
          /**
           * payment_settings
           * @description Configuration settings for the PaymentIntent that is generated when the invoice is finalized.
           */
          readonly payment_settings?: {
            /** payment_method_options */
            readonly payment_method_options?: {
              readonly acss_debit?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      /** @enum {string} */
                      readonly transaction_type?: "business" | "personal";
                    };
                    /** @enum {string} */
                    readonly verification_method?: "automatic" | "instant" | "microdeposits";
                  }
                | "";
              readonly bancontact?:
                | {
                    /** @enum {string} */
                    readonly preferred_language?: "de" | "en" | "fr" | "nl";
                  }
                | "";
              readonly card?:
                | {
                    /** @enum {string} */
                    readonly request_three_d_secure?: "any" | "automatic";
                  }
                | "";
            };
            readonly payment_method_types?:
              | readonly (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "sepa_debit"
                  | "sofort"
                  | "wechat_pay"
                )[]
              | "";
          };
          /** @description Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
          readonly statement_descriptor?: string;
          /** @description If specified, the funds from the invoice will be transferred to the destination and the ID of the resulting transfer will be found on the invoice's charge. This will be unset if you POST an empty value. */
          readonly transfer_data?:
            | {
                readonly amount?: number;
                readonly destination: string;
              }
            | "";
        };
      };
    };
  };
  /** <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a href="#void_invoice">voided</a>.</p> */
  readonly DeleteInvoicesInvoice: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p> */
  readonly PostInvoicesInvoiceFinalize: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/invoicing/automatic-charging) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
          readonly auto_advance?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetInvoicesInvoiceLines: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["line_item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p> */
  readonly PostInvoicesInvoiceMarkUncollectible: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p> */
  readonly PostInvoicesInvoicePay: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.
           *
           * Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference. Defaults to `false`.
           */
          readonly forgive?: boolean;
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. Defaults to `true` (off-session). */
          readonly off_session?: boolean;
          /** @description Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. Defaults to `false`. */
          readonly paid_out_of_band?: boolean;
          /** @description A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid. */
          readonly payment_method?: string;
          /** @description A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid. */
          readonly source?: string;
        };
      };
    };
  };
  /**
   * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
   *
   * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
   */
  readonly PostInvoicesInvoiceSend: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p> */
  readonly PostInvoicesInvoiceVoid: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["invoice"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of issuer fraud records.</p> */
  readonly GetIssuerFraudRecords: {
    readonly parameters: {
      readonly query: {
        /** Only return issuer fraud records for the charge specified by this charge ID. */
        readonly charge?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["issuer_fraud_record"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
   */
  readonly GetIssuerFraudRecordsIssuerFraudRecord: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly issuer_fraud_record: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuer_fraud_record"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingAuthorizations: {
    readonly parameters: {
      readonly query: {
        /** Only return authorizations that belong to the given card. */
        readonly card?: string;
        /** Only return authorizations that belong to the given cardholder. */
        readonly cardholder?: string;
        /** Only return authorizations that were created during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`. */
        readonly status?: "closed" | "pending" | "reversed";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["issuing.authorization"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Authorization</code> object.</p> */
  readonly GetIssuingAuthorizationsAuthorization: {
    readonly parameters: {
      readonly path: {
        readonly authorization: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingAuthorizationsAuthorization: {
    readonly parameters: {
      readonly path: {
        readonly authorization: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p> */
  readonly PostIssuingAuthorizationsAuthorizationApprove: {
    readonly parameters: {
      readonly path: {
        readonly authorization: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request). */
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p> */
  readonly PostIssuingAuthorizationsAuthorizationDecline: {
    readonly parameters: {
      readonly path: {
        readonly authorization: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.authorization"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingCardholders: {
    readonly parameters: {
      readonly query: {
        /** Only return cardholders that were created during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return cardholders that have the given email address. */
        readonly email?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return cardholders that have the given phone number. */
        readonly phone_number?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`. */
        readonly status?: "active" | "blocked" | "inactive";
        /** Only return cardholders that have the given type. One of `individual` or `company`. */
        readonly type?: "company" | "individual";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["issuing.cardholder"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p> */
  readonly PostIssuingCardholders: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.cardholder"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * billing_specs
           * @description The cardholder's billing address.
           */
          readonly billing: {
            /** required_address */
            readonly address: {
              readonly city: string;
              readonly country: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code: string;
              readonly state?: string;
            };
          };
          /**
           * company_param
           * @description Additional information about a `company` cardholder.
           */
          readonly company?: {
            readonly tax_id?: string;
          };
          /** @description The cardholder's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * individual_param
           * @description Additional information about an `individual` cardholder.
           */
          readonly individual?: {
            /** date_of_birth_specs */
            readonly dob?: {
              readonly day: number;
              readonly month: number;
              readonly year: number;
            };
            readonly first_name: string;
            readonly last_name: string;
            /** person_verification_param */
            readonly verification?: {
              /** person_verification_document_param */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The cardholder's name. This will be printed on cards issued to them. The maximum length of this field is 24 characters. */
          readonly name: string;
          /** @description The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details. */
          readonly phone_number?: string;
          /**
           * authorization_controls_param_v2
           * @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
            readonly spending_limits_currency?: string;
          };
          /**
           * @description Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
           * @enum {string}
           */
          readonly status?: "active" | "inactive";
          /**
           * @description One of `individual` or `company`.
           * @enum {string}
           */
          readonly type: "company" | "individual";
        };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Cardholder</code> object.</p> */
  readonly GetIssuingCardholdersCardholder: {
    readonly parameters: {
      readonly path: {
        readonly cardholder: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.cardholder"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingCardholdersCardholder: {
    readonly parameters: {
      readonly path: {
        readonly cardholder: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.cardholder"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * billing_specs
           * @description The cardholder's billing address.
           */
          readonly billing?: {
            /** required_address */
            readonly address: {
              readonly city: string;
              readonly country: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code: string;
              readonly state?: string;
            };
          };
          /**
           * company_param
           * @description Additional information about a `company` cardholder.
           */
          readonly company?: {
            readonly tax_id?: string;
          };
          /** @description The cardholder's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * individual_param
           * @description Additional information about an `individual` cardholder.
           */
          readonly individual?: {
            /** date_of_birth_specs */
            readonly dob?: {
              readonly day: number;
              readonly month: number;
              readonly year: number;
            };
            readonly first_name: string;
            readonly last_name: string;
            /** person_verification_param */
            readonly verification?: {
              /** person_verification_document_param */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure) for more details. */
          readonly phone_number?: string;
          /**
           * authorization_controls_param_v2
           * @description Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
            readonly spending_limits_currency?: string;
          };
          /**
           * @description Specifies whether to permit authorizations on this cardholder's cards.
           * @enum {string}
           */
          readonly status?: "active" | "inactive";
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingCards: {
    readonly parameters: {
      readonly query: {
        /** Only return cards belonging to the Cardholder with the provided ID. */
        readonly cardholder?: string;
        /** Only return cards that were issued during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Only return cards that have the given expiration month. */
        readonly exp_month?: number;
        /** Only return cards that have the given expiration year. */
        readonly exp_year?: number;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Only return cards that have the given last four digits. */
        readonly last4?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return cards that have the given status. One of `active`, `inactive`, or `canceled`. */
        readonly status?: "active" | "canceled" | "inactive";
        /** Only return cards that have the given type. One of `virtual` or `physical`. */
        readonly type?: "physical" | "virtual";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["issuing.card"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates an Issuing <code>Card</code> object.</p> */
  readonly PostIssuingCards: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.card"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated. */
          readonly cardholder?: string;
          /** @description The currency for the card. */
          readonly currency: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The card this is meant to be a replacement for (if any). */
          readonly replacement_for?: string;
          /**
           * @description If `replacement_for` is specified, this should indicate why that card is being replaced.
           * @enum {string}
           */
          readonly replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
          /**
           * shipping_specs
           * @description The address where the card will be shipped.
           */
          readonly shipping?: {
            /** required_address */
            readonly address: {
              readonly city: string;
              readonly country: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code: string;
              readonly state?: string;
            };
            readonly name: string;
            /** @enum {string} */
            readonly service?: "express" | "priority" | "standard";
            /** @enum {string} */
            readonly type?: "bulk" | "individual";
          };
          /**
           * authorization_controls_param
           * @description Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
          };
          /**
           * @description Whether authorizations can be approved on this card. Defaults to `inactive`.
           * @enum {string}
           */
          readonly status?: "active" | "inactive";
          /**
           * @description The type of card to issue. Possible values are `physical` or `virtual`.
           * @enum {string}
           */
          readonly type: "physical" | "virtual";
        };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Card</code> object.</p> */
  readonly GetIssuingCardsCard: {
    readonly parameters: {
      readonly path: {
        readonly card: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.card"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingCardsCard: {
    readonly parameters: {
      readonly path: {
        readonly card: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.card"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * @description Reason why the `status` of this card is `canceled`.
           * @enum {string}
           */
          readonly cancellation_reason?: "lost" | "stolen";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /**
           * encrypted_pin_param
           * @description The desired new PIN for this card.
           */
          readonly pin?: {
            readonly encrypted_number?: string;
          };
          /**
           * authorization_controls_param
           * @description Rules that control spending for this card. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
          };
          /**
           * @description Dictates whether authorizations can be approved on this card. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.
           * @enum {string}
           */
          readonly status?: "active" | "canceled" | "inactive";
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingDisputes: {
    readonly parameters: {
      readonly query: {
        /** Select Issuing disputes that were created during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Select Issuing disputes with the given status. */
        readonly status?: "expired" | "lost" | "submitted" | "unsubmitted" | "won";
        /** Select the Issuing dispute for the given transaction. */
        readonly transaction?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["issuing.dispute"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details about evidence requirements.</p> */
  readonly PostIssuingDisputes: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * evidence_param
           * @description Evidence provided for the dispute.
           */
          readonly evidence?: {
            readonly canceled?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly canceled_at?: number | "";
                  readonly cancellation_policy_provided?: boolean | "";
                  readonly cancellation_reason?: string;
                  readonly expected_at?: number | "";
                  readonly explanation?: string;
                  readonly product_description?: string;
                  /** @enum {string} */
                  readonly product_type?: "" | "merchandise" | "service";
                  /** @enum {string} */
                  readonly return_status?: "" | "merchant_rejected" | "successful";
                  readonly returned_at?: number | "";
                }
              | "";
            readonly duplicate?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly card_statement?: string | "";
                  readonly cash_receipt?: string | "";
                  readonly check_image?: string | "";
                  readonly explanation?: string;
                  readonly original_transaction?: string;
                }
              | "";
            readonly fraudulent?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly explanation?: string;
                }
              | "";
            readonly merchandise_not_as_described?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly explanation?: string;
                  readonly received_at?: number | "";
                  readonly return_description?: string;
                  /** @enum {string} */
                  readonly return_status?: "" | "merchant_rejected" | "successful";
                  readonly returned_at?: number | "";
                }
              | "";
            readonly not_received?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly expected_at?: number | "";
                  readonly explanation?: string;
                  readonly product_description?: string;
                  /** @enum {string} */
                  readonly product_type?: "" | "merchandise" | "service";
                }
              | "";
            readonly other?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly explanation?: string;
                  readonly product_description?: string;
                  /** @enum {string} */
                  readonly product_type?: "" | "merchandise" | "service";
                }
              | "";
            /** @enum {string} */
            readonly reason?:
              | "canceled"
              | "duplicate"
              | "fraudulent"
              | "merchandise_not_as_described"
              | "not_received"
              | "other"
              | "service_not_as_described";
            readonly service_not_as_described?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly canceled_at?: number | "";
                  readonly cancellation_reason?: string;
                  readonly explanation?: string;
                  readonly received_at?: number | "";
                }
              | "";
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The ID of the issuing transaction to create a dispute for. */
          readonly transaction: string;
        };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Dispute</code> object.</p> */
  readonly GetIssuingDisputesDispute: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing in an empty string.</p> */
  readonly PostIssuingDisputesDispute: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * evidence_param
           * @description Evidence provided for the dispute.
           */
          readonly evidence?: {
            readonly canceled?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly canceled_at?: number | "";
                  readonly cancellation_policy_provided?: boolean | "";
                  readonly cancellation_reason?: string;
                  readonly expected_at?: number | "";
                  readonly explanation?: string;
                  readonly product_description?: string;
                  /** @enum {string} */
                  readonly product_type?: "" | "merchandise" | "service";
                  /** @enum {string} */
                  readonly return_status?: "" | "merchant_rejected" | "successful";
                  readonly returned_at?: number | "";
                }
              | "";
            readonly duplicate?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly card_statement?: string | "";
                  readonly cash_receipt?: string | "";
                  readonly check_image?: string | "";
                  readonly explanation?: string;
                  readonly original_transaction?: string;
                }
              | "";
            readonly fraudulent?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly explanation?: string;
                }
              | "";
            readonly merchandise_not_as_described?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly explanation?: string;
                  readonly received_at?: number | "";
                  readonly return_description?: string;
                  /** @enum {string} */
                  readonly return_status?: "" | "merchant_rejected" | "successful";
                  readonly returned_at?: number | "";
                }
              | "";
            readonly not_received?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly expected_at?: number | "";
                  readonly explanation?: string;
                  readonly product_description?: string;
                  /** @enum {string} */
                  readonly product_type?: "" | "merchandise" | "service";
                }
              | "";
            readonly other?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly explanation?: string;
                  readonly product_description?: string;
                  /** @enum {string} */
                  readonly product_type?: "" | "merchandise" | "service";
                }
              | "";
            /** @enum {string} */
            readonly reason?:
              | "canceled"
              | "duplicate"
              | "fraudulent"
              | "merchandise_not_as_described"
              | "not_received"
              | "other"
              | "service_not_as_described";
            readonly service_not_as_described?:
              | {
                  readonly additional_documentation?: string | "";
                  readonly canceled_at?: number | "";
                  readonly cancellation_reason?: string;
                  readonly explanation?: string;
                  readonly received_at?: number | "";
                }
              | "";
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for the dispute’s reason are present. For more details, see <a href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p> */
  readonly PostIssuingDisputesDisputeSubmit: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.dispute"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingSettlements: {
    readonly parameters: {
      readonly query: {
        /** Only return issuing settlements that were created during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["issuing.settlement"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Settlement</code> object.</p> */
  readonly GetIssuingSettlementsSettlement: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly settlement: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.settlement"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingSettlementsSettlement: {
    readonly parameters: {
      readonly path: {
        readonly settlement: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.settlement"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingTransactions: {
    readonly parameters: {
      readonly query: {
        /** Only return transactions that belong to the given card. */
        readonly card?: string;
        /** Only return transactions that belong to the given cardholder. */
        readonly cardholder?: string;
        /** Only return transactions that were created during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return transactions that have the given type. One of `capture` or `refund`. */
        readonly type?: "capture" | "refund";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["issuing.transaction"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Transaction</code> object.</p> */
  readonly GetIssuingTransactionsTransaction: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly transaction: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingTransactionsTransaction: {
    readonly parameters: {
      readonly path: {
        readonly transaction: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issuing.transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Retrieves a Mandate object.</p> */
  readonly GetMandatesMandate: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly mandate: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["mandate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p> */
  readonly GetOrderReturns: {
    readonly parameters: {
      readonly query: {
        /** Date this return was created. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The order to retrieve returns for. */
        readonly order?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["order_return"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p> */
  readonly GetOrderReturnsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["order_return"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p> */
  readonly GetOrders: {
    readonly parameters: {
      readonly query: {
        /** Date this order was created. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return orders for the given customer. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Only return orders with the given IDs. */
        readonly ids?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return orders that have the given status. One of `created`, `paid`, `fulfilled`, or `refunded`. */
        readonly status?: string;
        /** Filter orders based on when they were paid, fulfilled, canceled, or returned. */
        readonly status_transitions?: {
          readonly canceled?:
            | {
                readonly gt?: number;
                readonly gte?: number;
                readonly lt?: number;
                readonly lte?: number;
              }
            | number;
          readonly fulfilled?:
            | {
                readonly gt?: number;
                readonly gte?: number;
                readonly lt?: number;
                readonly lte?: number;
              }
            | number;
          readonly paid?:
            | {
                readonly gt?: number;
                readonly gte?: number;
                readonly lt?: number;
                readonly lte?: number;
              }
            | number;
          readonly returned?:
            | {
                readonly gt?: number;
                readonly gte?: number;
                readonly lt?: number;
                readonly lte?: number;
              }
            | number;
        };
        /** Only return orders with the given upstream order IDs. */
        readonly upstream_ids?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["order"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new order object.</p> */
  readonly PostOrders: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
          readonly coupon?: string;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If `email` or `shipping` are also provided, they will override the values retrieved from the customer object. */
          readonly customer?: string;
          /** @description The email address of the customer placing the order. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description List of items constituting the order. An order can have up to 25 items. */
          readonly items?: readonly {
            readonly amount?: number;
            readonly currency?: string;
            readonly description?: string;
            readonly parent?: string;
            readonly quantity?: number;
            /** @enum {string} */
            readonly type?: "discount" | "shipping" | "sku" | "tax";
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * customer_shipping
           * @description Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true.
           */
          readonly shipping?: {
            /** optional_fields_address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly name: string;
            readonly phone?: string;
          };
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p> */
  readonly GetOrdersId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostOrdersId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
          readonly coupon?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary. */
          readonly selected_shipping_method?: string;
          /**
           * shipping_tracking_params
           * @description Tracking information once the order has been fulfilled.
           */
          readonly shipping?: {
            readonly carrier: string;
            readonly tracking_number: string;
          };
          /**
           * @description Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
           * @enum {string}
           */
          readonly status?: "canceled" | "created" | "fulfilled" | "paid" | "returned";
        };
      };
    };
  };
  /** <p>Pay an order by providing a <code>source</code> to create a payment.</p> */
  readonly PostOrdersIdPay: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["order"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A fee in %s that will be applied to the order and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
          readonly application_fee?: number;
          /** @description The ID of an existing customer that will be charged for this order. If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified customer will be charged instead of the one attached to the order. */
          readonly customer?: string;
          /** @description The email address of the customer placing the order. Required if not previously specified for the order. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description A [Token](https://stripe.com/docs/api#tokens)'s or a [Source](https://stripe.com/docs/api#sources)'s ID, as returned by [Elements](https://stripe.com/docs/elements). If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified source will be charged intead of the customer attached to the order. */
          readonly source?: string;
        };
      };
    };
  };
  /** <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p> */
  readonly PostOrdersIdReturns: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["order_return"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description List of items to return. */
          readonly items?:
            | readonly {
                readonly amount?: number;
                readonly description?: string;
                readonly parent?: string;
                readonly quantity?: number;
                /** @enum {string} */
                readonly type?: "discount" | "shipping" | "sku" | "tax";
              }[]
            | "";
        };
      };
    };
  };
  /** <p>Returns a list of PaymentIntents.</p> */
  readonly GetPaymentIntents: {
    readonly parameters: {
      readonly query: {
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return PaymentIntents for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["payment_intent"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a PaymentIntent object.</p>
   *
   * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
   * to continue the payment. You can read more about the different payment flows
   * available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
   *
   * <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
   * and confirming the PaymentIntent in the same call. You may use any parameters
   * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
   * is supplied.</p>
   */
  readonly PostPaymentIntents: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          readonly amount: number;
          /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
          readonly application_fee_amount?: number;
          /**
           * automatic_payment_methods_param
           * @description When enabled, this PaymentIntent will accept payment methods that you have enabled in the Dashboard and are compatible with this PaymentIntent's other parameters.
           */
          readonly automatic_payment_methods?: {
            readonly enabled: boolean;
          };
          /**
           * @description Controls when the funds will be captured from the customer's account.
           * @enum {string}
           */
          readonly capture_method?: "automatic" | "manual";
          /** @description Set to `true` to attempt to [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, parameters available in the [confirm](https://stripe.com/docs/api/payment_intents/confirm) API may also be provided. */
          readonly confirm?: boolean;
          /** @enum {string} */
          readonly confirmation_method?: "automatic" | "manual";
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /**
           * @description ID of the Customer this PaymentIntent belongs to, if one exists.
           *
           * Payment methods attached to other Customers cannot be used with this PaymentIntent.
           *
           * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly error_on_requires_action?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description ID of the mandate to be used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly mandate?: string;
          /**
           * secret_key_param
           * @description This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
           */
          readonly mandate_data?: {
            /** customer_acceptance_param */
            readonly customer_acceptance: {
              /** Format: unix-time */
              readonly accepted_at?: number;
              /** offline_param */
              readonly offline?: { readonly [key: string]: unknown };
              /** online_param */
              readonly online?: {
                readonly ip_address: string;
                readonly user_agent: string;
              };
              /** @enum {string} */
              readonly type: "offline" | "online";
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly off_session?: boolean | ("one_off" | "recurring");
          /** @description The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
          readonly on_behalf_of?: string;
          /**
           * @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent.
           *
           * If this parameter is omitted with `confirm=true`, `customer.default_source` will be attached as this PaymentIntent's payment instrument to improve the migration experience for users of the Charges API. We recommend that you explicitly provide the `payment_method` going forward.
           */
          readonly payment_method?: string;
          /**
           * payment_method_data_params
           * @description If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
           * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
           * property on the PaymentIntent.
           */
          readonly payment_method_data?: {
            /** payment_method_param */
            readonly acss_debit?: {
              readonly account_number: string;
              readonly institution_number: string;
              readonly transit_number: string;
            };
            /** param */
            readonly afterpay_clearpay?: { readonly [key: string]: unknown };
            /** param */
            readonly alipay?: { readonly [key: string]: unknown };
            /** param */
            readonly au_becs_debit?: {
              readonly account_number: string;
              readonly bsb_number: string;
            };
            /** param */
            readonly bacs_debit?: {
              readonly account_number?: string;
              readonly sort_code?: string;
            };
            /** param */
            readonly bancontact?: { readonly [key: string]: unknown };
            /** billing_details_inner_params */
            readonly billing_details?: {
              readonly address?:
                | {
                    readonly city?: string;
                    readonly country?: string;
                    readonly line1?: string;
                    readonly line2?: string;
                    readonly postal_code?: string;
                    readonly state?: string;
                  }
                | "";
              readonly email?: string | "";
              readonly name?: string;
              readonly phone?: string;
            };
            /** param */
            readonly boleto?: {
              readonly tax_id: string;
            };
            /** param */
            readonly eps?: {
              /** @enum {string} */
              readonly bank?:
                | "arzte_und_apotheker_bank"
                | "austrian_anadi_bank_ag"
                | "bank_austria"
                | "bankhaus_carl_spangler"
                | "bankhaus_schelhammer_und_schattera_ag"
                | "bawag_psk_ag"
                | "bks_bank_ag"
                | "brull_kallmus_bank_ag"
                | "btv_vier_lander_bank"
                | "capital_bank_grawe_gruppe_ag"
                | "dolomitenbank"
                | "easybank_ag"
                | "erste_bank_und_sparkassen"
                | "hypo_alpeadriabank_international_ag"
                | "hypo_bank_burgenland_aktiengesellschaft"
                | "hypo_noe_lb_fur_niederosterreich_u_wien"
                | "hypo_oberosterreich_salzburg_steiermark"
                | "hypo_tirol_bank_ag"
                | "hypo_vorarlberg_bank_ag"
                | "marchfelder_bank"
                | "oberbank_ag"
                | "raiffeisen_bankengruppe_osterreich"
                | "schoellerbank_ag"
                | "sparda_bank_wien"
                | "volksbank_gruppe"
                | "volkskreditbank_ag"
                | "vr_bank_braunau";
            };
            /** param */
            readonly fpx?: {
              /** @enum {string} */
              readonly bank:
                | "affin_bank"
                | "agrobank"
                | "alliance_bank"
                | "ambank"
                | "bank_islam"
                | "bank_muamalat"
                | "bank_rakyat"
                | "bsn"
                | "cimb"
                | "deutsche_bank"
                | "hong_leong_bank"
                | "hsbc"
                | "kfh"
                | "maybank2e"
                | "maybank2u"
                | "ocbc"
                | "pb_enterprise"
                | "public_bank"
                | "rhb"
                | "standard_chartered"
                | "uob";
            };
            /** param */
            readonly giropay?: { readonly [key: string]: unknown };
            /** param */
            readonly grabpay?: { readonly [key: string]: unknown };
            /** param */
            readonly ideal?: {
              /** @enum {string} */
              readonly bank?:
                | "abn_amro"
                | "asn_bank"
                | "bunq"
                | "handelsbanken"
                | "ing"
                | "knab"
                | "moneyou"
                | "rabobank"
                | "regiobank"
                | "revolut"
                | "sns_bank"
                | "triodos_bank"
                | "van_lanschot";
            };
            /** param */
            readonly interac_present?: { readonly [key: string]: unknown };
            /** param */
            readonly klarna?: {
              /** date_of_birth */
              readonly dob?: {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              };
            };
            readonly metadata?: { readonly [key: string]: string };
            /** param */
            readonly oxxo?: { readonly [key: string]: unknown };
            /** param */
            readonly p24?: {
              /** @enum {string} */
              readonly bank?:
                | "alior_bank"
                | "bank_millennium"
                | "bank_nowy_bfg_sa"
                | "bank_pekao_sa"
                | "banki_spbdzielcze"
                | "blik"
                | "bnp_paribas"
                | "boz"
                | "citi_handlowy"
                | "credit_agricole"
                | "envelobank"
                | "etransfer_pocztowy24"
                | "getin_bank"
                | "ideabank"
                | "ing"
                | "inteligo"
                | "mbank_mtransfer"
                | "nest_przelew"
                | "noble_pay"
                | "pbac_z_ipko"
                | "plus_bank"
                | "santander_przelew24"
                | "tmobile_usbugi_bankowe"
                | "toyota_bank"
                | "volkswagen_bank";
            };
            /** param */
            readonly sepa_debit?: {
              readonly iban: string;
            };
            /** param */
            readonly sofort?: {
              /** @enum {string} */
              readonly country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
            };
            /** @enum {string} */
            readonly type:
              | "acss_debit"
              | "afterpay_clearpay"
              | "alipay"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "klarna"
              | "oxxo"
              | "p24"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay";
            /** param */
            readonly wechat_pay?: { readonly [key: string]: unknown };
          };
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this PaymentIntent.
           */
          readonly payment_method_options?: {
            readonly acss_debit?:
              | {
                  /** payment_intent_payment_method_options_mandate_options_param */
                  readonly mandate_options?: {
                    readonly custom_mandate_url?: string | "";
                    readonly interval_description?: string;
                    /** @enum {string} */
                    readonly payment_schedule?: "combined" | "interval" | "sporadic";
                    /** @enum {string} */
                    readonly transaction_type?: "business" | "personal";
                  };
                  /** @enum {string} */
                  readonly verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | "";
            readonly afterpay_clearpay?:
              | {
                  readonly reference?: string;
                }
              | "";
            readonly alipay?: { readonly [key: string]: unknown } | "";
            readonly au_becs_debit?: { readonly [key: string]: unknown } | "";
            readonly bacs_debit?: { readonly [key: string]: unknown } | "";
            readonly bancontact?:
              | {
                  /** @enum {string} */
                  readonly preferred_language?: "de" | "en" | "fr" | "nl";
                }
              | "";
            readonly boleto?:
              | {
                  readonly expires_after_days?: number;
                }
              | "";
            readonly card?:
              | {
                  readonly cvc_token?: string;
                  /** installments_param */
                  readonly installments?: {
                    readonly enabled?: boolean;
                    readonly plan?:
                      | {
                          readonly count: number;
                          /** @enum {string} */
                          readonly interval: "month";
                          /** @enum {string} */
                          readonly type: "fixed_count";
                        }
                      | "";
                  };
                  /** @enum {string} */
                  readonly network?:
                    | "amex"
                    | "cartes_bancaires"
                    | "diners"
                    | "discover"
                    | "interac"
                    | "jcb"
                    | "mastercard"
                    | "unionpay"
                    | "unknown"
                    | "visa";
                  /** @enum {string} */
                  readonly request_three_d_secure?: "any" | "automatic";
                  /** @enum {string} */
                  readonly setup_future_usage?: "" | "none" | "off_session" | "on_session";
                }
              | "";
            readonly card_present?: { readonly [key: string]: unknown } | "";
            readonly eps?: { readonly [key: string]: unknown } | "";
            readonly fpx?: { readonly [key: string]: unknown } | "";
            readonly giropay?: { readonly [key: string]: unknown } | "";
            readonly grabpay?: { readonly [key: string]: unknown } | "";
            readonly ideal?: { readonly [key: string]: unknown } | "";
            readonly interac_present?: { readonly [key: string]: unknown } | "";
            readonly klarna?:
              | {
                  /** @enum {string} */
                  readonly preferred_locale?:
                    | "da-DK"
                    | "de-AT"
                    | "de-DE"
                    | "en-AT"
                    | "en-BE"
                    | "en-DE"
                    | "en-DK"
                    | "en-ES"
                    | "en-FI"
                    | "en-FR"
                    | "en-GB"
                    | "en-IE"
                    | "en-IT"
                    | "en-NL"
                    | "en-NO"
                    | "en-SE"
                    | "en-US"
                    | "es-ES"
                    | "es-US"
                    | "fi-FI"
                    | "fr-BE"
                    | "fr-FR"
                    | "it-IT"
                    | "nb-NO"
                    | "nl-BE"
                    | "nl-NL"
                    | "sv-FI"
                    | "sv-SE";
                }
              | "";
            readonly oxxo?:
              | {
                  readonly expires_after_days?: number;
                }
              | "";
            readonly p24?:
              | {
                  readonly tos_shown_and_accepted?: boolean;
                }
              | "";
            readonly sepa_debit?:
              | {
                  /** payment_method_options_mandate_options_param */
                  readonly mandate_options?: { readonly [key: string]: unknown };
                }
              | "";
            readonly sofort?:
              | {
                  /** @enum {string} */
                  readonly preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                }
              | "";
            readonly wechat_pay?:
              | {
                  readonly app_id?: string;
                  /** @enum {string} */
                  readonly client: "android" | "ios" | "web";
                }
              | "";
          };
          /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. If this is not provided, defaults to ["card"]. */
          readonly payment_method_types?: readonly string[];
          /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
          readonly receipt_email?: string;
          /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly return_url?: string;
          /**
           * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           * @enum {string}
           */
          readonly setup_future_usage?: "off_session" | "on_session";
          /**
           * optional_fields_shipping
           * @description Shipping information for this PaymentIntent.
           */
          readonly shipping?: {
            /** optional_fields_address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly carrier?: string;
            readonly name: string;
            readonly phone?: string;
            readonly tracking_number?: string;
          };
          /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_creation_params
           * @description The parameters used to automatically create a Transfer when the payment succeeds.
           * For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly transfer_data?: {
            readonly amount?: number;
            readonly destination: string;
          };
          /** @description A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          readonly transfer_group?: string;
          /** @description Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
          readonly use_stripe_sdk?: boolean;
        };
      };
    };
  };
  /**
   * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
   */
  readonly GetPaymentIntentsIntent: {
    readonly parameters: {
      readonly query: {
        /** The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source. */
        readonly client_secret?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates properties on a PaymentIntent object without confirming.</p>
   *
   * <p>Depending on which properties you update, you may need to confirm the
   * PaymentIntent again. For example, updating the <code>payment_method</code> will
   * always require you to confirm the PaymentIntent again. If you prefer to
   * update and confirm at the same time, we recommend updating properties via
   * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
   */
  readonly PostPaymentIntentsIntent: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          readonly amount?: number;
          /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
          readonly application_fee_amount?: number | "";
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /**
           * @description ID of the Customer this PaymentIntent belongs to, if one exists.
           *
           * Payment methods attached to other Customers cannot be used with this PaymentIntent.
           *
           * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_data_params
           * @description If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
           * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
           * property on the PaymentIntent.
           */
          readonly payment_method_data?: {
            /** payment_method_param */
            readonly acss_debit?: {
              readonly account_number: string;
              readonly institution_number: string;
              readonly transit_number: string;
            };
            /** param */
            readonly afterpay_clearpay?: { readonly [key: string]: unknown };
            /** param */
            readonly alipay?: { readonly [key: string]: unknown };
            /** param */
            readonly au_becs_debit?: {
              readonly account_number: string;
              readonly bsb_number: string;
            };
            /** param */
            readonly bacs_debit?: {
              readonly account_number?: string;
              readonly sort_code?: string;
            };
            /** param */
            readonly bancontact?: { readonly [key: string]: unknown };
            /** billing_details_inner_params */
            readonly billing_details?: {
              readonly address?:
                | {
                    readonly city?: string;
                    readonly country?: string;
                    readonly line1?: string;
                    readonly line2?: string;
                    readonly postal_code?: string;
                    readonly state?: string;
                  }
                | "";
              readonly email?: string | "";
              readonly name?: string;
              readonly phone?: string;
            };
            /** param */
            readonly boleto?: {
              readonly tax_id: string;
            };
            /** param */
            readonly eps?: {
              /** @enum {string} */
              readonly bank?:
                | "arzte_und_apotheker_bank"
                | "austrian_anadi_bank_ag"
                | "bank_austria"
                | "bankhaus_carl_spangler"
                | "bankhaus_schelhammer_und_schattera_ag"
                | "bawag_psk_ag"
                | "bks_bank_ag"
                | "brull_kallmus_bank_ag"
                | "btv_vier_lander_bank"
                | "capital_bank_grawe_gruppe_ag"
                | "dolomitenbank"
                | "easybank_ag"
                | "erste_bank_und_sparkassen"
                | "hypo_alpeadriabank_international_ag"
                | "hypo_bank_burgenland_aktiengesellschaft"
                | "hypo_noe_lb_fur_niederosterreich_u_wien"
                | "hypo_oberosterreich_salzburg_steiermark"
                | "hypo_tirol_bank_ag"
                | "hypo_vorarlberg_bank_ag"
                | "marchfelder_bank"
                | "oberbank_ag"
                | "raiffeisen_bankengruppe_osterreich"
                | "schoellerbank_ag"
                | "sparda_bank_wien"
                | "volksbank_gruppe"
                | "volkskreditbank_ag"
                | "vr_bank_braunau";
            };
            /** param */
            readonly fpx?: {
              /** @enum {string} */
              readonly bank:
                | "affin_bank"
                | "agrobank"
                | "alliance_bank"
                | "ambank"
                | "bank_islam"
                | "bank_muamalat"
                | "bank_rakyat"
                | "bsn"
                | "cimb"
                | "deutsche_bank"
                | "hong_leong_bank"
                | "hsbc"
                | "kfh"
                | "maybank2e"
                | "maybank2u"
                | "ocbc"
                | "pb_enterprise"
                | "public_bank"
                | "rhb"
                | "standard_chartered"
                | "uob";
            };
            /** param */
            readonly giropay?: { readonly [key: string]: unknown };
            /** param */
            readonly grabpay?: { readonly [key: string]: unknown };
            /** param */
            readonly ideal?: {
              /** @enum {string} */
              readonly bank?:
                | "abn_amro"
                | "asn_bank"
                | "bunq"
                | "handelsbanken"
                | "ing"
                | "knab"
                | "moneyou"
                | "rabobank"
                | "regiobank"
                | "revolut"
                | "sns_bank"
                | "triodos_bank"
                | "van_lanschot";
            };
            /** param */
            readonly interac_present?: { readonly [key: string]: unknown };
            /** param */
            readonly klarna?: {
              /** date_of_birth */
              readonly dob?: {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              };
            };
            readonly metadata?: { readonly [key: string]: string };
            /** param */
            readonly oxxo?: { readonly [key: string]: unknown };
            /** param */
            readonly p24?: {
              /** @enum {string} */
              readonly bank?:
                | "alior_bank"
                | "bank_millennium"
                | "bank_nowy_bfg_sa"
                | "bank_pekao_sa"
                | "banki_spbdzielcze"
                | "blik"
                | "bnp_paribas"
                | "boz"
                | "citi_handlowy"
                | "credit_agricole"
                | "envelobank"
                | "etransfer_pocztowy24"
                | "getin_bank"
                | "ideabank"
                | "ing"
                | "inteligo"
                | "mbank_mtransfer"
                | "nest_przelew"
                | "noble_pay"
                | "pbac_z_ipko"
                | "plus_bank"
                | "santander_przelew24"
                | "tmobile_usbugi_bankowe"
                | "toyota_bank"
                | "volkswagen_bank";
            };
            /** param */
            readonly sepa_debit?: {
              readonly iban: string;
            };
            /** param */
            readonly sofort?: {
              /** @enum {string} */
              readonly country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
            };
            /** @enum {string} */
            readonly type:
              | "acss_debit"
              | "afterpay_clearpay"
              | "alipay"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "klarna"
              | "oxxo"
              | "p24"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay";
            /** param */
            readonly wechat_pay?: { readonly [key: string]: unknown };
          };
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this PaymentIntent.
           */
          readonly payment_method_options?: {
            readonly acss_debit?:
              | {
                  /** payment_intent_payment_method_options_mandate_options_param */
                  readonly mandate_options?: {
                    readonly custom_mandate_url?: string | "";
                    readonly interval_description?: string;
                    /** @enum {string} */
                    readonly payment_schedule?: "combined" | "interval" | "sporadic";
                    /** @enum {string} */
                    readonly transaction_type?: "business" | "personal";
                  };
                  /** @enum {string} */
                  readonly verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | "";
            readonly afterpay_clearpay?:
              | {
                  readonly reference?: string;
                }
              | "";
            readonly alipay?: { readonly [key: string]: unknown } | "";
            readonly au_becs_debit?: { readonly [key: string]: unknown } | "";
            readonly bacs_debit?: { readonly [key: string]: unknown } | "";
            readonly bancontact?:
              | {
                  /** @enum {string} */
                  readonly preferred_language?: "de" | "en" | "fr" | "nl";
                }
              | "";
            readonly boleto?:
              | {
                  readonly expires_after_days?: number;
                }
              | "";
            readonly card?:
              | {
                  readonly cvc_token?: string;
                  /** installments_param */
                  readonly installments?: {
                    readonly enabled?: boolean;
                    readonly plan?:
                      | {
                          readonly count: number;
                          /** @enum {string} */
                          readonly interval: "month";
                          /** @enum {string} */
                          readonly type: "fixed_count";
                        }
                      | "";
                  };
                  /** @enum {string} */
                  readonly network?:
                    | "amex"
                    | "cartes_bancaires"
                    | "diners"
                    | "discover"
                    | "interac"
                    | "jcb"
                    | "mastercard"
                    | "unionpay"
                    | "unknown"
                    | "visa";
                  /** @enum {string} */
                  readonly request_three_d_secure?: "any" | "automatic";
                  /** @enum {string} */
                  readonly setup_future_usage?: "" | "none" | "off_session" | "on_session";
                }
              | "";
            readonly card_present?: { readonly [key: string]: unknown } | "";
            readonly eps?: { readonly [key: string]: unknown } | "";
            readonly fpx?: { readonly [key: string]: unknown } | "";
            readonly giropay?: { readonly [key: string]: unknown } | "";
            readonly grabpay?: { readonly [key: string]: unknown } | "";
            readonly ideal?: { readonly [key: string]: unknown } | "";
            readonly interac_present?: { readonly [key: string]: unknown } | "";
            readonly klarna?:
              | {
                  /** @enum {string} */
                  readonly preferred_locale?:
                    | "da-DK"
                    | "de-AT"
                    | "de-DE"
                    | "en-AT"
                    | "en-BE"
                    | "en-DE"
                    | "en-DK"
                    | "en-ES"
                    | "en-FI"
                    | "en-FR"
                    | "en-GB"
                    | "en-IE"
                    | "en-IT"
                    | "en-NL"
                    | "en-NO"
                    | "en-SE"
                    | "en-US"
                    | "es-ES"
                    | "es-US"
                    | "fi-FI"
                    | "fr-BE"
                    | "fr-FR"
                    | "it-IT"
                    | "nb-NO"
                    | "nl-BE"
                    | "nl-NL"
                    | "sv-FI"
                    | "sv-SE";
                }
              | "";
            readonly oxxo?:
              | {
                  readonly expires_after_days?: number;
                }
              | "";
            readonly p24?:
              | {
                  readonly tos_shown_and_accepted?: boolean;
                }
              | "";
            readonly sepa_debit?:
              | {
                  /** payment_method_options_mandate_options_param */
                  readonly mandate_options?: { readonly [key: string]: unknown };
                }
              | "";
            readonly sofort?:
              | {
                  /** @enum {string} */
                  readonly preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                }
              | "";
            readonly wechat_pay?:
              | {
                  readonly app_id?: string;
                  /** @enum {string} */
                  readonly client: "android" | "ios" | "web";
                }
              | "";
          };
          /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
          readonly payment_method_types?: readonly string[];
          /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
          readonly receipt_email?: string | "";
          /**
           * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           *
           * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
           * @enum {string}
           */
          readonly setup_future_usage?: "" | "off_session" | "on_session";
          /** @description Shipping information for this PaymentIntent. */
          readonly shipping?:
            | {
                /** optional_fields_address */
                readonly address: {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                };
                readonly carrier?: string;
                readonly name: string;
                readonly phone?: string;
                readonly tracking_number?: string;
              }
            | "";
          /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_update_params
           * @description The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly transfer_data?: {
            readonly amount?: number;
          };
          /** @description A string that identifies the resulting payment as part of a group. `transfer_group` may only be provided if it has not been set. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          readonly transfer_group?: string;
        };
      };
    };
  };
  /**
   * <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>, or <code>processing</code>. </p>
   *
   * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status=’requires_capture’</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
   */
  readonly PostPaymentIntentsIntentCancel: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * @description Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
           * @enum {string}
           */
          readonly cancellation_reason?: "abandoned" | "duplicate" | "fraudulent" | "requested_by_customer";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /**
   * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
   *
   * <p>Uncaptured PaymentIntents will be canceled a set number of days after they are created (7 by default).</p>
   *
   * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
   */
  readonly PostPaymentIntentsIntentCapture: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full `amount_capturable` if not provided. */
          readonly amount_to_capture?: number;
          /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total payment amount. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
          readonly application_fee_amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_update_params
           * @description The parameters used to automatically create a Transfer when the payment
           * is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly transfer_data?: {
            readonly amount?: number;
          };
        };
      };
    };
  };
  /**
   * <p>Confirm that your customer intends to pay with current or provided
   * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
   * a payment.</p>
   *
   * <p>If the selected payment method requires additional authentication steps, the
   * PaymentIntent will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If payment fails,
   * the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
   * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
   * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
   * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
   * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
   * After <code>next_action</code>s are handled by the client, no additional
   * confirmation is required to complete the payment.</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
   * initiated using a secret key.
   * If any actions are required for the payment, the PaymentIntent will
   * return to the <code>requires_confirmation</code> state
   * after those actions are completed. Your server needs to then
   * explicitly re-confirm the PaymentIntent to initiate the next payment
   * attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
   * to learn more about manual confirmation.</p>
   */
  readonly PostPaymentIntentsIntentConfirm: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The client secret of the PaymentIntent. */
          readonly client_secret?: string;
          /** @description Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). */
          readonly error_on_requires_action?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description ID of the mandate to be used for this payment. */
          readonly mandate?: string;
          /** @description This hash contains details about the Mandate to create */
          readonly mandate_data?:
            | {
                /** customer_acceptance_param */
                readonly customer_acceptance: {
                  /** Format: unix-time */
                  readonly accepted_at?: number;
                  /** offline_param */
                  readonly offline?: { readonly [key: string]: unknown };
                  /** online_param */
                  readonly online?: {
                    readonly ip_address: string;
                    readonly user_agent: string;
                  };
                  /** @enum {string} */
                  readonly type: "offline" | "online";
                };
              }
            | {
                /** customer_acceptance_param */
                readonly customer_acceptance: {
                  /** online_param */
                  readonly online: {
                    readonly ip_address?: string;
                    readonly user_agent?: string;
                  };
                  /** @enum {string} */
                  readonly type: "online";
                };
              };
          /** @description Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). */
          readonly off_session?: boolean | ("one_off" | "recurring");
          /** @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods/transitioning#compatibility) object) to attach to this PaymentIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_data_params
           * @description If provided, this hash will be used to create a PaymentMethod. The new PaymentMethod will appear
           * in the [payment_method](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-payment_method)
           * property on the PaymentIntent.
           */
          readonly payment_method_data?: {
            /** payment_method_param */
            readonly acss_debit?: {
              readonly account_number: string;
              readonly institution_number: string;
              readonly transit_number: string;
            };
            /** param */
            readonly afterpay_clearpay?: { readonly [key: string]: unknown };
            /** param */
            readonly alipay?: { readonly [key: string]: unknown };
            /** param */
            readonly au_becs_debit?: {
              readonly account_number: string;
              readonly bsb_number: string;
            };
            /** param */
            readonly bacs_debit?: {
              readonly account_number?: string;
              readonly sort_code?: string;
            };
            /** param */
            readonly bancontact?: { readonly [key: string]: unknown };
            /** billing_details_inner_params */
            readonly billing_details?: {
              readonly address?:
                | {
                    readonly city?: string;
                    readonly country?: string;
                    readonly line1?: string;
                    readonly line2?: string;
                    readonly postal_code?: string;
                    readonly state?: string;
                  }
                | "";
              readonly email?: string | "";
              readonly name?: string;
              readonly phone?: string;
            };
            /** param */
            readonly boleto?: {
              readonly tax_id: string;
            };
            /** param */
            readonly eps?: {
              /** @enum {string} */
              readonly bank?:
                | "arzte_und_apotheker_bank"
                | "austrian_anadi_bank_ag"
                | "bank_austria"
                | "bankhaus_carl_spangler"
                | "bankhaus_schelhammer_und_schattera_ag"
                | "bawag_psk_ag"
                | "bks_bank_ag"
                | "brull_kallmus_bank_ag"
                | "btv_vier_lander_bank"
                | "capital_bank_grawe_gruppe_ag"
                | "dolomitenbank"
                | "easybank_ag"
                | "erste_bank_und_sparkassen"
                | "hypo_alpeadriabank_international_ag"
                | "hypo_bank_burgenland_aktiengesellschaft"
                | "hypo_noe_lb_fur_niederosterreich_u_wien"
                | "hypo_oberosterreich_salzburg_steiermark"
                | "hypo_tirol_bank_ag"
                | "hypo_vorarlberg_bank_ag"
                | "marchfelder_bank"
                | "oberbank_ag"
                | "raiffeisen_bankengruppe_osterreich"
                | "schoellerbank_ag"
                | "sparda_bank_wien"
                | "volksbank_gruppe"
                | "volkskreditbank_ag"
                | "vr_bank_braunau";
            };
            /** param */
            readonly fpx?: {
              /** @enum {string} */
              readonly bank:
                | "affin_bank"
                | "agrobank"
                | "alliance_bank"
                | "ambank"
                | "bank_islam"
                | "bank_muamalat"
                | "bank_rakyat"
                | "bsn"
                | "cimb"
                | "deutsche_bank"
                | "hong_leong_bank"
                | "hsbc"
                | "kfh"
                | "maybank2e"
                | "maybank2u"
                | "ocbc"
                | "pb_enterprise"
                | "public_bank"
                | "rhb"
                | "standard_chartered"
                | "uob";
            };
            /** param */
            readonly giropay?: { readonly [key: string]: unknown };
            /** param */
            readonly grabpay?: { readonly [key: string]: unknown };
            /** param */
            readonly ideal?: {
              /** @enum {string} */
              readonly bank?:
                | "abn_amro"
                | "asn_bank"
                | "bunq"
                | "handelsbanken"
                | "ing"
                | "knab"
                | "moneyou"
                | "rabobank"
                | "regiobank"
                | "revolut"
                | "sns_bank"
                | "triodos_bank"
                | "van_lanschot";
            };
            /** param */
            readonly interac_present?: { readonly [key: string]: unknown };
            /** param */
            readonly klarna?: {
              /** date_of_birth */
              readonly dob?: {
                readonly day: number;
                readonly month: number;
                readonly year: number;
              };
            };
            readonly metadata?: { readonly [key: string]: string };
            /** param */
            readonly oxxo?: { readonly [key: string]: unknown };
            /** param */
            readonly p24?: {
              /** @enum {string} */
              readonly bank?:
                | "alior_bank"
                | "bank_millennium"
                | "bank_nowy_bfg_sa"
                | "bank_pekao_sa"
                | "banki_spbdzielcze"
                | "blik"
                | "bnp_paribas"
                | "boz"
                | "citi_handlowy"
                | "credit_agricole"
                | "envelobank"
                | "etransfer_pocztowy24"
                | "getin_bank"
                | "ideabank"
                | "ing"
                | "inteligo"
                | "mbank_mtransfer"
                | "nest_przelew"
                | "noble_pay"
                | "pbac_z_ipko"
                | "plus_bank"
                | "santander_przelew24"
                | "tmobile_usbugi_bankowe"
                | "toyota_bank"
                | "volkswagen_bank";
            };
            /** param */
            readonly sepa_debit?: {
              readonly iban: string;
            };
            /** param */
            readonly sofort?: {
              /** @enum {string} */
              readonly country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
            };
            /** @enum {string} */
            readonly type:
              | "acss_debit"
              | "afterpay_clearpay"
              | "alipay"
              | "au_becs_debit"
              | "bacs_debit"
              | "bancontact"
              | "boleto"
              | "eps"
              | "fpx"
              | "giropay"
              | "grabpay"
              | "ideal"
              | "klarna"
              | "oxxo"
              | "p24"
              | "sepa_debit"
              | "sofort"
              | "wechat_pay";
            /** param */
            readonly wechat_pay?: { readonly [key: string]: unknown };
          };
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this PaymentIntent.
           */
          readonly payment_method_options?: {
            readonly acss_debit?:
              | {
                  /** payment_intent_payment_method_options_mandate_options_param */
                  readonly mandate_options?: {
                    readonly custom_mandate_url?: string | "";
                    readonly interval_description?: string;
                    /** @enum {string} */
                    readonly payment_schedule?: "combined" | "interval" | "sporadic";
                    /** @enum {string} */
                    readonly transaction_type?: "business" | "personal";
                  };
                  /** @enum {string} */
                  readonly verification_method?: "automatic" | "instant" | "microdeposits";
                }
              | "";
            readonly afterpay_clearpay?:
              | {
                  readonly reference?: string;
                }
              | "";
            readonly alipay?: { readonly [key: string]: unknown } | "";
            readonly au_becs_debit?: { readonly [key: string]: unknown } | "";
            readonly bacs_debit?: { readonly [key: string]: unknown } | "";
            readonly bancontact?:
              | {
                  /** @enum {string} */
                  readonly preferred_language?: "de" | "en" | "fr" | "nl";
                }
              | "";
            readonly boleto?:
              | {
                  readonly expires_after_days?: number;
                }
              | "";
            readonly card?:
              | {
                  readonly cvc_token?: string;
                  /** installments_param */
                  readonly installments?: {
                    readonly enabled?: boolean;
                    readonly plan?:
                      | {
                          readonly count: number;
                          /** @enum {string} */
                          readonly interval: "month";
                          /** @enum {string} */
                          readonly type: "fixed_count";
                        }
                      | "";
                  };
                  /** @enum {string} */
                  readonly network?:
                    | "amex"
                    | "cartes_bancaires"
                    | "diners"
                    | "discover"
                    | "interac"
                    | "jcb"
                    | "mastercard"
                    | "unionpay"
                    | "unknown"
                    | "visa";
                  /** @enum {string} */
                  readonly request_three_d_secure?: "any" | "automatic";
                  /** @enum {string} */
                  readonly setup_future_usage?: "" | "none" | "off_session" | "on_session";
                }
              | "";
            readonly card_present?: { readonly [key: string]: unknown } | "";
            readonly eps?: { readonly [key: string]: unknown } | "";
            readonly fpx?: { readonly [key: string]: unknown } | "";
            readonly giropay?: { readonly [key: string]: unknown } | "";
            readonly grabpay?: { readonly [key: string]: unknown } | "";
            readonly ideal?: { readonly [key: string]: unknown } | "";
            readonly interac_present?: { readonly [key: string]: unknown } | "";
            readonly klarna?:
              | {
                  /** @enum {string} */
                  readonly preferred_locale?:
                    | "da-DK"
                    | "de-AT"
                    | "de-DE"
                    | "en-AT"
                    | "en-BE"
                    | "en-DE"
                    | "en-DK"
                    | "en-ES"
                    | "en-FI"
                    | "en-FR"
                    | "en-GB"
                    | "en-IE"
                    | "en-IT"
                    | "en-NL"
                    | "en-NO"
                    | "en-SE"
                    | "en-US"
                    | "es-ES"
                    | "es-US"
                    | "fi-FI"
                    | "fr-BE"
                    | "fr-FR"
                    | "it-IT"
                    | "nb-NO"
                    | "nl-BE"
                    | "nl-NL"
                    | "sv-FI"
                    | "sv-SE";
                }
              | "";
            readonly oxxo?:
              | {
                  readonly expires_after_days?: number;
                }
              | "";
            readonly p24?:
              | {
                  readonly tos_shown_and_accepted?: boolean;
                }
              | "";
            readonly sepa_debit?:
              | {
                  /** payment_method_options_mandate_options_param */
                  readonly mandate_options?: { readonly [key: string]: unknown };
                }
              | "";
            readonly sofort?:
              | {
                  /** @enum {string} */
                  readonly preferred_language?: "" | "de" | "en" | "es" | "fr" | "it" | "nl" | "pl";
                }
              | "";
            readonly wechat_pay?:
              | {
                  readonly app_id?: string;
                  /** @enum {string} */
                  readonly client: "android" | "ios" | "web";
                }
              | "";
          };
          /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
          readonly payment_method_types?: readonly string[];
          /** @description Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
          readonly receipt_email?: string | "";
          /**
           * @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
           * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
           * This parameter is only used for cards and other redirect-based payment methods.
           */
          readonly return_url?: string;
          /**
           * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           *
           * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
           * @enum {string}
           */
          readonly setup_future_usage?: "" | "off_session" | "on_session";
          /** @description Shipping information for this PaymentIntent. */
          readonly shipping?:
            | {
                /** optional_fields_address */
                readonly address: {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                };
                readonly carrier?: string;
                readonly name: string;
                readonly phone?: string;
                readonly tracking_number?: string;
              }
            | "";
          /** @description Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
          readonly use_stripe_sdk?: boolean;
        };
      };
    };
  };
  /** <p>Verifies microdeposits on a PaymentIntent object.</p> */
  readonly PostPaymentIntentsIntentVerifyMicrodeposits: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          readonly amounts?: readonly number[];
          /** @description The client secret of the PaymentIntent. */
          readonly client_secret?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of your payment links.</p> */
  readonly GetPaymentLinks: {
    readonly parameters: {
      readonly query: {
        /** Only return payment links that are active or inactive (e.g., pass `false` to list all inactive payment links). */
        readonly active?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["payment_link"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a payment link.</p> */
  readonly PostPaymentLinks: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * after_completion_params
           * @description Behavior after the purchase is complete.
           */
          readonly after_completion?: {
            /** after_completion_confirmation_page_params */
            readonly hosted_confirmation?: {
              readonly custom_message?: string;
            };
            /** after_completion_redirect_params */
            readonly redirect?: {
              readonly url: string;
            };
            /** @enum {string} */
            readonly type: "hosted_confirmation" | "redirect";
          };
          /** @description Enables user redeemable promotion codes. */
          readonly allow_promotion_codes?: boolean;
          /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Can only be applied when there are no line items with recurring prices. */
          readonly application_fee_amount?: number;
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
          readonly application_fee_percent?: number;
          /**
           * automatic_tax_params
           * @description Configuration for automatic tax collection.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Configuration for collecting the customer's billing address.
           * @enum {string}
           */
          readonly billing_address_collection?: "auto" | "required";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported. */
          readonly line_items?: readonly {
            /** adjustable_quantity_params */
            readonly adjustable_quantity?: {
              readonly enabled: boolean;
              readonly maximum?: number;
              readonly minimum?: number;
            };
            readonly price: string;
            readonly quantity: number;
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The account on behalf of which to charge. */
          readonly on_behalf_of?: string;
          /** @description The list of payment method types that customers can use. Only `card` is supported. If no value is passed, Stripe will dynamically show relevant payment methods from your [payment method settings](https://dashboard.stripe.com/settings/payment_methods) (20+ payment methods [supported](https://stripe.com/docs/payments/payment-methods/integration-options#payment-method-product-support)). */
          readonly payment_method_types?: readonly "card"[];
          /**
           * phone_number_collection_params
           * @description Controls phone number collection settings during checkout.
           *
           * We recommend that you review your privacy policy and check with your legal contacts.
           */
          readonly phone_number_collection?: {
            readonly enabled: boolean;
          };
          /**
           * shipping_address_collection_params
           * @description Configuration for collecting the customer's shipping address.
           */
          readonly shipping_address_collection?: {
            readonly allowed_countries: readonly (
              | "AC"
              | "AD"
              | "AE"
              | "AF"
              | "AG"
              | "AI"
              | "AL"
              | "AM"
              | "AO"
              | "AQ"
              | "AR"
              | "AT"
              | "AU"
              | "AW"
              | "AX"
              | "AZ"
              | "BA"
              | "BB"
              | "BD"
              | "BE"
              | "BF"
              | "BG"
              | "BH"
              | "BI"
              | "BJ"
              | "BL"
              | "BM"
              | "BN"
              | "BO"
              | "BQ"
              | "BR"
              | "BS"
              | "BT"
              | "BV"
              | "BW"
              | "BY"
              | "BZ"
              | "CA"
              | "CD"
              | "CF"
              | "CG"
              | "CH"
              | "CI"
              | "CK"
              | "CL"
              | "CM"
              | "CN"
              | "CO"
              | "CR"
              | "CV"
              | "CW"
              | "CY"
              | "CZ"
              | "DE"
              | "DJ"
              | "DK"
              | "DM"
              | "DO"
              | "DZ"
              | "EC"
              | "EE"
              | "EG"
              | "EH"
              | "ER"
              | "ES"
              | "ET"
              | "FI"
              | "FJ"
              | "FK"
              | "FO"
              | "FR"
              | "GA"
              | "GB"
              | "GD"
              | "GE"
              | "GF"
              | "GG"
              | "GH"
              | "GI"
              | "GL"
              | "GM"
              | "GN"
              | "GP"
              | "GQ"
              | "GR"
              | "GS"
              | "GT"
              | "GU"
              | "GW"
              | "GY"
              | "HK"
              | "HN"
              | "HR"
              | "HT"
              | "HU"
              | "ID"
              | "IE"
              | "IL"
              | "IM"
              | "IN"
              | "IO"
              | "IQ"
              | "IS"
              | "IT"
              | "JE"
              | "JM"
              | "JO"
              | "JP"
              | "KE"
              | "KG"
              | "KH"
              | "KI"
              | "KM"
              | "KN"
              | "KR"
              | "KW"
              | "KY"
              | "KZ"
              | "LA"
              | "LB"
              | "LC"
              | "LI"
              | "LK"
              | "LR"
              | "LS"
              | "LT"
              | "LU"
              | "LV"
              | "LY"
              | "MA"
              | "MC"
              | "MD"
              | "ME"
              | "MF"
              | "MG"
              | "MK"
              | "ML"
              | "MM"
              | "MN"
              | "MO"
              | "MQ"
              | "MR"
              | "MS"
              | "MT"
              | "MU"
              | "MV"
              | "MW"
              | "MX"
              | "MY"
              | "MZ"
              | "NA"
              | "NC"
              | "NE"
              | "NG"
              | "NI"
              | "NL"
              | "NO"
              | "NP"
              | "NR"
              | "NU"
              | "NZ"
              | "OM"
              | "PA"
              | "PE"
              | "PF"
              | "PG"
              | "PH"
              | "PK"
              | "PL"
              | "PM"
              | "PN"
              | "PR"
              | "PS"
              | "PT"
              | "PY"
              | "QA"
              | "RE"
              | "RO"
              | "RS"
              | "RU"
              | "RW"
              | "SA"
              | "SB"
              | "SC"
              | "SE"
              | "SG"
              | "SH"
              | "SI"
              | "SJ"
              | "SK"
              | "SL"
              | "SM"
              | "SN"
              | "SO"
              | "SR"
              | "SS"
              | "ST"
              | "SV"
              | "SX"
              | "SZ"
              | "TA"
              | "TC"
              | "TD"
              | "TF"
              | "TG"
              | "TH"
              | "TJ"
              | "TK"
              | "TL"
              | "TM"
              | "TN"
              | "TO"
              | "TR"
              | "TT"
              | "TV"
              | "TW"
              | "TZ"
              | "UA"
              | "UG"
              | "US"
              | "UY"
              | "UZ"
              | "VA"
              | "VC"
              | "VE"
              | "VG"
              | "VN"
              | "VU"
              | "WF"
              | "WS"
              | "XK"
              | "YE"
              | "YT"
              | "ZA"
              | "ZM"
              | "ZW"
              | "ZZ"
            )[];
          };
          /**
           * subscription_data_params
           * @description When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
           */
          readonly subscription_data?: {
            readonly trial_period_days?: number;
          };
          /**
           * transfer_data_params
           * @description The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.
           */
          readonly transfer_data?: {
            readonly amount?: number;
            readonly destination: string;
          };
        };
      };
    };
  };
  /** <p>Retrieve a payment link.</p> */
  readonly GetPaymentLinksPaymentLink: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly payment_link: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates a payment link.</p> */
  readonly PostPaymentLinksPaymentLink: {
    readonly parameters: {
      readonly path: {
        readonly payment_link: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_link"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated. */
          readonly active?: boolean;
          /**
           * after_completion_params
           * @description Behavior after the purchase is complete.
           */
          readonly after_completion?: {
            /** after_completion_confirmation_page_params */
            readonly hosted_confirmation?: {
              readonly custom_message?: string;
            };
            /** after_completion_redirect_params */
            readonly redirect?: {
              readonly url: string;
            };
            /** @enum {string} */
            readonly type: "hosted_confirmation" | "redirect";
          };
          /** @description Enables user redeemable promotion codes. */
          readonly allow_promotion_codes?: boolean;
          /**
           * automatic_tax_params
           * @description Configuration for automatic tax collection.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Configuration for collecting the customer's billing address.
           * @enum {string}
           */
          readonly billing_address_collection?: "auto" | "required";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The line items representing what is being sold. Each line item represents an item being sold. Up to 20 line items are supported. */
          readonly line_items?: readonly {
            /** adjustable_quantity_params */
            readonly adjustable_quantity?: {
              readonly enabled: boolean;
              readonly maximum?: number;
              readonly minimum?: number;
            };
            readonly id: string;
            readonly quantity?: number;
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. Metadata associated with this Payment Link will automatically be copied to [checkout sessions](https://stripe.com/docs/api/checkout/sessions) created by this payment link. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The list of payment method types that customers can use. Only `card` is supported. Pass an empty string to enable automatic payment methods that use your [payment method settings](https://dashboard.stripe.com/settings/payment_methods). */
          readonly payment_method_types?: readonly "card"[] | "";
          /** @description Configuration for collecting the customer's shipping address. */
          readonly shipping_address_collection?:
            | {
                readonly allowed_countries: readonly (
                  | "AC"
                  | "AD"
                  | "AE"
                  | "AF"
                  | "AG"
                  | "AI"
                  | "AL"
                  | "AM"
                  | "AO"
                  | "AQ"
                  | "AR"
                  | "AT"
                  | "AU"
                  | "AW"
                  | "AX"
                  | "AZ"
                  | "BA"
                  | "BB"
                  | "BD"
                  | "BE"
                  | "BF"
                  | "BG"
                  | "BH"
                  | "BI"
                  | "BJ"
                  | "BL"
                  | "BM"
                  | "BN"
                  | "BO"
                  | "BQ"
                  | "BR"
                  | "BS"
                  | "BT"
                  | "BV"
                  | "BW"
                  | "BY"
                  | "BZ"
                  | "CA"
                  | "CD"
                  | "CF"
                  | "CG"
                  | "CH"
                  | "CI"
                  | "CK"
                  | "CL"
                  | "CM"
                  | "CN"
                  | "CO"
                  | "CR"
                  | "CV"
                  | "CW"
                  | "CY"
                  | "CZ"
                  | "DE"
                  | "DJ"
                  | "DK"
                  | "DM"
                  | "DO"
                  | "DZ"
                  | "EC"
                  | "EE"
                  | "EG"
                  | "EH"
                  | "ER"
                  | "ES"
                  | "ET"
                  | "FI"
                  | "FJ"
                  | "FK"
                  | "FO"
                  | "FR"
                  | "GA"
                  | "GB"
                  | "GD"
                  | "GE"
                  | "GF"
                  | "GG"
                  | "GH"
                  | "GI"
                  | "GL"
                  | "GM"
                  | "GN"
                  | "GP"
                  | "GQ"
                  | "GR"
                  | "GS"
                  | "GT"
                  | "GU"
                  | "GW"
                  | "GY"
                  | "HK"
                  | "HN"
                  | "HR"
                  | "HT"
                  | "HU"
                  | "ID"
                  | "IE"
                  | "IL"
                  | "IM"
                  | "IN"
                  | "IO"
                  | "IQ"
                  | "IS"
                  | "IT"
                  | "JE"
                  | "JM"
                  | "JO"
                  | "JP"
                  | "KE"
                  | "KG"
                  | "KH"
                  | "KI"
                  | "KM"
                  | "KN"
                  | "KR"
                  | "KW"
                  | "KY"
                  | "KZ"
                  | "LA"
                  | "LB"
                  | "LC"
                  | "LI"
                  | "LK"
                  | "LR"
                  | "LS"
                  | "LT"
                  | "LU"
                  | "LV"
                  | "LY"
                  | "MA"
                  | "MC"
                  | "MD"
                  | "ME"
                  | "MF"
                  | "MG"
                  | "MK"
                  | "ML"
                  | "MM"
                  | "MN"
                  | "MO"
                  | "MQ"
                  | "MR"
                  | "MS"
                  | "MT"
                  | "MU"
                  | "MV"
                  | "MW"
                  | "MX"
                  | "MY"
                  | "MZ"
                  | "NA"
                  | "NC"
                  | "NE"
                  | "NG"
                  | "NI"
                  | "NL"
                  | "NO"
                  | "NP"
                  | "NR"
                  | "NU"
                  | "NZ"
                  | "OM"
                  | "PA"
                  | "PE"
                  | "PF"
                  | "PG"
                  | "PH"
                  | "PK"
                  | "PL"
                  | "PM"
                  | "PN"
                  | "PR"
                  | "PS"
                  | "PT"
                  | "PY"
                  | "QA"
                  | "RE"
                  | "RO"
                  | "RS"
                  | "RU"
                  | "RW"
                  | "SA"
                  | "SB"
                  | "SC"
                  | "SE"
                  | "SG"
                  | "SH"
                  | "SI"
                  | "SJ"
                  | "SK"
                  | "SL"
                  | "SM"
                  | "SN"
                  | "SO"
                  | "SR"
                  | "SS"
                  | "ST"
                  | "SV"
                  | "SX"
                  | "SZ"
                  | "TA"
                  | "TC"
                  | "TD"
                  | "TF"
                  | "TG"
                  | "TH"
                  | "TJ"
                  | "TK"
                  | "TL"
                  | "TM"
                  | "TN"
                  | "TO"
                  | "TR"
                  | "TT"
                  | "TV"
                  | "TW"
                  | "TZ"
                  | "UA"
                  | "UG"
                  | "US"
                  | "UY"
                  | "UZ"
                  | "VA"
                  | "VC"
                  | "VE"
                  | "VG"
                  | "VN"
                  | "VU"
                  | "WF"
                  | "WS"
                  | "XK"
                  | "YE"
                  | "YT"
                  | "ZA"
                  | "ZM"
                  | "ZW"
                  | "ZZ"
                )[];
              }
            | "";
        };
      };
    };
  };
  /** <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetPaymentLinksPaymentLinkLineItems: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly payment_link: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of PaymentMethods. For listing a customer’s payment methods, you should use <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a></p> */
  readonly GetPaymentMethods: {
    readonly parameters: {
      readonly query: {
        /** The ID of the customer whose PaymentMethods will be retrieved. If not provided, the response list will be empty. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** A required filter on the list, based on the object `type` field. */
        readonly type:
          | "acss_debit"
          | "afterpay_clearpay"
          | "alipay"
          | "au_becs_debit"
          | "bacs_debit"
          | "bancontact"
          | "boleto"
          | "card"
          | "eps"
          | "fpx"
          | "giropay"
          | "grabpay"
          | "ideal"
          | "klarna"
          | "oxxo"
          | "p24"
          | "sepa_debit"
          | "sofort"
          | "wechat_pay";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["payment_method"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
   *
   * <p>Instead of creating a PaymentMethod directly, we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future payment.</p>
   */
  readonly PostPaymentMethods: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * payment_method_param
           * @description If this is an `acss_debit` PaymentMethod, this hash contains details about the ACSS Debit payment method.
           */
          readonly acss_debit?: {
            readonly account_number: string;
            readonly institution_number: string;
            readonly transit_number: string;
          };
          /**
           * param
           * @description If this is an `AfterpayClearpay` PaymentMethod, this hash contains details about the AfterpayClearpay payment method.
           */
          readonly afterpay_clearpay?: { readonly [key: string]: unknown };
          /**
           * param
           * @description If this is an `Alipay` PaymentMethod, this hash contains details about the Alipay payment method.
           */
          readonly alipay?: { readonly [key: string]: unknown };
          /**
           * param
           * @description If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account.
           */
          readonly au_becs_debit?: {
            readonly account_number: string;
            readonly bsb_number: string;
          };
          /**
           * param
           * @description If this is a `bacs_debit` PaymentMethod, this hash contains details about the Bacs Direct Debit bank account.
           */
          readonly bacs_debit?: {
            readonly account_number?: string;
            readonly sort_code?: string;
          };
          /**
           * param
           * @description If this is a `bancontact` PaymentMethod, this hash contains details about the Bancontact payment method.
           */
          readonly bancontact?: { readonly [key: string]: unknown };
          /**
           * billing_details_inner_params
           * @description Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
           */
          readonly billing_details?: {
            readonly address?:
              | {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                }
              | "";
            readonly email?: string | "";
            readonly name?: string;
            readonly phone?: string;
          };
          /**
           * param
           * @description If this is a `boleto` PaymentMethod, this hash contains details about the Boleto payment method.
           */
          readonly boleto?: {
            readonly tax_id: string;
          };
          /** @description If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When providing a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly. */
          readonly card?:
            | {
                readonly cvc?: string;
                readonly exp_month: number;
                readonly exp_year: number;
                readonly number: string;
              }
            | {
                readonly token: string;
              };
          /** @description The `Customer` to whom the original PaymentMethod is attached. */
          readonly customer?: string;
          /**
           * param
           * @description If this is an `eps` PaymentMethod, this hash contains details about the EPS payment method.
           */
          readonly eps?: {
            /** @enum {string} */
            readonly bank?:
              | "arzte_und_apotheker_bank"
              | "austrian_anadi_bank_ag"
              | "bank_austria"
              | "bankhaus_carl_spangler"
              | "bankhaus_schelhammer_und_schattera_ag"
              | "bawag_psk_ag"
              | "bks_bank_ag"
              | "brull_kallmus_bank_ag"
              | "btv_vier_lander_bank"
              | "capital_bank_grawe_gruppe_ag"
              | "dolomitenbank"
              | "easybank_ag"
              | "erste_bank_und_sparkassen"
              | "hypo_alpeadriabank_international_ag"
              | "hypo_bank_burgenland_aktiengesellschaft"
              | "hypo_noe_lb_fur_niederosterreich_u_wien"
              | "hypo_oberosterreich_salzburg_steiermark"
              | "hypo_tirol_bank_ag"
              | "hypo_vorarlberg_bank_ag"
              | "marchfelder_bank"
              | "oberbank_ag"
              | "raiffeisen_bankengruppe_osterreich"
              | "schoellerbank_ag"
              | "sparda_bank_wien"
              | "volksbank_gruppe"
              | "volkskreditbank_ag"
              | "vr_bank_braunau";
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * param
           * @description If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method.
           */
          readonly fpx?: {
            /** @enum {string} */
            readonly bank:
              | "affin_bank"
              | "agrobank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob";
          };
          /**
           * param
           * @description If this is a `giropay` PaymentMethod, this hash contains details about the Giropay payment method.
           */
          readonly giropay?: { readonly [key: string]: unknown };
          /**
           * param
           * @description If this is a `grabpay` PaymentMethod, this hash contains details about the GrabPay payment method.
           */
          readonly grabpay?: { readonly [key: string]: unknown };
          /**
           * param
           * @description If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.
           */
          readonly ideal?: {
            /** @enum {string} */
            readonly bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "rabobank"
              | "regiobank"
              | "revolut"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot";
          };
          /**
           * param
           * @description If this is an `interac_present` PaymentMethod, this hash contains details about the Interac Present payment method.
           */
          readonly interac_present?: { readonly [key: string]: unknown };
          /**
           * param
           * @description If this is a `klarna` PaymentMethod, this hash contains details about the Klarna payment method.
           */
          readonly klarna?: {
            /** date_of_birth */
            readonly dob?: {
              readonly day: number;
              readonly month: number;
              readonly year: number;
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * param
           * @description If this is an `oxxo` PaymentMethod, this hash contains details about the OXXO payment method.
           */
          readonly oxxo?: { readonly [key: string]: unknown };
          /**
           * param
           * @description If this is a `p24` PaymentMethod, this hash contains details about the P24 payment method.
           */
          readonly p24?: {
            /** @enum {string} */
            readonly bank?:
              | "alior_bank"
              | "bank_millennium"
              | "bank_nowy_bfg_sa"
              | "bank_pekao_sa"
              | "banki_spbdzielcze"
              | "blik"
              | "bnp_paribas"
              | "boz"
              | "citi_handlowy"
              | "credit_agricole"
              | "envelobank"
              | "etransfer_pocztowy24"
              | "getin_bank"
              | "ideabank"
              | "ing"
              | "inteligo"
              | "mbank_mtransfer"
              | "nest_przelew"
              | "noble_pay"
              | "pbac_z_ipko"
              | "plus_bank"
              | "santander_przelew24"
              | "tmobile_usbugi_bankowe"
              | "toyota_bank"
              | "volkswagen_bank";
          };
          /** @description The PaymentMethod to share. */
          readonly payment_method?: string;
          /**
           * param
           * @description If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
           */
          readonly sepa_debit?: {
            readonly iban: string;
          };
          /**
           * param
           * @description If this is a `sofort` PaymentMethod, this hash contains details about the SOFORT payment method.
           */
          readonly sofort?: {
            /** @enum {string} */
            readonly country: "AT" | "BE" | "DE" | "ES" | "IT" | "NL";
          };
          /**
           * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
           * @enum {string}
           */
          readonly type?:
            | "acss_debit"
            | "afterpay_clearpay"
            | "alipay"
            | "au_becs_debit"
            | "bacs_debit"
            | "bancontact"
            | "boleto"
            | "card"
            | "eps"
            | "fpx"
            | "giropay"
            | "grabpay"
            | "ideal"
            | "klarna"
            | "oxxo"
            | "p24"
            | "sepa_debit"
            | "sofort"
            | "wechat_pay";
          /**
           * param
           * @description If this is an `wechat_pay` PaymentMethod, this hash contains details about the wechat_pay payment method.
           */
          readonly wechat_pay?: { readonly [key: string]: unknown };
        };
      };
    };
  };
  /** <p>Retrieves a PaymentMethod object.</p> */
  readonly GetPaymentMethodsPaymentMethod: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly payment_method: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p> */
  readonly PostPaymentMethodsPaymentMethod: {
    readonly parameters: {
      readonly path: {
        readonly payment_method: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * billing_details_inner_params
           * @description Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
           */
          readonly billing_details?: {
            readonly address?:
              | {
                  readonly city?: string;
                  readonly country?: string;
                  readonly line1?: string;
                  readonly line2?: string;
                  readonly postal_code?: string;
                  readonly state?: string;
                }
              | "";
            readonly email?: string | "";
            readonly name?: string;
            readonly phone?: string;
          };
          /**
           * update_api_param
           * @description If this is a `card` PaymentMethod, this hash contains the user's card details.
           */
          readonly card?: {
            readonly exp_month?: number;
            readonly exp_year?: number;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /**
   * <p>Attaches a PaymentMethod object to a Customer.</p>
   *
   * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
   * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
   * These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
   * <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
   * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
   *
   * <p>To use this PaymentMethod as the default for invoice or subscription payments,
   * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
   * on the Customer to the PaymentMethod’s ID.</p>
   */
  readonly PostPaymentMethodsPaymentMethodAttach: {
    readonly parameters: {
      readonly path: {
        readonly payment_method: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The ID of the customer to which to attach the PaymentMethod. */
          readonly customer: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Detaches a PaymentMethod object from a Customer.</p> */
  readonly PostPaymentMethodsPaymentMethodDetach: {
    readonly parameters: {
      readonly path: {
        readonly payment_method: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payment_method"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p> */
  readonly GetPayouts: {
    readonly parameters: {
      readonly query: {
        readonly arrival_date?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** The ID of an external account - only return payouts sent to this external account. */
        readonly destination?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`. */
        readonly status?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["payout"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
   *
   * <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
   *
   * <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
   */
  readonly PostPayouts: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A positive integer in cents representing how much to payout. */
          readonly amount: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used. */
          readonly destination?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * @description The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).)
           * @enum {string}
           */
          readonly method?: "instant" | "standard";
          /**
           * @description The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of `bank_account`, `card`, or `fpx`.
           * @enum {string}
           */
          readonly source_type?: "bank_account" | "card" | "fpx";
          /** @description A string to be displayed on the recipient's bank or card statement. This may be at most 22 characters. Attempting to use a `statement_descriptor` longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all. */
          readonly statement_descriptor?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p> */
  readonly GetPayoutsPayout: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly payout: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p> */
  readonly PostPayoutsPayout: {
    readonly parameters: {
      readonly path: {
        readonly payout: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p> */
  readonly PostPayoutsPayoutCancel: {
    readonly parameters: {
      readonly path: {
        readonly payout: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /**
   * <p>Reverses a payout by debiting the destination bank account. Only payouts for connected accounts to US bank accounts may be reversed at this time. If the payout is in the <code>pending</code> status, <code>/v1/payouts/:id/cancel</code> should be used instead.</p>
   *
   * <p>By requesting a reversal via <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account has authorized the debit on the bank account and that no other authorization is required.</p>
   */
  readonly PostPayoutsPayoutReverse: {
    readonly parameters: {
      readonly path: {
        readonly payout: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["payout"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
        };
      };
    };
  };
  /** <p>Returns a list of your plans.</p> */
  readonly GetPlans: {
    readonly parameters: {
      readonly query: {
        /** Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans). */
        readonly active?: boolean;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return plans for the given product. */
        readonly product?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["plan"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API and is backwards compatible to simplify your migration.</p> */
  readonly PostPlans: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["plan"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the plan is currently available for new subscriptions. Defaults to `true`. */
          readonly active?: boolean;
          /**
           * @description Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
           * @enum {string}
           */
          readonly aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
          /** @description A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis. */
          readonly amount?: number;
          /**
           * Format: decimal
           * @description Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set.
           */
          readonly amount_decimal?: string;
          /**
           * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
           * @enum {string}
           */
          readonly billing_scheme?: "per_unit" | "tiered";
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes. */
          readonly id?: string;
          /**
           * @description Specifies billing frequency. Either `day`, `week`, `month` or `year`.
           * @enum {string}
           */
          readonly interval: "day" | "month" | "week" | "year";
          /** @description The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
          readonly interval_count?: number;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description A brief description of the plan, hidden from customers. */
          readonly nickname?: string;
          readonly product?:
            | {
                readonly active?: boolean;
                readonly id?: string;
                readonly metadata?: { readonly [key: string]: string };
                readonly name: string;
                readonly statement_descriptor?: string;
                readonly tax_code?: string;
                readonly unit_label?: string;
              }
            | string;
          /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
          readonly tiers?: readonly {
            readonly flat_amount?: number;
            /** Format: decimal */
            readonly flat_amount_decimal?: string;
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
            readonly up_to: "inf" | number;
          }[];
          /**
           * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
           * @enum {string}
           */
          readonly tiers_mode?: "graduated" | "volume";
          /**
           * transform_usage_param
           * @description Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
           */
          readonly transform_usage?: {
            readonly divide_by: number;
            /** @enum {string} */
            readonly round: "down" | "up";
          };
          /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
          readonly trial_period_days?: number;
          /**
           * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
           * @enum {string}
           */
          readonly usage_type?: "licensed" | "metered";
        };
      };
    };
  };
  /** <p>Retrieves the plan with the given ID.</p> */
  readonly GetPlansPlan: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly plan: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["plan"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p> */
  readonly PostPlansPlan: {
    readonly parameters: {
      readonly path: {
        readonly plan: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["plan"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the plan is currently available for new subscriptions. */
          readonly active?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description A brief description of the plan, hidden from customers. */
          readonly nickname?: string;
          /** @description The product the plan belongs to. This cannot be changed once it has been used in a subscription or subscription schedule. */
          readonly product?: string;
          /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
          readonly trial_period_days?: number;
        };
      };
    };
  };
  /** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p> */
  readonly DeletePlansPlan: {
    readonly parameters: {
      readonly path: {
        readonly plan: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_plan"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your prices.</p> */
  readonly GetPrices: {
    readonly parameters: {
      readonly query: {
        /** Only return prices that are active or inactive (e.g., pass `false` to list all inactive prices). */
        readonly active?: boolean;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return prices for the given currency. */
        readonly currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return the price with these lookup_keys, if any exist. */
        readonly lookup_keys?: readonly string[];
        /** Only return prices for the given product. */
        readonly product?: string;
        /** Only return prices with these recurring fields. */
        readonly recurring?: {
          /** @enum {string} */
          readonly interval?: "day" | "month" | "week" | "year";
          /** @enum {string} */
          readonly usage_type?: "licensed" | "metered";
        };
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return prices of type `recurring` or `one_time`. */
        readonly type?: "one_time" | "recurring";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["price"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new price for an existing product. The price can be recurring or one-time.</p> */
  readonly PostPrices: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["price"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the price can be used for new purchases. Defaults to `true`. */
          readonly active?: boolean;
          /**
           * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
           * @enum {string}
           */
          readonly billing_scheme?: "per_unit" | "tiered";
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
          readonly lookup_key?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description A brief description of the price, hidden from customers. */
          readonly nickname?: string;
          /** @description The ID of the product that this price will belong to. */
          readonly product?: string;
          /**
           * inline_product_params
           * @description These fields can be used to create a new product that this price will belong to.
           */
          readonly product_data?: {
            readonly active?: boolean;
            readonly id?: string;
            readonly metadata?: { readonly [key: string]: string };
            readonly name: string;
            readonly statement_descriptor?: string;
            readonly tax_code?: string;
            readonly unit_label?: string;
          };
          /**
           * recurring
           * @description The recurring components of a price such as `interval` and `usage_type`.
           */
          readonly recurring?: {
            /** @enum {string} */
            readonly aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
            /** @enum {string} */
            readonly interval: "day" | "month" | "week" | "year";
            readonly interval_count?: number;
            /** @enum {string} */
            readonly usage_type?: "licensed" | "metered";
          };
          /**
           * @description Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
           * @enum {string}
           */
          readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
          readonly tiers?: readonly {
            readonly flat_amount?: number;
            /** Format: decimal */
            readonly flat_amount_decimal?: string;
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
            readonly up_to: "inf" | number;
          }[];
          /**
           * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
           * @enum {string}
           */
          readonly tiers_mode?: "graduated" | "volume";
          /** @description If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
          readonly transfer_lookup_key?: boolean;
          /**
           * transform_usage_param
           * @description Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
           */
          readonly transform_quantity?: {
            readonly divide_by: number;
            /** @enum {string} */
            readonly round: "down" | "up";
          };
          /** @description A positive integer in %s (or 0 for a free price) representing how much to charge. */
          readonly unit_amount?: number;
          /**
           * Format: decimal
           * @description Same as `unit_amount`, but accepts a decimal value in %s with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
           */
          readonly unit_amount_decimal?: string;
        };
      };
    };
  };
  /** <p>Retrieves the price with the given ID.</p> */
  readonly GetPricesPrice: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly price: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["price"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left unchanged.</p> */
  readonly PostPricesPrice: {
    readonly parameters: {
      readonly path: {
        readonly price: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["price"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the price can be used for new purchases. Defaults to `true`. */
          readonly active?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters. */
          readonly lookup_key?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description A brief description of the price, hidden from customers. */
          readonly nickname?: string;
          /**
           * @description Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
           * @enum {string}
           */
          readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          /** @description If set to true, will atomically remove the lookup key from the existing price, and assign it to this price. */
          readonly transfer_lookup_key?: boolean;
        };
      };
    };
  };
  /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
  readonly GetProducts: {
    readonly parameters: {
      readonly query: {
        /** Only return products that are active or inactive (e.g., pass `false` to list all inactive products). */
        readonly active?: boolean;
        /** Only return products that were created during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Only return products with the given IDs. */
        readonly ids?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return products that can be shipped (i.e., physical, not digital products). */
        readonly shippable?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return products with the given url. */
        readonly url?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["product"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new product object.</p> */
  readonly PostProducts: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["product"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the product is currently available for purchase. Defaults to `true`. */
          readonly active?: boolean;
          /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account. */
          readonly id?: string;
          /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
          readonly images?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
          readonly name: string;
          /**
           * package_dimensions_specs
           * @description The dimensions of this product for shipping purposes.
           */
          readonly package_dimensions?: {
            readonly height: number;
            readonly length: number;
            readonly weight: number;
            readonly width: number;
          };
          /** @description Whether this product is shipped (i.e., physical goods). */
          readonly shippable?: boolean;
          /**
           * @description An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
           *
           * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
           *  It must contain at least one letter.
           */
          readonly statement_descriptor?: string;
          /** @description A [tax code](https://stripe.com/docs/tax/tax-codes) ID. */
          readonly tax_code?: string;
          /** @description A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
          readonly unit_label?: string;
          /** @description A URL of a publicly-accessible webpage for this product. */
          readonly url?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
  readonly GetProductsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["product"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostProductsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["product"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the product is available for purchase. */
          readonly active?: boolean;
          /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
          readonly images?: readonly string[] | "";
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
          readonly name?: string;
          /** @description The dimensions of this product for shipping purposes. */
          readonly package_dimensions?:
            | {
                readonly height: number;
                readonly length: number;
                readonly weight: number;
                readonly width: number;
              }
            | "";
          /** @description Whether this product is shipped (i.e., physical goods). */
          readonly shippable?: boolean;
          /**
           * @description An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
           *
           * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
           *  It must contain at least one letter. May only be set if `type=service`.
           */
          readonly statement_descriptor?: string;
          /** @description A [tax code](https://stripe.com/docs/tax/tax-codes) ID. */
          readonly tax_code?: string | "";
          /** @description A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`. */
          readonly unit_label?: string;
          /** @description A URL of a publicly-accessible webpage for this product. */
          readonly url?: string;
        };
      };
    };
  };
  /** <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p> */
  readonly DeleteProductsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_product"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your promotion codes.</p> */
  readonly GetPromotionCodes: {
    readonly parameters: {
      readonly query: {
        /** Filter promotion codes by whether they are active. */
        readonly active?: boolean;
        /** Only return promotion codes that have this case-insensitive code. */
        readonly code?: string;
        /** Only return promotion codes for this coupon. */
        readonly coupon?: string;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return promotion codes that are restricted to this customer. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["promotion_code"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit, and expiration date.</p> */
  readonly PostPromotionCodes: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["promotion_code"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the promotion code is currently active. */
          readonly active?: boolean;
          /** @description The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for a specific customer. If left blank, we will generate one automatically. */
          readonly code?: string;
          /** @description The coupon for this promotion code. */
          readonly coupon: string;
          /** @description The customer that this promotion code can be used by. If not set, the promotion code can be used by all customers. */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * Format: unix-time
           * @description The timestamp at which this promotion code will expire. If the coupon has specified a `redeems_by`, then this value cannot be after the coupon's `redeems_by`.
           */
          readonly expires_at?: number;
          /** @description A positive integer specifying the number of times the promotion code can be redeemed. If the coupon has specified a `max_redemptions`, then this value cannot be greater than the coupon's `max_redemptions`. */
          readonly max_redemptions?: number;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * restrictions_params
           * @description Settings that restrict the redemption of the promotion code.
           */
          readonly restrictions?: {
            readonly first_time_transaction?: boolean;
            readonly minimum_amount?: number;
            readonly minimum_amount_currency?: string;
          };
        };
      };
    };
  };
  /** <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p> */
  readonly GetPromotionCodesPromotionCode: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly promotion_code: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["promotion_code"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not editable.</p> */
  readonly PostPromotionCodesPromotionCode: {
    readonly parameters: {
      readonly path: {
        readonly promotion_code: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["promotion_code"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the promotion code is currently active. A promotion code can only be reactivated when the coupon is still valid and the promotion code is otherwise redeemable. */
          readonly active?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of your quotes.</p> */
  readonly GetQuotes: {
    readonly parameters: {
      readonly query: {
        /** The ID of the customer whose quotes will be retrieved. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The status of the quote. */
        readonly status?: "accepted" | "canceled" | "draft" | "open";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["quote"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>, <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p> */
  readonly PostQuotes: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["quote"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field. */
          readonly application_fee_amount?: number | "";
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
          readonly application_fee_percent?: number | "";
          /**
           * automatic_tax_param
           * @description Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
          readonly customer?: string;
          /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. */
          readonly default_tax_rates?: readonly string[] | "";
          /** @description A description that will be displayed on the quote PDF. If no value is passed, the default description configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
          readonly description?: string;
          /** @description The discounts applied to the quote. You can only set up to one discount. */
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * Format: unix-time
           * @description A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch. If no value is passed, the default expiration date configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used.
           */
          readonly expires_at?: number;
          /** @description A footer that will be displayed on the quote PDF. If no value is passed, the default footer configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
          readonly footer?: string;
          /**
           * from_quote_params
           * @description Clone an existing quote. The new quote will be created in `status=draft`. When using this parameter, you cannot specify any other parameters except for `expires_at`.
           */
          readonly from_quote?: {
            readonly is_revision?: boolean;
            readonly quote: string;
          };
          /** @description A header that will be displayed on the quote PDF. If no value is passed, the default header configured in your [quote template settings](https://dashboard.stripe.com/settings/billing/quote) will be used. */
          readonly header?: string;
          /**
           * quote_param
           * @description All invoices will be billed using the specified settings.
           */
          readonly invoice_settings?: {
            readonly days_until_due?: number;
          };
          /** @description A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost. */
          readonly line_items?: readonly {
            readonly price?: string;
            /** price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** recurring_adhoc */
              readonly recurring?: {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The account on behalf of which to charge. */
          readonly on_behalf_of?: string | "";
          /**
           * subscription_data_create_params
           * @description When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
           */
          readonly subscription_data?: {
            readonly effective_date?: "current_period_end" | number | "";
            readonly trial_period_days?: number | "";
          };
          /** @description The data with which to automatically create a Transfer for each of the invoices. */
          readonly transfer_data?:
            | {
                readonly amount?: number;
                readonly amount_percent?: number;
                readonly destination: string;
              }
            | "";
        };
      };
    };
  };
  /** <p>Retrieves the quote with the given ID.</p> */
  readonly GetQuotesQuote: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["quote"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>A quote models prices and services for a customer.</p> */
  readonly PostQuotesQuote: {
    readonly parameters: {
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["quote"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field. */
          readonly application_fee_amount?: number | "";
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field. */
          readonly application_fee_percent?: number | "";
          /**
           * automatic_tax_param
           * @description Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed. */
          readonly customer?: string;
          /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. */
          readonly default_tax_rates?: readonly string[] | "";
          /** @description A description that will be displayed on the quote PDF. */
          readonly description?: string;
          /** @description The discounts applied to the quote. You can only set up to one discount. */
          readonly discounts?:
            | readonly {
                readonly coupon?: string;
                readonly discount?: string;
              }[]
            | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * Format: unix-time
           * @description A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
           */
          readonly expires_at?: number;
          /** @description A footer that will be displayed on the quote PDF. */
          readonly footer?: string;
          /** @description A header that will be displayed on the quote PDF. */
          readonly header?: string;
          /**
           * quote_param
           * @description All invoices will be billed using the specified settings.
           */
          readonly invoice_settings?: {
            readonly days_until_due?: number;
          };
          /** @description A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost. */
          readonly line_items?: readonly {
            readonly id?: string;
            readonly price?: string;
            /** price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** recurring_adhoc */
              readonly recurring?: {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The account on behalf of which to charge. */
          readonly on_behalf_of?: string | "";
          /**
           * subscription_data_update_params
           * @description When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
           */
          readonly subscription_data?: {
            readonly effective_date?: "current_period_end" | number | "";
            readonly trial_period_days?: number | "";
          };
          /** @description The data with which to automatically create a Transfer for each of the invoices. */
          readonly transfer_data?:
            | {
                readonly amount?: number;
                readonly amount_percent?: number;
                readonly destination: string;
              }
            | "";
        };
      };
    };
  };
  /** <p>Accepts the specified quote.</p> */
  readonly PostQuotesQuoteAccept: {
    readonly parameters: {
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["quote"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Cancels the quote.</p> */
  readonly PostQuotesQuoteCancel: {
    readonly parameters: {
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["quote"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>When retrieving a quote, there is an includable <a href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of upfront line items.</p> */
  readonly GetQuotesQuoteComputedUpfrontLineItems: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Finalizes the quote.</p> */
  readonly PostQuotesQuoteFinalize: {
    readonly parameters: {
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["quote"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * Format: unix-time
           * @description A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
           */
          readonly expires_at?: number;
        };
      };
    };
  };
  /** <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetQuotesQuoteLineItems: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Download the PDF for a finalized quote</p> */
  readonly GetQuotesQuotePdf: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly quote: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/pdf": string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of early fraud warnings.</p> */
  readonly GetRadarEarlyFraudWarnings: {
    readonly parameters: {
      readonly query: {
        /** Only return early fraud warnings for the charge specified by this charge ID. */
        readonly charge?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return early fraud warnings for charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["radar.early_fraud_warning"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
   */
  readonly GetRadarEarlyFraudWarningsEarlyFraudWarning: {
    readonly parameters: {
      readonly path: {
        readonly early_fraud_warning: string;
      };
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["radar.early_fraud_warning"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetRadarValueListItems: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Return items belonging to the parent list whose value matches the specified value (using an "is like" match). */
        readonly value?: string;
        /** Identifier for the parent value list this item belongs to. */
        readonly value_list: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["radar.value_list_item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p> */
  readonly PostRadarValueListItems: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["radar.value_list_item"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The value of the item (whose type must match the type of the parent value list). */
          readonly value: string;
          /** @description The identifier of the value list which the created item will be added to. */
          readonly value_list: string;
        };
      };
    };
  };
  /** <p>Retrieves a <code>ValueListItem</code> object.</p> */
  readonly GetRadarValueListItemsItem: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["radar.value_list_item"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p> */
  readonly DeleteRadarValueListItemsItem: {
    readonly parameters: {
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_radar.value_list_item"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetRadarValueLists: {
    readonly parameters: {
      readonly query: {
        /** The alias used to reference the value list when writing rules. */
        readonly alias?: string;
        /** A value contained within a value list - returns all value lists containing this value. */
        readonly contains?: string;
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["radar.value_list"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p> */
  readonly PostRadarValueLists: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["radar.value_list"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the value list for use in rules. */
          readonly alias: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`. Use `string` if the item type is unknown or mixed.
           * @enum {string}
           */
          readonly item_type?:
            | "card_bin"
            | "card_fingerprint"
            | "case_sensitive_string"
            | "country"
            | "customer_id"
            | "email"
            | "ip_address"
            | "string";
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The human-readable name of the value list. */
          readonly name: string;
        };
      };
    };
  };
  /** <p>Retrieves a <code>ValueList</code> object.</p> */
  readonly GetRadarValueListsValueList: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly value_list: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["radar.value_list"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p> */
  readonly PostRadarValueListsValueList: {
    readonly parameters: {
      readonly path: {
        readonly value_list: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["radar.value_list"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The name of the value list for use in rules. */
          readonly alias?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The human-readable name of the value list. */
          readonly name?: string;
        };
      };
    };
  };
  /** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p> */
  readonly DeleteRadarValueListsValueList: {
    readonly parameters: {
      readonly path: {
        readonly value_list: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_radar.value_list"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p> */
  readonly GetRecipients: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        readonly type?: "corporation" | "individual";
        /** Only return recipients that are verified or unverified. */
        readonly verified?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["recipient"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
   * Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
   */
  readonly PostRecipients: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["recipient"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details, with the options described below. */
          readonly bank_account?: string;
          /** @description A U.S. Visa or MasterCard debit card (_not_ prepaid) to attach to the recipient. If the debit card is not valid, recipient creation will fail. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's debit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud. */
          readonly card?: string;
          /** @description An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
          readonly description?: string;
          /** @description The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
          readonly name: string;
          /** @description The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
          readonly tax_id?: string;
          /** @description Type of the recipient: either `individual` or `corporation`. */
          readonly type: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p> */
  readonly GetRecipientsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["recipient"] | components["schemas"]["deleted_recipient"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specified recipient by setting the values of the parameters passed.
   * Any parameters not provided will be left unchanged.</p>
   *
   * <p>If you update the name or tax ID, the identity verification will automatically be rerun.
   * If you update the bank account, the bank account validation will automatically be rerun.</p>
   */
  readonly PostRecipientsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["recipient"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's bank account details, with the options described below. */
          readonly bank_account?: string;
          /** @description A U.S. Visa or MasterCard debit card (not prepaid) to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/js), or a dictionary containing a user's debit card details, with the options described below. Passing `card` will create a new card, make it the new recipient default card, and delete the old recipient default (if one exists). If you want to add additional debit cards instead of replacing the existing default, use the [card creation API](https://stripe.com/docs/api#create_card). Whenever you attach a card to a recipient, Stripe will automatically validate the debit card. */
          readonly card?: string;
          /** @description ID of the card to set as the recipient's new default for payouts. */
          readonly default_card?: string;
          /** @description An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
          readonly description?: string;
          /** @description The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
          readonly name?: string;
          /** @description The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
          readonly tax_id?: string;
        };
      };
    };
  };
  /** <p>Permanently deletes a recipient. It cannot be undone.</p> */
  readonly DeleteRecipientsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_recipient"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p> */
  readonly GetRefunds: {
    readonly parameters: {
      readonly query: {
        /** Only return refunds for the charge specified by this charge ID. */
        readonly charge?: string;
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return refunds for the PaymentIntent specified by this ID. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["refund"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Create a refund.</p> */
  readonly PostRefunds: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          readonly amount?: number;
          readonly charge?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          readonly payment_intent?: string;
          /** @enum {string} */
          readonly reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          readonly refund_application_fee?: boolean;
          readonly reverse_transfer?: boolean;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing refund.</p> */
  readonly GetRefundsRefund: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly refund: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts <code>metadata</code> as an argument.</p>
   */
  readonly PostRefundsRefund: {
    readonly parameters: {
      readonly path: {
        readonly refund: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["refund"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of Report Runs, with the most recent appearing first.</p> */
  readonly GetReportingReportRuns: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["reporting.report_run"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new object and begin running the report. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  readonly PostReportingReportRuns: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["reporting.report_run"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * run_parameter_specs
           * @description Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation.
           */
          readonly parameters?: {
            readonly columns?: readonly string[];
            readonly connected_account?: string;
            readonly currency?: string;
            /** Format: unix-time */
            readonly interval_end?: number;
            /** Format: unix-time */
            readonly interval_start?: number;
            readonly payout?: string;
            /** @enum {string} */
            readonly reporting_category?:
              | "advance"
              | "advance_funding"
              | "anticipation_repayment"
              | "charge"
              | "charge_failure"
              | "connect_collection_transfer"
              | "connect_reserved_funds"
              | "contribution"
              | "dispute"
              | "dispute_reversal"
              | "fee"
              | "financing_paydown"
              | "financing_paydown_reversal"
              | "financing_payout"
              | "financing_payout_reversal"
              | "issuing_authorization_hold"
              | "issuing_authorization_release"
              | "issuing_dispute"
              | "issuing_transaction"
              | "network_cost"
              | "other_adjustment"
              | "partial_capture_reversal"
              | "payout"
              | "payout_reversal"
              | "platform_earning"
              | "platform_earning_refund"
              | "refund"
              | "refund_failure"
              | "risk_reserved_funds"
              | "tax"
              | "topup"
              | "topup_reversal"
              | "transfer"
              | "transfer_reversal";
            /** @enum {string} */
            readonly timezone?:
              | "Africa/Abidjan"
              | "Africa/Accra"
              | "Africa/Addis_Ababa"
              | "Africa/Algiers"
              | "Africa/Asmara"
              | "Africa/Asmera"
              | "Africa/Bamako"
              | "Africa/Bangui"
              | "Africa/Banjul"
              | "Africa/Bissau"
              | "Africa/Blantyre"
              | "Africa/Brazzaville"
              | "Africa/Bujumbura"
              | "Africa/Cairo"
              | "Africa/Casablanca"
              | "Africa/Ceuta"
              | "Africa/Conakry"
              | "Africa/Dakar"
              | "Africa/Dar_es_Salaam"
              | "Africa/Djibouti"
              | "Africa/Douala"
              | "Africa/El_Aaiun"
              | "Africa/Freetown"
              | "Africa/Gaborone"
              | "Africa/Harare"
              | "Africa/Johannesburg"
              | "Africa/Juba"
              | "Africa/Kampala"
              | "Africa/Khartoum"
              | "Africa/Kigali"
              | "Africa/Kinshasa"
              | "Africa/Lagos"
              | "Africa/Libreville"
              | "Africa/Lome"
              | "Africa/Luanda"
              | "Africa/Lubumbashi"
              | "Africa/Lusaka"
              | "Africa/Malabo"
              | "Africa/Maputo"
              | "Africa/Maseru"
              | "Africa/Mbabane"
              | "Africa/Mogadishu"
              | "Africa/Monrovia"
              | "Africa/Nairobi"
              | "Africa/Ndjamena"
              | "Africa/Niamey"
              | "Africa/Nouakchott"
              | "Africa/Ouagadougou"
              | "Africa/Porto-Novo"
              | "Africa/Sao_Tome"
              | "Africa/Timbuktu"
              | "Africa/Tripoli"
              | "Africa/Tunis"
              | "Africa/Windhoek"
              | "America/Adak"
              | "America/Anchorage"
              | "America/Anguilla"
              | "America/Antigua"
              | "America/Araguaina"
              | "America/Argentina/Buenos_Aires"
              | "America/Argentina/Catamarca"
              | "America/Argentina/ComodRivadavia"
              | "America/Argentina/Cordoba"
              | "America/Argentina/Jujuy"
              | "America/Argentina/La_Rioja"
              | "America/Argentina/Mendoza"
              | "America/Argentina/Rio_Gallegos"
              | "America/Argentina/Salta"
              | "America/Argentina/San_Juan"
              | "America/Argentina/San_Luis"
              | "America/Argentina/Tucuman"
              | "America/Argentina/Ushuaia"
              | "America/Aruba"
              | "America/Asuncion"
              | "America/Atikokan"
              | "America/Atka"
              | "America/Bahia"
              | "America/Bahia_Banderas"
              | "America/Barbados"
              | "America/Belem"
              | "America/Belize"
              | "America/Blanc-Sablon"
              | "America/Boa_Vista"
              | "America/Bogota"
              | "America/Boise"
              | "America/Buenos_Aires"
              | "America/Cambridge_Bay"
              | "America/Campo_Grande"
              | "America/Cancun"
              | "America/Caracas"
              | "America/Catamarca"
              | "America/Cayenne"
              | "America/Cayman"
              | "America/Chicago"
              | "America/Chihuahua"
              | "America/Coral_Harbour"
              | "America/Cordoba"
              | "America/Costa_Rica"
              | "America/Creston"
              | "America/Cuiaba"
              | "America/Curacao"
              | "America/Danmarkshavn"
              | "America/Dawson"
              | "America/Dawson_Creek"
              | "America/Denver"
              | "America/Detroit"
              | "America/Dominica"
              | "America/Edmonton"
              | "America/Eirunepe"
              | "America/El_Salvador"
              | "America/Ensenada"
              | "America/Fort_Nelson"
              | "America/Fort_Wayne"
              | "America/Fortaleza"
              | "America/Glace_Bay"
              | "America/Godthab"
              | "America/Goose_Bay"
              | "America/Grand_Turk"
              | "America/Grenada"
              | "America/Guadeloupe"
              | "America/Guatemala"
              | "America/Guayaquil"
              | "America/Guyana"
              | "America/Halifax"
              | "America/Havana"
              | "America/Hermosillo"
              | "America/Indiana/Indianapolis"
              | "America/Indiana/Knox"
              | "America/Indiana/Marengo"
              | "America/Indiana/Petersburg"
              | "America/Indiana/Tell_City"
              | "America/Indiana/Vevay"
              | "America/Indiana/Vincennes"
              | "America/Indiana/Winamac"
              | "America/Indianapolis"
              | "America/Inuvik"
              | "America/Iqaluit"
              | "America/Jamaica"
              | "America/Jujuy"
              | "America/Juneau"
              | "America/Kentucky/Louisville"
              | "America/Kentucky/Monticello"
              | "America/Knox_IN"
              | "America/Kralendijk"
              | "America/La_Paz"
              | "America/Lima"
              | "America/Los_Angeles"
              | "America/Louisville"
              | "America/Lower_Princes"
              | "America/Maceio"
              | "America/Managua"
              | "America/Manaus"
              | "America/Marigot"
              | "America/Martinique"
              | "America/Matamoros"
              | "America/Mazatlan"
              | "America/Mendoza"
              | "America/Menominee"
              | "America/Merida"
              | "America/Metlakatla"
              | "America/Mexico_City"
              | "America/Miquelon"
              | "America/Moncton"
              | "America/Monterrey"
              | "America/Montevideo"
              | "America/Montreal"
              | "America/Montserrat"
              | "America/Nassau"
              | "America/New_York"
              | "America/Nipigon"
              | "America/Nome"
              | "America/Noronha"
              | "America/North_Dakota/Beulah"
              | "America/North_Dakota/Center"
              | "America/North_Dakota/New_Salem"
              | "America/Ojinaga"
              | "America/Panama"
              | "America/Pangnirtung"
              | "America/Paramaribo"
              | "America/Phoenix"
              | "America/Port-au-Prince"
              | "America/Port_of_Spain"
              | "America/Porto_Acre"
              | "America/Porto_Velho"
              | "America/Puerto_Rico"
              | "America/Punta_Arenas"
              | "America/Rainy_River"
              | "America/Rankin_Inlet"
              | "America/Recife"
              | "America/Regina"
              | "America/Resolute"
              | "America/Rio_Branco"
              | "America/Rosario"
              | "America/Santa_Isabel"
              | "America/Santarem"
              | "America/Santiago"
              | "America/Santo_Domingo"
              | "America/Sao_Paulo"
              | "America/Scoresbysund"
              | "America/Shiprock"
              | "America/Sitka"
              | "America/St_Barthelemy"
              | "America/St_Johns"
              | "America/St_Kitts"
              | "America/St_Lucia"
              | "America/St_Thomas"
              | "America/St_Vincent"
              | "America/Swift_Current"
              | "America/Tegucigalpa"
              | "America/Thule"
              | "America/Thunder_Bay"
              | "America/Tijuana"
              | "America/Toronto"
              | "America/Tortola"
              | "America/Vancouver"
              | "America/Virgin"
              | "America/Whitehorse"
              | "America/Winnipeg"
              | "America/Yakutat"
              | "America/Yellowknife"
              | "Antarctica/Casey"
              | "Antarctica/Davis"
              | "Antarctica/DumontDUrville"
              | "Antarctica/Macquarie"
              | "Antarctica/Mawson"
              | "Antarctica/McMurdo"
              | "Antarctica/Palmer"
              | "Antarctica/Rothera"
              | "Antarctica/South_Pole"
              | "Antarctica/Syowa"
              | "Antarctica/Troll"
              | "Antarctica/Vostok"
              | "Arctic/Longyearbyen"
              | "Asia/Aden"
              | "Asia/Almaty"
              | "Asia/Amman"
              | "Asia/Anadyr"
              | "Asia/Aqtau"
              | "Asia/Aqtobe"
              | "Asia/Ashgabat"
              | "Asia/Ashkhabad"
              | "Asia/Atyrau"
              | "Asia/Baghdad"
              | "Asia/Bahrain"
              | "Asia/Baku"
              | "Asia/Bangkok"
              | "Asia/Barnaul"
              | "Asia/Beirut"
              | "Asia/Bishkek"
              | "Asia/Brunei"
              | "Asia/Calcutta"
              | "Asia/Chita"
              | "Asia/Choibalsan"
              | "Asia/Chongqing"
              | "Asia/Chungking"
              | "Asia/Colombo"
              | "Asia/Dacca"
              | "Asia/Damascus"
              | "Asia/Dhaka"
              | "Asia/Dili"
              | "Asia/Dubai"
              | "Asia/Dushanbe"
              | "Asia/Famagusta"
              | "Asia/Gaza"
              | "Asia/Harbin"
              | "Asia/Hebron"
              | "Asia/Ho_Chi_Minh"
              | "Asia/Hong_Kong"
              | "Asia/Hovd"
              | "Asia/Irkutsk"
              | "Asia/Istanbul"
              | "Asia/Jakarta"
              | "Asia/Jayapura"
              | "Asia/Jerusalem"
              | "Asia/Kabul"
              | "Asia/Kamchatka"
              | "Asia/Karachi"
              | "Asia/Kashgar"
              | "Asia/Kathmandu"
              | "Asia/Katmandu"
              | "Asia/Khandyga"
              | "Asia/Kolkata"
              | "Asia/Krasnoyarsk"
              | "Asia/Kuala_Lumpur"
              | "Asia/Kuching"
              | "Asia/Kuwait"
              | "Asia/Macao"
              | "Asia/Macau"
              | "Asia/Magadan"
              | "Asia/Makassar"
              | "Asia/Manila"
              | "Asia/Muscat"
              | "Asia/Nicosia"
              | "Asia/Novokuznetsk"
              | "Asia/Novosibirsk"
              | "Asia/Omsk"
              | "Asia/Oral"
              | "Asia/Phnom_Penh"
              | "Asia/Pontianak"
              | "Asia/Pyongyang"
              | "Asia/Qatar"
              | "Asia/Qostanay"
              | "Asia/Qyzylorda"
              | "Asia/Rangoon"
              | "Asia/Riyadh"
              | "Asia/Saigon"
              | "Asia/Sakhalin"
              | "Asia/Samarkand"
              | "Asia/Seoul"
              | "Asia/Shanghai"
              | "Asia/Singapore"
              | "Asia/Srednekolymsk"
              | "Asia/Taipei"
              | "Asia/Tashkent"
              | "Asia/Tbilisi"
              | "Asia/Tehran"
              | "Asia/Tel_Aviv"
              | "Asia/Thimbu"
              | "Asia/Thimphu"
              | "Asia/Tokyo"
              | "Asia/Tomsk"
              | "Asia/Ujung_Pandang"
              | "Asia/Ulaanbaatar"
              | "Asia/Ulan_Bator"
              | "Asia/Urumqi"
              | "Asia/Ust-Nera"
              | "Asia/Vientiane"
              | "Asia/Vladivostok"
              | "Asia/Yakutsk"
              | "Asia/Yangon"
              | "Asia/Yekaterinburg"
              | "Asia/Yerevan"
              | "Atlantic/Azores"
              | "Atlantic/Bermuda"
              | "Atlantic/Canary"
              | "Atlantic/Cape_Verde"
              | "Atlantic/Faeroe"
              | "Atlantic/Faroe"
              | "Atlantic/Jan_Mayen"
              | "Atlantic/Madeira"
              | "Atlantic/Reykjavik"
              | "Atlantic/South_Georgia"
              | "Atlantic/St_Helena"
              | "Atlantic/Stanley"
              | "Australia/ACT"
              | "Australia/Adelaide"
              | "Australia/Brisbane"
              | "Australia/Broken_Hill"
              | "Australia/Canberra"
              | "Australia/Currie"
              | "Australia/Darwin"
              | "Australia/Eucla"
              | "Australia/Hobart"
              | "Australia/LHI"
              | "Australia/Lindeman"
              | "Australia/Lord_Howe"
              | "Australia/Melbourne"
              | "Australia/NSW"
              | "Australia/North"
              | "Australia/Perth"
              | "Australia/Queensland"
              | "Australia/South"
              | "Australia/Sydney"
              | "Australia/Tasmania"
              | "Australia/Victoria"
              | "Australia/West"
              | "Australia/Yancowinna"
              | "Brazil/Acre"
              | "Brazil/DeNoronha"
              | "Brazil/East"
              | "Brazil/West"
              | "CET"
              | "CST6CDT"
              | "Canada/Atlantic"
              | "Canada/Central"
              | "Canada/Eastern"
              | "Canada/Mountain"
              | "Canada/Newfoundland"
              | "Canada/Pacific"
              | "Canada/Saskatchewan"
              | "Canada/Yukon"
              | "Chile/Continental"
              | "Chile/EasterIsland"
              | "Cuba"
              | "EET"
              | "EST"
              | "EST5EDT"
              | "Egypt"
              | "Eire"
              | "Etc/GMT"
              | "Etc/GMT+0"
              | "Etc/GMT+1"
              | "Etc/GMT+10"
              | "Etc/GMT+11"
              | "Etc/GMT+12"
              | "Etc/GMT+2"
              | "Etc/GMT+3"
              | "Etc/GMT+4"
              | "Etc/GMT+5"
              | "Etc/GMT+6"
              | "Etc/GMT+7"
              | "Etc/GMT+8"
              | "Etc/GMT+9"
              | "Etc/GMT-0"
              | "Etc/GMT-1"
              | "Etc/GMT-10"
              | "Etc/GMT-11"
              | "Etc/GMT-12"
              | "Etc/GMT-13"
              | "Etc/GMT-14"
              | "Etc/GMT-2"
              | "Etc/GMT-3"
              | "Etc/GMT-4"
              | "Etc/GMT-5"
              | "Etc/GMT-6"
              | "Etc/GMT-7"
              | "Etc/GMT-8"
              | "Etc/GMT-9"
              | "Etc/GMT0"
              | "Etc/Greenwich"
              | "Etc/UCT"
              | "Etc/UTC"
              | "Etc/Universal"
              | "Etc/Zulu"
              | "Europe/Amsterdam"
              | "Europe/Andorra"
              | "Europe/Astrakhan"
              | "Europe/Athens"
              | "Europe/Belfast"
              | "Europe/Belgrade"
              | "Europe/Berlin"
              | "Europe/Bratislava"
              | "Europe/Brussels"
              | "Europe/Bucharest"
              | "Europe/Budapest"
              | "Europe/Busingen"
              | "Europe/Chisinau"
              | "Europe/Copenhagen"
              | "Europe/Dublin"
              | "Europe/Gibraltar"
              | "Europe/Guernsey"
              | "Europe/Helsinki"
              | "Europe/Isle_of_Man"
              | "Europe/Istanbul"
              | "Europe/Jersey"
              | "Europe/Kaliningrad"
              | "Europe/Kiev"
              | "Europe/Kirov"
              | "Europe/Lisbon"
              | "Europe/Ljubljana"
              | "Europe/London"
              | "Europe/Luxembourg"
              | "Europe/Madrid"
              | "Europe/Malta"
              | "Europe/Mariehamn"
              | "Europe/Minsk"
              | "Europe/Monaco"
              | "Europe/Moscow"
              | "Europe/Nicosia"
              | "Europe/Oslo"
              | "Europe/Paris"
              | "Europe/Podgorica"
              | "Europe/Prague"
              | "Europe/Riga"
              | "Europe/Rome"
              | "Europe/Samara"
              | "Europe/San_Marino"
              | "Europe/Sarajevo"
              | "Europe/Saratov"
              | "Europe/Simferopol"
              | "Europe/Skopje"
              | "Europe/Sofia"
              | "Europe/Stockholm"
              | "Europe/Tallinn"
              | "Europe/Tirane"
              | "Europe/Tiraspol"
              | "Europe/Ulyanovsk"
              | "Europe/Uzhgorod"
              | "Europe/Vaduz"
              | "Europe/Vatican"
              | "Europe/Vienna"
              | "Europe/Vilnius"
              | "Europe/Volgograd"
              | "Europe/Warsaw"
              | "Europe/Zagreb"
              | "Europe/Zaporozhye"
              | "Europe/Zurich"
              | "Factory"
              | "GB"
              | "GB-Eire"
              | "GMT"
              | "GMT+0"
              | "GMT-0"
              | "GMT0"
              | "Greenwich"
              | "HST"
              | "Hongkong"
              | "Iceland"
              | "Indian/Antananarivo"
              | "Indian/Chagos"
              | "Indian/Christmas"
              | "Indian/Cocos"
              | "Indian/Comoro"
              | "Indian/Kerguelen"
              | "Indian/Mahe"
              | "Indian/Maldives"
              | "Indian/Mauritius"
              | "Indian/Mayotte"
              | "Indian/Reunion"
              | "Iran"
              | "Israel"
              | "Jamaica"
              | "Japan"
              | "Kwajalein"
              | "Libya"
              | "MET"
              | "MST"
              | "MST7MDT"
              | "Mexico/BajaNorte"
              | "Mexico/BajaSur"
              | "Mexico/General"
              | "NZ"
              | "NZ-CHAT"
              | "Navajo"
              | "PRC"
              | "PST8PDT"
              | "Pacific/Apia"
              | "Pacific/Auckland"
              | "Pacific/Bougainville"
              | "Pacific/Chatham"
              | "Pacific/Chuuk"
              | "Pacific/Easter"
              | "Pacific/Efate"
              | "Pacific/Enderbury"
              | "Pacific/Fakaofo"
              | "Pacific/Fiji"
              | "Pacific/Funafuti"
              | "Pacific/Galapagos"
              | "Pacific/Gambier"
              | "Pacific/Guadalcanal"
              | "Pacific/Guam"
              | "Pacific/Honolulu"
              | "Pacific/Johnston"
              | "Pacific/Kiritimati"
              | "Pacific/Kosrae"
              | "Pacific/Kwajalein"
              | "Pacific/Majuro"
              | "Pacific/Marquesas"
              | "Pacific/Midway"
              | "Pacific/Nauru"
              | "Pacific/Niue"
              | "Pacific/Norfolk"
              | "Pacific/Noumea"
              | "Pacific/Pago_Pago"
              | "Pacific/Palau"
              | "Pacific/Pitcairn"
              | "Pacific/Pohnpei"
              | "Pacific/Ponape"
              | "Pacific/Port_Moresby"
              | "Pacific/Rarotonga"
              | "Pacific/Saipan"
              | "Pacific/Samoa"
              | "Pacific/Tahiti"
              | "Pacific/Tarawa"
              | "Pacific/Tongatapu"
              | "Pacific/Truk"
              | "Pacific/Wake"
              | "Pacific/Wallis"
              | "Pacific/Yap"
              | "Poland"
              | "Portugal"
              | "ROC"
              | "ROK"
              | "Singapore"
              | "Turkey"
              | "UCT"
              | "US/Alaska"
              | "US/Aleutian"
              | "US/Arizona"
              | "US/Central"
              | "US/East-Indiana"
              | "US/Eastern"
              | "US/Hawaii"
              | "US/Indiana-Starke"
              | "US/Michigan"
              | "US/Mountain"
              | "US/Pacific"
              | "US/Pacific-New"
              | "US/Samoa"
              | "UTC"
              | "Universal"
              | "W-SU"
              | "WET"
              | "Zulu";
          };
          /** @description The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. */
          readonly report_type: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing Report Run.</p> */
  readonly GetReportingReportRunsReportRun: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly report_run: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["reporting.report_run"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a full list of Report Types.</p> */
  readonly GetReportingReportTypes: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["reporting.report_type"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the details of a Report Type. (Certain report types require a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  readonly GetReportingReportTypesReportType: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly report_type: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["reporting.report_type"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetReviews: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["review"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves a <code>Review</code> object.</p> */
  readonly GetReviewsReview: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly review: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["review"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p> */
  readonly PostReviewsReviewApprove: {
    readonly parameters: {
      readonly path: {
        readonly review: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["review"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of SetupAttempts associated with a provided SetupIntent.</p> */
  readonly GetSetupAttempts: {
    readonly parameters: {
      readonly query: {
        /**
         * A filter on the list, based on the object `created` field. The value
         * can be a string with an integer Unix timestamp, or it can be a
         * dictionary with a number of different query options.
         */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /**
         * Only return SetupAttempts created by the SetupIntent specified by
         * this ID.
         */
        readonly setup_intent: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["setup_attempt"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of SetupIntents.</p> */
  readonly GetSetupIntents: {
    readonly parameters: {
      readonly query: {
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return SetupIntents for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return SetupIntents associated with the specified payment method. */
        readonly payment_method?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["setup_intent"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a SetupIntent object.</p>
   *
   * <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
   * to collect any required permissions to charge the payment method later.</p>
   */
  readonly PostSetupIntents: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required. */
          readonly confirm?: boolean;
          /**
           * @description ID of the Customer this SetupIntent belongs to, if one exists.
           *
           * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * secret_key_param
           * @description This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
           */
          readonly mandate_data?: {
            /** customer_acceptance_param */
            readonly customer_acceptance: {
              /** Format: unix-time */
              readonly accepted_at?: number;
              /** offline_param */
              readonly offline?: { readonly [key: string]: unknown };
              /** online_param */
              readonly online?: {
                readonly ip_address: string;
                readonly user_agent: string;
              };
              /** @enum {string} */
              readonly type: "offline" | "online";
            };
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description The Stripe account ID for which this SetupIntent is created. */
          readonly on_behalf_of?: string;
          /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this SetupIntent.
           */
          readonly payment_method_options?: {
            /** setup_intent_payment_method_options_param */
            readonly acss_debit?: {
              /** @enum {string} */
              readonly currency?: "cad" | "usd";
              /** setup_intent_payment_method_options_mandate_options_param */
              readonly mandate_options?: {
                readonly custom_mandate_url?: string | "";
                readonly default_for?: readonly ("invoice" | "subscription")[];
                readonly interval_description?: string;
                /** @enum {string} */
                readonly payment_schedule?: "combined" | "interval" | "sporadic";
                /** @enum {string} */
                readonly transaction_type?: "business" | "personal";
              };
              /** @enum {string} */
              readonly verification_method?: "automatic" | "instant" | "microdeposits";
            };
            /** setup_intent_param */
            readonly card?: {
              /** @enum {string} */
              readonly request_three_d_secure?: "any" | "automatic";
            };
            /** setup_intent_payment_method_options_param */
            readonly sepa_debit?: {
              /** payment_method_options_mandate_options_param */
              readonly mandate_options?: { readonly [key: string]: unknown };
            };
          };
          /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to ["card"]. */
          readonly payment_method_types?: readonly string[];
          /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
          readonly return_url?: string;
          /**
           * setup_intent_single_use_params
           * @description If this hash is populated, this SetupIntent will generate a single_use Mandate on success.
           */
          readonly single_use?: {
            readonly amount: number;
            readonly currency: string;
          };
          /**
           * @description Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
           * @enum {string}
           */
          readonly usage?: "off_session" | "on_session";
        };
      };
    };
  };
  /**
   * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
   */
  readonly GetSetupIntentsIntent: {
    readonly parameters: {
      readonly query: {
        /** The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent. */
        readonly client_secret?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates a SetupIntent object.</p> */
  readonly PostSetupIntentsIntent: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * @description ID of the Customer this SetupIntent belongs to, if one exists.
           *
           * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this SetupIntent.
           */
          readonly payment_method_options?: {
            /** setup_intent_payment_method_options_param */
            readonly acss_debit?: {
              /** @enum {string} */
              readonly currency?: "cad" | "usd";
              /** setup_intent_payment_method_options_mandate_options_param */
              readonly mandate_options?: {
                readonly custom_mandate_url?: string | "";
                readonly default_for?: readonly ("invoice" | "subscription")[];
                readonly interval_description?: string;
                /** @enum {string} */
                readonly payment_schedule?: "combined" | "interval" | "sporadic";
                /** @enum {string} */
                readonly transaction_type?: "business" | "personal";
              };
              /** @enum {string} */
              readonly verification_method?: "automatic" | "instant" | "microdeposits";
            };
            /** setup_intent_param */
            readonly card?: {
              /** @enum {string} */
              readonly request_three_d_secure?: "any" | "automatic";
            };
            /** setup_intent_payment_method_options_param */
            readonly sepa_debit?: {
              /** payment_method_options_mandate_options_param */
              readonly mandate_options?: { readonly [key: string]: unknown };
            };
          };
          /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to ["card"]. */
          readonly payment_method_types?: readonly string[];
        };
      };
    };
  };
  /**
   * <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
   *
   * <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
   */
  readonly PostSetupIntentsIntentCancel: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * @description Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate`
           * @enum {string}
           */
          readonly cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /**
   * <p>Confirm that your customer intends to set up the current or
   * provided payment method. For example, you would confirm a SetupIntent
   * when a customer hits the “Save” button on a payment method management
   * page on your website.</p>
   *
   * <p>If the selected payment method does not require any additional
   * steps from the customer, the SetupIntent will transition to the
   * <code>succeeded</code> status.</p>
   *
   * <p>Otherwise, it will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If setup fails,
   * the SetupIntent will transition to the
   * <code>requires_payment_method</code> status.</p>
   */
  readonly PostSetupIntentsIntentConfirm: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The client secret of the SetupIntent. */
          readonly client_secret?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description This hash contains details about the Mandate to create */
          readonly mandate_data?:
            | {
                /** customer_acceptance_param */
                readonly customer_acceptance: {
                  /** Format: unix-time */
                  readonly accepted_at?: number;
                  /** offline_param */
                  readonly offline?: { readonly [key: string]: unknown };
                  /** online_param */
                  readonly online?: {
                    readonly ip_address: string;
                    readonly user_agent: string;
                  };
                  /** @enum {string} */
                  readonly type: "offline" | "online";
                };
              }
            | {
                /** customer_acceptance_param */
                readonly customer_acceptance: {
                  /** online_param */
                  readonly online: {
                    readonly ip_address?: string;
                    readonly user_agent?: string;
                  };
                  /** @enum {string} */
                  readonly type: "online";
                };
              };
          /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this SetupIntent.
           */
          readonly payment_method_options?: {
            /** setup_intent_payment_method_options_param */
            readonly acss_debit?: {
              /** @enum {string} */
              readonly currency?: "cad" | "usd";
              /** setup_intent_payment_method_options_mandate_options_param */
              readonly mandate_options?: {
                readonly custom_mandate_url?: string | "";
                readonly default_for?: readonly ("invoice" | "subscription")[];
                readonly interval_description?: string;
                /** @enum {string} */
                readonly payment_schedule?: "combined" | "interval" | "sporadic";
                /** @enum {string} */
                readonly transaction_type?: "business" | "personal";
              };
              /** @enum {string} */
              readonly verification_method?: "automatic" | "instant" | "microdeposits";
            };
            /** setup_intent_param */
            readonly card?: {
              /** @enum {string} */
              readonly request_three_d_secure?: "any" | "automatic";
            };
            /** setup_intent_payment_method_options_param */
            readonly sepa_debit?: {
              /** payment_method_options_mandate_options_param */
              readonly mandate_options?: { readonly [key: string]: unknown };
            };
          };
          /**
           * @description The URL to redirect your customer back to after they authenticate on the payment method's app or site.
           * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
           * This parameter is only used for cards and other redirect-based payment methods.
           */
          readonly return_url?: string;
        };
      };
    };
  };
  /** <p>Verifies microdeposits on a SetupIntent object.</p> */
  readonly PostSetupIntentsIntentVerifyMicrodeposits: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["setup_intent"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          readonly amounts?: readonly number[];
          /** @description The client secret of the SetupIntent. */
          readonly client_secret?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of your shipping rates.</p> */
  readonly GetShippingRates: {
    readonly parameters: {
      readonly query: {
        /** Only return shipping rates that are active or inactive. */
        readonly active?: boolean;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return shipping rates for the given currency. */
        readonly currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["shipping_rate"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new shipping rate object.</p> */
  readonly PostShippingRates: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["shipping_rate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * delivery_estimate
           * @description The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
           */
          readonly delivery_estimate?: {
            /** delivery_estimate_bound */
            readonly maximum?: {
              /** @enum {string} */
              readonly unit: "business_day" | "day" | "hour" | "month" | "week";
              readonly value: number;
            };
            /** delivery_estimate_bound */
            readonly minimum?: {
              /** @enum {string} */
              readonly unit: "business_day" | "day" | "hour" | "month" | "week";
              readonly value: number;
            };
          };
          /** @description The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions. */
          readonly display_name: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * fixed_amount
           * @description Describes a fixed amount to charge for shipping. Must be present if type is `fixed_amount`.
           */
          readonly fixed_amount?: {
            readonly amount: number;
            readonly currency: string;
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * @description Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
           * @enum {string}
           */
          readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
          /** @description A [tax code](https://stripe.com/docs/tax/tax-codes) ID. The Shipping tax code is `txcd_92010001`. */
          readonly tax_code?: string;
          /**
           * @description The type of calculation to use on the shipping rate. Can only be `fixed_amount` for now.
           * @enum {string}
           */
          readonly type?: "fixed_amount";
        };
      };
    };
  };
  /** <p>Returns the shipping rate object with the given ID.</p> */
  readonly GetShippingRatesShippingRateToken: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly shipping_rate_token: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["shipping_rate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing shipping rate object.</p> */
  readonly PostShippingRatesShippingRateToken: {
    readonly parameters: {
      readonly path: {
        readonly shipping_rate_token: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["shipping_rate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the shipping rate can be used for new purchases. Defaults to `true`. */
          readonly active?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of scheduled query runs.</p> */
  readonly GetSigmaScheduledQueryRuns: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["scheduled_query_run"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the details of an scheduled query run.</p> */
  readonly GetSigmaScheduledQueryRunsScheduledQueryRun: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly scheduled_query_run: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scheduled_query_run"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p> */
  readonly GetSkus: {
    readonly parameters: {
      readonly query: {
        /** Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products). */
        readonly active?: boolean;
        /** Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `["color", "size"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`. */
        readonly attributes?: { readonly [key: string]: string };
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Only return SKUs with the given IDs. */
        readonly ids?: readonly string[];
        /** Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned. */
        readonly in_stock?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The ID of the product whose SKUs will be retrieved. Must be a product with type `good`. */
        readonly product?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["sku"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new SKU associated with a product.</p> */
  readonly PostSkus: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["sku"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether the SKU is available for purchase. Default to `true`. */
          readonly active?: boolean;
          /** @description A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
          readonly attributes?: { readonly [key: string]: string };
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated. */
          readonly id?: string;
          /** @description The URL of an image for this SKU, meant to be displayable to the customer. */
          readonly image?: string;
          /**
           * inventory_create_specs
           * @description Description of the SKU's inventory.
           */
          readonly inventory: {
            readonly quantity?: number;
            /** @enum {string} */
            readonly type: "bucket" | "finite" | "infinite";
            /** @enum {string} */
            readonly value?: "" | "in_stock" | "limited" | "out_of_stock";
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * package_dimensions_specs
           * @description The dimensions of this SKU for shipping purposes.
           */
          readonly package_dimensions?: {
            readonly height: number;
            readonly length: number;
            readonly weight: number;
            readonly width: number;
          };
          /** @description The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
          readonly price: number;
          /** @description The ID of the product this SKU is associated with. Must be a product with type `good`. */
          readonly product: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p> */
  readonly GetSkusId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["sku"] | components["schemas"]["deleted_sku"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
   */
  readonly PostSkusId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["sku"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Whether this SKU is available for purchase. */
          readonly active?: boolean;
          /** @description A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product. */
          readonly attributes?: { readonly [key: string]: string };
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The URL of an image for this SKU, meant to be displayable to the customer. */
          readonly image?: string;
          /**
           * inventory_update_specs
           * @description Description of the SKU's inventory.
           */
          readonly inventory?: {
            readonly quantity?: number;
            /** @enum {string} */
            readonly type?: "bucket" | "finite" | "infinite";
            /** @enum {string} */
            readonly value?: "" | "in_stock" | "limited" | "out_of_stock";
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The dimensions of this SKU for shipping purposes. */
          readonly package_dimensions?:
            | {
                readonly height: number;
                readonly length: number;
                readonly weight: number;
                readonly width: number;
              }
            | "";
          /** @description The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
          readonly price?: number;
          /** @description The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`. */
          readonly product?: string;
        };
      };
    };
  };
  /** <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p> */
  readonly DeleteSkusId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_sku"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new source object.</p> */
  readonly PostSources: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land. */
          readonly amount?: number;
          /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. */
          readonly currency?: string;
          /** @description The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`). */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
           * @enum {string}
           */
          readonly flow?: "code_verification" | "none" | "receiver" | "redirect";
          /**
           * mandate_params
           * @description Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
           */
          readonly mandate?: {
            /** mandate_acceptance_params */
            readonly acceptance?: {
              /** Format: unix-time */
              readonly date?: number;
              readonly ip?: string;
              /** mandate_offline_acceptance_params */
              readonly offline?: {
                readonly contact_email: string;
              };
              /** mandate_online_acceptance_params */
              readonly online?: {
                /** Format: unix-time */
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
              /** @enum {string} */
              readonly status: "accepted" | "pending" | "refused" | "revoked";
              /** @enum {string} */
              readonly type?: "offline" | "online";
              readonly user_agent?: string;
            };
            readonly amount?: number | "";
            readonly currency?: string;
            /** @enum {string} */
            readonly interval?: "one_time" | "scheduled" | "variable";
            /** @enum {string} */
            readonly notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
          };
          readonly metadata?: { readonly [key: string]: string };
          /** @description The source to share. */
          readonly original_source?: string;
          /**
           * owner
           * @description Information about the owner of the payment instrument that may be used or required by particular source types.
           */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
          /**
           * receiver_params
           * @description Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
           */
          readonly receiver?: {
            /** @enum {string} */
            readonly refund_attributes_method?: "email" | "manual" | "none";
          };
          /**
           * redirect_params
           * @description Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
           */
          readonly redirect?: {
            readonly return_url: string;
          };
          /**
           * shallow_order_specs
           * @description Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
           */
          readonly source_order?: {
            readonly items?: readonly {
              readonly amount?: number;
              readonly currency?: string;
              readonly description?: string;
              readonly parent?: string;
              readonly quantity?: number;
              /** @enum {string} */
              readonly type?: "discount" | "shipping" | "sku" | "tax";
            }[];
            /** order_shipping */
            readonly shipping?: {
              /** address */
              readonly address: {
                readonly city?: string;
                readonly country?: string;
                readonly line1: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              readonly carrier?: string;
              readonly name?: string;
              readonly phone?: string;
              readonly tracking_number?: string;
            };
          };
          /** @description An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all. */
          readonly statement_descriptor?: string;
          /** @description An optional token used to create the source. When passed, token properties will override source parameters. */
          readonly token?: string;
          /** @description The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide) */
          readonly type?: string;
          /** @enum {string} */
          readonly usage?: "reusable" | "single_use";
        };
      };
    };
  };
  /** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p> */
  readonly GetSourcesSource: {
    readonly parameters: {
      readonly query: {
        /** The client secret of the source. Required if a publishable key is used to retrieve the source. */
        readonly client_secret?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
   */
  readonly PostSourcesSource: {
    readonly parameters: {
      readonly path: {
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Amount associated with the source. */
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * mandate_params
           * @description Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
           */
          readonly mandate?: {
            /** mandate_acceptance_params */
            readonly acceptance?: {
              /** Format: unix-time */
              readonly date?: number;
              readonly ip?: string;
              /** mandate_offline_acceptance_params */
              readonly offline?: {
                readonly contact_email: string;
              };
              /** mandate_online_acceptance_params */
              readonly online?: {
                /** Format: unix-time */
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
              /** @enum {string} */
              readonly status: "accepted" | "pending" | "refused" | "revoked";
              /** @enum {string} */
              readonly type?: "offline" | "online";
              readonly user_agent?: string;
            };
            readonly amount?: number | "";
            readonly currency?: string;
            /** @enum {string} */
            readonly interval?: "one_time" | "scheduled" | "variable";
            /** @enum {string} */
            readonly notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
          };
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /**
           * owner
           * @description Information about the owner of the payment instrument that may be used or required by particular source types.
           */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
          /**
           * order_params
           * @description Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
           */
          readonly source_order?: {
            readonly items?: readonly {
              readonly amount?: number;
              readonly currency?: string;
              readonly description?: string;
              readonly parent?: string;
              readonly quantity?: number;
              /** @enum {string} */
              readonly type?: "discount" | "shipping" | "sku" | "tax";
            }[];
            /** order_shipping */
            readonly shipping?: {
              /** address */
              readonly address: {
                readonly city?: string;
                readonly country?: string;
                readonly line1: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              readonly carrier?: string;
              readonly name?: string;
              readonly phone?: string;
              readonly tracking_number?: string;
            };
          };
        };
      };
    };
  };
  /** <p>Retrieves a new Source MandateNotification.</p> */
  readonly GetSourcesSourceMandateNotificationsMandateNotification: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly mandate_notification: string;
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["source_mandate_notification"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>List source transactions for a given source.</p> */
  readonly GetSourcesSourceSourceTransactions: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["source_transaction"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p> */
  readonly GetSourcesSourceSourceTransactionsSourceTransaction: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly source: string;
        readonly source_transaction: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["source_transaction"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Verify a given source.</p> */
  readonly PostSourcesSourceVerify: {
    readonly parameters: {
      readonly path: {
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["source"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The values needed to verify the source. */
          readonly values: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of your subscription items for a given subscription.</p> */
  readonly GetSubscriptionItems: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The ID of the subscription whose items will be retrieved. */
        readonly subscription: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["subscription_item"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p> */
  readonly PostSubscriptionItems: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_item"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?:
            | {
                readonly usage_gte: number;
              }
            | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?:
            | "allow_incomplete"
            | "default_incomplete"
            | "error_if_incomplete"
            | "pending_if_incomplete";
          /** @description The ID of the price object. */
          readonly price?: string;
          /**
           * recurring_price_data
           * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
           */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** recurring_adhoc */
            readonly recurring: {
              /** @enum {string} */
              readonly interval: "day" | "month" | "week" | "year";
              readonly interval_count?: number;
            };
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /**
           * Format: unix-time
           * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
           */
          readonly proration_date?: number;
          /** @description The quantity you'd like to apply to the subscription item you're creating. */
          readonly quantity?: number;
          /** @description The identifier of the subscription to modify. */
          readonly subscription: string;
          /** @description A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
          readonly tax_rates?: readonly string[] | "";
        };
      };
    };
  };
  /** <p>Retrieves the subscription item with the given ID.</p> */
  readonly GetSubscriptionItemsItem: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_item"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the plan or quantity of an item on a current subscription.</p> */
  readonly PostSubscriptionItemsItem: {
    readonly parameters: {
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_item"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?:
            | {
                readonly usage_gte: number;
              }
            | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?:
            | "allow_incomplete"
            | "default_incomplete"
            | "error_if_incomplete"
            | "pending_if_incomplete";
          /** @description The ID of the price object. When changing a subscription item's price, `quantity` is set to 1 unless a `quantity` parameter is provided. */
          readonly price?: string;
          /**
           * recurring_price_data
           * @description Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
           */
          readonly price_data?: {
            readonly currency: string;
            readonly product: string;
            /** recurring_adhoc */
            readonly recurring: {
              /** @enum {string} */
              readonly interval: "day" | "month" | "week" | "year";
              readonly interval_count?: number;
            };
            /** @enum {string} */
            readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
            readonly unit_amount?: number;
            /** Format: decimal */
            readonly unit_amount_decimal?: string;
          };
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /**
           * Format: unix-time
           * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
           */
          readonly proration_date?: number;
          /** @description The quantity you'd like to apply to the subscription item you're creating. */
          readonly quantity?: number;
          /** @description A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
          readonly tax_rates?: readonly string[] | "";
        };
      };
    };
  };
  /** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p> */
  readonly DeleteSubscriptionItemsItem: {
    readonly parameters: {
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_subscription_item"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`. */
          readonly clear_usage?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /**
           * Format: unix-time
           * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint.
           */
          readonly proration_date?: number;
        };
      };
    };
  };
  /**
   * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the month of September).</p>
   *
   * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
   */
  readonly GetSubscriptionItemsSubscriptionItemUsageRecordSummaries: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly subscription_item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["usage_record_summary"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
   *
   * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
   *
   * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
   *
   * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
   */
  readonly PostSubscriptionItemsSubscriptionItemUsageRecords: {
    readonly parameters: {
      readonly path: {
        readonly subscription_item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["usage_record"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * @description Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.
           * @enum {string}
           */
          readonly action?: "increment" | "set";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The usage quantity for the specified timestamp. */
          readonly quantity: number;
          /** @description The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`, and must not be in the future. When passing `"now"`, Stripe records usage for the current time. Default is `"now"` if a value is not provided. */
          readonly timestamp?: "now" | number;
        };
      };
    };
  };
  /** <p>Retrieves the list of your subscription schedules.</p> */
  readonly GetSubscriptionSchedules: {
    readonly parameters: {
      readonly query: {
        /** Only return subscription schedules that were created canceled the given date interval. */
        readonly canceled_at?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return subscription schedules that completed during the given date interval. */
        readonly completed_at?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return subscription schedules that were created during the given date interval. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return subscription schedules for the given customer. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return subscription schedules that were released during the given date interval. */
        readonly released_at?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return subscription schedules that have not started yet. */
        readonly scheduled?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["subscription_schedule"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p> */
  readonly PostSubscriptionSchedules: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description The identifier of the customer to create the subscription schedule for. */
          readonly customer?: string;
          /**
           * default_settings_params
           * @description Object representing the subscription schedule's default settings.
           */
          readonly default_settings?: {
            readonly application_fee_percent?: number;
            /** automatic_tax_config */
            readonly automatic_tax?: {
              readonly enabled: boolean;
            };
            /** @enum {string} */
            readonly billing_cycle_anchor?: "automatic" | "phase_start";
            readonly billing_thresholds?:
              | {
                  readonly amount_gte?: number;
                  readonly reset_billing_cycle_anchor?: boolean;
                }
              | "";
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly default_payment_method?: string;
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
            readonly transfer_data?:
              | {
                  readonly amount_percent?: number;
                  readonly destination: string;
                }
              | "";
          };
          /**
           * @description Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
           * @enum {string}
           */
          readonly end_behavior?: "cancel" | "none" | "release" | "renew";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls. */
          readonly from_subscription?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. */
          readonly phases?: readonly {
            readonly add_invoice_items?: readonly {
              readonly price?: string;
              /** one_time_price_data */
              readonly price_data?: {
                readonly currency: string;
                readonly product: string;
                /** @enum {string} */
                readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                readonly unit_amount?: number;
                /** Format: decimal */
                readonly unit_amount_decimal?: string;
              };
              readonly quantity?: number;
              readonly tax_rates?: readonly string[] | "";
            }[];
            readonly application_fee_percent?: number;
            /** automatic_tax_config */
            readonly automatic_tax?: {
              readonly enabled: boolean;
            };
            /** @enum {string} */
            readonly billing_cycle_anchor?: "automatic" | "phase_start";
            readonly billing_thresholds?:
              | {
                  readonly amount_gte?: number;
                  readonly reset_billing_cycle_anchor?: boolean;
                }
              | "";
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly coupon?: string;
            readonly default_payment_method?: string;
            readonly default_tax_rates?: readonly string[] | "";
            /** Format: unix-time */
            readonly end_date?: number;
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
            readonly items: readonly {
              readonly billing_thresholds?:
                | {
                    readonly usage_gte: number;
                  }
                | "";
              readonly price?: string;
              /** recurring_price_data */
              readonly price_data?: {
                readonly currency: string;
                readonly product: string;
                /** recurring_adhoc */
                readonly recurring: {
                  /** @enum {string} */
                  readonly interval: "day" | "month" | "week" | "year";
                  readonly interval_count?: number;
                };
                /** @enum {string} */
                readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                readonly unit_amount?: number;
                /** Format: decimal */
                readonly unit_amount_decimal?: string;
              };
              readonly quantity?: number;
              readonly tax_rates?: readonly string[] | "";
            }[];
            readonly iterations?: number;
            /** @enum {string} */
            readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            /** transfer_data_specs */
            readonly transfer_data?: {
              readonly amount_percent?: number;
              readonly destination: string;
            };
            readonly trial?: boolean;
            /** Format: unix-time */
            readonly trial_end?: number;
          }[];
          /** @description When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on. */
          readonly start_date?: number | "now";
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p> */
  readonly GetSubscriptionSchedulesSchedule: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly schedule: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing subscription schedule.</p> */
  readonly PostSubscriptionSchedulesSchedule: {
    readonly parameters: {
      readonly path: {
        readonly schedule: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * default_settings_params
           * @description Object representing the subscription schedule's default settings.
           */
          readonly default_settings?: {
            readonly application_fee_percent?: number;
            /** automatic_tax_config */
            readonly automatic_tax?: {
              readonly enabled: boolean;
            };
            /** @enum {string} */
            readonly billing_cycle_anchor?: "automatic" | "phase_start";
            readonly billing_thresholds?:
              | {
                  readonly amount_gte?: number;
                  readonly reset_billing_cycle_anchor?: boolean;
                }
              | "";
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly default_payment_method?: string;
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
            readonly transfer_data?:
              | {
                  readonly amount_percent?: number;
                  readonly destination: string;
                }
              | "";
          };
          /**
           * @description Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
           * @enum {string}
           */
          readonly end_behavior?: "cancel" | "none" | "release" | "renew";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted. */
          readonly phases?: readonly {
            readonly add_invoice_items?: readonly {
              readonly price?: string;
              /** one_time_price_data */
              readonly price_data?: {
                readonly currency: string;
                readonly product: string;
                /** @enum {string} */
                readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                readonly unit_amount?: number;
                /** Format: decimal */
                readonly unit_amount_decimal?: string;
              };
              readonly quantity?: number;
              readonly tax_rates?: readonly string[] | "";
            }[];
            readonly application_fee_percent?: number;
            /** automatic_tax_config */
            readonly automatic_tax?: {
              readonly enabled: boolean;
            };
            /** @enum {string} */
            readonly billing_cycle_anchor?: "automatic" | "phase_start";
            readonly billing_thresholds?:
              | {
                  readonly amount_gte?: number;
                  readonly reset_billing_cycle_anchor?: boolean;
                }
              | "";
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly coupon?: string;
            readonly default_payment_method?: string;
            readonly default_tax_rates?: readonly string[] | "";
            readonly end_date?: number | "now";
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
            readonly items: readonly {
              readonly billing_thresholds?:
                | {
                    readonly usage_gte: number;
                  }
                | "";
              readonly price?: string;
              /** recurring_price_data */
              readonly price_data?: {
                readonly currency: string;
                readonly product: string;
                /** recurring_adhoc */
                readonly recurring: {
                  /** @enum {string} */
                  readonly interval: "day" | "month" | "week" | "year";
                  readonly interval_count?: number;
                };
                /** @enum {string} */
                readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
                readonly unit_amount?: number;
                /** Format: decimal */
                readonly unit_amount_decimal?: string;
              };
              readonly quantity?: number;
              readonly tax_rates?: readonly string[] | "";
            }[];
            readonly iterations?: number;
            /** @enum {string} */
            readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            readonly start_date?: number | "now";
            /** transfer_data_specs */
            readonly transfer_data?: {
              readonly amount_percent?: number;
              readonly destination: string;
            };
            readonly trial?: boolean;
            readonly trial_end?: number | "now";
          }[];
          /**
           * @description If the update changes the current phase, indicates if the changes should be prorated. Possible values are `create_prorations` or `none`, and the default value is `create_prorations`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
        };
      };
    };
  };
  /** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p> */
  readonly PostSubscriptionSchedulesScheduleCancel: {
    readonly parameters: {
      readonly path: {
        readonly schedule: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`. */
          readonly invoice_now?: boolean;
          /** @description If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`. */
          readonly prorate?: boolean;
        };
      };
    };
  };
  /** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p> */
  readonly PostSubscriptionSchedulesScheduleRelease: {
    readonly parameters: {
      readonly path: {
        readonly schedule: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription_schedule"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Keep any cancellation on the subscription that the schedule has set */
          readonly preserve_cancel_date?: boolean;
        };
      };
    };
  };
  /** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p> */
  readonly GetSubscriptions: {
    readonly parameters: {
      readonly query: {
        /** The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`. */
        readonly collection_method?: "charge_automatically" | "send_invoice";
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        readonly current_period_end?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        readonly current_period_start?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** The ID of the customer whose subscriptions will be retrieved. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filter for subscriptions that contain this recurring price ID. */
        readonly price?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned. */
        readonly status?:
          | "active"
          | "all"
          | "canceled"
          | "ended"
          | "incomplete"
          | "incomplete_expired"
          | "past_due"
          | "trialing"
          | "unpaid";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["subscription"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled subscriptions.</p> */
  readonly PostSubscriptions: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
          readonly add_invoice_items?: readonly {
            readonly price?: string;
            /** one_time_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /**
           * automatic_tax_config
           * @description Automatic tax settings for this subscription.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * Format: unix-time
           * @description For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor.
           */
          readonly backdate_start_date?: number;
          /**
           * Format: unix-time
           * @description A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices.
           */
          readonly billing_cycle_anchor?: number;
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?:
            | {
                readonly amount_gte?: number;
                readonly reset_billing_cycle_anchor?: boolean;
              }
            | "";
          /**
           * Format: unix-time
           * @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period.
           */
          readonly cancel_at?: number;
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description The identifier of the customer to subscribe. */
          readonly customer: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
          readonly default_tax_rates?: readonly string[] | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 20 subscription items, each with an attached price. */
          readonly items?: readonly {
            readonly billing_thresholds?:
              | {
                  readonly usage_gte: number;
                }
              | "";
            readonly metadata?: { readonly [key: string]: string };
            readonly price?: string;
            /** recurring_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** recurring_adhoc */
              readonly recurring: {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /**
           * @description Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `default_incomplete` to create Subscriptions with `status=incomplete` when the first invoice requires payment, otherwise start as active. Subscriptions transition to `status=active` when successfully confirming the payment intent on the first invoice. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method. If the payment intent is not confirmed within 23 hours subscriptions transition to `status=incomplete_expired`, which is a terminal state.
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           *
           * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
           * @enum {string}
           */
          readonly payment_behavior?:
            | "allow_incomplete"
            | "default_incomplete"
            | "error_if_incomplete"
            | "pending_if_incomplete";
          /**
           * payment_settings
           * @description Payment settings to pass to invoices created by the subscription.
           */
          readonly payment_settings?: {
            /** payment_method_options */
            readonly payment_method_options?: {
              readonly acss_debit?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      /** @enum {string} */
                      readonly transaction_type?: "business" | "personal";
                    };
                    /** @enum {string} */
                    readonly verification_method?: "automatic" | "instant" | "microdeposits";
                  }
                | "";
              readonly bancontact?:
                | {
                    /** @enum {string} */
                    readonly preferred_language?: "de" | "en" | "fr" | "nl";
                  }
                | "";
              readonly card?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      readonly amount?: number;
                      /** @enum {string} */
                      readonly amount_type?: "fixed" | "maximum";
                      readonly description?: string;
                    };
                    /** @enum {string} */
                    readonly request_three_d_secure?: "any" | "automatic";
                  }
                | "";
            };
            readonly payment_method_types?:
              | readonly (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "sepa_debit"
                  | "sofort"
                  | "wechat_pay"
                )[]
              | "";
          };
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?:
            | {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              }
            | "";
          /** @description The API ID of a promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
          readonly promotion_code?: string;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /**
           * transfer_data_specs
           * @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges.
           */
          readonly transfer_data?: {
            readonly amount_percent?: number;
            readonly destination: string;
          };
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_end?: "now" | number;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_from_plan?: boolean;
          /** @description Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_period_days?: number;
        };
      };
    };
  };
  /** <p>Retrieves the subscription with the given ID.</p> */
  readonly GetSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
  readonly PostSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A list of prices and quantities that will generate invoice items appended to the first invoice for this subscription. You may pass up to 20 items. */
          readonly add_invoice_items?: readonly {
            readonly price?: string;
            /** one_time_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /**
           * automatic_tax_config
           * @description Automatic tax settings for this subscription.
           */
          readonly automatic_tax?: {
            readonly enabled: boolean;
          };
          /**
           * @description Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
           * @enum {string}
           */
          readonly billing_cycle_anchor?: "now" | "unchanged";
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?:
            | {
                readonly amount_gte?: number;
                readonly reset_billing_cycle_anchor?: boolean;
              }
            | "";
          /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          readonly cancel_at?: number | "";
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The ID of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source). */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
          readonly default_tax_rates?: readonly string[] | "";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 20 subscription items, each with an attached price. */
          readonly items?: readonly {
            readonly billing_thresholds?:
              | {
                  readonly usage_gte: number;
                }
              | "";
            readonly clear_usage?: boolean;
            readonly deleted?: boolean;
            readonly id?: string;
            readonly metadata?: { readonly [key: string]: string } | "";
            readonly price?: string;
            /** recurring_price_data */
            readonly price_data?: {
              readonly currency: string;
              readonly product: string;
              /** recurring_adhoc */
              readonly recurring: {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              };
              /** @enum {string} */
              readonly tax_behavior?: "exclusive" | "inclusive" | "unspecified";
              readonly unit_amount?: number;
              /** Format: decimal */
              readonly unit_amount_decimal?: string;
            };
            readonly quantity?: number;
            readonly tax_rates?: readonly string[] | "";
          }[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /** @description If specified, payment collection for this subscription will be paused. */
          readonly pause_collection?:
            | {
                /** @enum {string} */
                readonly behavior: "keep_as_draft" | "mark_uncollectible" | "void";
                /** Format: unix-time */
                readonly resumes_at?: number;
              }
            | "";
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `default_incomplete` to transition the subscription to `status=past_due` when payment is required and await explicit confirmation of the invoice's payment intent. This allows simpler management of scenarios where additional user actions are needed to pay a subscription’s invoice. Such as failed payments, [SCA regulation](https://stripe.com/docs/billing/migration/strong-customer-authentication), or collecting a mandate for a bank debit payment method.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not update the subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?:
            | "allow_incomplete"
            | "default_incomplete"
            | "error_if_incomplete"
            | "pending_if_incomplete";
          /**
           * payment_settings
           * @description Payment settings to pass to invoices created by the subscription.
           */
          readonly payment_settings?: {
            /** payment_method_options */
            readonly payment_method_options?: {
              readonly acss_debit?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      /** @enum {string} */
                      readonly transaction_type?: "business" | "personal";
                    };
                    /** @enum {string} */
                    readonly verification_method?: "automatic" | "instant" | "microdeposits";
                  }
                | "";
              readonly bancontact?:
                | {
                    /** @enum {string} */
                    readonly preferred_language?: "de" | "en" | "fr" | "nl";
                  }
                | "";
              readonly card?:
                | {
                    /** mandate_options_param */
                    readonly mandate_options?: {
                      readonly amount?: number;
                      /** @enum {string} */
                      readonly amount_type?: "fixed" | "maximum";
                      readonly description?: string;
                    };
                    /** @enum {string} */
                    readonly request_three_d_secure?: "any" | "automatic";
                  }
                | "";
            };
            readonly payment_method_types?:
              | readonly (
                  | "ach_credit_transfer"
                  | "ach_debit"
                  | "acss_debit"
                  | "au_becs_debit"
                  | "bacs_debit"
                  | "bancontact"
                  | "boleto"
                  | "card"
                  | "fpx"
                  | "giropay"
                  | "grabpay"
                  | "ideal"
                  | "sepa_debit"
                  | "sofort"
                  | "wechat_pay"
                )[]
              | "";
          };
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?:
            | {
                /** @enum {string} */
                readonly interval: "day" | "month" | "week" | "year";
                readonly interval_count?: number;
              }
            | "";
          /** @description The promotion code to apply to this subscription. A promotion code applied to a subscription will only affect invoices created for that particular subscription. */
          readonly promotion_code?: string;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /**
           * Format: unix-time
           * @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations.
           */
          readonly proration_date?: number;
          /** @description If specified, the funds from the subscription's invoices will be transferred to the destination and the ID of the resulting transfers will be found on the resulting charges. This will be unset if you POST an empty value. */
          readonly transfer_data?:
            | {
                readonly amount_percent?: number;
                readonly destination: string;
              }
            | "";
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: "now" | number;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more. */
          readonly trial_from_plan?: boolean;
        };
      };
    };
  };
  /**
   * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   */
  readonly DeleteSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["subscription"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
          readonly invoice_now?: boolean;
          /** @description Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
          readonly prorate?: boolean;
        };
      };
    };
  };
  /** <p>Removes the currently applied discount on a subscription.</p> */
  readonly DeleteSubscriptionsSubscriptionExposedIdDiscount: {
    readonly parameters: {
      readonly path: {
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_discount"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>A list of <a href="https://stripe.com/docs/tax/tax-codes">all tax codes available</a> to add to Products in order to allow specific tax calculations.</p> */
  readonly GetTaxCodes: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["tax_code"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding tax code information.</p> */
  readonly GetTaxCodesId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["tax_code"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p> */
  readonly GetTaxRates: {
    readonly parameters: {
      readonly query: {
        /** Optional flag to filter by tax rates that are either active or inactive (archived). */
        readonly active?: boolean;
        /** Optional range for filtering created date. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** Optional flag to filter by tax rates that are inclusive (or those that are not inclusive). */
        readonly inclusive?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["tax_rate"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new tax rate.</p> */
  readonly PostTaxRates: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["tax_rate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
          readonly active?: boolean;
          /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
          readonly country?: string;
          /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
          readonly description?: string;
          /** @description The display name of the tax rate, which will be shown to users. */
          readonly display_name: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description This specifies if the tax rate is inclusive or exclusive. */
          readonly inclusive: boolean;
          /** @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
          readonly jurisdiction?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description This represents the tax rate percent out of 100. */
          readonly percentage: number;
          /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
          readonly state?: string;
          /**
           * @description The high-level tax type, such as `vat` or `sales_tax`.
           * @enum {string}
           */
          readonly tax_type?: "gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
        };
      };
    };
  };
  /** <p>Retrieves a tax rate with the given ID</p> */
  readonly GetTaxRatesTaxRate: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly tax_rate: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["tax_rate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates an existing tax rate.</p> */
  readonly PostTaxRatesTaxRate: {
    readonly parameters: {
      readonly path: {
        readonly tax_rate: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["tax_rate"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set. */
          readonly active?: boolean;
          /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
          readonly country?: string;
          /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
          readonly description?: string;
          /** @description The display name of the tax rate, which will be shown to users. */
          readonly display_name?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice. */
          readonly jurisdiction?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, "NY" for New York, United States. */
          readonly state?: string;
          /**
           * @description The high-level tax type, such as `vat` or `sales_tax`.
           * @enum {string}
           */
          readonly tax_type?: "gst" | "hst" | "jct" | "pst" | "qst" | "rst" | "sales_tax" | "vat";
        };
      };
    };
  };
  /** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p> */
  readonly PostTerminalConnectionTokens: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["terminal.connection_token"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://stripe.com/docs/terminal/fleet/locations#connection-tokens). */
          readonly location?: string;
        };
      };
    };
  };
  /** <p>Returns a list of <code>Location</code> objects.</p> */
  readonly GetTerminalLocations: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["terminal.location"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a new <code>Location</code> object.
   * For further details, including which address fields are required in each country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
   */
  readonly PostTerminalLocations: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["terminal.location"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * create_location_address_param
           * @description The full address of the location.
           */
          readonly address: {
            readonly city?: string;
            readonly country: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /** @description A name for the location. */
          readonly display_name: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Retrieves a <code>Location</code> object.</p> */
  readonly GetTerminalLocationsLocation: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly location: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["terminal.location"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostTerminalLocationsLocation: {
    readonly parameters: {
      readonly path: {
        readonly location: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["terminal.location"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * optional_fields_address
           * @description The full address of the location.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /** @description A name for the location. */
          readonly display_name?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Deletes a <code>Location</code> object.</p> */
  readonly DeleteTerminalLocationsLocation: {
    readonly parameters: {
      readonly path: {
        readonly location: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_terminal.location"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of <code>Reader</code> objects.</p> */
  readonly GetTerminalReaders: {
    readonly parameters: {
      readonly query: {
        /** Filters readers by device type */
        readonly device_type?: "bbpos_chipper2x" | "bbpos_wisepos_e" | "verifone_P400";
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A location ID to filter the response list to only readers at the specific location */
        readonly location?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** A status filter to filter readers to only offline or online readers */
        readonly status?: "offline" | "online";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description A list of readers */
            readonly data: readonly components["schemas"]["terminal.reader"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Creates a new <code>Reader</code> object.</p> */
  readonly PostTerminalReaders: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["terminal.reader"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Custom label given to the reader for easier identification. If no label is specified, the registration code will be used. */
          readonly label?: string;
          /** @description The location to assign the reader to. */
          readonly location?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description A code generated by the reader used for registering to an account. */
          readonly registration_code: string;
        };
      };
    };
  };
  /** <p>Retrieves a <code>Reader</code> object.</p> */
  readonly GetTerminalReadersReader: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly reader: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["terminal.reader"]
            | components["schemas"]["deleted_terminal.reader"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostTerminalReadersReader: {
    readonly parameters: {
      readonly path: {
        readonly reader: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["terminal.reader"]
            | components["schemas"]["deleted_terminal.reader"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The new label of the reader. */
          readonly label?: string;
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Deletes a <code>Reader</code> object.</p> */
  readonly DeleteTerminalReadersReader: {
    readonly parameters: {
      readonly path: {
        readonly reader: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_terminal.reader"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Creates a single-use token that represents a bank account’s details.
   * This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
   */
  readonly PostTokens: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["token"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * connect_js_account_token_specs
           * @description Information for the account this token will represent.
           */
          readonly account?: {
            /** @enum {string} */
            readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
            /** connect_js_account_token_company_specs */
            readonly company?: {
              /** address_specs */
              readonly address?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              /** japan_address_kana_specs */
              readonly address_kana?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              /** japan_address_kanji_specs */
              readonly address_kanji?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              readonly directors_provided?: boolean;
              readonly executives_provided?: boolean;
              readonly name?: string;
              readonly name_kana?: string;
              readonly name_kanji?: string;
              readonly owners_provided?: boolean;
              /** company_ownership_declaration */
              readonly ownership_declaration?: {
                /** Format: unix-time */
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
              readonly ownership_declaration_shown_and_signed?: boolean;
              readonly phone?: string;
              readonly registration_number?: string;
              /** @enum {string} */
              readonly structure?:
                | ""
                | "free_zone_establishment"
                | "free_zone_llc"
                | "government_instrumentality"
                | "governmental_unit"
                | "incorporated_non_profit"
                | "limited_liability_partnership"
                | "llc"
                | "multi_member_llc"
                | "private_company"
                | "private_corporation"
                | "private_partnership"
                | "public_company"
                | "public_corporation"
                | "public_partnership"
                | "single_member_llc"
                | "sole_establishment"
                | "sole_proprietorship"
                | "tax_exempt_government_instrumentality"
                | "unincorporated_association"
                | "unincorporated_non_profit";
              readonly tax_id?: string;
              readonly tax_id_registrar?: string;
              readonly vat_id?: string;
              /** verification_specs */
              readonly verification?: {
                /** verification_document_specs */
                readonly document?: {
                  readonly back?: string;
                  readonly front?: string;
                };
              };
            };
            /** individual_specs */
            readonly individual?: {
              /** address_specs */
              readonly address?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              /** japan_address_kana_specs */
              readonly address_kana?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              /** japan_address_kanji_specs */
              readonly address_kanji?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              readonly dob?:
                | {
                    readonly day: number;
                    readonly month: number;
                    readonly year: number;
                  }
                | "";
              readonly email?: string;
              readonly first_name?: string;
              readonly first_name_kana?: string;
              readonly first_name_kanji?: string;
              readonly full_name_aliases?: readonly string[] | "";
              readonly gender?: string;
              readonly id_number?: string;
              readonly last_name?: string;
              readonly last_name_kana?: string;
              readonly last_name_kanji?: string;
              readonly maiden_name?: string;
              readonly metadata?: { readonly [key: string]: string } | "";
              readonly phone?: string;
              /** @enum {string} */
              readonly political_exposure?: "existing" | "none";
              readonly ssn_last_4?: string;
              /** person_verification_specs */
              readonly verification?: {
                /** person_verification_document_specs */
                readonly additional_document?: {
                  readonly back?: string;
                  readonly front?: string;
                };
                /** person_verification_document_specs */
                readonly document?: {
                  readonly back?: string;
                  readonly front?: string;
                };
              };
            };
            readonly tos_shown_and_accepted?: boolean;
          };
          /**
           * token_create_bank_account
           * @description The bank account this token will represent.
           */
          readonly bank_account?: {
            readonly account_holder_name?: string;
            /** @enum {string} */
            readonly account_holder_type?: "company" | "individual";
            readonly account_number: string;
            /** @enum {string} */
            readonly account_type?: "checking" | "futsu" | "savings" | "toza";
            readonly country: string;
            readonly currency?: string;
            readonly routing_number?: string;
          };
          readonly card?:
            | {
                readonly address_city?: string;
                readonly address_country?: string;
                readonly address_line1?: string;
                readonly address_line2?: string;
                readonly address_state?: string;
                readonly address_zip?: string;
                readonly currency?: string;
                readonly cvc?: string;
                readonly exp_month: string;
                readonly exp_year: string;
                readonly name?: string;
                readonly number: string;
              }
            | string;
          /** @description The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods). */
          readonly customer?: string;
          /**
           * cvc_params
           * @description The updated CVC value this token will represent.
           */
          readonly cvc_update?: {
            readonly cvc: string;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * person_token_specs
           * @description Information for the person this token will represent.
           */
          readonly person?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?:
              | {
                  readonly day: number;
                  readonly month: number;
                  readonly year: number;
                }
              | "";
            /** person_documents_specs */
            readonly documents?: {
              /** documents_param */
              readonly company_authorization?: {
                readonly files?: readonly string[];
              };
              /** documents_param */
              readonly passport?: {
                readonly files?: readonly string[];
              };
              /** documents_param */
              readonly visa?: {
                readonly files?: readonly string[];
              };
            };
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly full_name_aliases?: readonly string[] | "";
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: { readonly [key: string]: string } | "";
            readonly nationality?: string;
            readonly phone?: string;
            readonly political_exposure?: string;
            /** relationship_specs */
            readonly relationship?: {
              readonly director?: boolean;
              readonly executive?: boolean;
              readonly owner?: boolean;
              readonly percent_ownership?: number | "";
              readonly representative?: boolean;
              readonly title?: string;
            };
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /**
           * pii_token_specs
           * @description The PII this token will represent.
           */
          readonly pii?: {
            readonly id_number?: string;
          };
        };
      };
    };
  };
  /** <p>Retrieves the token with the given ID.</p> */
  readonly GetTokensToken: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly token: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["token"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Returns a list of top-ups.</p> */
  readonly GetTopups: {
    readonly parameters: {
      readonly query: {
        /** A positive integer representing how much to transfer. */
        readonly amount?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`. */
        readonly status?: "canceled" | "failed" | "pending" | "succeeded";
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["topup"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Top up the balance of an account</p> */
  readonly PostTopups: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A positive integer representing how much to transfer. */
          readonly amount: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)). */
          readonly source?: string;
          /** @description Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters. */
          readonly statement_descriptor?: string;
          /** @description A string that identifies this top-up as part of a group. */
          readonly transfer_group?: string;
        };
      };
    };
  };
  /** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p> */
  readonly GetTopupsTopup: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly topup: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p> */
  readonly PostTopupsTopup: {
    readonly parameters: {
      readonly path: {
        readonly topup: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Cancels a top-up. Only pending top-ups can be canceled.</p> */
  readonly PostTopupsTopupCancel: {
    readonly parameters: {
      readonly path: {
        readonly topup: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["topup"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
  };
  /** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p> */
  readonly GetTransfers: {
    readonly parameters: {
      readonly query: {
        readonly created?:
          | {
              readonly gt?: number;
              readonly gte?: number;
              readonly lt?: number;
              readonly lte?: number;
            }
          | number;
        /** Only return transfers for the destination specified by this account ID. */
        readonly destination?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return transfers with the specified transfer group. */
        readonly transfer_group?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["transfer"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p> */
  readonly PostTransfers: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["transfer"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A positive integer in %s representing how much to transfer. */
          readonly amount?: number;
          /** @description 3-letter [ISO code for currency](https://stripe.com/docs/payouts). */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description The ID of a connected Stripe account. <a href="/docs/connect/charges-transfers">See the Connect documentation</a> for details. */
          readonly destination: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string };
          /** @description You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-availability) for details. */
          readonly source_transaction?: string;
          /**
           * @description The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`.
           * @enum {string}
           */
          readonly source_type?: "bank_account" | "card" | "fpx";
          /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          readonly transfer_group?: string;
        };
      };
    };
  };
  /** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p> */
  readonly GetTransfersIdReversals: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** @description Details about each object. */
            readonly data: readonly components["schemas"]["transfer_reversal"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
   *
   * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
   *
   * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
   */
  readonly PostTransfersIdReversals: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["transfer_reversal"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description A positive integer in %s representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount. */
          readonly amount?: number;
          /** @description An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed. */
          readonly refund_application_fee?: boolean;
        };
      };
    };
  };
  /** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p> */
  readonly GetTransfersTransfer: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly transfer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["transfer"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts only metadata as an argument.</p>
   */
  readonly PostTransfersTransfer: {
    readonly parameters: {
      readonly path: {
        readonly transfer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["transfer"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p> */
  readonly GetTransfersTransferReversalsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly id: string;
        readonly transfer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["transfer_reversal"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /**
   * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata and description as arguments.</p>
   */
  readonly PostTransfersTransferReversalsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
        readonly transfer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["transfer_reversal"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
        };
      };
    };
  };
  /** <p>Returns a list of your webhook endpoints.</p> */
  readonly GetWebhookEndpoints: {
    readonly parameters: {
      readonly query: {
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly data: readonly components["schemas"]["webhook_endpoint"][];
            /** @description True if this list has another page of items after this one that can be fetched. */
            readonly has_more: boolean;
            /**
             * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
             * @enum {string}
             */
            readonly object: "list";
            /** @description The URL where this list can be accessed. */
            readonly url: string;
          };
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p> */
  readonly PostWebhookEndpoints: {
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook_endpoint"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /**
           * @description Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version.
           * @enum {string}
           */
          readonly api_version?:
            | "2011-01-01"
            | "2011-06-21"
            | "2011-06-28"
            | "2011-08-01"
            | "2011-09-15"
            | "2011-11-17"
            | "2012-02-23"
            | "2012-03-25"
            | "2012-06-18"
            | "2012-06-28"
            | "2012-07-09"
            | "2012-09-24"
            | "2012-10-26"
            | "2012-11-07"
            | "2013-02-11"
            | "2013-02-13"
            | "2013-07-05"
            | "2013-08-12"
            | "2013-08-13"
            | "2013-10-29"
            | "2013-12-03"
            | "2014-01-31"
            | "2014-03-13"
            | "2014-03-28"
            | "2014-05-19"
            | "2014-06-13"
            | "2014-06-17"
            | "2014-07-22"
            | "2014-07-26"
            | "2014-08-04"
            | "2014-08-20"
            | "2014-09-08"
            | "2014-10-07"
            | "2014-11-05"
            | "2014-11-20"
            | "2014-12-08"
            | "2014-12-17"
            | "2014-12-22"
            | "2015-01-11"
            | "2015-01-26"
            | "2015-02-10"
            | "2015-02-16"
            | "2015-02-18"
            | "2015-03-24"
            | "2015-04-07"
            | "2015-06-15"
            | "2015-07-07"
            | "2015-07-13"
            | "2015-07-28"
            | "2015-08-07"
            | "2015-08-19"
            | "2015-09-03"
            | "2015-09-08"
            | "2015-09-23"
            | "2015-10-01"
            | "2015-10-12"
            | "2015-10-16"
            | "2016-02-03"
            | "2016-02-19"
            | "2016-02-22"
            | "2016-02-23"
            | "2016-02-29"
            | "2016-03-07"
            | "2016-06-15"
            | "2016-07-06"
            | "2016-10-19"
            | "2017-01-27"
            | "2017-02-14"
            | "2017-04-06"
            | "2017-05-25"
            | "2017-06-05"
            | "2017-08-15"
            | "2017-12-14"
            | "2018-01-23"
            | "2018-02-05"
            | "2018-02-06"
            | "2018-02-28"
            | "2018-05-21"
            | "2018-07-27"
            | "2018-08-23"
            | "2018-09-06"
            | "2018-09-24"
            | "2018-10-31"
            | "2018-11-08"
            | "2019-02-11"
            | "2019-02-19"
            | "2019-03-14"
            | "2019-05-16"
            | "2019-08-14"
            | "2019-09-09"
            | "2019-10-08"
            | "2019-10-17"
            | "2019-11-05"
            | "2019-12-03"
            | "2020-03-02"
            | "2020-08-27";
          /** @description Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`. */
          readonly connect?: boolean;
          /** @description An optional description of what the webhook is used for. */
          readonly description?: string;
          /** @description The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
          readonly enabled_events: readonly (
            | "*"
            | "account.application.authorized"
            | "account.application.deauthorized"
            | "account.external_account.created"
            | "account.external_account.deleted"
            | "account.external_account.updated"
            | "account.updated"
            | "application_fee.created"
            | "application_fee.refund.updated"
            | "application_fee.refunded"
            | "balance.available"
            | "billing_portal.configuration.created"
            | "billing_portal.configuration.updated"
            | "capability.updated"
            | "charge.captured"
            | "charge.dispute.closed"
            | "charge.dispute.created"
            | "charge.dispute.funds_reinstated"
            | "charge.dispute.funds_withdrawn"
            | "charge.dispute.updated"
            | "charge.expired"
            | "charge.failed"
            | "charge.pending"
            | "charge.refund.updated"
            | "charge.refunded"
            | "charge.succeeded"
            | "charge.updated"
            | "checkout.session.async_payment_failed"
            | "checkout.session.async_payment_succeeded"
            | "checkout.session.completed"
            | "checkout.session.expired"
            | "coupon.created"
            | "coupon.deleted"
            | "coupon.updated"
            | "credit_note.created"
            | "credit_note.updated"
            | "credit_note.voided"
            | "customer.created"
            | "customer.deleted"
            | "customer.discount.created"
            | "customer.discount.deleted"
            | "customer.discount.updated"
            | "customer.source.created"
            | "customer.source.deleted"
            | "customer.source.expiring"
            | "customer.source.updated"
            | "customer.subscription.created"
            | "customer.subscription.deleted"
            | "customer.subscription.pending_update_applied"
            | "customer.subscription.pending_update_expired"
            | "customer.subscription.trial_will_end"
            | "customer.subscription.updated"
            | "customer.tax_id.created"
            | "customer.tax_id.deleted"
            | "customer.tax_id.updated"
            | "customer.updated"
            | "file.created"
            | "identity.verification_session.canceled"
            | "identity.verification_session.created"
            | "identity.verification_session.processing"
            | "identity.verification_session.redacted"
            | "identity.verification_session.requires_input"
            | "identity.verification_session.verified"
            | "invoice.created"
            | "invoice.deleted"
            | "invoice.finalization_failed"
            | "invoice.finalized"
            | "invoice.marked_uncollectible"
            | "invoice.paid"
            | "invoice.payment_action_required"
            | "invoice.payment_failed"
            | "invoice.payment_succeeded"
            | "invoice.sent"
            | "invoice.upcoming"
            | "invoice.updated"
            | "invoice.voided"
            | "invoiceitem.created"
            | "invoiceitem.deleted"
            | "invoiceitem.updated"
            | "issuing_authorization.created"
            | "issuing_authorization.request"
            | "issuing_authorization.updated"
            | "issuing_card.created"
            | "issuing_card.updated"
            | "issuing_cardholder.created"
            | "issuing_cardholder.updated"
            | "issuing_dispute.closed"
            | "issuing_dispute.created"
            | "issuing_dispute.funds_reinstated"
            | "issuing_dispute.submitted"
            | "issuing_dispute.updated"
            | "issuing_transaction.created"
            | "issuing_transaction.updated"
            | "mandate.updated"
            | "order.created"
            | "order.payment_failed"
            | "order.payment_succeeded"
            | "order.updated"
            | "order_return.created"
            | "payment_intent.amount_capturable_updated"
            | "payment_intent.canceled"
            | "payment_intent.created"
            | "payment_intent.payment_failed"
            | "payment_intent.processing"
            | "payment_intent.requires_action"
            | "payment_intent.succeeded"
            | "payment_link.created"
            | "payment_link.updated"
            | "payment_method.attached"
            | "payment_method.automatically_updated"
            | "payment_method.detached"
            | "payment_method.updated"
            | "payout.canceled"
            | "payout.created"
            | "payout.failed"
            | "payout.paid"
            | "payout.updated"
            | "person.created"
            | "person.deleted"
            | "person.updated"
            | "plan.created"
            | "plan.deleted"
            | "plan.updated"
            | "price.created"
            | "price.deleted"
            | "price.updated"
            | "product.created"
            | "product.deleted"
            | "product.updated"
            | "promotion_code.created"
            | "promotion_code.updated"
            | "quote.accepted"
            | "quote.canceled"
            | "quote.created"
            | "quote.finalized"
            | "radar.early_fraud_warning.created"
            | "radar.early_fraud_warning.updated"
            | "recipient.created"
            | "recipient.deleted"
            | "recipient.updated"
            | "reporting.report_run.failed"
            | "reporting.report_run.succeeded"
            | "reporting.report_type.updated"
            | "review.closed"
            | "review.opened"
            | "setup_intent.canceled"
            | "setup_intent.created"
            | "setup_intent.requires_action"
            | "setup_intent.setup_failed"
            | "setup_intent.succeeded"
            | "sigma.scheduled_query_run.created"
            | "sku.created"
            | "sku.deleted"
            | "sku.updated"
            | "source.canceled"
            | "source.chargeable"
            | "source.failed"
            | "source.mandate_notification"
            | "source.refund_attributes_required"
            | "source.transaction.created"
            | "source.transaction.updated"
            | "subscription_schedule.aborted"
            | "subscription_schedule.canceled"
            | "subscription_schedule.completed"
            | "subscription_schedule.created"
            | "subscription_schedule.expiring"
            | "subscription_schedule.released"
            | "subscription_schedule.updated"
            | "tax_rate.created"
            | "tax_rate.updated"
            | "topup.canceled"
            | "topup.created"
            | "topup.failed"
            | "topup.reversed"
            | "topup.succeeded"
            | "transfer.created"
            | "transfer.failed"
            | "transfer.paid"
            | "transfer.reversed"
            | "transfer.updated"
          )[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The URL of the webhook endpoint. */
          readonly url: string;
        };
      };
    };
  };
  /** <p>Retrieves the webhook endpoint with the given ID.</p> */
  readonly GetWebhookEndpointsWebhookEndpoint: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly string[];
      };
      readonly path: {
        readonly webhook_endpoint: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook_endpoint"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
  /** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p> */
  readonly PostWebhookEndpointsWebhookEndpoint: {
    readonly parameters: {
      readonly path: {
        readonly webhook_endpoint: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook_endpoint"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": {
          /** @description An optional description of what the webhook is used for. */
          readonly description?: string;
          /** @description Disable the webhook endpoint if set to true. */
          readonly disabled?: boolean;
          /** @description The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
          readonly enabled_events?: readonly (
            | "*"
            | "account.application.authorized"
            | "account.application.deauthorized"
            | "account.external_account.created"
            | "account.external_account.deleted"
            | "account.external_account.updated"
            | "account.updated"
            | "application_fee.created"
            | "application_fee.refund.updated"
            | "application_fee.refunded"
            | "balance.available"
            | "billing_portal.configuration.created"
            | "billing_portal.configuration.updated"
            | "capability.updated"
            | "charge.captured"
            | "charge.dispute.closed"
            | "charge.dispute.created"
            | "charge.dispute.funds_reinstated"
            | "charge.dispute.funds_withdrawn"
            | "charge.dispute.updated"
            | "charge.expired"
            | "charge.failed"
            | "charge.pending"
            | "charge.refund.updated"
            | "charge.refunded"
            | "charge.succeeded"
            | "charge.updated"
            | "checkout.session.async_payment_failed"
            | "checkout.session.async_payment_succeeded"
            | "checkout.session.completed"
            | "checkout.session.expired"
            | "coupon.created"
            | "coupon.deleted"
            | "coupon.updated"
            | "credit_note.created"
            | "credit_note.updated"
            | "credit_note.voided"
            | "customer.created"
            | "customer.deleted"
            | "customer.discount.created"
            | "customer.discount.deleted"
            | "customer.discount.updated"
            | "customer.source.created"
            | "customer.source.deleted"
            | "customer.source.expiring"
            | "customer.source.updated"
            | "customer.subscription.created"
            | "customer.subscription.deleted"
            | "customer.subscription.pending_update_applied"
            | "customer.subscription.pending_update_expired"
            | "customer.subscription.trial_will_end"
            | "customer.subscription.updated"
            | "customer.tax_id.created"
            | "customer.tax_id.deleted"
            | "customer.tax_id.updated"
            | "customer.updated"
            | "file.created"
            | "identity.verification_session.canceled"
            | "identity.verification_session.created"
            | "identity.verification_session.processing"
            | "identity.verification_session.redacted"
            | "identity.verification_session.requires_input"
            | "identity.verification_session.verified"
            | "invoice.created"
            | "invoice.deleted"
            | "invoice.finalization_failed"
            | "invoice.finalized"
            | "invoice.marked_uncollectible"
            | "invoice.paid"
            | "invoice.payment_action_required"
            | "invoice.payment_failed"
            | "invoice.payment_succeeded"
            | "invoice.sent"
            | "invoice.upcoming"
            | "invoice.updated"
            | "invoice.voided"
            | "invoiceitem.created"
            | "invoiceitem.deleted"
            | "invoiceitem.updated"
            | "issuing_authorization.created"
            | "issuing_authorization.request"
            | "issuing_authorization.updated"
            | "issuing_card.created"
            | "issuing_card.updated"
            | "issuing_cardholder.created"
            | "issuing_cardholder.updated"
            | "issuing_dispute.closed"
            | "issuing_dispute.created"
            | "issuing_dispute.funds_reinstated"
            | "issuing_dispute.submitted"
            | "issuing_dispute.updated"
            | "issuing_transaction.created"
            | "issuing_transaction.updated"
            | "mandate.updated"
            | "order.created"
            | "order.payment_failed"
            | "order.payment_succeeded"
            | "order.updated"
            | "order_return.created"
            | "payment_intent.amount_capturable_updated"
            | "payment_intent.canceled"
            | "payment_intent.created"
            | "payment_intent.payment_failed"
            | "payment_intent.processing"
            | "payment_intent.requires_action"
            | "payment_intent.succeeded"
            | "payment_link.created"
            | "payment_link.updated"
            | "payment_method.attached"
            | "payment_method.automatically_updated"
            | "payment_method.detached"
            | "payment_method.updated"
            | "payout.canceled"
            | "payout.created"
            | "payout.failed"
            | "payout.paid"
            | "payout.updated"
            | "person.created"
            | "person.deleted"
            | "person.updated"
            | "plan.created"
            | "plan.deleted"
            | "plan.updated"
            | "price.created"
            | "price.deleted"
            | "price.updated"
            | "product.created"
            | "product.deleted"
            | "product.updated"
            | "promotion_code.created"
            | "promotion_code.updated"
            | "quote.accepted"
            | "quote.canceled"
            | "quote.created"
            | "quote.finalized"
            | "radar.early_fraud_warning.created"
            | "radar.early_fraud_warning.updated"
            | "recipient.created"
            | "recipient.deleted"
            | "recipient.updated"
            | "reporting.report_run.failed"
            | "reporting.report_run.succeeded"
            | "reporting.report_type.updated"
            | "review.closed"
            | "review.opened"
            | "setup_intent.canceled"
            | "setup_intent.created"
            | "setup_intent.requires_action"
            | "setup_intent.setup_failed"
            | "setup_intent.succeeded"
            | "sigma.scheduled_query_run.created"
            | "sku.created"
            | "sku.deleted"
            | "sku.updated"
            | "source.canceled"
            | "source.chargeable"
            | "source.failed"
            | "source.mandate_notification"
            | "source.refund_attributes_required"
            | "source.transaction.created"
            | "source.transaction.updated"
            | "subscription_schedule.aborted"
            | "subscription_schedule.canceled"
            | "subscription_schedule.completed"
            | "subscription_schedule.created"
            | "subscription_schedule.expiring"
            | "subscription_schedule.released"
            | "subscription_schedule.updated"
            | "tax_rate.created"
            | "tax_rate.updated"
            | "topup.canceled"
            | "topup.created"
            | "topup.failed"
            | "topup.reversed"
            | "topup.succeeded"
            | "transfer.created"
            | "transfer.failed"
            | "transfer.paid"
            | "transfer.reversed"
            | "transfer.updated"
          )[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: string } | "";
          /** @description The URL of the webhook endpoint. */
          readonly url?: string;
        };
      };
    };
  };
  /** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p> */
  readonly DeleteWebhookEndpointsWebhookEndpoint: {
    readonly parameters: {
      readonly path: {
        readonly webhook_endpoint: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deleted_webhook_endpoint"];
        };
      };
      /** Error response. */
      readonly default: {
        readonly content: {
          readonly "application/json": components["schemas"]["error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/x-www-form-urlencoded": { readonly [key: string]: unknown };
      };
    };
  };
}

export interface external {}
