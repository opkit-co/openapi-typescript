/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/v1/3d_secure": {
    /** <p>Initiate 3D Secure authentication.</p> */
    readonly post: operations["Post3dSecure"];
  };
  readonly "/v1/3d_secure/{three_d_secure}": {
    /** <p>Retrieves a 3D Secure object.</p> */
    readonly get: operations["Get3dSecureThreeDSecure"];
  };
  readonly "/v1/account": {
    /** <p>Retrieves the details of an account.</p> */
    readonly get: operations["GetAccount"];
    /**
     * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
     *
     * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     */
    readonly post: operations["PostAccount"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
     *
     * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
     *
     * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     */
    readonly delete: operations["DeleteAccount"];
  };
  readonly "/v1/account/bank_accounts": {
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountBankAccounts"];
  };
  readonly "/v1/account/bank_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountBankAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountBankAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountBankAccountsId"];
  };
  readonly "/v1/account/capabilities": {
    /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
    readonly get: operations["GetAccountCapabilities"];
  };
  readonly "/v1/account/capabilities/{capability}": {
    /** <p>Retrieves information about the specified Account Capability.</p> */
    readonly get: operations["GetAccountCapabilitiesCapability"];
    /** <p>Updates an existing Account Capability.</p> */
    readonly post: operations["PostAccountCapabilitiesCapability"];
  };
  readonly "/v1/account/external_accounts": {
    /** <p>List external accounts for an account.</p> */
    readonly get: operations["GetAccountExternalAccounts"];
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountExternalAccounts"];
  };
  readonly "/v1/account/external_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountExternalAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountExternalAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountExternalAccountsId"];
  };
  readonly "/v1/account/login_links": {
    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
     *
     * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    readonly post: operations["PostAccountLoginLinks"];
  };
  readonly "/v1/account/logout": {
    /**
     * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
     *
     * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    readonly put: operations["PutAccountLogout"];
  };
  readonly "/v1/account/people": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountPeople"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountPeople"];
  };
  readonly "/v1/account/people/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountPeoplePerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountPeoplePerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountPeoplePerson"];
  };
  readonly "/v1/account/persons": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountPersons"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountPersons"];
  };
  readonly "/v1/account/persons/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountPersonsPerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountPersonsPerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountPersonsPerson"];
  };
  readonly "/v1/account_links": {
    /** <p>Creates an AccountLink object that returns a single-use Stripe URL that the user can redirect their user to in order to take them through the Connect Onboarding flow.</p> */
    readonly post: operations["PostAccountLinks"];
  };
  readonly "/v1/accounts": {
    /** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p> */
    readonly get: operations["GetAccounts"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
     * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
     *
     * <p>For Standard accounts, parameters other than <code>country</code>, <code>email</code>, and <code>type</code>
     * are used to prefill the account application that we ask the account holder to complete.</p>
     */
    readonly post: operations["PostAccounts"];
  };
  readonly "/v1/accounts/{account}": {
    /** <p>Retrieves the details of an account.</p> */
    readonly get: operations["GetAccountsAccount"];
    /**
     * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
     *
     * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
     */
    readonly post: operations["PostAccountsAccount"];
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
     *
     * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
     *
     * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
     */
    readonly delete: operations["DeleteAccountsAccount"];
  };
  readonly "/v1/accounts/{account}/bank_accounts": {
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountsAccountBankAccounts"];
  };
  readonly "/v1/accounts/{account}/bank_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountsAccountBankAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountsAccountBankAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountsAccountBankAccountsId"];
  };
  readonly "/v1/accounts/{account}/capabilities": {
    /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
    readonly get: operations["GetAccountsAccountCapabilities"];
  };
  readonly "/v1/accounts/{account}/capabilities/{capability}": {
    /** <p>Retrieves information about the specified Account Capability.</p> */
    readonly get: operations["GetAccountsAccountCapabilitiesCapability"];
    /** <p>Updates an existing Account Capability.</p> */
    readonly post: operations["PostAccountsAccountCapabilitiesCapability"];
  };
  readonly "/v1/accounts/{account}/external_accounts": {
    /** <p>List external accounts for an account.</p> */
    readonly get: operations["GetAccountsAccountExternalAccounts"];
    /** <p>Create an external account for a given account.</p> */
    readonly post: operations["PostAccountsAccountExternalAccounts"];
  };
  readonly "/v1/accounts/{account}/external_accounts/{id}": {
    /** <p>Retrieve a specified external account for a given account.</p> */
    readonly get: operations["GetAccountsAccountExternalAccountsId"];
    /**
     * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
     * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
     */
    readonly post: operations["PostAccountsAccountExternalAccountsId"];
    /** <p>Delete a specified external account for a given account.</p> */
    readonly delete: operations["DeleteAccountsAccountExternalAccountsId"];
  };
  readonly "/v1/accounts/{account}/login_links": {
    /**
     * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
     *
     * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    readonly post: operations["PostAccountsAccountLoginLinks"];
  };
  readonly "/v1/accounts/{account}/logout": {
    /**
     * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
     *
     * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
     */
    readonly put: operations["PutAccountsAccountLogout"];
  };
  readonly "/v1/accounts/{account}/people": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountsAccountPeople"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountsAccountPeople"];
  };
  readonly "/v1/accounts/{account}/people/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountsAccountPeoplePerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountsAccountPeoplePerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountsAccountPeoplePerson"];
  };
  readonly "/v1/accounts/{account}/persons": {
    /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
    readonly get: operations["GetAccountsAccountPersons"];
    /** <p>Creates a new person.</p> */
    readonly post: operations["PostAccountsAccountPersons"];
  };
  readonly "/v1/accounts/{account}/persons/{person}": {
    /** <p>Retrieves an existing person.</p> */
    readonly get: operations["GetAccountsAccountPersonsPerson"];
    /** <p>Updates an existing person.</p> */
    readonly post: operations["PostAccountsAccountPersonsPerson"];
    /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
    readonly delete: operations["DeleteAccountsAccountPersonsPerson"];
  };
  readonly "/v1/accounts/{account}/reject": {
    /**
     * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
     *
     * <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
     */
    readonly post: operations["PostAccountsAccountReject"];
  };
  readonly "/v1/apple_pay/domains": {
    /** <p>List apple pay domains.</p> */
    readonly get: operations["GetApplePayDomains"];
    /** <p>Create an apple pay domain.</p> */
    readonly post: operations["PostApplePayDomains"];
  };
  readonly "/v1/apple_pay/domains/{domain}": {
    /** <p>Retrieve an apple pay domain.</p> */
    readonly get: operations["GetApplePayDomainsDomain"];
    /** <p>Delete an apple pay domain.</p> */
    readonly delete: operations["DeleteApplePayDomainsDomain"];
  };
  readonly "/v1/application_fees": {
    /** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p> */
    readonly get: operations["GetApplicationFees"];
  };
  readonly "/v1/application_fees/{fee}/refunds/{id}": {
    /** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p> */
    readonly get: operations["GetApplicationFeesFeeRefundsId"];
    /**
     * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts metadata as an argument.</p>
     */
    readonly post: operations["PostApplicationFeesFeeRefundsId"];
  };
  readonly "/v1/application_fees/{id}": {
    /** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p> */
    readonly get: operations["GetApplicationFeesId"];
  };
  readonly "/v1/application_fees/{id}/refund": {
    readonly post: operations["PostApplicationFeesIdRefund"];
  };
  readonly "/v1/application_fees/{id}/refunds": {
    /** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
    readonly get: operations["GetApplicationFeesIdRefunds"];
    /**
     * <p>Refunds an application fee that has previously been collected but not yet refunded.
     * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
     *
     * <p>You can optionally refund only part of an application fee.
     * You can do so multiple times, until the entire fee has been refunded.</p>
     *
     * <p>Once entirely refunded, an application fee can’t be refunded again.
     * This method will raise an error when called on an already-refunded application fee,
     * or when trying to refund more money than is left on an application fee.</p>
     */
    readonly post: operations["PostApplicationFeesIdRefunds"];
  };
  readonly "/v1/balance": {
    /**
     * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
     *  For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
     */
    readonly get: operations["GetBalance"];
  };
  readonly "/v1/balance/history": {
    /**
     * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
     *
     * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     */
    readonly get: operations["GetBalanceHistory"];
  };
  readonly "/v1/balance/history/{id}": {
    /**
     * <p>Retrieves the balance transaction with the given ID.</p>
     *
     * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     */
    readonly get: operations["GetBalanceHistoryId"];
  };
  readonly "/v1/balance_transactions": {
    /**
     * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
     *
     * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
     */
    readonly get: operations["GetBalanceTransactions"];
  };
  readonly "/v1/balance_transactions/{id}": {
    /**
     * <p>Retrieves the balance transaction with the given ID.</p>
     *
     * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
     */
    readonly get: operations["GetBalanceTransactionsId"];
  };
  readonly "/v1/billing_portal/sessions": {
    /** <p>Creates a session of the self-serve Portal.</p> */
    readonly post: operations["PostBillingPortalSessions"];
  };
  readonly "/v1/bitcoin/receivers": {
    /** <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p> */
    readonly get: operations["GetBitcoinReceivers"];
  };
  readonly "/v1/bitcoin/receivers/{id}": {
    /** <p>Retrieves the Bitcoin receiver with the given ID.</p> */
    readonly get: operations["GetBitcoinReceiversId"];
  };
  readonly "/v1/bitcoin/receivers/{receiver}/transactions": {
    /** <p>List bitcoin transacitons for a given receiver.</p> */
    readonly get: operations["GetBitcoinReceiversReceiverTransactions"];
  };
  readonly "/v1/bitcoin/transactions": {
    /** <p>List bitcoin transacitons for a given receiver.</p> */
    readonly get: operations["GetBitcoinTransactions"];
  };
  readonly "/v1/charges": {
    /** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p> */
    readonly get: operations["GetCharges"];
    /** <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p> */
    readonly post: operations["PostCharges"];
  };
  readonly "/v1/charges/{charge}": {
    /** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p> */
    readonly get: operations["GetChargesCharge"];
    /** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostChargesCharge"];
  };
  readonly "/v1/charges/{charge}/capture": {
    /**
     * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
     *
     * <p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
     */
    readonly post: operations["PostChargesChargeCapture"];
  };
  readonly "/v1/charges/{charge}/dispute": {
    /** <p>Retrieve a dispute for a specified charge.</p> */
    readonly get: operations["GetChargesChargeDispute"];
    readonly post: operations["PostChargesChargeDispute"];
  };
  readonly "/v1/charges/{charge}/dispute/close": {
    readonly post: operations["PostChargesChargeDisputeClose"];
  };
  readonly "/v1/charges/{charge}/refund": {
    /**
     * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
     *
     * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
     * Funds will be refunded to the credit or debit card that was originally charged.</p>
     *
     * <p>You can optionally refund only part of a charge.
     * You can do so multiple times, until the entire charge has been refunded.</p>
     *
     * <p>Once entirely refunded, a charge can’t be refunded again.
     * This method will raise an error when called on an already-refunded charge,
     * or when trying to refund more money than is left on a charge.</p>
     */
    readonly post: operations["PostChargesChargeRefund"];
  };
  readonly "/v1/charges/{charge}/refunds": {
    /** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
    readonly get: operations["GetChargesChargeRefunds"];
    /** <p>Create a refund.</p> */
    readonly post: operations["PostChargesChargeRefunds"];
  };
  readonly "/v1/charges/{charge}/refunds/{refund}": {
    /** <p>Retrieves the details of an existing refund.</p> */
    readonly get: operations["GetChargesChargeRefundsRefund"];
    /** <p>Update a specified refund.</p> */
    readonly post: operations["PostChargesChargeRefundsRefund"];
  };
  readonly "/v1/checkout/sessions": {
    /** <p>Returns a list of Checkout Sessions.</p> */
    readonly get: operations["GetCheckoutSessions"];
    /** <p>Creates a Session object.</p> */
    readonly post: operations["PostCheckoutSessions"];
  };
  readonly "/v1/checkout/sessions/{session}": {
    /** <p>Retrieves a Session object.</p> */
    readonly get: operations["GetCheckoutSessionsSession"];
  };
  readonly "/v1/country_specs": {
    /** <p>Lists all Country Spec objects available in the API.</p> */
    readonly get: operations["GetCountrySpecs"];
  };
  readonly "/v1/country_specs/{country}": {
    /** <p>Returns a Country Spec for a given Country code.</p> */
    readonly get: operations["GetCountrySpecsCountry"];
  };
  readonly "/v1/coupons": {
    /** <p>Returns a list of your coupons.</p> */
    readonly get: operations["GetCoupons"];
    /**
     * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
     *
     * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
     */
    readonly post: operations["PostCoupons"];
  };
  readonly "/v1/coupons/{coupon}": {
    /** <p>Retrieves the coupon with the given ID.</p> */
    readonly get: operations["GetCouponsCoupon"];
    /** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p> */
    readonly post: operations["PostCouponsCoupon"];
    /** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p> */
    readonly delete: operations["DeleteCouponsCoupon"];
  };
  readonly "/v1/credit_notes": {
    /** <p>Returns a list of credit notes.</p> */
    readonly get: operations["GetCreditNotes"];
    /**
     * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
     * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
     * in any combination of the following:</p>
     *
     * <ul>
     *  <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
     *  <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
     *  <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
     * </ul>
     *
     * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
     *
     * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
     * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
     */
    readonly post: operations["PostCreditNotes"];
  };
  readonly "/v1/credit_notes/preview": {
    /** <p>Get a preview of a credit note without creating it.</p> */
    readonly get: operations["GetCreditNotesPreview"];
  };
  readonly "/v1/credit_notes/preview/lines": {
    /** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetCreditNotesPreviewLines"];
  };
  readonly "/v1/credit_notes/{credit_note}/lines": {
    /** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetCreditNotesCreditNoteLines"];
  };
  readonly "/v1/credit_notes/{id}": {
    /** <p>Retrieves the credit note object with the given identifier.</p> */
    readonly get: operations["GetCreditNotesId"];
    /** <p>Updates an existing credit note.</p> */
    readonly post: operations["PostCreditNotesId"];
  };
  readonly "/v1/credit_notes/{id}/void": {
    /** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p> */
    readonly post: operations["PostCreditNotesIdVoid"];
  };
  readonly "/v1/customers": {
    /** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p> */
    readonly get: operations["GetCustomers"];
    /** <p>Creates a new customer object.</p> */
    readonly post: operations["PostCustomers"];
  };
  readonly "/v1/customers/{customer}": {
    /** <p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p> */
    readonly get: operations["GetCustomersCustomer"];
    /**
     * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
     *
     * <p>This request accepts mostly the same arguments as the customer creation call.</p>
     */
    readonly post: operations["PostCustomersCustomer"];
    /** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p> */
    readonly delete: operations["DeleteCustomersCustomer"];
  };
  readonly "/v1/customers/{customer}/balance_transactions": {
    /** <p>Returns a list of transactions that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
    readonly get: operations["GetCustomersCustomerBalanceTransactions"];
    /** <p>Creates an immutable transaction that updates the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
    readonly post: operations["PostCustomersCustomerBalanceTransactions"];
  };
  readonly "/v1/customers/{customer}/balance_transactions/{transaction}": {
    /** <p>Retrieves a specific transaction that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
    readonly get: operations["GetCustomersCustomerBalanceTransactionsTransaction"];
    /** <p>Most customer balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p> */
    readonly post: operations["PostCustomersCustomerBalanceTransactionsTransaction"];
  };
  readonly "/v1/customers/{customer}/bank_accounts": {
    /** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p> */
    readonly get: operations["GetCustomersCustomerBankAccounts"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    readonly post: operations["PostCustomersCustomerBankAccounts"];
  };
  readonly "/v1/customers/{customer}/bank_accounts/{id}": {
    /** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p> */
    readonly get: operations["GetCustomersCustomerBankAccountsId"];
    /** <p>Update a specified source for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerBankAccountsId"];
    /** <p>Delete a specified source for a given customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerBankAccountsId"];
  };
  readonly "/v1/customers/{customer}/bank_accounts/{id}/verify": {
    /** <p>Verify a specified bank account for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerBankAccountsIdVerify"];
  };
  readonly "/v1/customers/{customer}/cards": {
    /**
     * <p>You can see a list of the cards belonging to a customer.
     * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
     * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
     */
    readonly get: operations["GetCustomersCustomerCards"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    readonly post: operations["PostCustomersCustomerCards"];
  };
  readonly "/v1/customers/{customer}/cards/{id}": {
    /** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p> */
    readonly get: operations["GetCustomersCustomerCardsId"];
    /** <p>Update a specified source for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerCardsId"];
    /** <p>Delete a specified source for a given customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerCardsId"];
  };
  readonly "/v1/customers/{customer}/discount": {
    readonly get: operations["GetCustomersCustomerDiscount"];
    /** <p>Removes the currently applied discount on a customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerDiscount"];
  };
  readonly "/v1/customers/{customer}/sources": {
    /** <p>List sources for a specified customer.</p> */
    readonly get: operations["GetCustomersCustomerSources"];
    /**
     * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
     *
     * <p>If the card’s owner has no default card, then the new card will become the default.
     * However, if the owner already has a default, then it will not change.
     * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
     */
    readonly post: operations["PostCustomersCustomerSources"];
  };
  readonly "/v1/customers/{customer}/sources/{id}": {
    /** <p>Retrieve a specified source for a given customer.</p> */
    readonly get: operations["GetCustomersCustomerSourcesId"];
    /** <p>Update a specified source for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerSourcesId"];
    /** <p>Delete a specified source for a given customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerSourcesId"];
  };
  readonly "/v1/customers/{customer}/sources/{id}/verify": {
    /** <p>Verify a specified bank account for a given customer.</p> */
    readonly post: operations["PostCustomersCustomerSourcesIdVerify"];
  };
  readonly "/v1/customers/{customer}/subscriptions": {
    /** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p> */
    readonly get: operations["GetCustomersCustomerSubscriptions"];
    /** <p>Creates a new subscription on an existing customer.</p> */
    readonly post: operations["PostCustomersCustomerSubscriptions"];
  };
  readonly "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}": {
    /** <p>Retrieves the subscription with the given ID.</p> */
    readonly get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedId"];
    /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
    readonly post: operations["PostCustomersCustomerSubscriptionsSubscriptionExposedId"];
    /**
     * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
     *
     * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
     *
     * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     */
    readonly delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedId"];
  };
  readonly "/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount": {
    readonly get: operations["GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
    /** <p>Removes the currently applied discount on a customer.</p> */
    readonly delete: operations["DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount"];
  };
  readonly "/v1/customers/{customer}/tax_ids": {
    /** <p>Returns a list of tax IDs for a customer.</p> */
    readonly get: operations["GetCustomersCustomerTaxIds"];
    /** <p>Creates a new <code>TaxID</code> object for a customer.</p> */
    readonly post: operations["PostCustomersCustomerTaxIds"];
  };
  readonly "/v1/customers/{customer}/tax_ids/{id}": {
    /** <p>Retrieves the <code>TaxID</code> object with the given identifier.</p> */
    readonly get: operations["GetCustomersCustomerTaxIdsId"];
    /** <p>Deletes an existing <code>TaxID</code> object.</p> */
    readonly delete: operations["DeleteCustomersCustomerTaxIdsId"];
  };
  readonly "/v1/disputes": {
    /** <p>Returns a list of your disputes.</p> */
    readonly get: operations["GetDisputes"];
  };
  readonly "/v1/disputes/{dispute}": {
    /** <p>Retrieves the dispute with the given ID.</p> */
    readonly get: operations["GetDisputesDispute"];
    /**
     * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
     *
     * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
     */
    readonly post: operations["PostDisputesDispute"];
  };
  readonly "/v1/disputes/{dispute}/close": {
    /**
     * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
     *
     * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
     */
    readonly post: operations["PostDisputesDisputeClose"];
  };
  readonly "/v1/ephemeral_keys": {
    /** <p>Creates a short-lived API key for a given resource.</p> */
    readonly post: operations["PostEphemeralKeys"];
  };
  readonly "/v1/ephemeral_keys/{key}": {
    /** <p>Invalidates a short-lived API key for a given resource.</p> */
    readonly delete: operations["DeleteEphemeralKeysKey"];
  };
  readonly "/v1/events": {
    /** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p> */
    readonly get: operations["GetEvents"];
  };
  readonly "/v1/events/{id}": {
    /** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p> */
    readonly get: operations["GetEventsId"];
  };
  readonly "/v1/exchange_rates": {
    /** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p> */
    readonly get: operations["GetExchangeRates"];
  };
  readonly "/v1/exchange_rates/{currency}": {
    /** <p>Retrieves the exchange rates from the given currency to every supported currency.</p> */
    readonly get: operations["GetExchangeRatesCurrency"];
  };
  readonly "/v1/file_links": {
    /** <p>Returns a list of file links.</p> */
    readonly get: operations["GetFileLinks"];
    /** <p>Creates a new file link object.</p> */
    readonly post: operations["PostFileLinks"];
  };
  readonly "/v1/file_links/{link}": {
    /** <p>Retrieves the file link with the given ID.</p> */
    readonly get: operations["GetFileLinksLink"];
    /** <p>Updates an existing file link object. Expired links can no longer be updated.</p> */
    readonly post: operations["PostFileLinksLink"];
  };
  readonly "/v1/files": {
    /** <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p> */
    readonly get: operations["GetFiles"];
    /**
     * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
     *
     * <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
     */
    readonly post: operations["PostFiles"];
  };
  readonly "/v1/files/{file}": {
    /** <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p> */
    readonly get: operations["GetFilesFile"];
  };
  readonly "/v1/invoiceitems": {
    /** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p> */
    readonly get: operations["GetInvoiceitems"];
    /** <p>Creates an item to be added to a draft invoice. If no invoice is specified, the item will be on the next invoice created for the customer specified.</p> */
    readonly post: operations["PostInvoiceitems"];
  };
  readonly "/v1/invoiceitems/{invoiceitem}": {
    /** <p>Retrieves the invoice item with the given ID.</p> */
    readonly get: operations["GetInvoiceitemsInvoiceitem"];
    /** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p> */
    readonly post: operations["PostInvoiceitemsInvoiceitem"];
    /** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p> */
    readonly delete: operations["DeleteInvoiceitemsInvoiceitem"];
  };
  readonly "/v1/invoices": {
    /** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p> */
    readonly get: operations["GetInvoices"];
    /** <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations.</p> */
    readonly post: operations["PostInvoices"];
  };
  readonly "/v1/invoices/upcoming": {
    /**
     * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.</p>
     *
     * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
     *
     * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
     */
    readonly get: operations["GetInvoicesUpcoming"];
  };
  readonly "/v1/invoices/upcoming/lines": {
    /** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetInvoicesUpcomingLines"];
  };
  readonly "/v1/invoices/{invoice}": {
    /** <p>Retrieves the invoice with the given ID.</p> */
    readonly get: operations["GetInvoicesInvoice"];
    /**
     * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
     * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
     *
     * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
     * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
     * <code>auto_advance=false</code>.</p>
     */
    readonly post: operations["PostInvoicesInvoice"];
    /** <p>Permanently deletes a draft invoice. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized, it must be <a href="#void_invoice">voided</a>.</p> */
    readonly delete: operations["DeleteInvoicesInvoice"];
  };
  readonly "/v1/invoices/{invoice}/finalize": {
    /** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p> */
    readonly post: operations["PostInvoicesInvoiceFinalize"];
  };
  readonly "/v1/invoices/{invoice}/lines": {
    /** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
    readonly get: operations["GetInvoicesInvoiceLines"];
  };
  readonly "/v1/invoices/{invoice}/mark_uncollectible": {
    /** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p> */
    readonly post: operations["PostInvoicesInvoiceMarkUncollectible"];
  };
  readonly "/v1/invoices/{invoice}/pay": {
    /** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p> */
    readonly post: operations["PostInvoicesInvoicePay"];
  };
  readonly "/v1/invoices/{invoice}/send": {
    /**
     * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
     *
     * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
     */
    readonly post: operations["PostInvoicesInvoiceSend"];
  };
  readonly "/v1/invoices/{invoice}/void": {
    /** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p> */
    readonly post: operations["PostInvoicesInvoiceVoid"];
  };
  readonly "/v1/issuer_fraud_records": {
    /** <p>Returns a list of issuer fraud records.</p> */
    readonly get: operations["GetIssuerFraudRecords"];
  };
  readonly "/v1/issuer_fraud_records/{issuer_fraud_record}": {
    /**
     * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
     *
     * <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
     */
    readonly get: operations["GetIssuerFraudRecordsIssuerFraudRecord"];
  };
  readonly "/v1/issuing/authorizations": {
    /** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingAuthorizations"];
  };
  readonly "/v1/issuing/authorizations/{authorization}": {
    /** <p>Retrieves an Issuing <code>Authorization</code> object.</p> */
    readonly get: operations["GetIssuingAuthorizationsAuthorization"];
    /** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingAuthorizationsAuthorization"];
  };
  readonly "/v1/issuing/authorizations/{authorization}/approve": {
    /** <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p> */
    readonly post: operations["PostIssuingAuthorizationsAuthorizationApprove"];
  };
  readonly "/v1/issuing/authorizations/{authorization}/decline": {
    /** <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p> */
    readonly post: operations["PostIssuingAuthorizationsAuthorizationDecline"];
  };
  readonly "/v1/issuing/cardholders": {
    /** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingCardholders"];
    /** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p> */
    readonly post: operations["PostIssuingCardholders"];
  };
  readonly "/v1/issuing/cardholders/{cardholder}": {
    /** <p>Retrieves an Issuing <code>Cardholder</code> object.</p> */
    readonly get: operations["GetIssuingCardholdersCardholder"];
    /** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingCardholdersCardholder"];
  };
  readonly "/v1/issuing/cards": {
    /** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingCards"];
    /** <p>Creates an Issuing <code>Card</code> object.</p> */
    readonly post: operations["PostIssuingCards"];
  };
  readonly "/v1/issuing/cards/{card}": {
    /** <p>Retrieves an Issuing <code>Card</code> object.</p> */
    readonly get: operations["GetIssuingCardsCard"];
    /** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingCardsCard"];
  };
  readonly "/v1/issuing/disputes": {
    /** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingDisputes"];
    /** <p>Creates an Issuing <code>Dispute</code> object.</p> */
    readonly post: operations["PostIssuingDisputes"];
  };
  readonly "/v1/issuing/disputes/{dispute}": {
    /** <p>Retrieves an Issuing <code>Dispute</code> object.</p> */
    readonly get: operations["GetIssuingDisputesDispute"];
    /** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingDisputesDispute"];
  };
  readonly "/v1/issuing/settlements": {
    /** <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingSettlements"];
  };
  readonly "/v1/issuing/settlements/{settlement}": {
    /** <p>Retrieves an Issuing <code>Settlement</code> object.</p> */
    readonly get: operations["GetIssuingSettlementsSettlement"];
    /** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingSettlementsSettlement"];
  };
  readonly "/v1/issuing/transactions": {
    /** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetIssuingTransactions"];
  };
  readonly "/v1/issuing/transactions/{transaction}": {
    /** <p>Retrieves an Issuing <code>Transaction</code> object.</p> */
    readonly get: operations["GetIssuingTransactionsTransaction"];
    /** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostIssuingTransactionsTransaction"];
  };
  readonly "/v1/mandates/{mandate}": {
    /** <p>Retrieves a Mandate object.</p> */
    readonly get: operations["GetMandatesMandate"];
  };
  readonly "/v1/order_returns": {
    /** <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p> */
    readonly get: operations["GetOrderReturns"];
  };
  readonly "/v1/order_returns/{id}": {
    /** <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p> */
    readonly get: operations["GetOrderReturnsId"];
  };
  readonly "/v1/orders": {
    /** <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p> */
    readonly get: operations["GetOrders"];
    /** <p>Creates a new order object.</p> */
    readonly post: operations["PostOrders"];
  };
  readonly "/v1/orders/{id}": {
    /** <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p> */
    readonly get: operations["GetOrdersId"];
    /** <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostOrdersId"];
  };
  readonly "/v1/orders/{id}/pay": {
    /** <p>Pay an order by providing a <code>source</code> to create a payment.</p> */
    readonly post: operations["PostOrdersIdPay"];
  };
  readonly "/v1/orders/{id}/returns": {
    /** <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p> */
    readonly post: operations["PostOrdersIdReturns"];
  };
  readonly "/v1/payment_intents": {
    /** <p>Returns a list of PaymentIntents.</p> */
    readonly get: operations["GetPaymentIntents"];
    /**
     * <p>Creates a PaymentIntent object.</p>
     *
     * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
     * to continue the payment. You can read more about the different payment flows
     * available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
     *
     * <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
     * and confirming the PaymentIntent in the same call. You may use any parameters
     * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
     * is supplied.</p>
     */
    readonly post: operations["PostPaymentIntents"];
  };
  readonly "/v1/payment_intents/{intent}": {
    /**
     * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
     *
     * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
     *
     * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
     */
    readonly get: operations["GetPaymentIntentsIntent"];
    /**
     * <p>Updates properties on a PaymentIntent object without confirming.</p>
     *
     * <p>Depending on which properties you update, you may need to confirm the
     * PaymentIntent again. For example, updating the <code>payment_method</code> will
     * always require you to confirm the PaymentIntent again. If you prefer to
     * update and confirm at the same time, we recommend updating properties via
     * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
     */
    readonly post: operations["PostPaymentIntentsIntent"];
  };
  readonly "/v1/payment_intents/{intent}/cancel": {
    /**
     * <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
     *
     * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status='requires_capture'</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
     */
    readonly post: operations["PostPaymentIntentsIntentCancel"];
  };
  readonly "/v1/payment_intents/{intent}/capture": {
    /**
     * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
     *
     * <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>
     *
     * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
     */
    readonly post: operations["PostPaymentIntentsIntentCapture"];
  };
  readonly "/v1/payment_intents/{intent}/confirm": {
    /**
     * <p>Confirm that your customer intends to pay with current or provided
     * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
     * a payment.</p>
     *
     * <p>If the selected payment method requires additional authentication steps, the
     * PaymentIntent will transition to the <code>requires_action</code> status and
     * suggest additional actions via <code>next_action</code>. If payment fails,
     * the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
     * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
     * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
     *
     * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
     * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
     * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
     * After <code>next_action</code>s are handled by the client, no additional
     * confirmation is required to complete the payment.</p>
     *
     * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
     * initiated using a secret key.
     * If any actions are required for the payment, the PaymentIntent will
     * return to the <code>requires_confirmation</code> state
     * after those actions are completed. Your server needs to then
     * explicitly re-confirm the PaymentIntent to initiate the next payment
     * attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
     * to learn more about manual confirmation.</p>
     */
    readonly post: operations["PostPaymentIntentsIntentConfirm"];
  };
  readonly "/v1/payment_methods": {
    /** <p>Returns a list of PaymentMethods for a given Customer</p> */
    readonly get: operations["GetPaymentMethods"];
    /** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p> */
    readonly post: operations["PostPaymentMethods"];
  };
  readonly "/v1/payment_methods/{payment_method}": {
    /** <p>Retrieves a PaymentMethod object.</p> */
    readonly get: operations["GetPaymentMethodsPaymentMethod"];
    /** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p> */
    readonly post: operations["PostPaymentMethodsPaymentMethod"];
  };
  readonly "/v1/payment_methods/{payment_method}/attach": {
    /**
     * <p>Attaches a PaymentMethod object to a Customer.</p>
     *
     * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
     * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
     * These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
     * <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
     * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
     *
     * <p>To use this PaymentMethod as the default for invoice or subscription payments,
     * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
     * on the Customer to the PaymentMethod’s ID.</p>
     */
    readonly post: operations["PostPaymentMethodsPaymentMethodAttach"];
  };
  readonly "/v1/payment_methods/{payment_method}/detach": {
    /** <p>Detaches a PaymentMethod object from a Customer.</p> */
    readonly post: operations["PostPaymentMethodsPaymentMethodDetach"];
  };
  readonly "/v1/payouts": {
    /** <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p> */
    readonly get: operations["GetPayouts"];
    /**
     * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
     *
     * <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
     *
     * <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
     */
    readonly post: operations["PostPayouts"];
  };
  readonly "/v1/payouts/{payout}": {
    /** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p> */
    readonly get: operations["GetPayoutsPayout"];
    /** <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p> */
    readonly post: operations["PostPayoutsPayout"];
  };
  readonly "/v1/payouts/{payout}/cancel": {
    /** <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p> */
    readonly post: operations["PostPayoutsPayoutCancel"];
  };
  readonly "/v1/plans": {
    /** <p>Returns a list of your plans.</p> */
    readonly get: operations["GetPlans"];
    /** <p>You can create plans using the API, or in the Stripe <a href="https://dashboard.stripe.com/subscriptions/products">Dashboard</a>.</p> */
    readonly post: operations["PostPlans"];
  };
  readonly "/v1/plans/{plan}": {
    /** <p>Retrieves the plan with the given ID.</p> */
    readonly get: operations["GetPlansPlan"];
    /** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p> */
    readonly post: operations["PostPlansPlan"];
    /** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p> */
    readonly delete: operations["DeletePlansPlan"];
  };
  readonly "/v1/products": {
    /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
    readonly get: operations["GetProducts"];
    /** <p>Creates a new product object.</p> */
    readonly post: operations["PostProducts"];
  };
  readonly "/v1/products/{id}": {
    /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
    readonly get: operations["GetProductsId"];
    /** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostProductsId"];
    /** <p>Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if it has no plans associated with it.</p> */
    readonly delete: operations["DeleteProductsId"];
  };
  readonly "/v1/radar/early_fraud_warnings": {
    /** <p>Returns a list of early fraud warnings.</p> */
    readonly get: operations["GetRadarEarlyFraudWarnings"];
  };
  readonly "/v1/radar/early_fraud_warnings/{early_fraud_warning}": {
    /**
     * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
     *
     * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
     */
    readonly get: operations["GetRadarEarlyFraudWarningsEarlyFraudWarning"];
  };
  readonly "/v1/radar/value_list_items": {
    /** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetRadarValueListItems"];
    /** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p> */
    readonly post: operations["PostRadarValueListItems"];
  };
  readonly "/v1/radar/value_list_items/{item}": {
    /** <p>Retrieves a <code>ValueListItem</code> object.</p> */
    readonly get: operations["GetRadarValueListItemsItem"];
    /** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p> */
    readonly delete: operations["DeleteRadarValueListItemsItem"];
  };
  readonly "/v1/radar/value_lists": {
    /** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetRadarValueLists"];
    /** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p> */
    readonly post: operations["PostRadarValueLists"];
  };
  readonly "/v1/radar/value_lists/{value_list}": {
    /** <p>Retrieves a <code>ValueList</code> object.</p> */
    readonly get: operations["GetRadarValueListsValueList"];
    /** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p> */
    readonly post: operations["PostRadarValueListsValueList"];
    /** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p> */
    readonly delete: operations["DeleteRadarValueListsValueList"];
  };
  readonly "/v1/recipients": {
    /** <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p> */
    readonly get: operations["GetRecipients"];
    /**
     * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
     * Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
     */
    readonly post: operations["PostRecipients"];
  };
  readonly "/v1/recipients/{id}": {
    /** <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p> */
    readonly get: operations["GetRecipientsId"];
    /**
     * <p>Updates the specified recipient by setting the values of the parameters passed.
     * Any parameters not provided will be left unchanged.</p>
     *
     * <p>If you update the name or tax ID, the identity verification will automatically be rerun.
     * If you update the bank account, the bank account validation will automatically be rerun.</p>
     */
    readonly post: operations["PostRecipientsId"];
    /** <p>Permanently deletes a recipient. It cannot be undone.</p> */
    readonly delete: operations["DeleteRecipientsId"];
  };
  readonly "/v1/refunds": {
    /** <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p> */
    readonly get: operations["GetRefunds"];
    /** <p>Create a refund.</p> */
    readonly post: operations["PostRefunds"];
  };
  readonly "/v1/refunds/{refund}": {
    /** <p>Retrieves the details of an existing refund.</p> */
    readonly get: operations["GetRefundsRefund"];
    /**
     * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts <code>metadata</code> as an argument.</p>
     */
    readonly post: operations["PostRefundsRefund"];
  };
  readonly "/v1/reporting/report_runs": {
    /** <p>Returns a list of Report Runs, with the most recent appearing first. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    readonly get: operations["GetReportingReportRuns"];
    /** <p>Creates a new object and begin running the report. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    readonly post: operations["PostReportingReportRuns"];
  };
  readonly "/v1/reporting/report_runs/{report_run}": {
    /** <p>Retrieves the details of an existing Report Run. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    readonly get: operations["GetReportingReportRunsReportRun"];
  };
  readonly "/v1/reporting/report_types": {
    /** <p>Returns a full list of Report Types. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    readonly get: operations["GetReportingReportTypes"];
  };
  readonly "/v1/reporting/report_types/{report_type}": {
    /** <p>Retrieves the details of a Report Type. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
    readonly get: operations["GetReportingReportTypesReportType"];
  };
  readonly "/v1/reviews": {
    /** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
    readonly get: operations["GetReviews"];
  };
  readonly "/v1/reviews/{review}": {
    /** <p>Retrieves a <code>Review</code> object.</p> */
    readonly get: operations["GetReviewsReview"];
  };
  readonly "/v1/reviews/{review}/approve": {
    /** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p> */
    readonly post: operations["PostReviewsReviewApprove"];
  };
  readonly "/v1/setup_intents": {
    /** <p>Returns a list of SetupIntents.</p> */
    readonly get: operations["GetSetupIntents"];
    /**
     * <p>Creates a SetupIntent object.</p>
     *
     * <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
     * to collect any required permissions to charge the payment method later.</p>
     */
    readonly post: operations["PostSetupIntents"];
  };
  readonly "/v1/setup_intents/{intent}": {
    /**
     * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
     *
     * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
     *
     * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
     */
    readonly get: operations["GetSetupIntentsIntent"];
    /** <p>Updates a SetupIntent object.</p> */
    readonly post: operations["PostSetupIntentsIntent"];
  };
  readonly "/v1/setup_intents/{intent}/cancel": {
    /**
     * <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
     *
     * <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
     */
    readonly post: operations["PostSetupIntentsIntentCancel"];
  };
  readonly "/v1/setup_intents/{intent}/confirm": {
    /**
     * <p>Confirm that your customer intends to set up the current or
     * provided payment method. For example, you would confirm a SetupIntent
     * when a customer hits the “Save” button on a payment method management
     * page on your website.</p>
     *
     * <p>If the selected payment method does not require any additional
     * steps from the customer, the SetupIntent will transition to the
     * <code>succeeded</code> status.</p>
     *
     * <p>Otherwise, it will transition to the <code>requires_action</code> status and
     * suggest additional actions via <code>next_action</code>. If setup fails,
     * the SetupIntent will transition to the
     * <code>requires_payment_method</code> status.</p>
     */
    readonly post: operations["PostSetupIntentsIntentConfirm"];
  };
  readonly "/v1/sigma/scheduled_query_runs": {
    /** <p>Returns a list of scheduled query runs.</p> */
    readonly get: operations["GetSigmaScheduledQueryRuns"];
  };
  readonly "/v1/sigma/scheduled_query_runs/{scheduled_query_run}": {
    /** <p>Retrieves the details of an scheduled query run.</p> */
    readonly get: operations["GetSigmaScheduledQueryRunsScheduledQueryRun"];
  };
  readonly "/v1/skus": {
    /** <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p> */
    readonly get: operations["GetSkus"];
    /** <p>Creates a new SKU associated with a product.</p> */
    readonly post: operations["PostSkus"];
  };
  readonly "/v1/skus/{id}": {
    /** <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p> */
    readonly get: operations["GetSkusId"];
    /**
     * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
     */
    readonly post: operations["PostSkusId"];
    /** <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p> */
    readonly delete: operations["DeleteSkusId"];
  };
  readonly "/v1/sources": {
    /** <p>Creates a new source object.</p> */
    readonly post: operations["PostSources"];
  };
  readonly "/v1/sources/{source}": {
    /** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p> */
    readonly get: operations["GetSourcesSource"];
    /**
     * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
     */
    readonly post: operations["PostSourcesSource"];
  };
  readonly "/v1/sources/{source}/mandate_notifications/{mandate_notification}": {
    /** <p>Retrieves a new Source MandateNotification.</p> */
    readonly get: operations["GetSourcesSourceMandateNotificationsMandateNotification"];
  };
  readonly "/v1/sources/{source}/source_transactions": {
    /** <p>List source transactions for a given source.</p> */
    readonly get: operations["GetSourcesSourceSourceTransactions"];
  };
  readonly "/v1/sources/{source}/source_transactions/{source_transaction}": {
    /** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p> */
    readonly get: operations["GetSourcesSourceSourceTransactionsSourceTransaction"];
  };
  readonly "/v1/sources/{source}/verify": {
    /** <p>Verify a given source.</p> */
    readonly post: operations["PostSourcesSourceVerify"];
  };
  readonly "/v1/subscription_items": {
    /** <p>Returns a list of your subscription items for a given subscription.</p> */
    readonly get: operations["GetSubscriptionItems"];
    /** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p> */
    readonly post: operations["PostSubscriptionItems"];
  };
  readonly "/v1/subscription_items/{item}": {
    /** <p>Retrieves the invoice item with the given ID.</p> */
    readonly get: operations["GetSubscriptionItemsItem"];
    /** <p>Updates the plan or quantity of an item on a current subscription.</p> */
    readonly post: operations["PostSubscriptionItemsItem"];
    /** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p> */
    readonly delete: operations["DeleteSubscriptionItemsItem"];
  };
  readonly "/v1/subscription_items/{subscription_item}/usage_record_summaries": {
    /**
     * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the billing plan’s month of September).</p>
     *
     * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
     */
    readonly get: operations["GetSubscriptionItemsSubscriptionItemUsageRecordSummaries"];
  };
  readonly "/v1/subscription_items/{subscription_item}/usage_records": {
    /**
     * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
     *
     * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
     *
     * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
     *
     * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
     */
    readonly post: operations["PostSubscriptionItemsSubscriptionItemUsageRecords"];
  };
  readonly "/v1/subscription_schedules": {
    /** <p>Retrieves the list of your subscription schedules.</p> */
    readonly get: operations["GetSubscriptionSchedules"];
    /** <p>Creates a new subscription schedule object. Each customer can have up to 25 active or scheduled subscriptions.</p> */
    readonly post: operations["PostSubscriptionSchedules"];
  };
  readonly "/v1/subscription_schedules/{schedule}": {
    /** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p> */
    readonly get: operations["GetSubscriptionSchedulesSchedule"];
    /** <p>Updates an existing subscription schedule.</p> */
    readonly post: operations["PostSubscriptionSchedulesSchedule"];
  };
  readonly "/v1/subscription_schedules/{schedule}/cancel": {
    /** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p> */
    readonly post: operations["PostSubscriptionSchedulesScheduleCancel"];
  };
  readonly "/v1/subscription_schedules/{schedule}/release": {
    /** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p> */
    readonly post: operations["PostSubscriptionSchedulesScheduleRelease"];
  };
  readonly "/v1/subscriptions": {
    /** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p> */
    readonly get: operations["GetSubscriptions"];
    /** <p>Creates a new subscription on an existing customer. Each customer can have up to 25 active or scheduled subscriptions.</p> */
    readonly post: operations["PostSubscriptions"];
  };
  readonly "/v1/subscriptions/{subscription_exposed_id}": {
    /** <p>Retrieves the subscription with the given ID.</p> */
    readonly get: operations["GetSubscriptionsSubscriptionExposedId"];
    /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
    readonly post: operations["PostSubscriptionsSubscriptionExposedId"];
    /**
     * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
     *
     * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
     *
     * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
     */
    readonly delete: operations["DeleteSubscriptionsSubscriptionExposedId"];
  };
  readonly "/v1/subscriptions/{subscription_exposed_id}/discount": {
    /** <p>Removes the currently applied discount on a subscription.</p> */
    readonly delete: operations["DeleteSubscriptionsSubscriptionExposedIdDiscount"];
  };
  readonly "/v1/tax_rates": {
    /** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p> */
    readonly get: operations["GetTaxRates"];
    /** <p>Creates a new tax rate.</p> */
    readonly post: operations["PostTaxRates"];
  };
  readonly "/v1/tax_rates/{tax_rate}": {
    /** <p>Retrieves a tax rate with the given ID</p> */
    readonly get: operations["GetTaxRatesTaxRate"];
    /** <p>Updates an existing tax rate.</p> */
    readonly post: operations["PostTaxRatesTaxRate"];
  };
  readonly "/v1/terminal/connection_tokens": {
    /** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p> */
    readonly post: operations["PostTerminalConnectionTokens"];
  };
  readonly "/v1/terminal/locations": {
    /** <p>Returns a list of <code>Location</code> objects.</p> */
    readonly get: operations["GetTerminalLocations"];
    /** <p>Creates a new <code>Location</code> object.</p> */
    readonly post: operations["PostTerminalLocations"];
  };
  readonly "/v1/terminal/locations/{location}": {
    /** <p>Retrieves a <code>Location</code> object.</p> */
    readonly get: operations["GetTerminalLocationsLocation"];
    /** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostTerminalLocationsLocation"];
    /** <p>Deletes a <code>Location</code> object.</p> */
    readonly delete: operations["DeleteTerminalLocationsLocation"];
  };
  readonly "/v1/terminal/readers": {
    /** <p>Returns a list of <code>Reader</code> objects.</p> */
    readonly get: operations["GetTerminalReaders"];
    /** <p>Creates a new <code>Reader</code> object.</p> */
    readonly post: operations["PostTerminalReaders"];
  };
  readonly "/v1/terminal/readers/{reader}": {
    /** <p>Retrieves a <code>Reader</code> object.</p> */
    readonly get: operations["GetTerminalReadersReader"];
    /** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
    readonly post: operations["PostTerminalReadersReader"];
    /** <p>Deletes a <code>Reader</code> object.</p> */
    readonly delete: operations["DeleteTerminalReadersReader"];
  };
  readonly "/v1/tokens": {
    /**
     * <p>Creates a single-use token that represents a bank account’s details.
     * This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
     */
    readonly post: operations["PostTokens"];
  };
  readonly "/v1/tokens/{token}": {
    /** <p>Retrieves the token with the given ID.</p> */
    readonly get: operations["GetTokensToken"];
  };
  readonly "/v1/topups": {
    /** <p>Returns a list of top-ups.</p> */
    readonly get: operations["GetTopups"];
    /** <p>Top up the balance of an account</p> */
    readonly post: operations["PostTopups"];
  };
  readonly "/v1/topups/{topup}": {
    /** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p> */
    readonly get: operations["GetTopupsTopup"];
    /** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p> */
    readonly post: operations["PostTopupsTopup"];
  };
  readonly "/v1/topups/{topup}/cancel": {
    /** <p>Cancels a top-up. Only pending top-ups can be canceled.</p> */
    readonly post: operations["PostTopupsTopupCancel"];
  };
  readonly "/v1/transfers": {
    /** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p> */
    readonly get: operations["GetTransfers"];
    /** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p> */
    readonly post: operations["PostTransfers"];
  };
  readonly "/v1/transfers/{id}/reversals": {
    /** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p> */
    readonly get: operations["GetTransfersIdReversals"];
    /**
     * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
     *
     * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
     *
     * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
     */
    readonly post: operations["PostTransfersIdReversals"];
  };
  readonly "/v1/transfers/{transfer}": {
    /** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p> */
    readonly get: operations["GetTransfersTransfer"];
    /**
     * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request accepts only metadata as an argument.</p>
     */
    readonly post: operations["PostTransfersTransfer"];
  };
  readonly "/v1/transfers/{transfer}/reversals/{id}": {
    /** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p> */
    readonly get: operations["GetTransfersTransferReversalsId"];
    /**
     * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
     *
     * <p>This request only accepts metadata and description as arguments.</p>
     */
    readonly post: operations["PostTransfersTransferReversalsId"];
  };
  readonly "/v1/webhook_endpoints": {
    /** <p>Returns a list of your webhook endpoints.</p> */
    readonly get: operations["GetWebhookEndpoints"];
    /** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p> */
    readonly post: operations["PostWebhookEndpoints"];
  };
  readonly "/v1/webhook_endpoints/{webhook_endpoint}": {
    /** <p>Retrieves the webhook endpoint with the given ID.</p> */
    readonly get: operations["GetWebhookEndpointsWebhookEndpoint"];
    /** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p> */
    readonly post: operations["PostWebhookEndpointsWebhookEndpoint"];
    /** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p> */
    readonly delete: operations["DeleteWebhookEndpointsWebhookEndpoint"];
  };
}

export interface definitions {
  /**
   * Account
   * @description This is an object representing a Stripe account. You can retrieve it to see
   * properties on the account like its current e-mail address or if the account is
   * enabled yet to make live charges.
   *
   * Some properties, marked below, are available only to platforms that want to
   * [create and manage Express or Custom accounts](https://stripe.com/docs/connect/accounts).
   */
  readonly account: {
    readonly business_profile?: definitions["account_business_profile"];
    /**
     * @description The business type.
     * @enum {string}
     */
    readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
    readonly capabilities?: definitions["account_capabilities"];
    /** @description Whether the account can create live charges. */
    readonly charges_enabled?: boolean;
    readonly company?: definitions["legal_entity_company"];
    /** @description The account's country. */
    readonly country?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created?: number;
    /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
    readonly default_currency?: string;
    /** @description Whether account details have been submitted. Standard accounts cannot receive payouts before this is true. */
    readonly details_submitted?: boolean;
    /** @description The primary user's email address. */
    readonly email?: string;
    /**
     * ExternalAccountList
     * @description External accounts (bank accounts and debit cards) currently attached to this account
     */
    readonly external_accounts?: {
      /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
      readonly data: readonly definitions["bank_account"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description Unique identifier for the object. */
    readonly id: string;
    readonly individual?: definitions["person"];
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "account";
    /** @description Whether Stripe can send payouts to this account. */
    readonly payouts_enabled?: boolean;
    readonly requirements?: definitions["account_requirements"];
    readonly settings?: definitions["account_settings"];
    readonly tos_acceptance?: definitions["account_tos_acceptance"];
    /**
     * @description The Stripe account type. Can be `standard`, `express`, or `custom`.
     * @enum {string}
     */
    readonly type?: "custom" | "express" | "standard";
  };
  /** AccountBrandingSettings */
  readonly account_branding_settings: {
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px. */
    readonly icon?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px. */
    readonly logo?: string;
    /** @description A CSS hex color value representing the primary branding color for this account */
    readonly primary_color?: string;
    /** @description A CSS hex color value representing the secondary branding color for this account */
    readonly secondary_color?: string;
  };
  /** AccountBusinessProfile */
  readonly account_business_profile: {
    /** @description [The merchant category code for the account](https://stripe.com/docs/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide. */
    readonly mcc?: string;
    /** @description The customer-facing business name. */
    readonly name?: string;
    /** @description Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes. */
    readonly product_description?: string;
    readonly support_address?: definitions["address"];
    /** @description A publicly available email address for sending support issues to. */
    readonly support_email?: string;
    /** @description A publicly available phone number to call with support issues. */
    readonly support_phone?: string;
    /** @description A publicly available website for handling support issues. */
    readonly support_url?: string;
    /** @description The business's publicly available website. */
    readonly url?: string;
  };
  /** AccountCapabilities */
  readonly account_capabilities: {
    /**
     * @description The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
     * @enum {string}
     */
    readonly au_becs_debit_payments?: "active" | "inactive" | "pending";
    /**
     * @description The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
     * @enum {string}
     */
    readonly card_issuing?: "active" | "inactive" | "pending";
    /**
     * @description The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
     * @enum {string}
     */
    readonly card_payments?: "active" | "inactive" | "pending";
    /**
     * @description The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
     * @enum {string}
     */
    readonly jcb_payments?: "active" | "inactive" | "pending";
    /**
     * @description The status of the legacy payments capability of the account.
     * @enum {string}
     */
    readonly legacy_payments?: "active" | "inactive" | "pending";
    /**
     * @description The status of the tax reporting 1099-K (US) capability of the account.
     * @enum {string}
     */
    readonly tax_reporting_us_1099_k?: "active" | "inactive" | "pending";
    /**
     * @description The status of the tax reporting 1099-MISC (US) capability of the account.
     * @enum {string}
     */
    readonly tax_reporting_us_1099_misc?: "active" | "inactive" | "pending";
    /**
     * @description The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
     * @enum {string}
     */
    readonly transfers?: "active" | "inactive" | "pending";
  };
  /** AccountCapabilityRequirements */
  readonly account_capability_requirements: {
    /** @description The date the fields in `currently_due` must be collected by to keep the capability enabled for the account. */
    readonly current_deadline?: number;
    /** @description The fields that need to be collected to keep the capability enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled. */
    readonly currently_due: readonly string[];
    /** @description If the capability is disabled, this string describes why. Possible values are `requirement.fields_needed`, `pending.onboarding`, `pending.review`, `rejected_fraud`, or `rejected.other`. */
    readonly disabled_reason?: string;
    /** @description The fields that need to be collected again because validation or verification failed for some reason. */
    readonly errors: readonly definitions["account_requirements_error"][];
    /** @description The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set. */
    readonly eventually_due: readonly string[];
    /** @description The fields that weren't collected by the `current_deadline`. These fields need to be collected to enable the capability for the account. */
    readonly past_due: readonly string[];
    /** @description Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`. */
    readonly pending_verification: readonly string[];
  };
  /** AccountCardPaymentsSettings */
  readonly account_card_payments_settings: {
    readonly decline_on?: definitions["account_decline_charge_on"];
    /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion. */
    readonly statement_descriptor_prefix?: string;
  };
  /** AccountDashboardSettings */
  readonly account_dashboard_settings: {
    /** @description The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts. */
    readonly display_name?: string;
    /** @description The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). */
    readonly timezone?: string;
  };
  /** AccountDeclineChargeOn */
  readonly account_decline_charge_on: {
    /** @description Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification. */
    readonly avs_failure: boolean;
    /** @description Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification. */
    readonly cvc_failure: boolean;
  };
  /**
   * AccountLink
   * @description Account Links are the means by which a Connect platform grants a connected account permission to access
   * Stripe-hosted applications, such as Connect Onboarding.
   *
   * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/connect-onboarding).
   */
  readonly account_link: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The timestamp at which this account link will expire. */
    readonly expires_at: number;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "account_link";
    /** @description The URL for the account link. */
    readonly url: string;
  };
  /** AccountPaymentsSettings */
  readonly account_payments_settings: {
    /** @description The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. */
    readonly statement_descriptor?: string;
    /** @description The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only) */
    readonly statement_descriptor_kana?: string;
    /** @description The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only) */
    readonly statement_descriptor_kanji?: string;
  };
  /** AccountPayoutSettings */
  readonly account_payout_settings: {
    /** @description A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See our [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances) documentation for details. Default value is `true` for Express accounts and `false` for Custom accounts. */
    readonly debit_negative_balances: boolean;
    readonly schedule: definitions["transfer_schedule"];
    /** @description The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard. */
    readonly statement_descriptor?: string;
  };
  /** AccountRequirements */
  readonly account_requirements: {
    /** @description The date the fields in `currently_due` must be collected by to keep payouts enabled for the account. These fields might block payouts sooner if the next threshold is reached before these fields are collected. */
    readonly current_deadline?: number;
    /** @description The fields that need to be collected to keep the account enabled. If not collected by the `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
    readonly currently_due?: readonly string[];
    /** @description If the account is disabled, this string describes why the account can’t create charges or receive payouts. Can be `requirements.past_due`, `requirements.pending_verification`, `rejected.fraud`, `rejected.terms_of_service`, `rejected.listed`, `rejected.other`, `listed`, `under_review`, or `other`. */
    readonly disabled_reason?: string;
    /** @description The fields that need to be collected again because validation or verification failed for some reason. */
    readonly errors?: readonly definitions["account_requirements_error"][];
    /** @description The fields that need to be collected assuming all volume thresholds are reached. As they become required, these fields appear in `currently_due` as well, and the `current_deadline` is set. */
    readonly eventually_due?: readonly string[];
    /** @description The fields that weren't collected by the `current_deadline`. These fields need to be collected to re-enable the account. */
    readonly past_due?: readonly string[];
    /** @description Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`. */
    readonly pending_verification?: readonly string[];
  };
  /** AccountRequirementsError */
  readonly account_requirements_error: {
    /**
     * @description The code for the type of error.
     * @enum {string}
     */
    readonly code:
      | "invalid_address_city_state_postal_code"
      | "invalid_street_address"
      | "invalid_value_other"
      | "verification_document_address_mismatch"
      | "verification_document_address_missing"
      | "verification_document_corrupt"
      | "verification_document_country_not_supported"
      | "verification_document_dob_mismatch"
      | "verification_document_duplicate_type"
      | "verification_document_expired"
      | "verification_document_failed_copy"
      | "verification_document_failed_greyscale"
      | "verification_document_failed_other"
      | "verification_document_failed_test_mode"
      | "verification_document_fraudulent"
      | "verification_document_id_number_mismatch"
      | "verification_document_id_number_missing"
      | "verification_document_incomplete"
      | "verification_document_invalid"
      | "verification_document_manipulated"
      | "verification_document_missing_back"
      | "verification_document_missing_front"
      | "verification_document_name_mismatch"
      | "verification_document_name_missing"
      | "verification_document_nationality_mismatch"
      | "verification_document_not_readable"
      | "verification_document_not_uploaded"
      | "verification_document_photo_mismatch"
      | "verification_document_too_large"
      | "verification_document_type_not_supported"
      | "verification_failed_address_match"
      | "verification_failed_business_iec_number"
      | "verification_failed_document_match"
      | "verification_failed_id_number_match"
      | "verification_failed_keyed_identity"
      | "verification_failed_keyed_match"
      | "verification_failed_name_match"
      | "verification_failed_other";
    /** @description An informative message that indicates the error type and provides additional details about the error. */
    readonly reason: string;
    /** @description The specific user onboarding requirement field (in the requirements hash) that needs to be resolved. */
    readonly requirement: string;
  };
  /** AccountSettings */
  readonly account_settings: {
    readonly branding: definitions["account_branding_settings"];
    readonly card_payments: definitions["account_card_payments_settings"];
    readonly dashboard: definitions["account_dashboard_settings"];
    readonly payments: definitions["account_payments_settings"];
    readonly payouts?: definitions["account_payout_settings"];
  };
  /** AccountTOSAcceptance */
  readonly account_tos_acceptance: {
    /** @description The Unix timestamp marking when the Stripe Services Agreement was accepted by the account representative */
    readonly date?: number;
    /** @description The IP address from which the Stripe Services Agreement was accepted by the account representative */
    readonly ip?: string;
    /** @description The user agent of the browser from which the Stripe Services Agreement was accepted by the account representative */
    readonly user_agent?: string;
  };
  /** Address */
  readonly address: {
    /** @description City, district, suburb, town, or village. */
    readonly city?: string;
    /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    readonly country?: string;
    /** @description Address line 1 (e.g., street, PO Box, or company name). */
    readonly line1?: string;
    /** @description Address line 2 (e.g., apartment, suite, unit, or building). */
    readonly line2?: string;
    /** @description ZIP or postal code. */
    readonly postal_code?: string;
    /** @description State, county, province, or region. */
    readonly state?: string;
  };
  /** AlipayAccount */
  readonly alipay_account: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The ID of the customer associated with this Alipay Account. */
    readonly customer?: string;
    /** @description Uniquely identifies the account and will be the same across all Alipay account objects that are linked to the same Alipay account. */
    readonly fingerprint: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "alipay_account";
    /** @description If the Alipay account object is not reusable, the exact amount that you can create a charge for. */
    readonly payment_amount?: number;
    /** @description If the Alipay account object is not reusable, the exact currency that you can create a charge for. */
    readonly payment_currency?: string;
    /** @description True if you can create multiple payments using this account. If the account is reusable, then you can freely choose the amount of each payment. */
    readonly reusable: boolean;
    /** @description Whether this Alipay account object has ever been used for a payment. */
    readonly used: boolean;
    /** @description The username for the Alipay account. */
    readonly username: string;
  };
  /** APIErrors */
  readonly api_errors: {
    /** @description For card errors, the ID of the failed charge. */
    readonly charge?: string;
    /** @description For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported. */
    readonly code?: string;
    /** @description For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one. */
    readonly decline_code?: string;
    /** @description A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported. */
    readonly doc_url?: string;
    /** @description A human-readable message providing more details about the error. For card errors, these messages can be shown to your users. */
    readonly message?: string;
    /** @description If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field. */
    readonly param?: string;
    readonly payment_intent?: definitions["payment_intent"];
    readonly payment_method?: definitions["payment_method"];
    readonly setup_intent?: definitions["setup_intent"];
    readonly source?: definitions["bank_account"];
    /**
     * @description The type of error returned. One of `api_connection_error`, `api_error`, `authentication_error`, `card_error`, `idempotency_error`, `invalid_request_error`, or `rate_limit_error`
     * @enum {string}
     */
    readonly type:
      | "api_connection_error"
      | "api_error"
      | "authentication_error"
      | "card_error"
      | "idempotency_error"
      | "invalid_request_error"
      | "rate_limit_error";
  };
  /** ApplePayDomain */
  readonly apple_pay_domain: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    readonly domain_name: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "apple_pay_domain";
  };
  /** Application */
  readonly application: {
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The name of the application. */
    readonly name?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "application";
  };
  /** PlatformFee */
  readonly application_fee: {
    /** @description ID of the Stripe account this fee was taken from. */
    readonly account: string;
    /** @description Amount earned, in %s. */
    readonly amount: number;
    /** @description Amount in %s refunded (can be less than the amount attribute on the fee if a partial refund was issued) */
    readonly amount_refunded: number;
    /** @description ID of the Connect application that earned the fee. */
    readonly application: string;
    /** @description Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds). */
    readonly balance_transaction?: string;
    /** @description ID of the charge that the application fee was taken from. */
    readonly charge: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "application_fee";
    /** @description ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter. */
    readonly originating_transaction?: string;
    /** @description Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false. */
    readonly refunded: boolean;
    /**
     * FeeRefundList
     * @description A list of refunds that have been applied to the fee.
     */
    readonly refunds: {
      /** @description Details about each object. */
      readonly data: readonly definitions["fee_refund"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
  };
  /**
   * Balance
   * @description This is an object representing your Stripe balance. You can retrieve it to see
   * the balance currently on your Stripe account.
   *
   * You can also retrieve the balance history, which contains a list of
   * [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
   * (charges, payouts, and so forth).
   *
   * The available and pending amounts for each currency are broken down further by
   * payment source types.
   *
   * Related guide: [Understanding Connect Account Balances](https://stripe.com/docs/connect/account-balances).
   */
  readonly balance: {
    /** @description Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property. */
    readonly available: readonly definitions["balance_amount"][];
    /** @description Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property. */
    readonly connect_reserved?: readonly definitions["balance_amount"][];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "balance";
    /** @description Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property. */
    readonly pending: readonly definitions["balance_amount"][];
  };
  /** BalanceAmount */
  readonly balance_amount: {
    /** @description Balance amount. */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    readonly source_types?: definitions["balance_amount_by_source_type"];
  };
  /** BalanceAmountBySourceType */
  readonly balance_amount_by_source_type: {
    /** @description Amount for bank account. */
    readonly bank_account?: number;
    /** @description Amount for card. */
    readonly card?: number;
    /** @description Amount for FPX. */
    readonly fpx?: number;
  };
  /**
   * BalanceTransaction
   * @description Balance transactions represent funds moving through your Stripe account.
   * They're created for every type of transaction that comes into or flows out of your Stripe account balance.
   *
   * Related guide: [Balance Transaction Types](https://stripe.com/docs/reports/balance-transaction-types).
   */
  readonly balance_transaction: {
    /** @description Gross amount of the transaction, in %s. */
    readonly amount: number;
    /** @description The date the transaction's net funds will become available in the Stripe balance. */
    readonly available_on: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`. */
    readonly exchange_rate?: number;
    /** @description Fees (in %s) paid for this transaction. */
    readonly fee: number;
    /** @description Detailed breakdown of fees (in %s) paid for this transaction. */
    readonly fee_details: readonly definitions["fee"][];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Net amount of the transaction, in %s. */
    readonly net: number;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "balance_transaction";
    /** @description [Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective. */
    readonly reporting_category: string;
    /** @description The Stripe object to which this transaction is related. */
    readonly source?: string;
    /** @description If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`. */
    readonly status: string;
    /**
     * @description Transaction type: `adjustment`, `advance`, `advance_funding`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.
     * @enum {string}
     */
    readonly type:
      | "adjustment"
      | "advance"
      | "advance_funding"
      | "application_fee"
      | "application_fee_refund"
      | "charge"
      | "connect_collection_transfer"
      | "issuing_authorization_hold"
      | "issuing_authorization_release"
      | "issuing_transaction"
      | "payment"
      | "payment_failure_refund"
      | "payment_refund"
      | "payout"
      | "payout_cancel"
      | "payout_failure"
      | "refund"
      | "refund_failure"
      | "reserve_transaction"
      | "reserved_funds"
      | "stripe_fee"
      | "stripe_fx_fee"
      | "tax_fee"
      | "topup"
      | "topup_reversal"
      | "transfer"
      | "transfer_cancel"
      | "transfer_failure"
      | "transfer_refund";
  };
  /**
   * BankAccount
   * @description These bank accounts are payment methods on `Customer` objects.
   *
   * On the other hand [External Accounts](https://stripe.com/docs/api#external_accounts) are transfer
   * destinations on `Account` objects for [Custom accounts](https://stripe.com/docs/connect/custom-accounts).
   * They can be bank accounts or debit cards as well, and are documented in the links above.
   *
   * Related guide: [Processing ACH & Bank Transfers](https://stripe.com/docs/payments/ach-bank-transfers).
   */
  readonly bank_account: {
    /** @description The ID of the account that the bank account is associated with. */
    readonly account?: string;
    /** @description The name of the person or business that owns the bank account. */
    readonly account_holder_name?: string;
    /** @description The type of entity that holds the account. This can be either `individual` or `company`. */
    readonly account_holder_type?: string;
    /** @description Name of the bank associated with the routing number (e.g., `WELLS FARGO`). */
    readonly bank_name?: string;
    /** @description Two-letter ISO code representing the country the bank account is located in. */
    readonly country: string;
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
    readonly currency: string;
    /** @description The ID of the customer that the bank account is associated with. */
    readonly customer?: string;
    /** @description Whether this bank account is the default external account for its currency. */
    readonly default_for_currency?: boolean;
    /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    readonly fingerprint?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The last four digits of the bank account number. */
    readonly last4: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "bank_account";
    /** @description The routing transit number for the bank account. */
    readonly routing_number?: string;
    /**
     * @description For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a transfer sent to this bank account fails, we'll set the status to `errored` and will not continue to send transfers until the bank details are updated.
     *
     * For external accounts, possible values are `new` and `errored`. Validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply. If a transfer fails, the status is set to `errored` and transfers are stopped until account details are updated.
     */
    readonly status: string;
  };
  /** billing_details */
  readonly billing_details: {
    readonly address?: definitions["address"];
    /** @description Email address. */
    readonly email?: string;
    /** @description Full name. */
    readonly name?: string;
    /** @description Billing phone number (including extension). */
    readonly phone?: string;
  };
  /**
   * PortalSession
   * @description A Session describes the instantiation of the self-serve portal for
   * a particular customer. By visiting the self-serve portal's URL, the customer
   * can manage their subscriptions and view their invoice payment history. For security reasons,
   * Sessions are short-lived and will expire if the customer does not visit the URL.
   * Create Sessions on-demand.
   *
   * Related guide: [self-serve Portal](https://stripe.com/docs/billing/subscriptions/integrating-self-serve).
   */
  readonly "billing_portal.session": {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The ID of the customer for this session. */
    readonly customer: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "billing_portal.session";
    /** @description The URL to which Stripe should send customers when they click on the link to return to your website. */
    readonly return_url: string;
    /** @description The short-lived URL of the session giving customers access to the self-serve portal. */
    readonly url: string;
  };
  /** BitcoinReceiver */
  readonly bitcoin_receiver: {
    /** @description True when this bitcoin receiver has received a non-zero amount of bitcoin. */
    readonly active: boolean;
    /** @description The amount of `currency` that you are collecting as payment. */
    readonly amount: number;
    /** @description The amount of `currency` to which `bitcoin_amount_received` has been converted. */
    readonly amount_received: number;
    /** @description The amount of bitcoin that the customer should send to fill the receiver. The `bitcoin_amount` is denominated in Satoshi: there are 10^8 Satoshi in one bitcoin. */
    readonly bitcoin_amount: number;
    /** @description The amount of bitcoin that has been sent by the customer to this receiver. */
    readonly bitcoin_amount_received: number;
    /** @description This URI can be displayed to the customer as a clickable link (to activate their bitcoin client) or as a QR code (for mobile wallets). */
    readonly bitcoin_uri: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which the bitcoin will be converted. */
    readonly currency: string;
    /** @description The customer ID of the bitcoin receiver. */
    readonly customer?: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description The customer's email address, set by the API call that creates the receiver. */
    readonly email?: string;
    /** @description This flag is initially false and updates to true when the customer sends the `bitcoin_amount` to this receiver. */
    readonly filled: boolean;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description A bitcoin address that is specific to this receiver. The customer can send bitcoin to this address to fill the receiver. */
    readonly inbound_address: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "bitcoin_receiver";
    /** @description The ID of the payment created from the receiver, if any. Hidden when viewing the receiver with a publishable key. */
    readonly payment?: string;
    /** @description The refund address of this bitcoin receiver. */
    readonly refund_address?: string;
    /**
     * BitcoinTransactionList
     * @description A list with one entry for each time that the customer sent bitcoin to the receiver. Hidden when viewing the receiver with a publishable key.
     */
    readonly transactions?: {
      /** @description Details about each object. */
      readonly data: readonly definitions["bitcoin_transaction"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description This receiver contains uncaptured funds that can be used for a payment or refunded. */
    readonly uncaptured_funds: boolean;
    /** @description Indicate if this source is used for payment. */
    readonly used_for_payment?: boolean;
  };
  /** BitcoinTransaction */
  readonly bitcoin_transaction: {
    /** @description The amount of `currency` that the transaction was converted to in real-time. */
    readonly amount: number;
    /** @description The amount of bitcoin contained in the transaction. */
    readonly bitcoin_amount: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) to which this transaction was converted. */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "bitcoin_transaction";
    /** @description The receiver to which this transaction was sent. */
    readonly receiver: string;
  };
  /**
   * AccountCapability
   * @description This is an object representing a capability for a Stripe account.
   *
   * Related guide: [Capabilities Overview](https://stripe.com/docs/connect/capabilities-overview).
   */
  readonly capability: {
    /** @description The account for which the capability enables functionality. */
    readonly account: string;
    /** @description The identifier for the capability. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "capability";
    /** @description Whether the capability has been requested. */
    readonly requested: boolean;
    /** @description Time at which the capability was requested. Measured in seconds since the Unix epoch. */
    readonly requested_at?: number;
    readonly requirements?: definitions["account_capability_requirements"];
    /**
     * @description The status of the capability. Can be `active`, `inactive`, `pending`, or `unrequested`.
     * @enum {string}
     */
    readonly status: "active" | "disabled" | "inactive" | "pending" | "unrequested";
  };
  /**
   * Card
   * @description You can store multiple cards on a customer in order to charge the customer
   * later. You can also store multiple debit cards on a recipient in order to
   * transfer to those cards later.
   *
   * Related guide: [Card Payments with Sources](https://stripe.com/docs/sources/cards).
   */
  readonly card: {
    /** @description The account this card belongs to. This attribute will not be in the card object if the card belongs to a customer or recipient instead. */
    readonly account?: string;
    /** @description City/District/Suburb/Town/Village. */
    readonly address_city?: string;
    /** @description Billing address country, if provided when creating card. */
    readonly address_country?: string;
    /** @description Address line 1 (Street address/PO Box/Company name). */
    readonly address_line1?: string;
    /** @description If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly address_line1_check?: string;
    /** @description Address line 2 (Apartment/Suite/Unit/Building). */
    readonly address_line2?: string;
    /** @description State/County/Province/Region. */
    readonly address_state?: string;
    /** @description ZIP or postal code. */
    readonly address_zip?: string;
    /** @description If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly address_zip_check?: string;
    /** @description A set of available payout methods for this card. Will be either `["standard"]` or `["standard", "instant"]`. Only values from this set should be passed as the `method` when creating a transfer. */
    readonly available_payout_methods?: readonly ("instant" | "standard")[];
    /** @description Card brand. Can be `American Express`, `Diners Club`, `Discover`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`. */
    readonly brand: string;
    /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    readonly country?: string;
    readonly currency?: string;
    /** @description The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead. */
    readonly customer?: string;
    /** @description If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly cvc_check?: string;
    /** @description Whether this card is the default external account for its currency. */
    readonly default_for_currency?: boolean;
    /** @description (For tokenized numbers only.) The last four digits of the device account number. */
    readonly dynamic_last4?: string;
    /** @description Two-digit number representing the card's expiration month. */
    readonly exp_month: number;
    /** @description Four-digit number representing the card's expiration year. */
    readonly exp_year: number;
    /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
    readonly fingerprint?: string;
    /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    readonly funding: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The last four digits of the card. */
    readonly last4: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description Cardholder name. */
    readonly name?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "card";
    /** @description The recipient that this card belongs to. This attribute will not be in the card object if the card belongs to a customer or account instead. */
    readonly recipient?: string;
    /** @description If the card number is tokenized, this is the method that was used. Can be `amex_express_checkout`, `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null. */
    readonly tokenization_method?: string;
  };
  /** card_mandate_payment_method_details */
  readonly card_mandate_payment_method_details: { readonly [key: string]: unknown };
  /**
   * Charge
   * @description To charge a credit or a debit card, you create a `Charge` object. You can
   * retrieve and refund individual charges as well as list all charges. Charges
   * are identified by a unique, random ID.
   *
   * Related guide: [Accept a payment with the Charges API](https://stripe.com/docs/payments/accept-a-payment-charges).
   */
  readonly charge: {
    /** @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
    readonly amount: number;
    /** @description Amount in %s refunded (can be less than the amount attribute on the charge if a partial refund was issued). */
    readonly amount_refunded: number;
    /** @description ID of the Connect application that created the charge. */
    readonly application?: string;
    /** @description The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
    readonly application_fee?: string;
    /** @description The amount of the application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees) for details. */
    readonly application_fee_amount?: number;
    /** @description ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes). */
    readonly balance_transaction?: string;
    readonly billing_details: definitions["billing_details"];
    /** @description The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. */
    readonly calculated_statement_descriptor?: string;
    /** @description If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured. */
    readonly captured: boolean;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description ID of the customer this charge is for if one exists. */
    readonly customer?: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description Whether the charge has been disputed. */
    readonly disputed: boolean;
    /** @description Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
    readonly failure_code?: string;
    /** @description Message to user further explaining reason for charge failure if available. */
    readonly failure_message?: string;
    readonly fraud_details?: definitions["charge_fraud_details"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description ID of the invoice this charge is for if one exists. */
    readonly invoice?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "charge";
    /** @description The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers) for details. */
    readonly on_behalf_of?: string;
    /** @description ID of the order this charge is for if one exists. */
    readonly order?: string;
    readonly outcome?: definitions["charge_outcome"];
    /** @description `true` if the charge succeeded, or was successfully authorized for later capture. */
    readonly paid: boolean;
    /** @description ID of the PaymentIntent associated with this charge, if one exists. */
    readonly payment_intent?: string;
    /** @description ID of the payment method used in this charge. */
    readonly payment_method?: string;
    readonly payment_method_details?: definitions["payment_method_details"];
    /** @description This is the email address that the receipt for this charge was sent to. */
    readonly receipt_email?: string;
    /** @description This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent. */
    readonly receipt_number?: string;
    /** @description This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt. */
    readonly receipt_url?: string;
    /** @description Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false. */
    readonly refunded: boolean;
    /**
     * RefundList
     * @description A list of refunds that have been applied to the charge.
     */
    readonly refunds: {
      /** @description Details about each object. */
      readonly data: readonly definitions["refund"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description ID of the review associated with this charge if one exists. */
    readonly review?: string;
    readonly shipping?: definitions["shipping"];
    /** @description The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details. */
    readonly source_transfer?: string;
    /** @description For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
    readonly statement_descriptor?: string;
    /** @description Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
    readonly statement_descriptor_suffix?: string;
    /** @description The status of the payment is either `succeeded`, `pending`, or `failed`. */
    readonly status: string;
    /** @description ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter). */
    readonly transfer?: string;
    readonly transfer_data?: definitions["charge_transfer_data"];
    /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
    readonly transfer_group?: string;
  };
  /** ChargeFraudDetails */
  readonly charge_fraud_details: {
    /** @description Assessments from Stripe. If set, the value is `fraudulent`. */
    readonly stripe_report?: string;
    /** @description Assessments reported by you. If set, possible values of are `safe` and `fraudulent`. */
    readonly user_report?: string;
  };
  /** ChargeOutcome */
  readonly charge_outcome: {
    /** @description Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement. */
    readonly network_status?: string;
    /** @description An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details. */
    readonly reason?: string;
    /** @description Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. */
    readonly risk_level?: string;
    /** @description Stripe's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams. */
    readonly risk_score?: number;
    /** @description The ID of the Radar rule that matched the payment, if applicable. */
    readonly rule?: string;
    /** @description A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer. */
    readonly seller_message?: string;
    /** @description Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details. */
    readonly type: string;
  };
  /** ChargeTransferData */
  readonly charge_transfer_data: {
    /** @description The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account. */
    readonly amount?: number;
    /** @description ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request. */
    readonly destination: string;
  };
  /**
   * Session
   * @description A Checkout Session represents your customer's session as they pay for
   * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout).
   * We recommend creating a new Session each time your customer attempts to pay.
   *
   * Once payment is successful, the Checkout Session will contain a reference
   * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
   * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
   * [Subscription](https://stripe.com/docs/api/subscriptions).
   *
   * You can create a Checkout Session on your server and pass its ID to the
   * client to begin Checkout.
   *
   * Related guide: [Checkout Server Quickstart](https://stripe.com/docs/payments/checkout/api).
   */
  readonly "checkout.session": {
    /**
     * @description The value (`auto` or `required`) for whether Checkout collected the
     * customer's billing address.
     */
    readonly billing_address_collection?: string;
    /** @description The URL the customer will be directed to if they decide to cancel payment and return to your website. */
    readonly cancel_url: string;
    /**
     * @description A unique string to reference the Checkout Session. This can be a
     * customer ID, a cart ID, or similar, and can be used to reconcile the
     * session with your internal systems.
     */
    readonly client_reference_id?: string;
    /**
     * @description The ID of the customer for this session.
     * For Checkout Sessions in `payment` or `subscription` mode, Checkout
     * will create a new customer object based on information provided
     * during the session unless an existing customer was provided when
     * the session was created.
     */
    readonly customer?: string;
    /**
     * @description If provided, this value will be used when the Customer object is created.
     * If not provided, customers will be asked to enter their email address.
     * Use this parameter to prefill customer data if you already have an email
     * on file. To access information about the customer once a session is
     * complete, use the `customer` field.
     */
    readonly customer_email?: string;
    /** @description The line items, plans, or SKUs purchased by the customer. */
    readonly display_items?: readonly definitions["checkout_session_display_item"][];
    /**
     * @description Unique identifier for the object. Used to pass to `redirectToCheckout`
     * in Stripe.js.
     */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
     * @enum {string}
     */
    readonly locale?:
      | "auto"
      | "da"
      | "de"
      | "en"
      | "es"
      | "fi"
      | "fr"
      | "it"
      | "ja"
      | "ms"
      | "nb"
      | "nl"
      | "pl"
      | "pt"
      | "pt-BR"
      | "sv"
      | "zh";
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description The mode of the Checkout Session, one of `payment`, `setup`, or `subscription`.
     * @enum {string}
     */
    readonly mode?: "payment" | "setup" | "subscription";
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "checkout.session";
    /** @description The ID of the PaymentIntent for Checkout Sessions in `payment` mode. */
    readonly payment_intent?: string;
    /**
     * @description A list of the types of payment methods (e.g. card) this Checkout
     * Session is allowed to accept.
     */
    readonly payment_method_types: readonly string[];
    /** @description The ID of the SetupIntent for Checkout Sessions in `setup` mode. */
    readonly setup_intent?: string;
    readonly shipping?: definitions["shipping"];
    readonly shipping_address_collection?: definitions["payment_pages_payment_page_resources_shipping_address_collection"];
    /**
     * @description Describes the type of transaction being performed by Checkout in order to customize
     * relevant text on the page, such as the submit button. `submit_type` can only be
     * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
     * in `subscription` or `setup` mode.
     * @enum {string}
     */
    readonly submit_type?: "auto" | "book" | "donate" | "pay";
    /** @description The ID of the subscription for Checkout Sessions in `subscription` mode. */
    readonly subscription?: string;
    /**
     * @description The URL the customer will be directed to after the payment or
     * subscription creation is successful.
     */
    readonly success_url: string;
  };
  /** checkout_session_custom_display_item_description */
  readonly checkout_session_custom_display_item_description: {
    /** @description The description of the line item. */
    readonly description?: string;
    /** @description The images of the line item. */
    readonly images?: readonly string[];
    /** @description The name of the line item. */
    readonly name: string;
  };
  /** checkout_session_display_item */
  readonly checkout_session_display_item: {
    /** @description Amount for the display item. */
    readonly amount?: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency?: string;
    readonly custom?: definitions["checkout_session_custom_display_item_description"];
    readonly plan?: definitions["plan"];
    /** @description Quantity of the display item being purchased. */
    readonly quantity?: number;
    readonly sku?: definitions["sku"];
    /** @description The type of display item. One of `custom`, `plan` or `sku` */
    readonly type?: string;
  };
  /** ConnectCollectionTransfer */
  readonly connect_collection_transfer: {
    /** @description Amount transferred, in %s. */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description ID of the account that funds are being collected for. */
    readonly destination: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "connect_collection_transfer";
  };
  /**
   * CountrySpec
   * @description Stripe needs to collect certain pieces of information about each account
   * created. These requirements can differ depending on the account's country. The
   * Country Specs API makes these rules available to your integration.
   *
   * You can also view the information from this API call as [an online
   * guide](/docs/connect/required-verification-information).
   */
  readonly country_spec: {
    /** @description The default currency for this country. This applies to both payment methods and bank accounts. */
    readonly default_currency: string;
    /** @description Unique identifier for the object. Represented as the ISO country code for this country. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "country_spec";
    /** @description Currencies that can be accepted in the specific country (for transfers). */
    readonly supported_bank_account_currencies: { readonly [key: string]: unknown };
    /** @description Currencies that can be accepted in the specified country (for payments). */
    readonly supported_payment_currencies: readonly string[];
    /** @description Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges). */
    readonly supported_payment_methods: readonly string[];
    /** @description Countries that can accept transfers from the specified country. */
    readonly supported_transfer_countries: readonly string[];
    readonly verification_fields: definitions["country_spec_verification_fields"];
  };
  /** CountrySpecVerificationFieldDetails */
  readonly country_spec_verification_field_details: {
    /** @description Additional fields which are only required for some users. */
    readonly additional: readonly string[];
    /** @description Fields which every account must eventually provide. */
    readonly minimum: readonly string[];
  };
  /** CountrySpecVerificationFields */
  readonly country_spec_verification_fields: {
    readonly company: definitions["country_spec_verification_field_details"];
    readonly individual: definitions["country_spec_verification_field_details"];
  };
  /**
   * Coupon
   * @description A coupon contains information about a percent-off or amount-off discount you
   * might want to apply to a customer. Coupons may be applied to [invoices](https://stripe.com/docs/api#invoices) or
   * [orders](https://stripe.com/docs/api#create_order-coupon). Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge).
   */
  readonly coupon: {
    /** @description Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer. */
    readonly amount_off?: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off. */
    readonly currency?: string;
    /**
     * @description One of `forever`, `once`, and `repeating`. Describes how long a customer who applies this coupon will get the discount.
     * @enum {string}
     */
    readonly duration: "forever" | "once" | "repeating";
    /** @description If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`. */
    readonly duration_in_months?: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid. */
    readonly max_redemptions?: number;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description Name of the coupon displayed to customers on for instance invoices or receipts. */
    readonly name?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "coupon";
    /** @description Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a %s100 invoice %s50 instead. */
    readonly percent_off?: number;
    /** @description Date after which the coupon can no longer be redeemed. */
    readonly redeem_by?: number;
    /** @description Number of times this coupon has been applied to a customer. */
    readonly times_redeemed: number;
    /** @description Taking account of the above properties, whether this coupon can still be applied to a customer. */
    readonly valid: boolean;
  };
  /**
   * CreditNote
   * @description Issue a credit note to adjust an invoice's amount after the invoice is finalized.
   *
   * Related guide: [Credit Notes](https://stripe.com/docs/billing/invoices/credit-notes).
   */
  readonly credit_note: {
    /** @description The integer amount in **%s** representing the total amount of the credit note, including tax. */
    readonly amount: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description ID of the customer. */
    readonly customer: string;
    /** @description Customer balance transaction related to this credit note. */
    readonly customer_balance_transaction?: string;
    /** @description The integer amount in **%s** representing the amount of the discount that was credited. */
    readonly discount_amount: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description ID of the invoice. */
    readonly invoice: string;
    /**
     * CreditNoteLinesList
     * @description Line items that make up the credit note
     */
    readonly lines: {
      /** @description Details about each object. */
      readonly data: readonly definitions["credit_note_line_item"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Customer-facing text that appears on the credit note PDF. */
    readonly memo?: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice. */
    readonly number: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "credit_note";
    /** @description Amount that was credited outside of Stripe. */
    readonly out_of_band_amount?: number;
    /** @description The link to download the PDF of the credit note. */
    readonly pdf: string;
    /**
     * @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
     * @enum {string}
     */
    readonly reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
    /** @description Refund related to this credit note. */
    readonly refund?: string;
    /**
     * @description Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
     * @enum {string}
     */
    readonly status: "issued" | "void";
    /** @description The integer amount in **%s** representing the amount of the credit note, excluding tax and discount. */
    readonly subtotal: number;
    /** @description The aggregate amounts calculated per tax rate for all line items. */
    readonly tax_amounts: readonly definitions["credit_note_tax_amount"][];
    /** @description The integer amount in **%s** representing the total amount of the credit note, including tax and discount. */
    readonly total: number;
    /**
     * @description Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
     * @enum {string}
     */
    readonly type: "post_payment" | "pre_payment";
    /** @description The time that the credit note was voided. */
    readonly voided_at?: number;
  };
  /** CreditNoteLineItem */
  readonly credit_note_line_item: {
    /** @description The integer amount in **%s** representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts. */
    readonly amount: number;
    /** @description Description of the item being credited. */
    readonly description?: string;
    /** @description The integer amount in **%s** representing the discount being credited for this line item. */
    readonly discount_amount: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description ID of the invoice line item being credited */
    readonly invoice_line_item?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "credit_note_line_item";
    /** @description The number of units of product being credited. */
    readonly quantity?: number;
    /** @description The amount of tax calculated per tax rate for this line item */
    readonly tax_amounts: readonly definitions["credit_note_tax_amount"][];
    /** @description The tax rates which apply to the line item. */
    readonly tax_rates: readonly definitions["tax_rate"][];
    /**
     * @description The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
     * @enum {string}
     */
    readonly type: "custom_line_item" | "invoice_line_item";
    /** @description The cost of each unit of product being credited. */
    readonly unit_amount?: number;
    /** @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
    readonly unit_amount_decimal?: string;
  };
  /** CreditNoteTaxAmount */
  readonly credit_note_tax_amount: {
    /** @description The amount, in %s, of the tax. */
    readonly amount: number;
    /** @description Whether this tax amount is inclusive or exclusive. */
    readonly inclusive: boolean;
    /** @description The tax rate that was applied to get this tax amount. */
    readonly tax_rate: string;
  };
  /**
   * Customer
   * @description `Customer` objects allow you to perform recurring charges, and to track
   * multiple charges, that are associated with the same customer. The API allows
   * you to create, delete, and update your customers. You can retrieve individual
   * customers as well as a list of all your customers.
   *
   * Related guide: [Saving Cards with Customers](https://stripe.com/docs/saving-cards).
   */
  readonly customer: {
    readonly address?: definitions["address"];
    /** @description Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized. */
    readonly balance?: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes. */
    readonly currency?: string;
    /**
     * @description ID of the default payment source for the customer.
     *
     * If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
     */
    readonly default_source?: string;
    /** @description When the customer's latest invoice is billed by charging automatically, delinquent is true if the invoice's latest charge is failed. When the customer's latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date. */
    readonly delinquent?: boolean;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    readonly discount?: definitions["discount"];
    /** @description The customer's email address. */
    readonly email?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The prefix for the customer used to generate unique invoice numbers. */
    readonly invoice_prefix?: string;
    readonly invoice_settings?: definitions["invoice_setting_customer_setting"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /** @description The customer's full name or business name. */
    readonly name?: string;
    /** @description The suffix of the customer's next invoice number, e.g., 0001. */
    readonly next_invoice_sequence?: number;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "customer";
    /** @description The customer's phone number. */
    readonly phone?: string;
    /** @description The customer's preferred locales (languages), ordered by preference. */
    readonly preferred_locales?: readonly string[];
    readonly shipping?: definitions["shipping"];
    /**
     * ApmsSourcesSourceList
     * @description The customer's payment sources, if any.
     */
    readonly sources: {
      /** @description Details about each object. */
      readonly data: readonly definitions["alipay_account"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /**
     * SubscriptionList
     * @description The customer's current subscriptions, if any.
     */
    readonly subscriptions?: {
      /** @description Details about each object. */
      readonly data: readonly definitions["subscription"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /**
     * @description Describes the customer's tax exemption status. One of `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the text **"Reverse charge"**.
     * @enum {string}
     */
    readonly tax_exempt?: "exempt" | "none" | "reverse";
    /**
     * TaxIDsList
     * @description The customer's tax IDs.
     */
    readonly tax_ids?: {
      /** @description Details about each object. */
      readonly data: readonly definitions["tax_id"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
  };
  /** customer_acceptance */
  readonly customer_acceptance: {
    /** @description The time at which the customer accepted the Mandate. */
    readonly accepted_at?: number;
    readonly offline?: definitions["offline_acceptance"];
    readonly online?: definitions["online_acceptance"];
    /**
     * @description The type of customer acceptance information included with the Mandate. One of `online` or `offline`.
     * @enum {string}
     */
    readonly type: "offline" | "online";
  };
  /**
   * CustomerBalanceTransaction
   * @description Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
   * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
   * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
   * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
   *
   * Related guide: [Customer Balance](https://stripe.com/docs/billing/customer/balance) to learn more.
   */
  readonly customer_balance_transaction: {
    /** @description The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`. */
    readonly amount: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The ID of the credit note (if any) related to the transaction. */
    readonly credit_note?: string;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description The ID of the customer the transaction belongs to. */
    readonly customer: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice. */
    readonly ending_balance: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The ID of the invoice (if any) related to the transaction. */
    readonly invoice?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "customer_balance_transaction";
    /**
     * @description Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, or `unapplied_from_invoice`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
     * @enum {string}
     */
    readonly type:
      | "adjustment"
      | "applied_to_invoice"
      | "credit_note"
      | "initial"
      | "invoice_too_large"
      | "invoice_too_small"
      | "migration"
      | "unapplied_from_invoice"
      | "unspent_receiver_credit";
  };
  /** DeletedAccount */
  readonly deleted_account: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "account";
  };
  /** AlipayDeletedAccount */
  readonly deleted_alipay_account: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "alipay_account";
  };
  /** DeletedApplePayDomain */
  readonly deleted_apple_pay_domain: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "apple_pay_domain";
  };
  /** DeletedBankAccount */
  readonly deleted_bank_account: {
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
    readonly currency?: string;
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "bank_account";
  };
  /** BitcoinDeletedReceiver */
  readonly deleted_bitcoin_receiver: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "bitcoin_receiver";
  };
  /** DeletedCard */
  readonly deleted_card: {
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
    readonly currency?: string;
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "card";
  };
  /** DeletedCoupon */
  readonly deleted_coupon: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "coupon";
  };
  /** DeletedCustomer */
  readonly deleted_customer: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "customer";
  };
  /** DeletedDiscount */
  readonly deleted_discount: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "discount";
  };
  /** Polymorphic */
  readonly deleted_external_account: {
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
    readonly currency?: string;
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "bank_account";
  };
  /** DeletedInvoice */
  readonly deleted_invoice: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "invoice";
  };
  /** DeletedInvoiceItem */
  readonly deleted_invoiceitem: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "invoiceitem";
  };
  /** Polymorphic */
  readonly deleted_payment_source: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "alipay_account";
  };
  /** DeletedPerson */
  readonly deleted_person: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "person";
  };
  /** DeletedPlan */
  readonly deleted_plan: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "plan";
  };
  /** DeletedProduct */
  readonly deleted_product: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "product";
  };
  /** RadarListDeletedList */
  readonly "deleted_radar.value_list": {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "radar.value_list";
  };
  /** RadarListDeletedListItem */
  readonly "deleted_radar.value_list_item": {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "radar.value_list_item";
  };
  /** DeletedTransferRecipient */
  readonly deleted_recipient: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "recipient";
  };
  /** DeletedSKU */
  readonly deleted_sku: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "sku";
  };
  /** DeletedSubscriptionItem */
  readonly deleted_subscription_item: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "subscription_item";
  };
  /** deleted_tax_id */
  readonly deleted_tax_id: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "tax_id";
  };
  /** TerminalLocationDeletedLocation */
  readonly "deleted_terminal.location": {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "terminal.location";
  };
  /** TerminalReaderDeletedReader */
  readonly "deleted_terminal.reader": {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "terminal.reader";
  };
  /** NotificationWebhookEndpointDeleted */
  readonly deleted_webhook_endpoint: {
    /**
     * @description Always true for a deleted object
     * @enum {boolean}
     */
    readonly deleted: true;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "webhook_endpoint";
  };
  /** DeliveryEstimate */
  readonly delivery_estimate: {
    /** @description If `type` is `"exact"`, `date` will be the expected delivery date in the format YYYY-MM-DD. */
    readonly date?: string;
    /** @description If `type` is `"range"`, `earliest` will be be the earliest delivery date in the format YYYY-MM-DD. */
    readonly earliest?: string;
    /** @description If `type` is `"range"`, `latest` will be the latest delivery date in the format YYYY-MM-DD. */
    readonly latest?: string;
    /** @description The type of estimate. Must be either `"range"` or `"exact"`. */
    readonly type: string;
  };
  /**
   * Discount
   * @description A discount represents the actual application of a coupon to a particular
   * customer. It contains information about when the discount began and when it
   * will end.
   *
   * Related guide: [Applying Discounts to Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
   */
  readonly discount: {
    readonly coupon: definitions["coupon"];
    /** @description The ID of the customer associated with this discount. */
    readonly customer?: string;
    /** @description If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null. */
    readonly end?: number;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "discount";
    /** @description Date that the coupon was applied. */
    readonly start: number;
    /** @description The subscription that this coupon is applied to, if it is applied to a particular subscription. */
    readonly subscription?: string;
  };
  /**
   * Dispute
   * @description A dispute occurs when a customer questions your charge with their card issuer.
   * When this happens, you're given the opportunity to respond to the dispute with
   * evidence that shows that the charge is legitimate. You can find more
   * information about the dispute process in our [Disputes and
   * Fraud](/docs/disputes) documentation.
   *
   * Related guide: [Disputes and Fraud](https://stripe.com/docs/disputes).
   */
  readonly dispute: {
    /** @description Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed). */
    readonly amount: number;
    /** @description List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute. */
    readonly balance_transactions: readonly definitions["balance_transaction"][];
    /** @description ID of the charge that was disputed. */
    readonly charge: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    readonly evidence: definitions["dispute_evidence"];
    readonly evidence_details: definitions["dispute_evidence_details"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute. */
    readonly is_charge_refundable: boolean;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "dispute";
    /** @description ID of the PaymentIntent that was disputed. */
    readonly payment_intent?: string;
    /** @description Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories). */
    readonly reason: string;
    /**
     * @description Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.
     * @enum {string}
     */
    readonly status:
      | "charge_refunded"
      | "lost"
      | "needs_response"
      | "under_review"
      | "warning_closed"
      | "warning_needs_response"
      | "warning_under_review"
      | "won";
  };
  /** DisputeEvidence */
  readonly dispute_evidence: {
    /** @description Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. */
    readonly access_activity_log?: string;
    /** @description The billing address provided by the customer. */
    readonly billing_address?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer. */
    readonly cancellation_policy?: string;
    /** @description An explanation of how and when the customer was shown your refund policy prior to purchase. */
    readonly cancellation_policy_disclosure?: string;
    /** @description A justification for why the customer's subscription was not canceled. */
    readonly cancellation_rebuttal?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service. */
    readonly customer_communication?: string;
    /** @description The email address of the customer. */
    readonly customer_email_address?: string;
    /** @description The name of the customer. */
    readonly customer_name?: string;
    /** @description The IP address that the customer used when making the purchase. */
    readonly customer_purchase_ip?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature. */
    readonly customer_signature?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate. */
    readonly duplicate_charge_documentation?: string;
    /** @description An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. */
    readonly duplicate_charge_explanation?: string;
    /** @description The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge. */
    readonly duplicate_charge_id?: string;
    /** @description A description of the product or service that was sold. */
    readonly product_description?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge. */
    readonly receipt?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer. */
    readonly refund_policy?: string;
    /** @description Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
    readonly refund_policy_disclosure?: string;
    /** @description A justification for why the customer is not entitled to a refund. */
    readonly refund_refusal_explanation?: string;
    /** @description The date on which the customer received or began receiving the purchased service, in a clear human-readable format. */
    readonly service_date?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement. */
    readonly service_documentation?: string;
    /** @description The address to which a physical product was shipped. You should try to include as complete address information as possible. */
    readonly shipping_address?: string;
    /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas. */
    readonly shipping_carrier?: string;
    /** @description The date on which a physical product began its route to the shipping address, in a clear human-readable format. */
    readonly shipping_date?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible. */
    readonly shipping_documentation?: string;
    /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
    readonly shipping_tracking_number?: string;
    /** @description (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements. */
    readonly uncategorized_file?: string;
    /** @description Any additional evidence or statements. */
    readonly uncategorized_text?: string;
  };
  /** DisputeEvidenceDetails */
  readonly dispute_evidence_details: {
    /** @description Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute. */
    readonly due_by?: number;
    /** @description Whether evidence has been staged for this dispute. */
    readonly has_evidence: boolean;
    /** @description Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed. */
    readonly past_due: boolean;
    /** @description The number of times evidence has been submitted. Typically, you may only submit evidence once. */
    readonly submission_count: number;
  };
  /** EphemeralKey */
  readonly ephemeral_key: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Time at which the key will expire. Measured in seconds since the Unix epoch. */
    readonly expires: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "ephemeral_key";
    /** @description The key's secret. You can use this value to make authorized requests to the Stripe API. */
    readonly secret?: string;
  };
  /** @description An error response from the Stripe API */
  readonly error: {
    readonly error: definitions["api_errors"];
  };
  /**
   * NotificationEvent
   * @description Events are our way of letting you know when something interesting happens in
   * your account. When an interesting event occurs, we create a new `Event`
   * object. For example, when a charge succeeds, we create a `charge.succeeded`
   * event; and when an invoice payment attempt fails, we create an
   * `invoice.payment_failed` event. Note that many API requests may cause multiple
   * events to be created. For example, if you create a new subscription for a
   * customer, you will receive both a `customer.subscription.created` event and a
   * `charge.succeeded` event.
   *
   * Events occur when the state of another API resource changes. The state of that
   * resource at the time of the change is embedded in the event's data field. For
   * example, a `charge.succeeded` event will contain a charge, and an
   * `invoice.payment_failed` event will contain an invoice.
   *
   * As with other API resources, you can use endpoints to retrieve an
   * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
   * from the API. We also have a separate
   * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
   * `Event` objects directly to an endpoint on your server. Webhooks are managed
   * in your
   * [account settings](https://dashboard.stripe.com/account/webhooks'),
   * and our [Using Webhooks](https://stripe.com/docs/webhooks) guide will help you get set up.
   *
   * When using [Connect](https://stripe.com/docs/connect), you can also receive notifications of
   * events that occur in connected accounts. For these events, there will be an
   * additional `account` attribute in the received `Event` object.
   *
   * **NOTE:** Right now, access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event) is
   * guaranteed only for 30 days.
   */
  readonly event: {
    /** @description The connected account that originated the event. */
    readonly account?: string;
    /** @description The Stripe API version used to render `data`. *Note: This property is populated only for events on or after October 31, 2014*. */
    readonly api_version?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    readonly data: definitions["notification_event_data"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "event";
    /** @description Number of webhooks that have yet to be successfully delivered (i.e., to return a 20x response) to the URLs you've specified. */
    readonly pending_webhooks: number;
    readonly request?: definitions["notification_event_request"];
    /** @description Description of the event (e.g., `invoice.created` or `charge.refunded`). */
    readonly type: string;
  };
  /**
   * ExchangeRate
   * @description `Exchange Rate` objects allow you to determine the rates that Stripe is
   * currently using to convert from one currency to another. Since this number is
   * variable throughout the day, there are various reasons why you might want to
   * know the current rate (for example, to dynamically price an item for a user
   * with a default payment in a foreign currency).
   *
   * If you want a guarantee that the charge is made with a certain exchange rate
   * you expect is current, you can pass in `exchange_rate` to charges endpoints.
   * If the value is no longer up to date, the charge won't go through. Please
   * refer to our [Exchange Rates API](https://stripe.com/docs/exchange-rates) guide for more
   * details.
   */
  readonly exchange_rate: {
    /** @description Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "exchange_rate";
    /** @description Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency. */
    readonly rates: { readonly [key: string]: unknown };
  };
  /** Polymorphic */
  readonly external_account: {
    /** @description The ID of the account that the bank account is associated with. */
    readonly account?: string;
    /** @description Two-letter ISO code representing the country the bank account is located in. */
    readonly country: string;
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account. */
    readonly currency: string;
    /** @description The ID of the customer that the bank account is associated with. */
    readonly customer?: string;
    /** @description Whether this bank account is the default external account for its currency. */
    readonly default_for_currency?: boolean;
    /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    readonly fingerprint?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The last four digits of the bank account number. */
    readonly last4: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "bank_account";
  };
  /** Fee */
  readonly fee: {
    /** @description Amount of the fee, in cents. */
    readonly amount: number;
    /** @description ID of the Connect application that earned the fee. */
    readonly application?: string;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description Type of the fee, one of: `application_fee`, `stripe_fee` or `tax`. */
    readonly type: string;
  };
  /**
   * FeeRefund
   * @description `Application Fee Refund` objects allow you to refund an application fee that
   * has previously been created but not yet refunded. Funds will be refunded to
   * the Stripe account from which the fee was originally collected.
   *
   * Related guide: [Refunding Application Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
   */
  readonly fee_refund: {
    /** @description Amount, in %s. */
    readonly amount: number;
    /** @description Balance transaction that describes the impact on your account balance. */
    readonly balance_transaction?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description ID of the application fee that was refunded. */
    readonly fee: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "fee_refund";
  };
  /**
   * File
   * @description This is an object representing a file hosted on Stripe's servers. The
   * file may have been uploaded by yourself using the [create file](https://stripe.com/docs/api#create_file)
   * request (for example, when uploading dispute evidence) or it may have
   * been created by Stripe (for example, the results of a [Sigma scheduled
   * query](#scheduled_queries)).
   *
   * Related guide: [File Upload Guide](https://stripe.com/docs/file-upload).
   */
  readonly file: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description A filename for the file, suitable for saving to a filesystem. */
    readonly filename?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * FileFileLinkList
     * @description A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
     */
    readonly links?: {
      /** @description Details about each object. */
      readonly data: readonly definitions["file_link"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "file";
    /** @description The purpose of the file. Possible values are `additional_verification`, `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `identity_document`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`. */
    readonly purpose: string;
    /** @description The size in bytes of the file object. */
    readonly size: number;
    /** @description A user friendly title for the document. */
    readonly title?: string;
    /** @description The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`). */
    readonly type?: string;
    /** @description The URL from which the file can be downloaded using your live secret API key. */
    readonly url?: string;
  };
  /**
   * FileLink
   * @description To share the contents of a `File` object with non-Stripe users, you can
   * create a `FileLink`. `FileLink`s contain a URL that can be used to
   * retrieve the contents of the file without authentication.
   */
  readonly file_link: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Whether this link is already expired. */
    readonly expired: boolean;
    /** @description Time at which the link expires. */
    readonly expires_at?: number;
    /** @description The file object this link points to. */
    readonly file: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "file_link";
    /** @description The publicly accessible URL to download the file. */
    readonly url?: string;
  };
  /** FinancialReportingFinanceReportRunRunParameters */
  readonly financial_reporting_finance_report_run_run_parameters: {
    /** @description The set of output columns requested for inclusion in the report run. */
    readonly columns?: readonly string[];
    /** @description Connected account ID by which to filter the report run. */
    readonly connected_account?: string;
    /** @description Currency of objects to be included in the report run. */
    readonly currency?: string;
    /** @description Ending timestamp of data to be included in the report run (exclusive). */
    readonly interval_end?: number;
    /** @description Starting timestamp of data to be included in the report run. */
    readonly interval_start?: number;
    /** @description Payout ID by which to filter the report run. */
    readonly payout?: string;
    /** @description Category of balance transactions to be included in the report run. */
    readonly reporting_category?: string;
    /** @description Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`. */
    readonly timezone?: string;
  };
  /** Inventory */
  readonly inventory: {
    /** @description The count of inventory available. Will be present if and only if `type` is `finite`. */
    readonly quantity?: number;
    /** @description Inventory type. Possible values are `finite`, `bucket` (not quantified), and `infinite`. */
    readonly type: string;
    /** @description An indicator of the inventory available. Possible values are `in_stock`, `limited`, and `out_of_stock`. Will be present if and only if `type` is `bucket`. */
    readonly value?: string;
  };
  /**
   * Invoice
   * @description Invoices are statements of amounts owed by a customer, and are either
   * generated one-off, or generated periodically from a subscription.
   *
   * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
   * that may be caused by subscription upgrades/downgrades (if necessary).
   *
   * If your invoice is configured to be billed through automatic charges,
   * Stripe automatically finalizes your invoice and attempts payment. Note
   * that finalizing the invoice,
   * [when automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance), does
   * not happen immediately as the invoice is created. Stripe waits
   * until one hour after the last webhook was successfully sent (or the last
   * webhook timed out after failing). If you (and the platforms you may have
   * connected to) have no webhooks configured, Stripe waits one hour after
   * creation to finalize the invoice.
   *
   * If your invoice is configured to be billed by sending an email, then based on your
   * [email settings](https://dashboard.stripe.com/account/billing/automatic'),
   * Stripe will email the invoice to your customer and await payment. These
   * emails can contain a link to a hosted page to pay the invoice.
   *
   * Stripe applies any customer credit on the account before determining the
   * amount due for the invoice (i.e., the amount that will be actually
   * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
   * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
   * invoice is automatically marked paid, and we add the amount due to the
   * customer's running account balance which is applied to the next invoice.
   *
   * More details on the customer's account balance are
   * [here](https://stripe.com/docs/api/customers/object#customer_object-account_balance).
   *
   * Related guide: [Send Invoices to Customers](https://stripe.com/docs/billing/invoices/sending).
   */
  readonly invoice: {
    /** @description The country of the business associated with this invoice, most often the business creating the invoice. */
    readonly account_country?: string;
    /** @description The public name of the business associated with this invoice, most often the business creating the invoice. */
    readonly account_name?: string;
    /** @description Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`. */
    readonly amount_due: number;
    /** @description The amount, in %s, that was paid. */
    readonly amount_paid: number;
    /** @description The amount remaining, in %s, that is due. */
    readonly amount_remaining: number;
    /** @description The fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid. */
    readonly application_fee_amount?: number;
    /** @description Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. */
    readonly attempt_count: number;
    /** @description Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users. */
    readonly attempted: boolean;
    /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
    readonly auto_advance?: boolean;
    /**
     * @description Indicates the reason why the invoice was created. `subscription_cycle` indicates an invoice created by a subscription advancing into a new period. `subscription_create` indicates an invoice created due to creating a subscription. `subscription_update` indicates an invoice created due to updating a subscription. `subscription` is set for all old invoices to indicate either a change to a subscription or a period advancement. `manual` is set for all invoices unrelated to a subscription (for example: created via the invoice editor). The `upcoming` value is reserved for simulated invoices per the upcoming invoice endpoint. `subscription_threshold` indicates an invoice created due to a billing threshold being reached.
     * @enum {string}
     */
    readonly billing_reason?:
      | "automatic_pending_invoice_item_invoice"
      | "manual"
      | "subscription"
      | "subscription_create"
      | "subscription_cycle"
      | "subscription_threshold"
      | "subscription_update"
      | "upcoming";
    /** @description ID of the latest charge generated for this invoice, if any. */
    readonly charge?: string;
    /**
     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
     * @enum {string}
     */
    readonly collection_method?: "charge_automatically" | "send_invoice";
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Custom fields displayed on the invoice. */
    readonly custom_fields?: readonly definitions["invoice_setting_custom_field"][];
    /** @description The ID of the customer who will be billed. */
    readonly customer: string;
    readonly customer_address?: definitions["address"];
    /** @description The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated. */
    readonly customer_email?: string;
    /** @description The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated. */
    readonly customer_name?: string;
    /** @description The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated. */
    readonly customer_phone?: string;
    readonly customer_shipping?: definitions["shipping"];
    /**
     * @description The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
     * @enum {string}
     */
    readonly customer_tax_exempt?: "exempt" | "none" | "reverse";
    /** @description The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated. */
    readonly customer_tax_ids?: readonly definitions["invoices_resource_invoice_tax_id"][];
    /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
    readonly default_payment_method?: string;
    /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
    readonly default_source?: string;
    /** @description The tax rates applied to this invoice, if any. */
    readonly default_tax_rates?: readonly definitions["tax_rate"][];
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
    readonly description?: string;
    readonly discount?: definitions["discount"];
    /** @description The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`. */
    readonly due_date?: number;
    /** @description Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null. */
    readonly ending_balance?: number;
    /** @description Footer displayed on the invoice. */
    readonly footer?: string;
    /** @description The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null. */
    readonly hosted_invoice_url?: string;
    /** @description Unique identifier for the object. */
    readonly id?: string;
    /** @description The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null. */
    readonly invoice_pdf?: string;
    /**
     * InvoiceLinesList
     * @description The individual line items that make up the invoice. `lines` is sorted as follows: invoice items in reverse chronological order, followed by the subscription, if any.
     */
    readonly lines: {
      /** @description Details about each object. */
      readonly data: readonly definitions["line_item"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /** @description The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`. */
    readonly next_payment_attempt?: number;
    /** @description A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified. */
    readonly number?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "invoice";
    /** @description Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer's account balance. */
    readonly paid: boolean;
    /** @description The PaymentIntent associated with this invoice. The PaymentIntent is generated when the invoice is finalized, and can then be used to pay the invoice. Note that voiding an invoice will cancel the PaymentIntent. */
    readonly payment_intent?: string;
    /** @description End of the usage period during which invoice items were added to this invoice. */
    readonly period_end: number;
    /** @description Start of the usage period during which invoice items were added to this invoice. */
    readonly period_start: number;
    /** @description Total amount of all post-payment credit notes issued for this invoice. */
    readonly post_payment_credit_notes_amount: number;
    /** @description Total amount of all pre-payment credit notes issued for this invoice. */
    readonly pre_payment_credit_notes_amount: number;
    /** @description This is the transaction number that appears on email receipts sent for this invoice. */
    readonly receipt_number?: string;
    /** @description Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. */
    readonly starting_balance: number;
    /** @description Extra information about an invoice for the customer's credit card statement. */
    readonly statement_descriptor?: string;
    /**
     * @description The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
     * @enum {string}
     */
    readonly status?: "deleted" | "draft" | "open" | "paid" | "uncollectible" | "void";
    readonly status_transitions: definitions["invoices_status_transitions"];
    /** @description The subscription that this invoice was prepared for, if any. */
    readonly subscription?: string;
    /** @description Only set for upcoming invoices that preview prorations. The time used to calculate prorations. */
    readonly subscription_proration_date?: number;
    /** @description Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied. */
    readonly subtotal: number;
    /** @description The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice. */
    readonly tax?: number;
    /** @description This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's `tax_percent` field, but can be changed before the invoice is paid. This field defaults to null. */
    readonly tax_percent?: number;
    readonly threshold_reason?: definitions["invoice_threshold_reason"];
    /** @description Total after discounts and taxes. */
    readonly total: number;
    /** @description The aggregate amounts calculated per tax rate for all line items. */
    readonly total_tax_amounts?: readonly definitions["invoice_tax_amount"][];
    /** @description Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created. */
    readonly webhooks_delivered_at?: number;
  };
  /** InvoiceItemThresholdReason */
  readonly invoice_item_threshold_reason: {
    /** @description The IDs of the line items that triggered the threshold invoice. */
    readonly line_item_ids: readonly string[];
    /** @description The quantity threshold boundary that applied to the given line item. */
    readonly usage_gte: number;
  };
  /** InvoiceLineItemPeriod */
  readonly invoice_line_item_period: {
    /** @description End of the line item's billing period */
    readonly end: number;
    /** @description Start of the line item's billing period */
    readonly start: number;
  };
  /** InvoiceSettingCustomField */
  readonly invoice_setting_custom_field: {
    /** @description The name of the custom field. */
    readonly name: string;
    /** @description The value of the custom field. */
    readonly value: string;
  };
  /** InvoiceSettingCustomerSetting */
  readonly invoice_setting_customer_setting: {
    /** @description Default custom fields to be displayed on invoices for this customer. */
    readonly custom_fields?: readonly definitions["invoice_setting_custom_field"][];
    /** @description ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices. */
    readonly default_payment_method?: string;
    /** @description Default footer to be displayed on invoices for this customer. */
    readonly footer?: string;
  };
  /** InvoiceSettingSubscriptionScheduleSetting */
  readonly invoice_setting_subscription_schedule_setting: {
    /** @description Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`. */
    readonly days_until_due?: number;
  };
  /** InvoiceTaxAmount */
  readonly invoice_tax_amount: {
    /** @description The amount, in %s, of the tax. */
    readonly amount: number;
    /** @description Whether this tax amount is inclusive or exclusive. */
    readonly inclusive: boolean;
    /** @description The tax rate that was applied to get this tax amount. */
    readonly tax_rate: string;
  };
  /** InvoiceThresholdReason */
  readonly invoice_threshold_reason: {
    /** @description The total invoice amount threshold boundary if it triggered the threshold invoice. */
    readonly amount_gte?: number;
    /** @description Indicates which line items triggered a threshold invoice. */
    readonly item_reasons: readonly definitions["invoice_item_threshold_reason"][];
  };
  /**
   * InvoiceItem
   * @description Sometimes you want to add a charge or credit to a customer, but actually
   * charge or credit the customer's card only at the end of a regular billing
   * cycle. This is useful for combining several charges (to minimize
   * per-transaction fees), or for having Stripe tabulate your usage-based billing
   * totals.
   *
   * Related guide: [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
   */
  readonly invoiceitem: {
    /** @description Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`. */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description The ID of the customer who will be billed when this invoice item is billed. */
    readonly customer: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly date: number;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description If true, discounts will apply to this invoice item. Always false for prorations. */
    readonly discountable: boolean;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The ID of the invoice this invoice item belongs to. */
    readonly invoice?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "invoiceitem";
    readonly period: definitions["invoice_line_item_period"];
    readonly plan?: definitions["plan"];
    /** @description Whether the invoice item was created automatically as a proration adjustment when the customer switched plans. */
    readonly proration: boolean;
    /** @description Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for. */
    readonly quantity: number;
    /** @description The subscription that this invoice item has been created for, if any. */
    readonly subscription?: string;
    /** @description The subscription item that this invoice item has been created for, if any. */
    readonly subscription_item?: string;
    /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
    readonly tax_rates?: readonly definitions["tax_rate"][];
    /** @description Unit Amount (in the `currency` specified) of the invoice item. */
    readonly unit_amount?: number;
    /** @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
    readonly unit_amount_decimal?: string;
  };
  /** InvoicesResourceInvoiceTaxID */
  readonly invoices_resource_invoice_tax_id: {
    /**
     * @description The type of the tax ID, one of `eu_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `my_sst`, `sg_gst`, or `unknown`
     * @enum {string}
     */
    readonly type:
      | "au_abn"
      | "ca_bn"
      | "ca_qst"
      | "ch_vat"
      | "es_cif"
      | "eu_vat"
      | "hk_br"
      | "in_gst"
      | "jp_cn"
      | "kr_brn"
      | "li_uid"
      | "mx_rfc"
      | "my_itn"
      | "my_sst"
      | "no_vat"
      | "nz_gst"
      | "ru_inn"
      | "sg_gst"
      | "sg_uen"
      | "th_vat"
      | "tw_vat"
      | "unknown"
      | "us_ein"
      | "za_vat";
    /** @description The value of the tax ID. */
    readonly value?: string;
  };
  /** InvoicesStatusTransitions */
  readonly invoices_status_transitions: {
    /** @description The time that the invoice draft was finalized. */
    readonly finalized_at?: number;
    /** @description The time that the invoice was marked uncollectible. */
    readonly marked_uncollectible_at?: number;
    /** @description The time that the invoice was paid. */
    readonly paid_at?: number;
    /** @description The time that the invoice was voided. */
    readonly voided_at?: number;
  };
  /**
   * IssuerFraudRecord
   * @description This resource has been renamed to [Early Fraud
   * Warning](#early_fraud_warning_object) and will be removed in a future API
   * version.
   */
  readonly issuer_fraud_record: {
    /** @description An IFR is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an IFR, in order to avoid receiving a dispute later. */
    readonly actionable: boolean;
    /** @description ID of the charge this issuer fraud record is for, optionally expanded. */
    readonly charge: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
    readonly fraud_type: string;
    /** @description If true, the associated charge is subject to [liability shift](https://stripe.com/docs/payments/3d-secure#disputed-payments). */
    readonly has_liability_shift: boolean;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "issuer_fraud_record";
    /** @description The timestamp at which the card issuer posted the issuer fraud record. */
    readonly post_date: number;
  };
  /**
   * IssuingAuthorization
   * @description When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
   * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
   * purchase to be completed successfully.
   *
   * Related guide: [Issued Card Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
   */
  readonly "issuing.authorization": {
    /** @description The total amount that was authorized or rejected. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    readonly amount: number;
    /** @description Whether the authorization has been approved. */
    readonly approved: boolean;
    /**
     * @description How the card details were provided.
     * @enum {string}
     */
    readonly authorization_method: "chip" | "contactless" | "keyed_in" | "online" | "swipe";
    /** @description List of balance transactions associated with this authorization. */
    readonly balance_transactions: readonly definitions["balance_transaction"][];
    readonly card: definitions["issuing.card"];
    /** @description The cardholder to whom this authorization belongs. */
    readonly cardholder?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    readonly merchant_amount: number;
    /** @description The currency that was presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly merchant_currency: string;
    readonly merchant_data: definitions["issuing_authorization_merchant_data"];
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "issuing.authorization";
    readonly pending_request?: definitions["issuing_authorization_pending_request"];
    /** @description History of every time the authorization was approved/denied (whether approved/denied by you directly or by Stripe based on your `spending_controls`). If the merchant changes the authorization by performing an [incremental authorization or partial capture](https://stripe.com/docs/issuing/purchases/authorizations), you can look at this field to see the previous states of the authorization. */
    readonly request_history: readonly definitions["issuing_authorization_request"][];
    /**
     * @description The current status of the authorization in its lifecycle.
     * @enum {string}
     */
    readonly status: "closed" | "pending" | "reversed";
    /** @description List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization. */
    readonly transactions: readonly definitions["issuing.transaction"][];
    readonly verification_data: definitions["issuing_authorization_verification_data"];
    /** @description What, if any, digital wallet was used for this authorization. One of `apple_pay`, `google_pay`, or `samsung_pay`. */
    readonly wallet?: string;
  };
  /**
   * IssuingCard
   * @description You can [create physical or virtual cards](https://stripe.com/docs/issuing/cards) that are issued to cardholders.
   */
  readonly "issuing.card": {
    /** @description The brand of the card. */
    readonly brand: string;
    /**
     * @description The reason why the card was canceled.
     * @enum {string}
     */
    readonly cancellation_reason?: "lost" | "stolen";
    readonly cardholder: definitions["issuing.cardholder"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
    readonly cvc?: string;
    /** @description The expiration month of the card. */
    readonly exp_month: number;
    /** @description The expiration year of the card. */
    readonly exp_year: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The last 4 digits of the card number. */
    readonly last4: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint. */
    readonly number?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "issuing.card";
    /** @description The latest card that replaces this card, if any. */
    readonly replaced_by?: string;
    /** @description The card this card replaces, if any. */
    readonly replacement_for?: string;
    /**
     * @description The reason why the previous card needed to be replaced.
     * @enum {string}
     */
    readonly replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
    readonly shipping?: definitions["issuing_card_shipping"];
    readonly spending_controls: definitions["issuing_card_authorization_controls"];
    /**
     * @description Whether authorizations can be approved on this card.
     * @enum {string}
     */
    readonly status: "active" | "canceled" | "inactive";
    /**
     * @description The type of the card.
     * @enum {string}
     */
    readonly type: "physical" | "virtual";
  };
  /**
   * IssuingCardholder
   * @description An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
   *
   * Related guide: [How to create a Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
   */
  readonly "issuing.cardholder": {
    readonly billing: definitions["issuing_cardholder_address"];
    readonly company?: definitions["issuing_cardholder_company"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The cardholder's email address. */
    readonly email?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    readonly individual?: definitions["issuing_cardholder_individual"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description The cardholder's name. This will be printed on cards issued to them. */
    readonly name: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "issuing.cardholder";
    /** @description The cardholder's phone number. */
    readonly phone_number?: string;
    readonly requirements: definitions["issuing_cardholder_requirements"];
    readonly spending_controls?: definitions["issuing_cardholder_authorization_controls"];
    /**
     * @description Specifies whether to permit authorizations on this cardholder's cards.
     * @enum {string}
     */
    readonly status: "active" | "blocked" | "inactive";
    /**
     * @description One of `individual` or `company`.
     * @enum {string}
     */
    readonly type: "company" | "individual";
  };
  /**
   * IssuingDispute
   * @description As a [card issuer](https://stripe.com/docs/issuing), you can [dispute](https://stripe.com/docs/issuing/purchases/disputes) transactions that you do not recognize, suspect to be fraudulent, or have some other issue.
   *
   * Related guide: [Disputing Transactions](https://stripe.com/docs/issuing/purchases/disputes)
   */
  readonly "issuing.dispute": {
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "issuing.dispute";
  };
  /**
   * IssuingSettlement
   * @description When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
   */
  readonly "issuing.settlement": {
    /** @description The Bank Identification Number reflecting this settlement record. */
    readonly bin: string;
    /** @description The date that the transactions are cleared and posted to user's accounts. */
    readonly clearing_date: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The total interchange received as reimbursement for the transactions. */
    readonly interchange_fees: number;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description The total net amount required to settle with the network. */
    readonly net_total: number;
    /**
     * @description The card network for this settlement report. One of ["visa"]
     * @enum {string}
     */
    readonly network: "visa";
    /** @description The total amount of fees owed to the network. */
    readonly network_fees: number;
    /** @description The Settlement Identification Number assigned by the network. */
    readonly network_settlement_identifier: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "issuing.settlement";
    /** @description One of `international` or `uk_national_net`. */
    readonly settlement_service: string;
    /** @description The total number of transactions reflected in this settlement. */
    readonly transaction_count: number;
    /** @description The total transaction amount reflected in this settlement. */
    readonly transaction_volume: number;
  };
  /**
   * IssuingTransaction
   * @description Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
   * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
   * `Transaction` object.
   *
   * Related guide: [Issued Card Transactions](https://stripe.com/docs/issuing/purchases/transactions).
   */
  readonly "issuing.transaction": {
    /** @description The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    readonly amount: number;
    /** @description The `Authorization` object that led to this transaction. */
    readonly authorization?: string;
    /** @description ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction. */
    readonly balance_transaction?: string;
    /** @description The card used to make this transaction. */
    readonly card: string;
    /** @description The cardholder to whom this transaction belongs. */
    readonly cardholder?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency. */
    readonly merchant_amount: number;
    /** @description The currency with which the merchant is taking payment. */
    readonly merchant_currency: string;
    readonly merchant_data: definitions["issuing_authorization_merchant_data"];
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "issuing.transaction";
    /**
     * @description The nature of the transaction.
     * @enum {string}
     */
    readonly type: "capture" | "refund";
  };
  /** IssuingAuthorizationMerchantData */
  readonly issuing_authorization_merchant_data: {
    /** @description A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values. */
    readonly category: string;
    /** @description City where the seller is located */
    readonly city?: string;
    /** @description Country where the seller is located */
    readonly country?: string;
    /** @description Name of the seller */
    readonly name?: string;
    /** @description Identifier assigned to the seller by the card brand */
    readonly network_id: string;
    /** @description Postal code where the seller is located */
    readonly postal_code?: string;
    /** @description State where the seller is located */
    readonly state?: string;
  };
  /** IssuingAuthorizationPendingRequest */
  readonly issuing_authorization_pending_request: {
    /** @description The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization. */
    readonly is_amount_controllable: boolean;
    /** @description The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    readonly merchant_amount: number;
    /** @description The local currency the merchant is requesting to authorize. */
    readonly merchant_currency: string;
  };
  /** IssuingAuthorizationRequest */
  readonly issuing_authorization_request: {
    /** @description The authorization amount in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved. */
    readonly amount: number;
    /** @description Whether this request was approved. */
    readonly approved: boolean;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description The amount that was authorized at the time of this request. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). */
    readonly merchant_amount: number;
    /** @description The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly merchant_currency: string;
    /**
     * @description The reason for the approval or decline.
     * @enum {string}
     */
    readonly reason:
      | "account_disabled"
      | "card_active"
      | "card_inactive"
      | "cardholder_inactive"
      | "cardholder_verification_required"
      | "insufficient_funds"
      | "not_allowed"
      | "spending_controls"
      | "suspected_fraud"
      | "verification_failed"
      | "webhook_approved"
      | "webhook_declined"
      | "webhook_timeout";
  };
  /** IssuingAuthorizationVerificationData */
  readonly issuing_authorization_verification_data: {
    /**
     * @description Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
     * @enum {string}
     */
    readonly address_line1_check: "match" | "mismatch" | "not_provided";
    /**
     * @description Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
     * @enum {string}
     */
    readonly address_postal_code_check: "match" | "mismatch" | "not_provided";
    /**
     * @description Whether the cardholder provided a CVC and if it matched Stripe’s record.
     * @enum {string}
     */
    readonly cvc_check: "match" | "mismatch" | "not_provided";
    /**
     * @description Whether the cardholder provided an expiry date and if it matched Stripe’s record.
     * @enum {string}
     */
    readonly expiry_check: "match" | "mismatch" | "not_provided";
  };
  /** IssuingCardAuthorizationControls */
  readonly issuing_card_authorization_controls: {
    /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this card. */
    readonly allowed_categories?: readonly (
      | "ac_refrigeration_repair"
      | "accounting_bookkeeping_services"
      | "advertising_services"
      | "agricultural_cooperative"
      | "airlines_air_carriers"
      | "airports_flying_fields"
      | "ambulance_services"
      | "amusement_parks_carnivals"
      | "antique_reproductions"
      | "antique_shops"
      | "aquariums"
      | "architectural_surveying_services"
      | "art_dealers_and_galleries"
      | "artists_supply_and_craft_shops"
      | "auto_and_home_supply_stores"
      | "auto_body_repair_shops"
      | "auto_paint_shops"
      | "auto_service_shops"
      | "automated_cash_disburse"
      | "automated_fuel_dispensers"
      | "automobile_associations"
      | "automotive_parts_and_accessories_stores"
      | "automotive_tire_stores"
      | "bail_and_bond_payments"
      | "bakeries"
      | "bands_orchestras"
      | "barber_and_beauty_shops"
      | "betting_casino_gambling"
      | "bicycle_shops"
      | "billiard_pool_establishments"
      | "boat_dealers"
      | "boat_rentals_and_leases"
      | "book_stores"
      | "books_periodicals_and_newspapers"
      | "bowling_alleys"
      | "bus_lines"
      | "business_secretarial_schools"
      | "buying_shopping_services"
      | "cable_satellite_and_other_pay_television_and_radio"
      | "camera_and_photographic_supply_stores"
      | "candy_nut_and_confectionery_stores"
      | "car_and_truck_dealers_new_used"
      | "car_and_truck_dealers_used_only"
      | "car_rental_agencies"
      | "car_washes"
      | "carpentry_services"
      | "carpet_upholstery_cleaning"
      | "caterers"
      | "charitable_and_social_service_organizations_fundraising"
      | "chemicals_and_allied_products"
      | "child_care_services"
      | "childrens_and_infants_wear_stores"
      | "chiropodists_podiatrists"
      | "chiropractors"
      | "cigar_stores_and_stands"
      | "civic_social_fraternal_associations"
      | "cleaning_and_maintenance"
      | "clothing_rental"
      | "colleges_universities"
      | "commercial_equipment"
      | "commercial_footwear"
      | "commercial_photography_art_and_graphics"
      | "commuter_transport_and_ferries"
      | "computer_network_services"
      | "computer_programming"
      | "computer_repair"
      | "computer_software_stores"
      | "computers_peripherals_and_software"
      | "concrete_work_services"
      | "construction_materials"
      | "consulting_public_relations"
      | "correspondence_schools"
      | "cosmetic_stores"
      | "counseling_services"
      | "country_clubs"
      | "courier_services"
      | "court_costs"
      | "credit_reporting_agencies"
      | "cruise_lines"
      | "dairy_products_stores"
      | "dance_hall_studios_schools"
      | "dating_escort_services"
      | "dentists_orthodontists"
      | "department_stores"
      | "detective_agencies"
      | "digital_goods_applications"
      | "digital_goods_games"
      | "digital_goods_large_volume"
      | "digital_goods_media"
      | "direct_marketing_catalog_merchant"
      | "direct_marketing_combination_catalog_and_retail_merchant"
      | "direct_marketing_inbound_telemarketing"
      | "direct_marketing_insurance_services"
      | "direct_marketing_other"
      | "direct_marketing_outbound_telemarketing"
      | "direct_marketing_subscription"
      | "direct_marketing_travel"
      | "discount_stores"
      | "doctors"
      | "door_to_door_sales"
      | "drapery_window_covering_and_upholstery_stores"
      | "drinking_places"
      | "drug_stores_and_pharmacies"
      | "drugs_drug_proprietaries_and_druggist_sundries"
      | "dry_cleaners"
      | "durable_goods"
      | "duty_free_stores"
      | "eating_places_restaurants"
      | "educational_services"
      | "electric_razor_stores"
      | "electrical_parts_and_equipment"
      | "electrical_services"
      | "electronics_repair_shops"
      | "electronics_stores"
      | "elementary_secondary_schools"
      | "employment_temp_agencies"
      | "equipment_rental"
      | "exterminating_services"
      | "family_clothing_stores"
      | "fast_food_restaurants"
      | "financial_institutions"
      | "fines_government_administrative_entities"
      | "fireplace_fireplace_screens_and_accessories_stores"
      | "floor_covering_stores"
      | "florists"
      | "florists_supplies_nursery_stock_and_flowers"
      | "freezer_and_locker_meat_provisioners"
      | "fuel_dealers_non_automotive"
      | "funeral_services_crematories"
      | "furniture_home_furnishings_and_equipment_stores_except_appliances"
      | "furniture_repair_refinishing"
      | "furriers_and_fur_shops"
      | "general_services"
      | "gift_card_novelty_and_souvenir_shops"
      | "glass_paint_and_wallpaper_stores"
      | "glassware_crystal_stores"
      | "golf_courses_public"
      | "government_services"
      | "grocery_stores_supermarkets"
      | "hardware_equipment_and_supplies"
      | "hardware_stores"
      | "health_and_beauty_spas"
      | "hearing_aids_sales_and_supplies"
      | "heating_plumbing_a_c"
      | "hobby_toy_and_game_shops"
      | "home_supply_warehouse_stores"
      | "hospitals"
      | "hotels_motels_and_resorts"
      | "household_appliance_stores"
      | "industrial_supplies"
      | "information_retrieval_services"
      | "insurance_default"
      | "insurance_underwriting_premiums"
      | "intra_company_purchases"
      | "jewelry_stores_watches_clocks_and_silverware_stores"
      | "landscaping_services"
      | "laundries"
      | "laundry_cleaning_services"
      | "legal_services_attorneys"
      | "luggage_and_leather_goods_stores"
      | "lumber_building_materials_stores"
      | "manual_cash_disburse"
      | "marinas_service_and_supplies"
      | "masonry_stonework_and_plaster"
      | "massage_parlors"
      | "medical_and_dental_labs"
      | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
      | "medical_services"
      | "membership_organizations"
      | "mens_and_boys_clothing_and_accessories_stores"
      | "mens_womens_clothing_stores"
      | "metal_service_centers"
      | "miscellaneous"
      | "miscellaneous_apparel_and_accessory_shops"
      | "miscellaneous_auto_dealers"
      | "miscellaneous_business_services"
      | "miscellaneous_food_stores"
      | "miscellaneous_general_merchandise"
      | "miscellaneous_general_services"
      | "miscellaneous_home_furnishing_specialty_stores"
      | "miscellaneous_publishing_and_printing"
      | "miscellaneous_recreation_services"
      | "miscellaneous_repair_shops"
      | "miscellaneous_specialty_retail"
      | "mobile_home_dealers"
      | "motion_picture_theaters"
      | "motor_freight_carriers_and_trucking"
      | "motor_homes_dealers"
      | "motor_vehicle_supplies_and_new_parts"
      | "motorcycle_shops_and_dealers"
      | "motorcycle_shops_dealers"
      | "music_stores_musical_instruments_pianos_and_sheet_music"
      | "news_dealers_and_newsstands"
      | "non_fi_money_orders"
      | "non_fi_stored_value_card_purchase_load"
      | "nondurable_goods"
      | "nurseries_lawn_and_garden_supply_stores"
      | "nursing_personal_care"
      | "office_and_commercial_furniture"
      | "opticians_eyeglasses"
      | "optometrists_ophthalmologist"
      | "orthopedic_goods_prosthetic_devices"
      | "osteopaths"
      | "package_stores_beer_wine_and_liquor"
      | "paints_varnishes_and_supplies"
      | "parking_lots_garages"
      | "passenger_railways"
      | "pawn_shops"
      | "pet_shops_pet_food_and_supplies"
      | "petroleum_and_petroleum_products"
      | "photo_developing"
      | "photographic_photocopy_microfilm_equipment_and_supplies"
      | "photographic_studios"
      | "picture_video_production"
      | "piece_goods_notions_and_other_dry_goods"
      | "plumbing_heating_equipment_and_supplies"
      | "political_organizations"
      | "postal_services_government_only"
      | "precious_stones_and_metals_watches_and_jewelry"
      | "professional_services"
      | "public_warehousing_and_storage"
      | "quick_copy_repro_and_blueprint"
      | "railroads"
      | "real_estate_agents_and_managers_rentals"
      | "record_stores"
      | "recreational_vehicle_rentals"
      | "religious_goods_stores"
      | "religious_organizations"
      | "roofing_siding_sheet_metal"
      | "secretarial_support_services"
      | "security_brokers_dealers"
      | "service_stations"
      | "sewing_needlework_fabric_and_piece_goods_stores"
      | "shoe_repair_hat_cleaning"
      | "shoe_stores"
      | "small_appliance_repair"
      | "snowmobile_dealers"
      | "special_trade_services"
      | "specialty_cleaning"
      | "sporting_goods_stores"
      | "sporting_recreation_camps"
      | "sports_and_riding_apparel_stores"
      | "sports_clubs_fields"
      | "stamp_and_coin_stores"
      | "stationary_office_supplies_printing_and_writing_paper"
      | "stationery_stores_office_and_school_supply_stores"
      | "swimming_pools_sales"
      | "t_ui_travel_germany"
      | "tailors_alterations"
      | "tax_payments_government_agencies"
      | "tax_preparation_services"
      | "taxicabs_limousines"
      | "telecommunication_equipment_and_telephone_sales"
      | "telecommunication_services"
      | "telegraph_services"
      | "tent_and_awning_shops"
      | "testing_laboratories"
      | "theatrical_ticket_agencies"
      | "timeshares"
      | "tire_retreading_and_repair"
      | "tolls_bridge_fees"
      | "tourist_attractions_and_exhibits"
      | "towing_services"
      | "trailer_parks_campgrounds"
      | "transportation_services"
      | "travel_agencies_tour_operators"
      | "truck_stop_iteration"
      | "truck_utility_trailer_rentals"
      | "typesetting_plate_making_and_related_services"
      | "typewriter_stores"
      | "u_s_federal_government_agencies_or_departments"
      | "uniforms_commercial_clothing"
      | "used_merchandise_and_secondhand_stores"
      | "utilities"
      | "variety_stores"
      | "veterinary_services"
      | "video_amusement_game_supplies"
      | "video_game_arcades"
      | "video_tape_rental_stores"
      | "vocational_trade_schools"
      | "watch_jewelry_repair"
      | "welding_repair"
      | "wholesale_clubs"
      | "wig_and_toupee_stores"
      | "wires_money_orders"
      | "womens_accessory_and_specialty_shops"
      | "womens_ready_to_wear_stores"
      | "wrecking_and_salvage_yards"
    )[];
    /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this card. */
    readonly blocked_categories?: readonly (
      | "ac_refrigeration_repair"
      | "accounting_bookkeeping_services"
      | "advertising_services"
      | "agricultural_cooperative"
      | "airlines_air_carriers"
      | "airports_flying_fields"
      | "ambulance_services"
      | "amusement_parks_carnivals"
      | "antique_reproductions"
      | "antique_shops"
      | "aquariums"
      | "architectural_surveying_services"
      | "art_dealers_and_galleries"
      | "artists_supply_and_craft_shops"
      | "auto_and_home_supply_stores"
      | "auto_body_repair_shops"
      | "auto_paint_shops"
      | "auto_service_shops"
      | "automated_cash_disburse"
      | "automated_fuel_dispensers"
      | "automobile_associations"
      | "automotive_parts_and_accessories_stores"
      | "automotive_tire_stores"
      | "bail_and_bond_payments"
      | "bakeries"
      | "bands_orchestras"
      | "barber_and_beauty_shops"
      | "betting_casino_gambling"
      | "bicycle_shops"
      | "billiard_pool_establishments"
      | "boat_dealers"
      | "boat_rentals_and_leases"
      | "book_stores"
      | "books_periodicals_and_newspapers"
      | "bowling_alleys"
      | "bus_lines"
      | "business_secretarial_schools"
      | "buying_shopping_services"
      | "cable_satellite_and_other_pay_television_and_radio"
      | "camera_and_photographic_supply_stores"
      | "candy_nut_and_confectionery_stores"
      | "car_and_truck_dealers_new_used"
      | "car_and_truck_dealers_used_only"
      | "car_rental_agencies"
      | "car_washes"
      | "carpentry_services"
      | "carpet_upholstery_cleaning"
      | "caterers"
      | "charitable_and_social_service_organizations_fundraising"
      | "chemicals_and_allied_products"
      | "child_care_services"
      | "childrens_and_infants_wear_stores"
      | "chiropodists_podiatrists"
      | "chiropractors"
      | "cigar_stores_and_stands"
      | "civic_social_fraternal_associations"
      | "cleaning_and_maintenance"
      | "clothing_rental"
      | "colleges_universities"
      | "commercial_equipment"
      | "commercial_footwear"
      | "commercial_photography_art_and_graphics"
      | "commuter_transport_and_ferries"
      | "computer_network_services"
      | "computer_programming"
      | "computer_repair"
      | "computer_software_stores"
      | "computers_peripherals_and_software"
      | "concrete_work_services"
      | "construction_materials"
      | "consulting_public_relations"
      | "correspondence_schools"
      | "cosmetic_stores"
      | "counseling_services"
      | "country_clubs"
      | "courier_services"
      | "court_costs"
      | "credit_reporting_agencies"
      | "cruise_lines"
      | "dairy_products_stores"
      | "dance_hall_studios_schools"
      | "dating_escort_services"
      | "dentists_orthodontists"
      | "department_stores"
      | "detective_agencies"
      | "digital_goods_applications"
      | "digital_goods_games"
      | "digital_goods_large_volume"
      | "digital_goods_media"
      | "direct_marketing_catalog_merchant"
      | "direct_marketing_combination_catalog_and_retail_merchant"
      | "direct_marketing_inbound_telemarketing"
      | "direct_marketing_insurance_services"
      | "direct_marketing_other"
      | "direct_marketing_outbound_telemarketing"
      | "direct_marketing_subscription"
      | "direct_marketing_travel"
      | "discount_stores"
      | "doctors"
      | "door_to_door_sales"
      | "drapery_window_covering_and_upholstery_stores"
      | "drinking_places"
      | "drug_stores_and_pharmacies"
      | "drugs_drug_proprietaries_and_druggist_sundries"
      | "dry_cleaners"
      | "durable_goods"
      | "duty_free_stores"
      | "eating_places_restaurants"
      | "educational_services"
      | "electric_razor_stores"
      | "electrical_parts_and_equipment"
      | "electrical_services"
      | "electronics_repair_shops"
      | "electronics_stores"
      | "elementary_secondary_schools"
      | "employment_temp_agencies"
      | "equipment_rental"
      | "exterminating_services"
      | "family_clothing_stores"
      | "fast_food_restaurants"
      | "financial_institutions"
      | "fines_government_administrative_entities"
      | "fireplace_fireplace_screens_and_accessories_stores"
      | "floor_covering_stores"
      | "florists"
      | "florists_supplies_nursery_stock_and_flowers"
      | "freezer_and_locker_meat_provisioners"
      | "fuel_dealers_non_automotive"
      | "funeral_services_crematories"
      | "furniture_home_furnishings_and_equipment_stores_except_appliances"
      | "furniture_repair_refinishing"
      | "furriers_and_fur_shops"
      | "general_services"
      | "gift_card_novelty_and_souvenir_shops"
      | "glass_paint_and_wallpaper_stores"
      | "glassware_crystal_stores"
      | "golf_courses_public"
      | "government_services"
      | "grocery_stores_supermarkets"
      | "hardware_equipment_and_supplies"
      | "hardware_stores"
      | "health_and_beauty_spas"
      | "hearing_aids_sales_and_supplies"
      | "heating_plumbing_a_c"
      | "hobby_toy_and_game_shops"
      | "home_supply_warehouse_stores"
      | "hospitals"
      | "hotels_motels_and_resorts"
      | "household_appliance_stores"
      | "industrial_supplies"
      | "information_retrieval_services"
      | "insurance_default"
      | "insurance_underwriting_premiums"
      | "intra_company_purchases"
      | "jewelry_stores_watches_clocks_and_silverware_stores"
      | "landscaping_services"
      | "laundries"
      | "laundry_cleaning_services"
      | "legal_services_attorneys"
      | "luggage_and_leather_goods_stores"
      | "lumber_building_materials_stores"
      | "manual_cash_disburse"
      | "marinas_service_and_supplies"
      | "masonry_stonework_and_plaster"
      | "massage_parlors"
      | "medical_and_dental_labs"
      | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
      | "medical_services"
      | "membership_organizations"
      | "mens_and_boys_clothing_and_accessories_stores"
      | "mens_womens_clothing_stores"
      | "metal_service_centers"
      | "miscellaneous"
      | "miscellaneous_apparel_and_accessory_shops"
      | "miscellaneous_auto_dealers"
      | "miscellaneous_business_services"
      | "miscellaneous_food_stores"
      | "miscellaneous_general_merchandise"
      | "miscellaneous_general_services"
      | "miscellaneous_home_furnishing_specialty_stores"
      | "miscellaneous_publishing_and_printing"
      | "miscellaneous_recreation_services"
      | "miscellaneous_repair_shops"
      | "miscellaneous_specialty_retail"
      | "mobile_home_dealers"
      | "motion_picture_theaters"
      | "motor_freight_carriers_and_trucking"
      | "motor_homes_dealers"
      | "motor_vehicle_supplies_and_new_parts"
      | "motorcycle_shops_and_dealers"
      | "motorcycle_shops_dealers"
      | "music_stores_musical_instruments_pianos_and_sheet_music"
      | "news_dealers_and_newsstands"
      | "non_fi_money_orders"
      | "non_fi_stored_value_card_purchase_load"
      | "nondurable_goods"
      | "nurseries_lawn_and_garden_supply_stores"
      | "nursing_personal_care"
      | "office_and_commercial_furniture"
      | "opticians_eyeglasses"
      | "optometrists_ophthalmologist"
      | "orthopedic_goods_prosthetic_devices"
      | "osteopaths"
      | "package_stores_beer_wine_and_liquor"
      | "paints_varnishes_and_supplies"
      | "parking_lots_garages"
      | "passenger_railways"
      | "pawn_shops"
      | "pet_shops_pet_food_and_supplies"
      | "petroleum_and_petroleum_products"
      | "photo_developing"
      | "photographic_photocopy_microfilm_equipment_and_supplies"
      | "photographic_studios"
      | "picture_video_production"
      | "piece_goods_notions_and_other_dry_goods"
      | "plumbing_heating_equipment_and_supplies"
      | "political_organizations"
      | "postal_services_government_only"
      | "precious_stones_and_metals_watches_and_jewelry"
      | "professional_services"
      | "public_warehousing_and_storage"
      | "quick_copy_repro_and_blueprint"
      | "railroads"
      | "real_estate_agents_and_managers_rentals"
      | "record_stores"
      | "recreational_vehicle_rentals"
      | "religious_goods_stores"
      | "religious_organizations"
      | "roofing_siding_sheet_metal"
      | "secretarial_support_services"
      | "security_brokers_dealers"
      | "service_stations"
      | "sewing_needlework_fabric_and_piece_goods_stores"
      | "shoe_repair_hat_cleaning"
      | "shoe_stores"
      | "small_appliance_repair"
      | "snowmobile_dealers"
      | "special_trade_services"
      | "specialty_cleaning"
      | "sporting_goods_stores"
      | "sporting_recreation_camps"
      | "sports_and_riding_apparel_stores"
      | "sports_clubs_fields"
      | "stamp_and_coin_stores"
      | "stationary_office_supplies_printing_and_writing_paper"
      | "stationery_stores_office_and_school_supply_stores"
      | "swimming_pools_sales"
      | "t_ui_travel_germany"
      | "tailors_alterations"
      | "tax_payments_government_agencies"
      | "tax_preparation_services"
      | "taxicabs_limousines"
      | "telecommunication_equipment_and_telephone_sales"
      | "telecommunication_services"
      | "telegraph_services"
      | "tent_and_awning_shops"
      | "testing_laboratories"
      | "theatrical_ticket_agencies"
      | "timeshares"
      | "tire_retreading_and_repair"
      | "tolls_bridge_fees"
      | "tourist_attractions_and_exhibits"
      | "towing_services"
      | "trailer_parks_campgrounds"
      | "transportation_services"
      | "travel_agencies_tour_operators"
      | "truck_stop_iteration"
      | "truck_utility_trailer_rentals"
      | "typesetting_plate_making_and_related_services"
      | "typewriter_stores"
      | "u_s_federal_government_agencies_or_departments"
      | "uniforms_commercial_clothing"
      | "used_merchandise_and_secondhand_stores"
      | "utilities"
      | "variety_stores"
      | "veterinary_services"
      | "video_amusement_game_supplies"
      | "video_game_arcades"
      | "video_tape_rental_stores"
      | "vocational_trade_schools"
      | "watch_jewelry_repair"
      | "welding_repair"
      | "wholesale_clubs"
      | "wig_and_toupee_stores"
      | "wires_money_orders"
      | "womens_accessory_and_specialty_shops"
      | "womens_ready_to_wear_stores"
      | "wrecking_and_salvage_yards"
    )[];
    /** @description Limit the spending with rules based on time intervals and categories. */
    readonly spending_limits?: readonly definitions["issuing_card_spending_limit"][];
    /** @description Currency for the amounts within spending_limits. Locked to the currency of the card. */
    readonly spending_limits_currency?: string;
  };
  /** IssuingCardShipping */
  readonly issuing_card_shipping: {
    readonly address: definitions["address"];
    /**
     * @description The delivery company that shipped a card.
     * @enum {string}
     */
    readonly carrier?: "fedex" | "usps";
    /** @description A unix timestamp representing a best estimate of when the card will be delivered. */
    readonly eta?: number;
    /** @description Recipient name. */
    readonly name: string;
    /**
     * @description Shipment service, such as `standard` or `express`.
     * @enum {string}
     */
    readonly service: "express" | "priority" | "standard";
    /**
     * @description The delivery status of the card.
     * @enum {string}
     */
    readonly status?: "canceled" | "delivered" | "failure" | "pending" | "returned" | "shipped";
    /** @description A tracking number for a card shipment. */
    readonly tracking_number?: string;
    /** @description A link to the shipping carrier's site where you can view detailed information about a card shipment. */
    readonly tracking_url?: string;
    /**
     * @description Packaging options.
     * @enum {string}
     */
    readonly type: "bulk" | "individual";
  };
  /** IssuingCardSpendingLimit */
  readonly issuing_card_spending_limit: {
    /** @description Maximum amount allowed to spend per time interval. */
    readonly amount: number;
    /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges. */
    readonly categories?: readonly (
      | "ac_refrigeration_repair"
      | "accounting_bookkeeping_services"
      | "advertising_services"
      | "agricultural_cooperative"
      | "airlines_air_carriers"
      | "airports_flying_fields"
      | "ambulance_services"
      | "amusement_parks_carnivals"
      | "antique_reproductions"
      | "antique_shops"
      | "aquariums"
      | "architectural_surveying_services"
      | "art_dealers_and_galleries"
      | "artists_supply_and_craft_shops"
      | "auto_and_home_supply_stores"
      | "auto_body_repair_shops"
      | "auto_paint_shops"
      | "auto_service_shops"
      | "automated_cash_disburse"
      | "automated_fuel_dispensers"
      | "automobile_associations"
      | "automotive_parts_and_accessories_stores"
      | "automotive_tire_stores"
      | "bail_and_bond_payments"
      | "bakeries"
      | "bands_orchestras"
      | "barber_and_beauty_shops"
      | "betting_casino_gambling"
      | "bicycle_shops"
      | "billiard_pool_establishments"
      | "boat_dealers"
      | "boat_rentals_and_leases"
      | "book_stores"
      | "books_periodicals_and_newspapers"
      | "bowling_alleys"
      | "bus_lines"
      | "business_secretarial_schools"
      | "buying_shopping_services"
      | "cable_satellite_and_other_pay_television_and_radio"
      | "camera_and_photographic_supply_stores"
      | "candy_nut_and_confectionery_stores"
      | "car_and_truck_dealers_new_used"
      | "car_and_truck_dealers_used_only"
      | "car_rental_agencies"
      | "car_washes"
      | "carpentry_services"
      | "carpet_upholstery_cleaning"
      | "caterers"
      | "charitable_and_social_service_organizations_fundraising"
      | "chemicals_and_allied_products"
      | "child_care_services"
      | "childrens_and_infants_wear_stores"
      | "chiropodists_podiatrists"
      | "chiropractors"
      | "cigar_stores_and_stands"
      | "civic_social_fraternal_associations"
      | "cleaning_and_maintenance"
      | "clothing_rental"
      | "colleges_universities"
      | "commercial_equipment"
      | "commercial_footwear"
      | "commercial_photography_art_and_graphics"
      | "commuter_transport_and_ferries"
      | "computer_network_services"
      | "computer_programming"
      | "computer_repair"
      | "computer_software_stores"
      | "computers_peripherals_and_software"
      | "concrete_work_services"
      | "construction_materials"
      | "consulting_public_relations"
      | "correspondence_schools"
      | "cosmetic_stores"
      | "counseling_services"
      | "country_clubs"
      | "courier_services"
      | "court_costs"
      | "credit_reporting_agencies"
      | "cruise_lines"
      | "dairy_products_stores"
      | "dance_hall_studios_schools"
      | "dating_escort_services"
      | "dentists_orthodontists"
      | "department_stores"
      | "detective_agencies"
      | "digital_goods_applications"
      | "digital_goods_games"
      | "digital_goods_large_volume"
      | "digital_goods_media"
      | "direct_marketing_catalog_merchant"
      | "direct_marketing_combination_catalog_and_retail_merchant"
      | "direct_marketing_inbound_telemarketing"
      | "direct_marketing_insurance_services"
      | "direct_marketing_other"
      | "direct_marketing_outbound_telemarketing"
      | "direct_marketing_subscription"
      | "direct_marketing_travel"
      | "discount_stores"
      | "doctors"
      | "door_to_door_sales"
      | "drapery_window_covering_and_upholstery_stores"
      | "drinking_places"
      | "drug_stores_and_pharmacies"
      | "drugs_drug_proprietaries_and_druggist_sundries"
      | "dry_cleaners"
      | "durable_goods"
      | "duty_free_stores"
      | "eating_places_restaurants"
      | "educational_services"
      | "electric_razor_stores"
      | "electrical_parts_and_equipment"
      | "electrical_services"
      | "electronics_repair_shops"
      | "electronics_stores"
      | "elementary_secondary_schools"
      | "employment_temp_agencies"
      | "equipment_rental"
      | "exterminating_services"
      | "family_clothing_stores"
      | "fast_food_restaurants"
      | "financial_institutions"
      | "fines_government_administrative_entities"
      | "fireplace_fireplace_screens_and_accessories_stores"
      | "floor_covering_stores"
      | "florists"
      | "florists_supplies_nursery_stock_and_flowers"
      | "freezer_and_locker_meat_provisioners"
      | "fuel_dealers_non_automotive"
      | "funeral_services_crematories"
      | "furniture_home_furnishings_and_equipment_stores_except_appliances"
      | "furniture_repair_refinishing"
      | "furriers_and_fur_shops"
      | "general_services"
      | "gift_card_novelty_and_souvenir_shops"
      | "glass_paint_and_wallpaper_stores"
      | "glassware_crystal_stores"
      | "golf_courses_public"
      | "government_services"
      | "grocery_stores_supermarkets"
      | "hardware_equipment_and_supplies"
      | "hardware_stores"
      | "health_and_beauty_spas"
      | "hearing_aids_sales_and_supplies"
      | "heating_plumbing_a_c"
      | "hobby_toy_and_game_shops"
      | "home_supply_warehouse_stores"
      | "hospitals"
      | "hotels_motels_and_resorts"
      | "household_appliance_stores"
      | "industrial_supplies"
      | "information_retrieval_services"
      | "insurance_default"
      | "insurance_underwriting_premiums"
      | "intra_company_purchases"
      | "jewelry_stores_watches_clocks_and_silverware_stores"
      | "landscaping_services"
      | "laundries"
      | "laundry_cleaning_services"
      | "legal_services_attorneys"
      | "luggage_and_leather_goods_stores"
      | "lumber_building_materials_stores"
      | "manual_cash_disburse"
      | "marinas_service_and_supplies"
      | "masonry_stonework_and_plaster"
      | "massage_parlors"
      | "medical_and_dental_labs"
      | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
      | "medical_services"
      | "membership_organizations"
      | "mens_and_boys_clothing_and_accessories_stores"
      | "mens_womens_clothing_stores"
      | "metal_service_centers"
      | "miscellaneous"
      | "miscellaneous_apparel_and_accessory_shops"
      | "miscellaneous_auto_dealers"
      | "miscellaneous_business_services"
      | "miscellaneous_food_stores"
      | "miscellaneous_general_merchandise"
      | "miscellaneous_general_services"
      | "miscellaneous_home_furnishing_specialty_stores"
      | "miscellaneous_publishing_and_printing"
      | "miscellaneous_recreation_services"
      | "miscellaneous_repair_shops"
      | "miscellaneous_specialty_retail"
      | "mobile_home_dealers"
      | "motion_picture_theaters"
      | "motor_freight_carriers_and_trucking"
      | "motor_homes_dealers"
      | "motor_vehicle_supplies_and_new_parts"
      | "motorcycle_shops_and_dealers"
      | "motorcycle_shops_dealers"
      | "music_stores_musical_instruments_pianos_and_sheet_music"
      | "news_dealers_and_newsstands"
      | "non_fi_money_orders"
      | "non_fi_stored_value_card_purchase_load"
      | "nondurable_goods"
      | "nurseries_lawn_and_garden_supply_stores"
      | "nursing_personal_care"
      | "office_and_commercial_furniture"
      | "opticians_eyeglasses"
      | "optometrists_ophthalmologist"
      | "orthopedic_goods_prosthetic_devices"
      | "osteopaths"
      | "package_stores_beer_wine_and_liquor"
      | "paints_varnishes_and_supplies"
      | "parking_lots_garages"
      | "passenger_railways"
      | "pawn_shops"
      | "pet_shops_pet_food_and_supplies"
      | "petroleum_and_petroleum_products"
      | "photo_developing"
      | "photographic_photocopy_microfilm_equipment_and_supplies"
      | "photographic_studios"
      | "picture_video_production"
      | "piece_goods_notions_and_other_dry_goods"
      | "plumbing_heating_equipment_and_supplies"
      | "political_organizations"
      | "postal_services_government_only"
      | "precious_stones_and_metals_watches_and_jewelry"
      | "professional_services"
      | "public_warehousing_and_storage"
      | "quick_copy_repro_and_blueprint"
      | "railroads"
      | "real_estate_agents_and_managers_rentals"
      | "record_stores"
      | "recreational_vehicle_rentals"
      | "religious_goods_stores"
      | "religious_organizations"
      | "roofing_siding_sheet_metal"
      | "secretarial_support_services"
      | "security_brokers_dealers"
      | "service_stations"
      | "sewing_needlework_fabric_and_piece_goods_stores"
      | "shoe_repair_hat_cleaning"
      | "shoe_stores"
      | "small_appliance_repair"
      | "snowmobile_dealers"
      | "special_trade_services"
      | "specialty_cleaning"
      | "sporting_goods_stores"
      | "sporting_recreation_camps"
      | "sports_and_riding_apparel_stores"
      | "sports_clubs_fields"
      | "stamp_and_coin_stores"
      | "stationary_office_supplies_printing_and_writing_paper"
      | "stationery_stores_office_and_school_supply_stores"
      | "swimming_pools_sales"
      | "t_ui_travel_germany"
      | "tailors_alterations"
      | "tax_payments_government_agencies"
      | "tax_preparation_services"
      | "taxicabs_limousines"
      | "telecommunication_equipment_and_telephone_sales"
      | "telecommunication_services"
      | "telegraph_services"
      | "tent_and_awning_shops"
      | "testing_laboratories"
      | "theatrical_ticket_agencies"
      | "timeshares"
      | "tire_retreading_and_repair"
      | "tolls_bridge_fees"
      | "tourist_attractions_and_exhibits"
      | "towing_services"
      | "trailer_parks_campgrounds"
      | "transportation_services"
      | "travel_agencies_tour_operators"
      | "truck_stop_iteration"
      | "truck_utility_trailer_rentals"
      | "typesetting_plate_making_and_related_services"
      | "typewriter_stores"
      | "u_s_federal_government_agencies_or_departments"
      | "uniforms_commercial_clothing"
      | "used_merchandise_and_secondhand_stores"
      | "utilities"
      | "variety_stores"
      | "veterinary_services"
      | "video_amusement_game_supplies"
      | "video_game_arcades"
      | "video_tape_rental_stores"
      | "vocational_trade_schools"
      | "watch_jewelry_repair"
      | "welding_repair"
      | "wholesale_clubs"
      | "wig_and_toupee_stores"
      | "wires_money_orders"
      | "womens_accessory_and_specialty_shops"
      | "womens_ready_to_wear_stores"
      | "wrecking_and_salvage_yards"
    )[];
    /**
     * @description The time interval or event with which to apply this spending limit towards.
     * @enum {string}
     */
    readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
  };
  /** IssuingCardholderAddress */
  readonly issuing_cardholder_address: {
    readonly address: definitions["address"];
  };
  /** IssuingCardholderAuthorizationControls */
  readonly issuing_cardholder_authorization_controls: {
    /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations permitted on this cardholder's cards. */
    readonly allowed_categories?: readonly (
      | "ac_refrigeration_repair"
      | "accounting_bookkeeping_services"
      | "advertising_services"
      | "agricultural_cooperative"
      | "airlines_air_carriers"
      | "airports_flying_fields"
      | "ambulance_services"
      | "amusement_parks_carnivals"
      | "antique_reproductions"
      | "antique_shops"
      | "aquariums"
      | "architectural_surveying_services"
      | "art_dealers_and_galleries"
      | "artists_supply_and_craft_shops"
      | "auto_and_home_supply_stores"
      | "auto_body_repair_shops"
      | "auto_paint_shops"
      | "auto_service_shops"
      | "automated_cash_disburse"
      | "automated_fuel_dispensers"
      | "automobile_associations"
      | "automotive_parts_and_accessories_stores"
      | "automotive_tire_stores"
      | "bail_and_bond_payments"
      | "bakeries"
      | "bands_orchestras"
      | "barber_and_beauty_shops"
      | "betting_casino_gambling"
      | "bicycle_shops"
      | "billiard_pool_establishments"
      | "boat_dealers"
      | "boat_rentals_and_leases"
      | "book_stores"
      | "books_periodicals_and_newspapers"
      | "bowling_alleys"
      | "bus_lines"
      | "business_secretarial_schools"
      | "buying_shopping_services"
      | "cable_satellite_and_other_pay_television_and_radio"
      | "camera_and_photographic_supply_stores"
      | "candy_nut_and_confectionery_stores"
      | "car_and_truck_dealers_new_used"
      | "car_and_truck_dealers_used_only"
      | "car_rental_agencies"
      | "car_washes"
      | "carpentry_services"
      | "carpet_upholstery_cleaning"
      | "caterers"
      | "charitable_and_social_service_organizations_fundraising"
      | "chemicals_and_allied_products"
      | "child_care_services"
      | "childrens_and_infants_wear_stores"
      | "chiropodists_podiatrists"
      | "chiropractors"
      | "cigar_stores_and_stands"
      | "civic_social_fraternal_associations"
      | "cleaning_and_maintenance"
      | "clothing_rental"
      | "colleges_universities"
      | "commercial_equipment"
      | "commercial_footwear"
      | "commercial_photography_art_and_graphics"
      | "commuter_transport_and_ferries"
      | "computer_network_services"
      | "computer_programming"
      | "computer_repair"
      | "computer_software_stores"
      | "computers_peripherals_and_software"
      | "concrete_work_services"
      | "construction_materials"
      | "consulting_public_relations"
      | "correspondence_schools"
      | "cosmetic_stores"
      | "counseling_services"
      | "country_clubs"
      | "courier_services"
      | "court_costs"
      | "credit_reporting_agencies"
      | "cruise_lines"
      | "dairy_products_stores"
      | "dance_hall_studios_schools"
      | "dating_escort_services"
      | "dentists_orthodontists"
      | "department_stores"
      | "detective_agencies"
      | "digital_goods_applications"
      | "digital_goods_games"
      | "digital_goods_large_volume"
      | "digital_goods_media"
      | "direct_marketing_catalog_merchant"
      | "direct_marketing_combination_catalog_and_retail_merchant"
      | "direct_marketing_inbound_telemarketing"
      | "direct_marketing_insurance_services"
      | "direct_marketing_other"
      | "direct_marketing_outbound_telemarketing"
      | "direct_marketing_subscription"
      | "direct_marketing_travel"
      | "discount_stores"
      | "doctors"
      | "door_to_door_sales"
      | "drapery_window_covering_and_upholstery_stores"
      | "drinking_places"
      | "drug_stores_and_pharmacies"
      | "drugs_drug_proprietaries_and_druggist_sundries"
      | "dry_cleaners"
      | "durable_goods"
      | "duty_free_stores"
      | "eating_places_restaurants"
      | "educational_services"
      | "electric_razor_stores"
      | "electrical_parts_and_equipment"
      | "electrical_services"
      | "electronics_repair_shops"
      | "electronics_stores"
      | "elementary_secondary_schools"
      | "employment_temp_agencies"
      | "equipment_rental"
      | "exterminating_services"
      | "family_clothing_stores"
      | "fast_food_restaurants"
      | "financial_institutions"
      | "fines_government_administrative_entities"
      | "fireplace_fireplace_screens_and_accessories_stores"
      | "floor_covering_stores"
      | "florists"
      | "florists_supplies_nursery_stock_and_flowers"
      | "freezer_and_locker_meat_provisioners"
      | "fuel_dealers_non_automotive"
      | "funeral_services_crematories"
      | "furniture_home_furnishings_and_equipment_stores_except_appliances"
      | "furniture_repair_refinishing"
      | "furriers_and_fur_shops"
      | "general_services"
      | "gift_card_novelty_and_souvenir_shops"
      | "glass_paint_and_wallpaper_stores"
      | "glassware_crystal_stores"
      | "golf_courses_public"
      | "government_services"
      | "grocery_stores_supermarkets"
      | "hardware_equipment_and_supplies"
      | "hardware_stores"
      | "health_and_beauty_spas"
      | "hearing_aids_sales_and_supplies"
      | "heating_plumbing_a_c"
      | "hobby_toy_and_game_shops"
      | "home_supply_warehouse_stores"
      | "hospitals"
      | "hotels_motels_and_resorts"
      | "household_appliance_stores"
      | "industrial_supplies"
      | "information_retrieval_services"
      | "insurance_default"
      | "insurance_underwriting_premiums"
      | "intra_company_purchases"
      | "jewelry_stores_watches_clocks_and_silverware_stores"
      | "landscaping_services"
      | "laundries"
      | "laundry_cleaning_services"
      | "legal_services_attorneys"
      | "luggage_and_leather_goods_stores"
      | "lumber_building_materials_stores"
      | "manual_cash_disburse"
      | "marinas_service_and_supplies"
      | "masonry_stonework_and_plaster"
      | "massage_parlors"
      | "medical_and_dental_labs"
      | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
      | "medical_services"
      | "membership_organizations"
      | "mens_and_boys_clothing_and_accessories_stores"
      | "mens_womens_clothing_stores"
      | "metal_service_centers"
      | "miscellaneous"
      | "miscellaneous_apparel_and_accessory_shops"
      | "miscellaneous_auto_dealers"
      | "miscellaneous_business_services"
      | "miscellaneous_food_stores"
      | "miscellaneous_general_merchandise"
      | "miscellaneous_general_services"
      | "miscellaneous_home_furnishing_specialty_stores"
      | "miscellaneous_publishing_and_printing"
      | "miscellaneous_recreation_services"
      | "miscellaneous_repair_shops"
      | "miscellaneous_specialty_retail"
      | "mobile_home_dealers"
      | "motion_picture_theaters"
      | "motor_freight_carriers_and_trucking"
      | "motor_homes_dealers"
      | "motor_vehicle_supplies_and_new_parts"
      | "motorcycle_shops_and_dealers"
      | "motorcycle_shops_dealers"
      | "music_stores_musical_instruments_pianos_and_sheet_music"
      | "news_dealers_and_newsstands"
      | "non_fi_money_orders"
      | "non_fi_stored_value_card_purchase_load"
      | "nondurable_goods"
      | "nurseries_lawn_and_garden_supply_stores"
      | "nursing_personal_care"
      | "office_and_commercial_furniture"
      | "opticians_eyeglasses"
      | "optometrists_ophthalmologist"
      | "orthopedic_goods_prosthetic_devices"
      | "osteopaths"
      | "package_stores_beer_wine_and_liquor"
      | "paints_varnishes_and_supplies"
      | "parking_lots_garages"
      | "passenger_railways"
      | "pawn_shops"
      | "pet_shops_pet_food_and_supplies"
      | "petroleum_and_petroleum_products"
      | "photo_developing"
      | "photographic_photocopy_microfilm_equipment_and_supplies"
      | "photographic_studios"
      | "picture_video_production"
      | "piece_goods_notions_and_other_dry_goods"
      | "plumbing_heating_equipment_and_supplies"
      | "political_organizations"
      | "postal_services_government_only"
      | "precious_stones_and_metals_watches_and_jewelry"
      | "professional_services"
      | "public_warehousing_and_storage"
      | "quick_copy_repro_and_blueprint"
      | "railroads"
      | "real_estate_agents_and_managers_rentals"
      | "record_stores"
      | "recreational_vehicle_rentals"
      | "religious_goods_stores"
      | "religious_organizations"
      | "roofing_siding_sheet_metal"
      | "secretarial_support_services"
      | "security_brokers_dealers"
      | "service_stations"
      | "sewing_needlework_fabric_and_piece_goods_stores"
      | "shoe_repair_hat_cleaning"
      | "shoe_stores"
      | "small_appliance_repair"
      | "snowmobile_dealers"
      | "special_trade_services"
      | "specialty_cleaning"
      | "sporting_goods_stores"
      | "sporting_recreation_camps"
      | "sports_and_riding_apparel_stores"
      | "sports_clubs_fields"
      | "stamp_and_coin_stores"
      | "stationary_office_supplies_printing_and_writing_paper"
      | "stationery_stores_office_and_school_supply_stores"
      | "swimming_pools_sales"
      | "t_ui_travel_germany"
      | "tailors_alterations"
      | "tax_payments_government_agencies"
      | "tax_preparation_services"
      | "taxicabs_limousines"
      | "telecommunication_equipment_and_telephone_sales"
      | "telecommunication_services"
      | "telegraph_services"
      | "tent_and_awning_shops"
      | "testing_laboratories"
      | "theatrical_ticket_agencies"
      | "timeshares"
      | "tire_retreading_and_repair"
      | "tolls_bridge_fees"
      | "tourist_attractions_and_exhibits"
      | "towing_services"
      | "trailer_parks_campgrounds"
      | "transportation_services"
      | "travel_agencies_tour_operators"
      | "truck_stop_iteration"
      | "truck_utility_trailer_rentals"
      | "typesetting_plate_making_and_related_services"
      | "typewriter_stores"
      | "u_s_federal_government_agencies_or_departments"
      | "uniforms_commercial_clothing"
      | "used_merchandise_and_secondhand_stores"
      | "utilities"
      | "variety_stores"
      | "veterinary_services"
      | "video_amusement_game_supplies"
      | "video_game_arcades"
      | "video_tape_rental_stores"
      | "vocational_trade_schools"
      | "watch_jewelry_repair"
      | "welding_repair"
      | "wholesale_clubs"
      | "wig_and_toupee_stores"
      | "wires_money_orders"
      | "womens_accessory_and_specialty_shops"
      | "womens_ready_to_wear_stores"
      | "wrecking_and_salvage_yards"
    )[];
    /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to always decline on this cardholder's cards. */
    readonly blocked_categories?: readonly (
      | "ac_refrigeration_repair"
      | "accounting_bookkeeping_services"
      | "advertising_services"
      | "agricultural_cooperative"
      | "airlines_air_carriers"
      | "airports_flying_fields"
      | "ambulance_services"
      | "amusement_parks_carnivals"
      | "antique_reproductions"
      | "antique_shops"
      | "aquariums"
      | "architectural_surveying_services"
      | "art_dealers_and_galleries"
      | "artists_supply_and_craft_shops"
      | "auto_and_home_supply_stores"
      | "auto_body_repair_shops"
      | "auto_paint_shops"
      | "auto_service_shops"
      | "automated_cash_disburse"
      | "automated_fuel_dispensers"
      | "automobile_associations"
      | "automotive_parts_and_accessories_stores"
      | "automotive_tire_stores"
      | "bail_and_bond_payments"
      | "bakeries"
      | "bands_orchestras"
      | "barber_and_beauty_shops"
      | "betting_casino_gambling"
      | "bicycle_shops"
      | "billiard_pool_establishments"
      | "boat_dealers"
      | "boat_rentals_and_leases"
      | "book_stores"
      | "books_periodicals_and_newspapers"
      | "bowling_alleys"
      | "bus_lines"
      | "business_secretarial_schools"
      | "buying_shopping_services"
      | "cable_satellite_and_other_pay_television_and_radio"
      | "camera_and_photographic_supply_stores"
      | "candy_nut_and_confectionery_stores"
      | "car_and_truck_dealers_new_used"
      | "car_and_truck_dealers_used_only"
      | "car_rental_agencies"
      | "car_washes"
      | "carpentry_services"
      | "carpet_upholstery_cleaning"
      | "caterers"
      | "charitable_and_social_service_organizations_fundraising"
      | "chemicals_and_allied_products"
      | "child_care_services"
      | "childrens_and_infants_wear_stores"
      | "chiropodists_podiatrists"
      | "chiropractors"
      | "cigar_stores_and_stands"
      | "civic_social_fraternal_associations"
      | "cleaning_and_maintenance"
      | "clothing_rental"
      | "colleges_universities"
      | "commercial_equipment"
      | "commercial_footwear"
      | "commercial_photography_art_and_graphics"
      | "commuter_transport_and_ferries"
      | "computer_network_services"
      | "computer_programming"
      | "computer_repair"
      | "computer_software_stores"
      | "computers_peripherals_and_software"
      | "concrete_work_services"
      | "construction_materials"
      | "consulting_public_relations"
      | "correspondence_schools"
      | "cosmetic_stores"
      | "counseling_services"
      | "country_clubs"
      | "courier_services"
      | "court_costs"
      | "credit_reporting_agencies"
      | "cruise_lines"
      | "dairy_products_stores"
      | "dance_hall_studios_schools"
      | "dating_escort_services"
      | "dentists_orthodontists"
      | "department_stores"
      | "detective_agencies"
      | "digital_goods_applications"
      | "digital_goods_games"
      | "digital_goods_large_volume"
      | "digital_goods_media"
      | "direct_marketing_catalog_merchant"
      | "direct_marketing_combination_catalog_and_retail_merchant"
      | "direct_marketing_inbound_telemarketing"
      | "direct_marketing_insurance_services"
      | "direct_marketing_other"
      | "direct_marketing_outbound_telemarketing"
      | "direct_marketing_subscription"
      | "direct_marketing_travel"
      | "discount_stores"
      | "doctors"
      | "door_to_door_sales"
      | "drapery_window_covering_and_upholstery_stores"
      | "drinking_places"
      | "drug_stores_and_pharmacies"
      | "drugs_drug_proprietaries_and_druggist_sundries"
      | "dry_cleaners"
      | "durable_goods"
      | "duty_free_stores"
      | "eating_places_restaurants"
      | "educational_services"
      | "electric_razor_stores"
      | "electrical_parts_and_equipment"
      | "electrical_services"
      | "electronics_repair_shops"
      | "electronics_stores"
      | "elementary_secondary_schools"
      | "employment_temp_agencies"
      | "equipment_rental"
      | "exterminating_services"
      | "family_clothing_stores"
      | "fast_food_restaurants"
      | "financial_institutions"
      | "fines_government_administrative_entities"
      | "fireplace_fireplace_screens_and_accessories_stores"
      | "floor_covering_stores"
      | "florists"
      | "florists_supplies_nursery_stock_and_flowers"
      | "freezer_and_locker_meat_provisioners"
      | "fuel_dealers_non_automotive"
      | "funeral_services_crematories"
      | "furniture_home_furnishings_and_equipment_stores_except_appliances"
      | "furniture_repair_refinishing"
      | "furriers_and_fur_shops"
      | "general_services"
      | "gift_card_novelty_and_souvenir_shops"
      | "glass_paint_and_wallpaper_stores"
      | "glassware_crystal_stores"
      | "golf_courses_public"
      | "government_services"
      | "grocery_stores_supermarkets"
      | "hardware_equipment_and_supplies"
      | "hardware_stores"
      | "health_and_beauty_spas"
      | "hearing_aids_sales_and_supplies"
      | "heating_plumbing_a_c"
      | "hobby_toy_and_game_shops"
      | "home_supply_warehouse_stores"
      | "hospitals"
      | "hotels_motels_and_resorts"
      | "household_appliance_stores"
      | "industrial_supplies"
      | "information_retrieval_services"
      | "insurance_default"
      | "insurance_underwriting_premiums"
      | "intra_company_purchases"
      | "jewelry_stores_watches_clocks_and_silverware_stores"
      | "landscaping_services"
      | "laundries"
      | "laundry_cleaning_services"
      | "legal_services_attorneys"
      | "luggage_and_leather_goods_stores"
      | "lumber_building_materials_stores"
      | "manual_cash_disburse"
      | "marinas_service_and_supplies"
      | "masonry_stonework_and_plaster"
      | "massage_parlors"
      | "medical_and_dental_labs"
      | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
      | "medical_services"
      | "membership_organizations"
      | "mens_and_boys_clothing_and_accessories_stores"
      | "mens_womens_clothing_stores"
      | "metal_service_centers"
      | "miscellaneous"
      | "miscellaneous_apparel_and_accessory_shops"
      | "miscellaneous_auto_dealers"
      | "miscellaneous_business_services"
      | "miscellaneous_food_stores"
      | "miscellaneous_general_merchandise"
      | "miscellaneous_general_services"
      | "miscellaneous_home_furnishing_specialty_stores"
      | "miscellaneous_publishing_and_printing"
      | "miscellaneous_recreation_services"
      | "miscellaneous_repair_shops"
      | "miscellaneous_specialty_retail"
      | "mobile_home_dealers"
      | "motion_picture_theaters"
      | "motor_freight_carriers_and_trucking"
      | "motor_homes_dealers"
      | "motor_vehicle_supplies_and_new_parts"
      | "motorcycle_shops_and_dealers"
      | "motorcycle_shops_dealers"
      | "music_stores_musical_instruments_pianos_and_sheet_music"
      | "news_dealers_and_newsstands"
      | "non_fi_money_orders"
      | "non_fi_stored_value_card_purchase_load"
      | "nondurable_goods"
      | "nurseries_lawn_and_garden_supply_stores"
      | "nursing_personal_care"
      | "office_and_commercial_furniture"
      | "opticians_eyeglasses"
      | "optometrists_ophthalmologist"
      | "orthopedic_goods_prosthetic_devices"
      | "osteopaths"
      | "package_stores_beer_wine_and_liquor"
      | "paints_varnishes_and_supplies"
      | "parking_lots_garages"
      | "passenger_railways"
      | "pawn_shops"
      | "pet_shops_pet_food_and_supplies"
      | "petroleum_and_petroleum_products"
      | "photo_developing"
      | "photographic_photocopy_microfilm_equipment_and_supplies"
      | "photographic_studios"
      | "picture_video_production"
      | "piece_goods_notions_and_other_dry_goods"
      | "plumbing_heating_equipment_and_supplies"
      | "political_organizations"
      | "postal_services_government_only"
      | "precious_stones_and_metals_watches_and_jewelry"
      | "professional_services"
      | "public_warehousing_and_storage"
      | "quick_copy_repro_and_blueprint"
      | "railroads"
      | "real_estate_agents_and_managers_rentals"
      | "record_stores"
      | "recreational_vehicle_rentals"
      | "religious_goods_stores"
      | "religious_organizations"
      | "roofing_siding_sheet_metal"
      | "secretarial_support_services"
      | "security_brokers_dealers"
      | "service_stations"
      | "sewing_needlework_fabric_and_piece_goods_stores"
      | "shoe_repair_hat_cleaning"
      | "shoe_stores"
      | "small_appliance_repair"
      | "snowmobile_dealers"
      | "special_trade_services"
      | "specialty_cleaning"
      | "sporting_goods_stores"
      | "sporting_recreation_camps"
      | "sports_and_riding_apparel_stores"
      | "sports_clubs_fields"
      | "stamp_and_coin_stores"
      | "stationary_office_supplies_printing_and_writing_paper"
      | "stationery_stores_office_and_school_supply_stores"
      | "swimming_pools_sales"
      | "t_ui_travel_germany"
      | "tailors_alterations"
      | "tax_payments_government_agencies"
      | "tax_preparation_services"
      | "taxicabs_limousines"
      | "telecommunication_equipment_and_telephone_sales"
      | "telecommunication_services"
      | "telegraph_services"
      | "tent_and_awning_shops"
      | "testing_laboratories"
      | "theatrical_ticket_agencies"
      | "timeshares"
      | "tire_retreading_and_repair"
      | "tolls_bridge_fees"
      | "tourist_attractions_and_exhibits"
      | "towing_services"
      | "trailer_parks_campgrounds"
      | "transportation_services"
      | "travel_agencies_tour_operators"
      | "truck_stop_iteration"
      | "truck_utility_trailer_rentals"
      | "typesetting_plate_making_and_related_services"
      | "typewriter_stores"
      | "u_s_federal_government_agencies_or_departments"
      | "uniforms_commercial_clothing"
      | "used_merchandise_and_secondhand_stores"
      | "utilities"
      | "variety_stores"
      | "veterinary_services"
      | "video_amusement_game_supplies"
      | "video_game_arcades"
      | "video_tape_rental_stores"
      | "vocational_trade_schools"
      | "watch_jewelry_repair"
      | "welding_repair"
      | "wholesale_clubs"
      | "wig_and_toupee_stores"
      | "wires_money_orders"
      | "womens_accessory_and_specialty_shops"
      | "womens_ready_to_wear_stores"
      | "wrecking_and_salvage_yards"
    )[];
    /** @description Limit the spending with rules based on time intervals and categories. */
    readonly spending_limits?: readonly definitions["issuing_cardholder_spending_limit"][];
    /** @description Currency for the amounts within spending_limits. */
    readonly spending_limits_currency?: string;
  };
  /** IssuingCardholderCompany */
  readonly issuing_cardholder_company: {
    /** @description Whether the company's business ID number was provided. */
    readonly tax_id_provided: boolean;
  };
  /** IssuingCardholderIdDocument */
  readonly issuing_cardholder_id_document: {
    /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    readonly back?: string;
    /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    readonly front?: string;
  };
  /** IssuingCardholderIndividual */
  readonly issuing_cardholder_individual: {
    readonly dob?: definitions["issuing_cardholder_individual_dob"];
    /** @description The first name of this cardholder. */
    readonly first_name: string;
    /** @description The last name of this cardholder. */
    readonly last_name: string;
    readonly verification?: definitions["issuing_cardholder_verification"];
  };
  /** IssuingCardholderIndividualDOB */
  readonly issuing_cardholder_individual_dob: {
    /** @description The day of birth, between 1 and 31. */
    readonly day?: number;
    /** @description The month of birth, between 1 and 12. */
    readonly month?: number;
    /** @description The four-digit year of birth. */
    readonly year?: number;
  };
  /** IssuingCardholderRequirements */
  readonly issuing_cardholder_requirements: {
    /**
     * @description If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
     * @enum {string}
     */
    readonly disabled_reason?: "listed" | "rejected.listed" | "under_review";
    /** @description Array of fields that need to be collected in order to verify and re-enable the cardholder. */
    readonly past_due?: readonly (
      | "company.tax_id"
      | "individual.dob.day"
      | "individual.dob.month"
      | "individual.dob.year"
      | "individual.first_name"
      | "individual.last_name"
      | "individual.verification.document"
    )[];
  };
  /** IssuingCardholderSpendingLimit */
  readonly issuing_cardholder_spending_limit: {
    /** @description Maximum amount allowed to spend per time interval. */
    readonly amount: number;
    /** @description Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) on which to apply the spending limit. Leave this blank to limit all charges. */
    readonly categories?: readonly (
      | "ac_refrigeration_repair"
      | "accounting_bookkeeping_services"
      | "advertising_services"
      | "agricultural_cooperative"
      | "airlines_air_carriers"
      | "airports_flying_fields"
      | "ambulance_services"
      | "amusement_parks_carnivals"
      | "antique_reproductions"
      | "antique_shops"
      | "aquariums"
      | "architectural_surveying_services"
      | "art_dealers_and_galleries"
      | "artists_supply_and_craft_shops"
      | "auto_and_home_supply_stores"
      | "auto_body_repair_shops"
      | "auto_paint_shops"
      | "auto_service_shops"
      | "automated_cash_disburse"
      | "automated_fuel_dispensers"
      | "automobile_associations"
      | "automotive_parts_and_accessories_stores"
      | "automotive_tire_stores"
      | "bail_and_bond_payments"
      | "bakeries"
      | "bands_orchestras"
      | "barber_and_beauty_shops"
      | "betting_casino_gambling"
      | "bicycle_shops"
      | "billiard_pool_establishments"
      | "boat_dealers"
      | "boat_rentals_and_leases"
      | "book_stores"
      | "books_periodicals_and_newspapers"
      | "bowling_alleys"
      | "bus_lines"
      | "business_secretarial_schools"
      | "buying_shopping_services"
      | "cable_satellite_and_other_pay_television_and_radio"
      | "camera_and_photographic_supply_stores"
      | "candy_nut_and_confectionery_stores"
      | "car_and_truck_dealers_new_used"
      | "car_and_truck_dealers_used_only"
      | "car_rental_agencies"
      | "car_washes"
      | "carpentry_services"
      | "carpet_upholstery_cleaning"
      | "caterers"
      | "charitable_and_social_service_organizations_fundraising"
      | "chemicals_and_allied_products"
      | "child_care_services"
      | "childrens_and_infants_wear_stores"
      | "chiropodists_podiatrists"
      | "chiropractors"
      | "cigar_stores_and_stands"
      | "civic_social_fraternal_associations"
      | "cleaning_and_maintenance"
      | "clothing_rental"
      | "colleges_universities"
      | "commercial_equipment"
      | "commercial_footwear"
      | "commercial_photography_art_and_graphics"
      | "commuter_transport_and_ferries"
      | "computer_network_services"
      | "computer_programming"
      | "computer_repair"
      | "computer_software_stores"
      | "computers_peripherals_and_software"
      | "concrete_work_services"
      | "construction_materials"
      | "consulting_public_relations"
      | "correspondence_schools"
      | "cosmetic_stores"
      | "counseling_services"
      | "country_clubs"
      | "courier_services"
      | "court_costs"
      | "credit_reporting_agencies"
      | "cruise_lines"
      | "dairy_products_stores"
      | "dance_hall_studios_schools"
      | "dating_escort_services"
      | "dentists_orthodontists"
      | "department_stores"
      | "detective_agencies"
      | "digital_goods_applications"
      | "digital_goods_games"
      | "digital_goods_large_volume"
      | "digital_goods_media"
      | "direct_marketing_catalog_merchant"
      | "direct_marketing_combination_catalog_and_retail_merchant"
      | "direct_marketing_inbound_telemarketing"
      | "direct_marketing_insurance_services"
      | "direct_marketing_other"
      | "direct_marketing_outbound_telemarketing"
      | "direct_marketing_subscription"
      | "direct_marketing_travel"
      | "discount_stores"
      | "doctors"
      | "door_to_door_sales"
      | "drapery_window_covering_and_upholstery_stores"
      | "drinking_places"
      | "drug_stores_and_pharmacies"
      | "drugs_drug_proprietaries_and_druggist_sundries"
      | "dry_cleaners"
      | "durable_goods"
      | "duty_free_stores"
      | "eating_places_restaurants"
      | "educational_services"
      | "electric_razor_stores"
      | "electrical_parts_and_equipment"
      | "electrical_services"
      | "electronics_repair_shops"
      | "electronics_stores"
      | "elementary_secondary_schools"
      | "employment_temp_agencies"
      | "equipment_rental"
      | "exterminating_services"
      | "family_clothing_stores"
      | "fast_food_restaurants"
      | "financial_institutions"
      | "fines_government_administrative_entities"
      | "fireplace_fireplace_screens_and_accessories_stores"
      | "floor_covering_stores"
      | "florists"
      | "florists_supplies_nursery_stock_and_flowers"
      | "freezer_and_locker_meat_provisioners"
      | "fuel_dealers_non_automotive"
      | "funeral_services_crematories"
      | "furniture_home_furnishings_and_equipment_stores_except_appliances"
      | "furniture_repair_refinishing"
      | "furriers_and_fur_shops"
      | "general_services"
      | "gift_card_novelty_and_souvenir_shops"
      | "glass_paint_and_wallpaper_stores"
      | "glassware_crystal_stores"
      | "golf_courses_public"
      | "government_services"
      | "grocery_stores_supermarkets"
      | "hardware_equipment_and_supplies"
      | "hardware_stores"
      | "health_and_beauty_spas"
      | "hearing_aids_sales_and_supplies"
      | "heating_plumbing_a_c"
      | "hobby_toy_and_game_shops"
      | "home_supply_warehouse_stores"
      | "hospitals"
      | "hotels_motels_and_resorts"
      | "household_appliance_stores"
      | "industrial_supplies"
      | "information_retrieval_services"
      | "insurance_default"
      | "insurance_underwriting_premiums"
      | "intra_company_purchases"
      | "jewelry_stores_watches_clocks_and_silverware_stores"
      | "landscaping_services"
      | "laundries"
      | "laundry_cleaning_services"
      | "legal_services_attorneys"
      | "luggage_and_leather_goods_stores"
      | "lumber_building_materials_stores"
      | "manual_cash_disburse"
      | "marinas_service_and_supplies"
      | "masonry_stonework_and_plaster"
      | "massage_parlors"
      | "medical_and_dental_labs"
      | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
      | "medical_services"
      | "membership_organizations"
      | "mens_and_boys_clothing_and_accessories_stores"
      | "mens_womens_clothing_stores"
      | "metal_service_centers"
      | "miscellaneous"
      | "miscellaneous_apparel_and_accessory_shops"
      | "miscellaneous_auto_dealers"
      | "miscellaneous_business_services"
      | "miscellaneous_food_stores"
      | "miscellaneous_general_merchandise"
      | "miscellaneous_general_services"
      | "miscellaneous_home_furnishing_specialty_stores"
      | "miscellaneous_publishing_and_printing"
      | "miscellaneous_recreation_services"
      | "miscellaneous_repair_shops"
      | "miscellaneous_specialty_retail"
      | "mobile_home_dealers"
      | "motion_picture_theaters"
      | "motor_freight_carriers_and_trucking"
      | "motor_homes_dealers"
      | "motor_vehicle_supplies_and_new_parts"
      | "motorcycle_shops_and_dealers"
      | "motorcycle_shops_dealers"
      | "music_stores_musical_instruments_pianos_and_sheet_music"
      | "news_dealers_and_newsstands"
      | "non_fi_money_orders"
      | "non_fi_stored_value_card_purchase_load"
      | "nondurable_goods"
      | "nurseries_lawn_and_garden_supply_stores"
      | "nursing_personal_care"
      | "office_and_commercial_furniture"
      | "opticians_eyeglasses"
      | "optometrists_ophthalmologist"
      | "orthopedic_goods_prosthetic_devices"
      | "osteopaths"
      | "package_stores_beer_wine_and_liquor"
      | "paints_varnishes_and_supplies"
      | "parking_lots_garages"
      | "passenger_railways"
      | "pawn_shops"
      | "pet_shops_pet_food_and_supplies"
      | "petroleum_and_petroleum_products"
      | "photo_developing"
      | "photographic_photocopy_microfilm_equipment_and_supplies"
      | "photographic_studios"
      | "picture_video_production"
      | "piece_goods_notions_and_other_dry_goods"
      | "plumbing_heating_equipment_and_supplies"
      | "political_organizations"
      | "postal_services_government_only"
      | "precious_stones_and_metals_watches_and_jewelry"
      | "professional_services"
      | "public_warehousing_and_storage"
      | "quick_copy_repro_and_blueprint"
      | "railroads"
      | "real_estate_agents_and_managers_rentals"
      | "record_stores"
      | "recreational_vehicle_rentals"
      | "religious_goods_stores"
      | "religious_organizations"
      | "roofing_siding_sheet_metal"
      | "secretarial_support_services"
      | "security_brokers_dealers"
      | "service_stations"
      | "sewing_needlework_fabric_and_piece_goods_stores"
      | "shoe_repair_hat_cleaning"
      | "shoe_stores"
      | "small_appliance_repair"
      | "snowmobile_dealers"
      | "special_trade_services"
      | "specialty_cleaning"
      | "sporting_goods_stores"
      | "sporting_recreation_camps"
      | "sports_and_riding_apparel_stores"
      | "sports_clubs_fields"
      | "stamp_and_coin_stores"
      | "stationary_office_supplies_printing_and_writing_paper"
      | "stationery_stores_office_and_school_supply_stores"
      | "swimming_pools_sales"
      | "t_ui_travel_germany"
      | "tailors_alterations"
      | "tax_payments_government_agencies"
      | "tax_preparation_services"
      | "taxicabs_limousines"
      | "telecommunication_equipment_and_telephone_sales"
      | "telecommunication_services"
      | "telegraph_services"
      | "tent_and_awning_shops"
      | "testing_laboratories"
      | "theatrical_ticket_agencies"
      | "timeshares"
      | "tire_retreading_and_repair"
      | "tolls_bridge_fees"
      | "tourist_attractions_and_exhibits"
      | "towing_services"
      | "trailer_parks_campgrounds"
      | "transportation_services"
      | "travel_agencies_tour_operators"
      | "truck_stop_iteration"
      | "truck_utility_trailer_rentals"
      | "typesetting_plate_making_and_related_services"
      | "typewriter_stores"
      | "u_s_federal_government_agencies_or_departments"
      | "uniforms_commercial_clothing"
      | "used_merchandise_and_secondhand_stores"
      | "utilities"
      | "variety_stores"
      | "veterinary_services"
      | "video_amusement_game_supplies"
      | "video_game_arcades"
      | "video_tape_rental_stores"
      | "vocational_trade_schools"
      | "watch_jewelry_repair"
      | "welding_repair"
      | "wholesale_clubs"
      | "wig_and_toupee_stores"
      | "wires_money_orders"
      | "womens_accessory_and_specialty_shops"
      | "womens_ready_to_wear_stores"
      | "wrecking_and_salvage_yards"
    )[];
    /**
     * @description The time interval or event with which to apply this spending limit towards.
     * @enum {string}
     */
    readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
  };
  /** IssuingCardholderVerification */
  readonly issuing_cardholder_verification: {
    readonly document?: definitions["issuing_cardholder_id_document"];
  };
  /** LegalEntityCompany */
  readonly legal_entity_company: {
    readonly address?: definitions["address"];
    readonly address_kana?: definitions["legal_entity_japan_address"];
    readonly address_kanji?: definitions["legal_entity_japan_address"];
    /** @description Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided). */
    readonly directors_provided?: boolean;
    /** @description Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided. */
    readonly executives_provided?: boolean;
    /** @description The company's legal name. */
    readonly name?: string;
    /** @description The Kana variation of the company's legal name (Japan only). */
    readonly name_kana?: string;
    /** @description The Kanji variation of the company's legal name (Japan only). */
    readonly name_kanji?: string;
    /** @description Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together). */
    readonly owners_provided?: boolean;
    /** @description The company's phone number (used for verification). */
    readonly phone?: string;
    /**
     * @description The category identifying the legal structure of the company or legal entity. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
     * @enum {string}
     */
    readonly structure?:
      | "government_instrumentality"
      | "governmental_unit"
      | "incorporated_non_profit"
      | "limited_liability_partnership"
      | "multi_member_llc"
      | "private_company"
      | "private_corporation"
      | "private_partnership"
      | "public_company"
      | "public_corporation"
      | "public_partnership"
      | "sole_proprietorship"
      | "tax_exempt_government_instrumentality"
      | "unincorporated_association"
      | "unincorporated_non_profit";
    /** @description Whether the company's business ID number was provided. */
    readonly tax_id_provided?: boolean;
    /** @description The jurisdiction in which the `tax_id` is registered (Germany-based companies only). */
    readonly tax_id_registrar?: string;
    /** @description Whether the company's business VAT number was provided. */
    readonly vat_id_provided?: boolean;
    readonly verification?: definitions["legal_entity_company_verification"];
  };
  /** LegalEntityCompanyVerification */
  readonly legal_entity_company_verification: {
    readonly document: definitions["legal_entity_company_verification_document"];
  };
  /** LegalEntityCompanyVerificationDocument */
  readonly legal_entity_company_verification_document: {
    /** @description The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
    readonly back?: string;
    /** @description A user-displayable string describing the verification state of this document. */
    readonly details?: string;
    /** @description One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document. */
    readonly details_code?: string;
    /** @description The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`. */
    readonly front?: string;
  };
  /** LegalEntityDOB */
  readonly legal_entity_dob: {
    /** @description The day of birth, between 1 and 31. */
    readonly day?: number;
    /** @description The month of birth, between 1 and 12. */
    readonly month?: number;
    /** @description The four-digit year of birth. */
    readonly year?: number;
  };
  /** LegalEntityJapanAddress */
  readonly legal_entity_japan_address: {
    /** @description City/Ward. */
    readonly city?: string;
    /** @description Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)). */
    readonly country?: string;
    /** @description Block/Building number. */
    readonly line1?: string;
    /** @description Building details. */
    readonly line2?: string;
    /** @description ZIP or postal code. */
    readonly postal_code?: string;
    /** @description Prefecture. */
    readonly state?: string;
    /** @description Town/cho-me. */
    readonly town?: string;
  };
  /** LegalEntityPersonVerification */
  readonly legal_entity_person_verification: {
    readonly additional_document?: definitions["legal_entity_person_verification_document"];
    /** @description A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified". */
    readonly details?: string;
    /** @description One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person. */
    readonly details_code?: string;
    readonly document?: definitions["legal_entity_person_verification_document"];
    /** @description The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. */
    readonly status: string;
  };
  /** LegalEntityPersonVerificationDocument */
  readonly legal_entity_person_verification_document: {
    /** @description The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    readonly back?: string;
    /** @description A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read". */
    readonly details?: string;
    /** @description One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document. */
    readonly details_code?: string;
    /** @description The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`. */
    readonly front?: string;
  };
  /** LightAccountLogout */
  readonly light_account_logout: { readonly [key: string]: unknown };
  /** InvoiceLineItem */
  readonly line_item: {
    /** @description The amount, in %s. */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description If true, discounts will apply to this line item. Always false for prorations. */
    readonly discountable: boolean;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The ID of the [invoice item](https://stripe.com/docs/api/invoiceitems) associated with this line item if any. */
    readonly invoice_item?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription` this will reflect the metadata of the subscription that caused the line item to be created. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "line_item";
    readonly period: definitions["invoice_line_item_period"];
    readonly plan?: definitions["plan"];
    /** @description Whether this is a proration. */
    readonly proration: boolean;
    /** @description The quantity of the subscription, if the line item is a subscription or a proration. */
    readonly quantity?: number;
    /** @description The subscription that the invoice item pertains to, if any. */
    readonly subscription?: string;
    /** @description The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription. */
    readonly subscription_item?: string;
    /** @description The amount of tax calculated per tax rate for this line item */
    readonly tax_amounts?: readonly definitions["invoice_tax_amount"][];
    /** @description The tax rates which apply to the line item. */
    readonly tax_rates?: readonly definitions["tax_rate"][];
    /**
     * @description A string identifying the type of the source of this line item, either an `invoiceitem` or a `subscription`.
     * @enum {string}
     */
    readonly type: "invoiceitem" | "subscription";
  };
  /** LoginLink */
  readonly login_link: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "login_link";
    /** @description The URL for the login link. */
    readonly url: string;
  };
  /**
   * Mandate
   * @description A Mandate is a record of the permission a customer has given you to debit their payment method.
   */
  readonly mandate: {
    readonly customer_acceptance: definitions["customer_acceptance"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    readonly multi_use?: definitions["mandate_multi_use"];
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "mandate";
    /** @description ID of the payment method associated with this mandate. */
    readonly payment_method: string;
    readonly payment_method_details: definitions["mandate_payment_method_details"];
    readonly single_use?: definitions["mandate_single_use"];
    /**
     * @description The status of the mandate, which indicates whether it can be used to initiate a payment.
     * @enum {string}
     */
    readonly status: "active" | "inactive" | "pending";
    /**
     * @description The type of the mandate.
     * @enum {string}
     */
    readonly type: "multi_use" | "single_use";
  };
  /** mandate_au_becs_debit */
  readonly mandate_au_becs_debit: {
    /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
    readonly url: string;
  };
  /** mandate_multi_use */
  readonly mandate_multi_use: { readonly [key: string]: unknown };
  /** mandate_payment_method_details */
  readonly mandate_payment_method_details: {
    readonly au_becs_debit?: definitions["mandate_au_becs_debit"];
    readonly card?: definitions["card_mandate_payment_method_details"];
    readonly sepa_debit?: definitions["mandate_sepa_debit"];
    /** @description The type of the payment method associated with this mandate. An additional hash is included on `payment_method_details` with a name matching this value. It contains mandate information specific to the payment method. */
    readonly type: string;
  };
  /** mandate_sepa_debit */
  readonly mandate_sepa_debit: {
    /** @description The unique reference of the mandate. */
    readonly reference: string;
    /** @description The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively. */
    readonly url: string;
  };
  /** mandate_single_use */
  readonly mandate_single_use: {
    /** @description On a single use mandate, the amount of the payment. */
    readonly amount: number;
    /** @description On a single use mandate, the currency of the payment. */
    readonly currency: string;
  };
  /** NotificationEventData */
  readonly notification_event_data: {
    /** @description Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key. */
    readonly object: { readonly [key: string]: unknown };
    /** @description Object containing the names of the attributes that have changed, and their previous values (sent along only with *.updated events). */
    readonly previous_attributes?: { readonly [key: string]: unknown };
  };
  /** NotificationEventRequest */
  readonly notification_event_request: {
    /** @description ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API. */
    readonly id?: string;
    /** @description The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*. */
    readonly idempotency_key?: string;
  };
  /** offline_acceptance */
  readonly offline_acceptance: { readonly [key: string]: unknown };
  /** online_acceptance */
  readonly online_acceptance: {
    /** @description The IP address from which the Mandate was accepted by the customer. */
    readonly ip_address?: string;
    /** @description The user agent of the browser from which the Mandate was accepted by the customer. */
    readonly user_agent?: string;
  };
  /**
   * Order
   * @description Order objects are created to handle end customers' purchases of previously
   * defined [products](https://stripe.com/docs/api#products). You can create, retrieve, and pay individual orders, as well
   * as list all orders. Orders are identified by a unique, random ID.
   *
   * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
   */
  readonly order: {
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
    readonly amount: number;
    /** @description The total amount that was returned to the customer. */
    readonly amount_returned?: number;
    /** @description ID of the Connect Application that created the order. */
    readonly application?: string;
    /** @description A fee in cents that will be applied to the order and transferred to the application owner’s Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees documentation. */
    readonly application_fee?: number;
    /** @description The ID of the payment used to pay for the order. Present if the order status is `paid`, `fulfilled`, or `refunded`. */
    readonly charge?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description The customer used for the order. */
    readonly customer?: string;
    /** @description The email address of the customer placing the order. */
    readonly email?: string;
    /** @description External coupon code to load for this order. */
    readonly external_coupon_code?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description List of items constituting the order. An order can have up to 25 items. */
    readonly items: readonly definitions["order_item"][];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "order";
    /**
     * OrderReturnList
     * @description A list of returns that have taken place for this order.
     */
    readonly returns?: {
      /** @description Details about each object. */
      readonly data: readonly definitions["order_return"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description The shipping method that is currently selected for this order, if any. If present, it is equal to one of the `id`s of shipping methods in the `shipping_methods` array. At order creation time, if there are multiple shipping methods, Stripe will automatically selected the first method. */
    readonly selected_shipping_method?: string;
    readonly shipping?: definitions["shipping"];
    /** @description A list of supported shipping methods for this order. The desired shipping method can be specified either by updating the order, or when paying it. */
    readonly shipping_methods?: readonly definitions["shipping_method"][];
    /** @description Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More details in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses). */
    readonly status: string;
    readonly status_transitions?: definitions["status_transitions"];
    /** @description Time at which the object was last updated. Measured in seconds since the Unix epoch. */
    readonly updated?: number;
    /** @description The user's order ID if it is different from the Stripe order ID. */
    readonly upstream_id?: string;
  };
  /**
   * OrderItem
   * @description A representation of the constituent items of any given order. Can be used to
   * represent [SKUs](https://stripe.com/docs/api#skus), shipping costs, or taxes owed on the order.
   *
   * Related guide: [Orders](https://stripe.com/docs/orders/guide).
   */
  readonly order_item: {
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Description of the line item, meant to be displayable to the user (e.g., `"Express shipping"`). */
    readonly description: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "order_item";
    /** @description The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU). */
    readonly parent?: string;
    /** @description A positive integer representing the number of instances of `parent` that are included in this order item. Applicable/present only if `type` is `sku`. */
    readonly quantity?: number;
    /** @description The type of line item. One of `sku`, `tax`, `shipping`, or `discount`. */
    readonly type: string;
  };
  /**
   * OrderReturn
   * @description A return represents the full or partial return of a number of [order items](https://stripe.com/docs/api#order_items).
   * Returns always belong to an order, and may optionally contain a refund.
   *
   * Related guide: [Handling Returns](https://stripe.com/docs/orders/guide#handling-returns).
   */
  readonly order_return: {
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the returned line item. */
    readonly amount: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The items included in this order return. */
    readonly items: readonly definitions["order_item"][];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "order_return";
    /** @description The order that this return includes items from. */
    readonly order?: string;
    /** @description The ID of the refund issued for this return. */
    readonly refund?: string;
  };
  /** PackageDimensions */
  readonly package_dimensions: {
    /** @description Height, in inches. */
    readonly height: number;
    /** @description Length, in inches. */
    readonly length: number;
    /** @description Weight, in ounces. */
    readonly weight: number;
    /** @description Width, in inches. */
    readonly width: number;
  };
  /**
   * PaymentIntent
   * @description A PaymentIntent guides you through the process of collecting a payment from your customer.
   * We recommend that you create exactly one PaymentIntent for each order or
   * customer session in your system. You can reference the PaymentIntent later to
   * see the history of payment attempts for a particular session.
   *
   * A PaymentIntent transitions through
   * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
   * throughout its lifetime as it interfaces with Stripe.js to perform
   * authentication flows and ultimately creates at most one successful charge.
   *
   * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents).
   */
  readonly payment_intent: {
    /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
    readonly amount: number;
    /** @description Amount that can be captured from this PaymentIntent. */
    readonly amount_capturable?: number;
    /** @description Amount that was collected by this PaymentIntent. */
    readonly amount_received?: number;
    /** @description ID of the Connect application that created the PaymentIntent. */
    readonly application?: string;
    /** @description The amount of the application fee (if any) for the resulting payment. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
    readonly application_fee_amount?: number;
    /** @description Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch. */
    readonly canceled_at?: number;
    /**
     * @description Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, or `automatic`).
     * @enum {string}
     */
    readonly cancellation_reason?:
      | "abandoned"
      | "automatic"
      | "duplicate"
      | "failed_invoice"
      | "fraudulent"
      | "requested_by_customer"
      | "void_invoice";
    /**
     * @description Controls when the funds will be captured from the customer's account.
     * @enum {string}
     */
    readonly capture_method: "automatic" | "manual";
    /**
     * PaymentFlowsPaymentIntentResourceChargeList
     * @description Charges that were created by this PaymentIntent, if any.
     */
    readonly charges?: {
      /** @description This list only contains the latest charge, even if there were previously multiple unsuccessful charges. To view all previous charges for a PaymentIntent, you can filter the charges list using the `payment_intent` [parameter](https://stripe.com/docs/api/charges/list#list_charges-payment_intent). */
      readonly data: readonly definitions["charge"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /**
     * @description The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
     *
     * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
     *
     * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment) and learn about how `client_secret` should be handled.
     */
    readonly client_secret?: string;
    /** @enum {string} */
    readonly confirmation_method: "automatic" | "manual";
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /**
     * @description ID of the Customer this PaymentIntent belongs to, if one exists.
     *
     * Payment methods attached to other Customers cannot be used with this PaymentIntent.
     *
     * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
     */
    readonly customer?: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description ID of the invoice that created this PaymentIntent, if it exists. */
    readonly invoice?: string;
    readonly last_payment_error?: definitions["api_errors"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. For more information, see the [documentation](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata). */
    readonly metadata?: { readonly [key: string]: unknown };
    readonly next_action?: definitions["payment_intent_next_action"];
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "payment_intent";
    /** @description The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
    readonly on_behalf_of?: string;
    /** @description ID of the payment method used in this PaymentIntent. */
    readonly payment_method?: string;
    readonly payment_method_options?: definitions["payment_intent_payment_method_options"];
    /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
    readonly payment_method_types: readonly string[];
    /** @description Email address that the receipt for the resulting payment will be sent to. */
    readonly receipt_email?: string;
    /** @description ID of the review associated with this PaymentIntent, if any. */
    readonly review?: string;
    /**
     * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
     *
     * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
     *
     * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
     * @enum {string}
     */
    readonly setup_future_usage?: "off_session" | "on_session";
    readonly shipping?: definitions["shipping"];
    /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
    readonly statement_descriptor?: string;
    /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
    readonly statement_descriptor_suffix?: string;
    /**
     * @description Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
     * @enum {string}
     */
    readonly status:
      | "canceled"
      | "processing"
      | "requires_action"
      | "requires_capture"
      | "requires_confirmation"
      | "requires_payment_method"
      | "succeeded";
    readonly transfer_data?: definitions["transfer_data"];
    /** @description A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
    readonly transfer_group?: string;
  };
  /** PaymentIntentNextAction */
  readonly payment_intent_next_action: {
    readonly redirect_to_url?: definitions["payment_intent_next_action_redirect_to_url"];
    /** @description Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`. */
    readonly type: string;
    /** @description When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
    readonly use_stripe_sdk?: { readonly [key: string]: unknown };
  };
  /** PaymentIntentNextActionRedirectToUrl */
  readonly payment_intent_next_action_redirect_to_url: {
    /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
    readonly return_url?: string;
    /** @description The URL you must redirect your customer to in order to authenticate the payment. */
    readonly url?: string;
  };
  /** PaymentIntentPaymentMethodOptions */
  readonly payment_intent_payment_method_options: {
    readonly card?: definitions["payment_intent_payment_method_options_card"];
  };
  /** payment_intent_payment_method_options_card */
  readonly payment_intent_payment_method_options_card: {
    readonly installments?: definitions["payment_method_options_card_installments"];
    /**
     * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
     * @enum {string}
     */
    readonly request_three_d_secure?: "any" | "automatic" | "challenge_only";
  };
  /**
   * PaymentMethod
   * @description PaymentMethod objects represent your customer's payment instruments.
   * They can be used with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or saved to
   * Customer objects to store instrument details for future payments.
   *
   * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
   */
  readonly payment_method: {
    readonly au_becs_debit?: definitions["payment_method_au_becs_debit"];
    readonly billing_details: definitions["billing_details"];
    readonly card?: definitions["payment_method_card"];
    readonly card_present?: definitions["payment_method_card_present"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer. */
    readonly customer?: string;
    readonly fpx?: definitions["payment_method_fpx"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    readonly ideal?: definitions["payment_method_ideal"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "payment_method";
    readonly sepa_debit?: definitions["payment_method_sepa_debit"];
    /**
     * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
     * @enum {string}
     */
    readonly type: "au_becs_debit" | "card" | "fpx" | "ideal" | "sepa_debit";
  };
  /** payment_method_au_becs_debit */
  readonly payment_method_au_becs_debit: {
    /** @description Six-digit number identifying bank and branch associated with this bank account. */
    readonly bsb_number?: string;
    /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    readonly fingerprint?: string;
    /** @description Last four digits of the bank account number. */
    readonly last4?: string;
  };
  /** payment_method_card */
  readonly payment_method_card: {
    /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    readonly brand: string;
    readonly checks?: definitions["payment_method_card_checks"];
    /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    readonly country?: string;
    /** @description Two-digit number representing the card's expiration month. */
    readonly exp_month: number;
    /** @description Four-digit number representing the card's expiration year. */
    readonly exp_year: number;
    /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
    readonly fingerprint?: string;
    /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    readonly funding: string;
    readonly generated_from?: definitions["payment_method_card_generated_card"];
    /** @description The last four digits of the card. */
    readonly last4: string;
    readonly three_d_secure_usage?: definitions["three_d_secure_usage"];
    readonly wallet?: definitions["payment_method_card_wallet"];
  };
  /** payment_method_card_checks */
  readonly payment_method_card_checks: {
    /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly address_line1_check?: string;
    /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly address_postal_code_check?: string;
    /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly cvc_check?: string;
  };
  /** payment_method_card_generated_card */
  readonly payment_method_card_generated_card: {
    /** @description The charge that created this object. */
    readonly charge?: string;
    readonly payment_method_details?: definitions["payment_method_details"];
  };
  /** payment_method_card_present */
  readonly payment_method_card_present: { readonly [key: string]: unknown };
  /** payment_method_card_wallet */
  readonly payment_method_card_wallet: {
    readonly amex_express_checkout?: definitions["payment_method_card_wallet_amex_express_checkout"];
    readonly apple_pay?: definitions["payment_method_card_wallet_apple_pay"];
    /** @description (For tokenized numbers only.) The last four digits of the device account number. */
    readonly dynamic_last4?: string;
    readonly google_pay?: definitions["payment_method_card_wallet_google_pay"];
    readonly masterpass?: definitions["payment_method_card_wallet_masterpass"];
    readonly samsung_pay?: definitions["payment_method_card_wallet_samsung_pay"];
    /**
     * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
     * @enum {string}
     */
    readonly type:
      | "amex_express_checkout"
      | "apple_pay"
      | "google_pay"
      | "masterpass"
      | "samsung_pay"
      | "visa_checkout";
    readonly visa_checkout?: definitions["payment_method_card_wallet_visa_checkout"];
  };
  /** payment_method_card_wallet_amex_express_checkout */
  readonly payment_method_card_wallet_amex_express_checkout: { readonly [key: string]: unknown };
  /** payment_method_card_wallet_apple_pay */
  readonly payment_method_card_wallet_apple_pay: { readonly [key: string]: unknown };
  /** payment_method_card_wallet_google_pay */
  readonly payment_method_card_wallet_google_pay: { readonly [key: string]: unknown };
  /** payment_method_card_wallet_masterpass */
  readonly payment_method_card_wallet_masterpass: {
    readonly billing_address?: definitions["address"];
    /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly email?: string;
    /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly name?: string;
    readonly shipping_address?: definitions["address"];
  };
  /** payment_method_card_wallet_samsung_pay */
  readonly payment_method_card_wallet_samsung_pay: { readonly [key: string]: unknown };
  /** payment_method_card_wallet_visa_checkout */
  readonly payment_method_card_wallet_visa_checkout: {
    readonly billing_address?: definitions["address"];
    /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly email?: string;
    /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly name?: string;
    readonly shipping_address?: definitions["address"];
  };
  /** payment_method_details */
  readonly payment_method_details: {
    readonly ach_credit_transfer?: definitions["payment_method_details_ach_credit_transfer"];
    readonly ach_debit?: definitions["payment_method_details_ach_debit"];
    readonly alipay?: definitions["payment_method_details_alipay"];
    readonly au_becs_debit?: definitions["payment_method_details_au_becs_debit"];
    readonly bancontact?: definitions["payment_method_details_bancontact"];
    readonly card?: definitions["payment_method_details_card"];
    readonly card_present?: definitions["payment_method_details_card_present"];
    readonly eps?: definitions["payment_method_details_eps"];
    readonly fpx?: definitions["payment_method_details_fpx"];
    readonly giropay?: definitions["payment_method_details_giropay"];
    readonly ideal?: definitions["payment_method_details_ideal"];
    readonly klarna?: definitions["payment_method_details_klarna"];
    readonly multibanco?: definitions["payment_method_details_multibanco"];
    readonly p24?: definitions["payment_method_details_p24"];
    readonly sepa_debit?: definitions["payment_method_details_sepa_debit"];
    readonly sofort?: definitions["payment_method_details_sofort"];
    readonly stripe_account?: definitions["payment_method_details_stripe_account"];
    /**
     * @description The type of transaction-specific details of the payment method used in the payment, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `au_becs_debit`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `klarna`, `multibanco`, `p24`, `sepa_debit`, `sofort`, `stripe_account`, or `wechat`.
     * An additional hash is included on `payment_method_details` with a name matching this value.
     * It contains information specific to the payment method.
     */
    readonly type: string;
    readonly wechat?: definitions["payment_method_details_wechat"];
  };
  /** payment_method_details_ach_credit_transfer */
  readonly payment_method_details_ach_credit_transfer: {
    /** @description Account number to transfer funds to. */
    readonly account_number?: string;
    /** @description Name of the bank associated with the routing number. */
    readonly bank_name?: string;
    /** @description Routing transit number for the bank account to transfer funds to. */
    readonly routing_number?: string;
    /** @description SWIFT code of the bank associated with the routing number. */
    readonly swift_code?: string;
  };
  /** payment_method_details_ach_debit */
  readonly payment_method_details_ach_debit: {
    /**
     * @description Type of entity that holds the account. This can be either `individual` or `company`.
     * @enum {string}
     */
    readonly account_holder_type?: "company" | "individual";
    /** @description Name of the bank associated with the bank account. */
    readonly bank_name?: string;
    /** @description Two-letter ISO code representing the country the bank account is located in. */
    readonly country?: string;
    /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    readonly fingerprint?: string;
    /** @description Last four digits of the bank account number. */
    readonly last4?: string;
    /** @description Routing transit number of the bank account. */
    readonly routing_number?: string;
  };
  /** payment_method_details_alipay */
  readonly payment_method_details_alipay: { readonly [key: string]: unknown };
  /** payment_method_details_au_becs_debit */
  readonly payment_method_details_au_becs_debit: {
    /** @description Bank-State-Branch number of the bank account. */
    readonly bsb_number?: string;
    /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    readonly fingerprint?: string;
    /** @description Last four digits of the bank account number. */
    readonly last4?: string;
    /** @description ID of the mandate used to make this payment. */
    readonly mandate?: string;
  };
  /** payment_method_details_bancontact */
  readonly payment_method_details_bancontact: {
    /** @description Bank code of bank associated with the bank account. */
    readonly bank_code?: string;
    /** @description Name of the bank associated with the bank account. */
    readonly bank_name?: string;
    /** @description Bank Identifier Code of the bank associated with the bank account. */
    readonly bic?: string;
    /** @description Last four characters of the IBAN. */
    readonly iban_last4?: string;
    /**
     * @description Preferred language of the Bancontact authorization page that the customer is redirected to.
     * Can be one of `en`, `de`, `fr`, or `nl`
     * @enum {string}
     */
    readonly preferred_language?: "de" | "en" | "fr" | "nl";
    /**
     * @description Owner's verified full name. Values are verified or provided by Bancontact directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    readonly verified_name?: string;
  };
  /** payment_method_details_card */
  readonly payment_method_details_card: {
    /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    readonly brand?: string;
    readonly checks?: definitions["payment_method_details_card_checks"];
    /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    readonly country?: string;
    /** @description Two-digit number representing the card's expiration month. */
    readonly exp_month?: number;
    /** @description Four-digit number representing the card's expiration year. */
    readonly exp_year?: number;
    /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
    readonly fingerprint?: string;
    /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    readonly funding?: string;
    readonly installments?: definitions["payment_method_details_card_installments"];
    /** @description The last four digits of the card. */
    readonly last4?: string;
    /** @description Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    readonly network?: string;
    readonly three_d_secure?: definitions["three_d_secure_details"];
    readonly wallet?: definitions["payment_method_details_card_wallet"];
  };
  /** payment_method_details_card_checks */
  readonly payment_method_details_card_checks: {
    /** @description If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly address_line1_check?: string;
    /** @description If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly address_postal_code_check?: string;
    /** @description If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`. */
    readonly cvc_check?: string;
  };
  /** payment_method_details_card_installments */
  readonly payment_method_details_card_installments: {
    readonly plan?: definitions["payment_method_details_card_installments_plan"];
  };
  /** payment_method_details_card_installments_plan */
  readonly payment_method_details_card_installments_plan: {
    /** @description For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card. */
    readonly count?: number;
    /**
     * @description For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
     * One of `month`.
     * @enum {string}
     */
    readonly interval?: "month";
    /**
     * @description Type of installment plan, one of `fixed_count`.
     * @enum {string}
     */
    readonly type: "fixed_count";
  };
  /** payment_method_details_card_present */
  readonly payment_method_details_card_present: {
    /** @description Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    readonly brand?: string;
    /** @description The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). */
    readonly cardholder_name?: string;
    /** @description Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected. */
    readonly country?: string;
    /** @description Authorization response cryptogram. */
    readonly emv_auth_data?: string;
    /** @description Two-digit number representing the card's expiration month. */
    readonly exp_month?: number;
    /** @description Four-digit number representing the card's expiration year. */
    readonly exp_year?: number;
    /** @description Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number,for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number. */
    readonly fingerprint?: string;
    /** @description Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`. */
    readonly funding?: string;
    /** @description ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod. */
    readonly generated_card?: string;
    /** @description The last four digits of the card. */
    readonly last4?: string;
    /** @description Identifies which network this charge was processed on. Can be `amex`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`. */
    readonly network?: string;
    /** @description How were card details read in this transaction. Can be contact_emv, contactless_emv, magnetic_stripe_fallback, magnetic_stripe_track2, or contactless_magstripe_mode */
    readonly read_method?: string;
    readonly receipt?: definitions["payment_method_details_card_present_receipt"];
  };
  /** payment_method_details_card_present_receipt */
  readonly payment_method_details_card_present_receipt: {
    /** @description EMV tag 9F26, cryptogram generated by the integrated circuit chip. */
    readonly application_cryptogram?: string;
    /** @description Mnenomic of the Application Identifier. */
    readonly application_preferred_name?: string;
    /** @description Identifier for this transaction. */
    readonly authorization_code?: string;
    /** @description EMV tag 8A. A code returned by the card issuer. */
    readonly authorization_response_code?: string;
    /** @description How the cardholder verified ownership of the card. */
    readonly cardholder_verification_method?: string;
    /** @description EMV tag 84. Similar to the application identifier stored on the integrated circuit chip. */
    readonly dedicated_file_name?: string;
    /** @description The outcome of a series of EMV functions performed by the card reader. */
    readonly terminal_verification_results?: string;
    /** @description An indication of various EMV functions performed during the transaction. */
    readonly transaction_status_information?: string;
  };
  /** payment_method_details_card_wallet */
  readonly payment_method_details_card_wallet: {
    readonly amex_express_checkout?: definitions["payment_method_details_card_wallet_amex_express_checkout"];
    readonly apple_pay?: definitions["payment_method_details_card_wallet_apple_pay"];
    /** @description (For tokenized numbers only.) The last four digits of the device account number. */
    readonly dynamic_last4?: string;
    readonly google_pay?: definitions["payment_method_details_card_wallet_google_pay"];
    readonly masterpass?: definitions["payment_method_details_card_wallet_masterpass"];
    readonly samsung_pay?: definitions["payment_method_details_card_wallet_samsung_pay"];
    /**
     * @description The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, or `visa_checkout`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
     * @enum {string}
     */
    readonly type:
      | "amex_express_checkout"
      | "apple_pay"
      | "google_pay"
      | "masterpass"
      | "samsung_pay"
      | "visa_checkout";
    readonly visa_checkout?: definitions["payment_method_details_card_wallet_visa_checkout"];
  };
  /** payment_method_details_card_wallet_amex_express_checkout */
  readonly payment_method_details_card_wallet_amex_express_checkout: { readonly [key: string]: unknown };
  /** payment_method_details_card_wallet_apple_pay */
  readonly payment_method_details_card_wallet_apple_pay: { readonly [key: string]: unknown };
  /** payment_method_details_card_wallet_google_pay */
  readonly payment_method_details_card_wallet_google_pay: { readonly [key: string]: unknown };
  /** payment_method_details_card_wallet_masterpass */
  readonly payment_method_details_card_wallet_masterpass: {
    readonly billing_address?: definitions["address"];
    /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly email?: string;
    /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly name?: string;
    readonly shipping_address?: definitions["address"];
  };
  /** payment_method_details_card_wallet_samsung_pay */
  readonly payment_method_details_card_wallet_samsung_pay: { readonly [key: string]: unknown };
  /** payment_method_details_card_wallet_visa_checkout */
  readonly payment_method_details_card_wallet_visa_checkout: {
    readonly billing_address?: definitions["address"];
    /** @description Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly email?: string;
    /** @description Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly name?: string;
    readonly shipping_address?: definitions["address"];
  };
  /** payment_method_details_eps */
  readonly payment_method_details_eps: {
    /**
     * @description Owner's verified full name. Values are verified or provided by EPS directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    readonly verified_name?: string;
  };
  /** payment_method_details_fpx */
  readonly payment_method_details_fpx: {
    /**
     * @description The customer's bank. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
     * @enum {string}
     */
    readonly bank:
      | "affin_bank"
      | "alliance_bank"
      | "ambank"
      | "bank_islam"
      | "bank_muamalat"
      | "bank_rakyat"
      | "bsn"
      | "cimb"
      | "deutsche_bank"
      | "hong_leong_bank"
      | "hsbc"
      | "kfh"
      | "maybank2e"
      | "maybank2u"
      | "ocbc"
      | "pb_enterprise"
      | "public_bank"
      | "rhb"
      | "standard_chartered"
      | "uob";
    /** @description Unique transaction id generated by FPX for every request from the merchant */
    readonly transaction_id?: string;
  };
  /** payment_method_details_giropay */
  readonly payment_method_details_giropay: {
    /** @description Bank code of bank associated with the bank account. */
    readonly bank_code?: string;
    /** @description Name of the bank associated with the bank account. */
    readonly bank_name?: string;
    /** @description Bank Identifier Code of the bank associated with the bank account. */
    readonly bic?: string;
    /**
     * @description Owner's verified full name. Values are verified or provided by Giropay directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    readonly verified_name?: string;
  };
  /** payment_method_details_ideal */
  readonly payment_method_details_ideal: {
    /**
     * @description The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
     * @enum {string}
     */
    readonly bank?:
      | "abn_amro"
      | "asn_bank"
      | "bunq"
      | "handelsbanken"
      | "ing"
      | "knab"
      | "moneyou"
      | "rabobank"
      | "regiobank"
      | "sns_bank"
      | "triodos_bank"
      | "van_lanschot";
    /**
     * @description The Bank Identifier Code of the customer's bank.
     * @enum {string}
     */
    readonly bic?:
      | "ABNANL2A"
      | "ASNBNL21"
      | "BUNQNL2A"
      | "FVLBNL22"
      | "HANDNL2A"
      | "INGBNL2A"
      | "KNABNL2H"
      | "MOYONL21"
      | "RABONL2U"
      | "RBRBNL21"
      | "SNSBNL2A"
      | "TRIONL2U";
    /** @description Last four characters of the IBAN. */
    readonly iban_last4?: string;
    /**
     * @description Owner's verified full name. Values are verified or provided by iDEAL directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    readonly verified_name?: string;
  };
  /** payment_method_details_klarna */
  readonly payment_method_details_klarna: { readonly [key: string]: unknown };
  /** payment_method_details_multibanco */
  readonly payment_method_details_multibanco: {
    /** @description Entity number associated with this Multibanco payment. */
    readonly entity?: string;
    /** @description Reference number associated with this Multibanco payment. */
    readonly reference?: string;
  };
  /** payment_method_details_p24 */
  readonly payment_method_details_p24: {
    /** @description Unique reference for this Przelewy24 payment. */
    readonly reference?: string;
    /**
     * @description Owner's verified full name. Values are verified or provided by Przelewy24 directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    readonly verified_name?: string;
  };
  /** payment_method_details_sepa_debit */
  readonly payment_method_details_sepa_debit: {
    /** @description Bank code of bank associated with the bank account. */
    readonly bank_code?: string;
    /** @description Branch code of bank associated with the bank account. */
    readonly branch_code?: string;
    /** @description Two-letter ISO code representing the country the bank account is located in. */
    readonly country?: string;
    /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    readonly fingerprint?: string;
    /** @description Last four characters of the IBAN. */
    readonly last4?: string;
    /** @description ID of the mandate used to make this payment. */
    readonly mandate?: string;
  };
  /** payment_method_details_sofort */
  readonly payment_method_details_sofort: {
    /** @description Bank code of bank associated with the bank account. */
    readonly bank_code?: string;
    /** @description Name of the bank associated with the bank account. */
    readonly bank_name?: string;
    /** @description Bank Identifier Code of the bank associated with the bank account. */
    readonly bic?: string;
    /** @description Two-letter ISO code representing the country the bank account is located in. */
    readonly country?: string;
    /** @description Last four characters of the IBAN. */
    readonly iban_last4?: string;
    /**
     * @description Owner's verified full name. Values are verified or provided by SOFORT directly
     * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
     */
    readonly verified_name?: string;
  };
  /** payment_method_details_stripe_account */
  readonly payment_method_details_stripe_account: { readonly [key: string]: unknown };
  /** payment_method_details_wechat */
  readonly payment_method_details_wechat: { readonly [key: string]: unknown };
  /** payment_method_fpx */
  readonly payment_method_fpx: {
    /**
     * @description The customer's bank, if provided. Can be one of `affin_bank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, or `pb_enterprise`.
     * @enum {string}
     */
    readonly bank:
      | "affin_bank"
      | "alliance_bank"
      | "ambank"
      | "bank_islam"
      | "bank_muamalat"
      | "bank_rakyat"
      | "bsn"
      | "cimb"
      | "deutsche_bank"
      | "hong_leong_bank"
      | "hsbc"
      | "kfh"
      | "maybank2e"
      | "maybank2u"
      | "ocbc"
      | "pb_enterprise"
      | "public_bank"
      | "rhb"
      | "standard_chartered"
      | "uob";
  };
  /** payment_method_ideal */
  readonly payment_method_ideal: {
    /**
     * @description The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `sns_bank`, `triodos_bank`, or `van_lanschot`.
     * @enum {string}
     */
    readonly bank?:
      | "abn_amro"
      | "asn_bank"
      | "bunq"
      | "handelsbanken"
      | "ing"
      | "knab"
      | "moneyou"
      | "rabobank"
      | "regiobank"
      | "sns_bank"
      | "triodos_bank"
      | "van_lanschot";
    /**
     * @description The Bank Identifier Code of the customer's bank, if the bank was provided.
     * @enum {string}
     */
    readonly bic?:
      | "ABNANL2A"
      | "ASNBNL21"
      | "BUNQNL2A"
      | "FVLBNL22"
      | "HANDNL2A"
      | "INGBNL2A"
      | "KNABNL2H"
      | "MOYONL21"
      | "RABONL2U"
      | "RBRBNL21"
      | "SNSBNL2A"
      | "TRIONL2U";
  };
  /** payment_method_options_card_installments */
  readonly payment_method_options_card_installments: {
    /** @description Installment plans that may be selected for this PaymentIntent. */
    readonly available_plans?: readonly definitions["payment_method_details_card_installments_plan"][];
    /** @description Whether Installments are enabled for this PaymentIntent. */
    readonly enabled: boolean;
    readonly plan?: definitions["payment_method_details_card_installments_plan"];
  };
  /** payment_method_sepa_debit */
  readonly payment_method_sepa_debit: {
    /** @description Bank code of bank associated with the bank account. */
    readonly bank_code?: string;
    /** @description Branch code of bank associated with the bank account. */
    readonly branch_code?: string;
    /** @description Two-letter ISO code representing the country the bank account is located in. */
    readonly country?: string;
    /** @description Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same. */
    readonly fingerprint?: string;
    /** @description Last four characters of the IBAN. */
    readonly last4?: string;
  };
  /** PaymentPagesPaymentPageResourcesShippingAddressCollection */
  readonly payment_pages_payment_page_resources_shipping_address_collection: {
    /**
     * @description An array of two-letter ISO country codes representing which countries Checkout should provide as options for
     * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
     */
    readonly allowed_countries: readonly (
      | "AC"
      | "AD"
      | "AE"
      | "AF"
      | "AG"
      | "AI"
      | "AL"
      | "AM"
      | "AO"
      | "AQ"
      | "AR"
      | "AT"
      | "AU"
      | "AW"
      | "AX"
      | "AZ"
      | "BA"
      | "BB"
      | "BD"
      | "BE"
      | "BF"
      | "BG"
      | "BH"
      | "BI"
      | "BJ"
      | "BL"
      | "BM"
      | "BN"
      | "BO"
      | "BQ"
      | "BR"
      | "BS"
      | "BT"
      | "BV"
      | "BW"
      | "BY"
      | "BZ"
      | "CA"
      | "CD"
      | "CF"
      | "CG"
      | "CH"
      | "CI"
      | "CK"
      | "CL"
      | "CM"
      | "CN"
      | "CO"
      | "CR"
      | "CV"
      | "CW"
      | "CY"
      | "CZ"
      | "DE"
      | "DJ"
      | "DK"
      | "DM"
      | "DO"
      | "DZ"
      | "EC"
      | "EE"
      | "EG"
      | "EH"
      | "ER"
      | "ES"
      | "ET"
      | "FI"
      | "FJ"
      | "FK"
      | "FO"
      | "FR"
      | "GA"
      | "GB"
      | "GD"
      | "GE"
      | "GF"
      | "GG"
      | "GH"
      | "GI"
      | "GL"
      | "GM"
      | "GN"
      | "GP"
      | "GQ"
      | "GR"
      | "GS"
      | "GT"
      | "GU"
      | "GW"
      | "GY"
      | "HK"
      | "HN"
      | "HR"
      | "HT"
      | "HU"
      | "ID"
      | "IE"
      | "IL"
      | "IM"
      | "IN"
      | "IO"
      | "IQ"
      | "IS"
      | "IT"
      | "JE"
      | "JM"
      | "JO"
      | "JP"
      | "KE"
      | "KG"
      | "KH"
      | "KI"
      | "KM"
      | "KN"
      | "KR"
      | "KW"
      | "KY"
      | "KZ"
      | "LA"
      | "LB"
      | "LC"
      | "LI"
      | "LK"
      | "LR"
      | "LS"
      | "LT"
      | "LU"
      | "LV"
      | "LY"
      | "MA"
      | "MC"
      | "MD"
      | "ME"
      | "MF"
      | "MG"
      | "MK"
      | "ML"
      | "MM"
      | "MN"
      | "MO"
      | "MQ"
      | "MR"
      | "MS"
      | "MT"
      | "MU"
      | "MV"
      | "MW"
      | "MX"
      | "MY"
      | "MZ"
      | "NA"
      | "NC"
      | "NE"
      | "NG"
      | "NI"
      | "NL"
      | "NO"
      | "NP"
      | "NR"
      | "NU"
      | "NZ"
      | "OM"
      | "PA"
      | "PE"
      | "PF"
      | "PG"
      | "PH"
      | "PK"
      | "PL"
      | "PM"
      | "PN"
      | "PR"
      | "PS"
      | "PT"
      | "PY"
      | "QA"
      | "RE"
      | "RO"
      | "RS"
      | "RU"
      | "RW"
      | "SA"
      | "SB"
      | "SC"
      | "SE"
      | "SG"
      | "SH"
      | "SI"
      | "SJ"
      | "SK"
      | "SL"
      | "SM"
      | "SN"
      | "SO"
      | "SR"
      | "SS"
      | "ST"
      | "SV"
      | "SX"
      | "SZ"
      | "TA"
      | "TC"
      | "TD"
      | "TF"
      | "TG"
      | "TH"
      | "TJ"
      | "TK"
      | "TL"
      | "TM"
      | "TN"
      | "TO"
      | "TR"
      | "TT"
      | "TV"
      | "TW"
      | "TZ"
      | "UA"
      | "UG"
      | "US"
      | "UY"
      | "UZ"
      | "VA"
      | "VC"
      | "VE"
      | "VG"
      | "VN"
      | "VU"
      | "WF"
      | "WS"
      | "XK"
      | "YE"
      | "YT"
      | "ZA"
      | "ZM"
      | "ZW"
      | "ZZ"
    )[];
  };
  /** Polymorphic */
  readonly payment_source: {
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "account";
  };
  /**
   * Payout
   * @description A `Payout` object is created when you receive funds from Stripe, or when you
   * initiate a payout to either a bank account or debit card of a [connected
   * Stripe account](/docs/connect/payouts). You can retrieve individual payouts,
   * as well as list all payouts. Payouts are made on [varying
   * schedules](/docs/payouts#payout-schedule), depending on your country and
   * industry.
   *
   * Related guide: [Receiving Payouts](https://stripe.com/docs/payouts).
   */
  readonly payout: {
    /** @description Amount (in %s) to be transferred to your bank account or debit card. */
    readonly amount: number;
    /** @description Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays. */
    readonly arrival_date: number;
    /** @description Returns `true` if the payout was created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule), and `false` if it was [requested manually](https://stripe.com/docs/payouts#manual-payouts). */
    readonly automatic: boolean;
    /** @description ID of the balance transaction that describes the impact of this payout on your account balance. */
    readonly balance_transaction?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description ID of the bank account or card the payout was sent to. */
    readonly destination?: string;
    /** @description If the payout failed or was canceled, this will be the ID of the balance transaction that reversed the initial balance transaction, and puts the funds from the failed payout back in your balance. */
    readonly failure_balance_transaction?: string;
    /** @description Error code explaining reason for payout failure if available. See [Types of payout failures](https://stripe.com/docs/api#payout_failures) for a list of failure codes. */
    readonly failure_code?: string;
    /** @description Message to user further explaining reason for payout failure if available. */
    readonly failure_message?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces](https://stripe.com/blog/instant-payouts-for-marketplaces) for more information.) */
    readonly method: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "payout";
    /** @description The source balance this payout came from. One of `card`, `fpx`, or `bank_account`. */
    readonly source_type: string;
    /** @description Extra information about a payout to be displayed on the user's bank statement. */
    readonly statement_descriptor?: string;
    /** @description Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`. */
    readonly status: string;
    /**
     * @description Can be `bank_account` or `card`.
     * @enum {string}
     */
    readonly type: "bank_account" | "card";
  };
  /** Period */
  readonly period: {
    /** @description The end date of this usage period. All usage up to and including this point in time is included. */
    readonly end?: number;
    /** @description The start date of this usage period. All usage after this point in time is included. */
    readonly start?: number;
  };
  /**
   * Person
   * @description This is an object representing a person associated with a Stripe account.
   *
   * Related guide: [Handling Identity Verification with the API](https://stripe.com/docs/connect/identity-verification-api#person-information).
   */
  readonly person: {
    readonly account: string;
    readonly address?: definitions["address"];
    readonly address_kana?: definitions["legal_entity_japan_address"];
    readonly address_kanji?: definitions["legal_entity_japan_address"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    readonly dob?: definitions["legal_entity_dob"];
    readonly email?: string;
    readonly first_name?: string;
    readonly first_name_kana?: string;
    readonly first_name_kanji?: string;
    readonly gender?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    readonly id_number_provided?: boolean;
    readonly last_name?: string;
    readonly last_name_kana?: string;
    readonly last_name_kanji?: string;
    readonly maiden_name?: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "person";
    readonly phone?: string;
    readonly relationship?: definitions["person_relationship"];
    readonly requirements?: definitions["person_requirements"];
    readonly ssn_last_4_provided?: boolean;
    readonly verification?: definitions["legal_entity_person_verification"];
  };
  /** PersonRelationship */
  readonly person_relationship: {
    /** @description Whether the person is a director of the account's legal entity. Currently only required for accounts in the EU. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations. */
    readonly director?: boolean;
    /** @description Whether the person has significant responsibility to control, manage, or direct the organization. */
    readonly executive?: boolean;
    /** @description Whether the person is an owner of the account’s legal entity. */
    readonly owner?: boolean;
    /** @description The percent owned by the person of the account's legal entity. */
    readonly percent_ownership?: number;
    /** @description Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account. */
    readonly representative?: boolean;
    /** @description The person's title (e.g., CEO, Support Engineer). */
    readonly title?: string;
  };
  /** PersonRequirements */
  readonly person_requirements: {
    /** @description Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled. */
    readonly currently_due: readonly string[];
    /** @description The fields that need to be collected again because validation or verification failed for some reason. */
    readonly errors: readonly definitions["account_requirements_error"][];
    /** @description Fields that need to be collected assuming all volume thresholds are reached. As fields are needed, they are moved to `currently_due` and the account's `current_deadline` is set. */
    readonly eventually_due: readonly string[];
    /** @description Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable payouts for the person's account. */
    readonly past_due: readonly string[];
    /** @description Fields that may become required depending on the results of verification or review. An empty array unless an asynchronous verification is pending. If verification fails, the fields in this array become required and move to `currently_due` or `past_due`. */
    readonly pending_verification: readonly string[];
  };
  /**
   * Plan
   * @description Plans define the base price, currency, and billing cycle for recurring purchases of products.
   * Products help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
   *
   * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
   *
   * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and plans](https://stripe.com/docs/billing/subscriptions/products-and-plans).
   */
  readonly plan: {
    /** @description Whether the plan can be used for new purchases. */
    readonly active: boolean;
    /**
     * @description Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
     * @enum {string}
     */
    readonly aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
    /** @description The amount in %s to be charged on the interval specified. */
    readonly amount?: number;
    /** @description Same as `amount`, but contains a decimal value with at most 12 decimal places. */
    readonly amount_decimal?: string;
    /**
     * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
     * @enum {string}
     */
    readonly billing_scheme: "per_unit" | "tiered";
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
     * @enum {string}
     */
    readonly interval: "day" | "month" | "week" | "year";
    /** @description The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. */
    readonly interval_count: number;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description A brief description of the plan, hidden from customers. */
    readonly nickname?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "plan";
    /** @description The product whose pricing this plan determines. */
    readonly product?: string;
    /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
    readonly tiers?: readonly definitions["plan_tier"][];
    /**
     * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
     * @enum {string}
     */
    readonly tiers_mode?: "graduated" | "volume";
    readonly transform_usage?: definitions["transform_usage"];
    /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
    readonly trial_period_days?: number;
    /**
     * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
     * @enum {string}
     */
    readonly usage_type: "licensed" | "metered";
  };
  /** PlanTier */
  readonly plan_tier: {
    /** @description Price for the entire tier. */
    readonly flat_amount?: number;
    /** @description Same as `flat_amount`, but contains a decimal value with at most 12 decimal places. */
    readonly flat_amount_decimal?: string;
    /** @description Per unit price for units relevant to the tier. */
    readonly unit_amount?: number;
    /** @description Same as `unit_amount`, but contains a decimal value with at most 12 decimal places. */
    readonly unit_amount_decimal?: string;
    /** @description Up to and including to this quantity will be contained in the tier. */
    readonly up_to?: number;
  };
  /** PlatformTax */
  readonly platform_tax_fee: {
    /** @description The Connected account that incurred this charge. */
    readonly account: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "platform_tax_fee";
    /** @description The payment object that caused this tax to be inflicted. */
    readonly source_transaction: string;
    /** @description The type of tax (VAT). */
    readonly type: string;
  };
  /**
   * Product
   * @description Products describe the specific goods or services you offer to your customers.
   * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
   * They can be used in conjuction with [SKUs](https://stripe.com/docs/api#skus) and [Plans](https://stripe.com/docs/api#plans) to configure pricing in Checkout and Subscriptions.
   *
   * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) or accept [one-time payments with Checkout](https://stripe.com/docs/payments/checkout/client#create-products) and more about [Products and Plans](https://stripe.com/docs/billing/subscriptions/products-and-plans)
   */
  readonly product: {
    /** @description Whether the product is currently available for purchase. */
    readonly active: boolean;
    /** @description A list of up to 5 attributes that each SKU can provide values for (e.g., `["color", "size"]`). */
    readonly attributes?: readonly string[];
    /** @description A short one-line description of the product, meant to be displayable to the customer. Only applicable to products of `type=good`. */
    readonly caption?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description An array of connect application identifiers that cannot purchase this product. Only applicable to products of `type=good`. */
    readonly deactivate_on?: readonly string[];
    /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
    readonly description?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
    readonly images: readonly string[];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
    readonly name: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "product";
    readonly package_dimensions?: definitions["package_dimensions"];
    /** @description Whether this product is a shipped good. Only applicable to products of `type=good`. */
    readonly shippable?: boolean;
    /** @description Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. */
    readonly statement_descriptor?: string;
    /**
     * @description The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans.
     * @enum {string}
     */
    readonly type: "good" | "service";
    /** @description A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
    readonly unit_label?: string;
    /** @description Time at which the object was last updated. Measured in seconds since the Unix epoch. */
    readonly updated: number;
    /** @description A URL of a publicly-accessible webpage for this product. Only applicable to products of `type=good`. */
    readonly url?: string;
  };
  /**
   * RadarEarlyFraudWarning
   * @description An early fraud warning indicates that the card issuer has notified us that a
   * charge may be fraudulent.
   *
   * Related guide: [Early Fraud Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
   */
  readonly "radar.early_fraud_warning": {
    /** @description An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later. */
    readonly actionable: boolean;
    /** @description ID of the charge this early fraud warning is for, optionally expanded. */
    readonly charge: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`. */
    readonly fraud_type: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "radar.early_fraud_warning";
  };
  /**
   * RadarListList
   * @description Value lists allow you to group values together which can then be referenced in rules.
   *
   * Related guide: [Default Stripe Lists](https://stripe.com/docs/radar/lists#managing-list-items).
   */
  readonly "radar.value_list": {
    /** @description The name of the value list for use in rules. */
    readonly alias: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The name or email address of the user who created this value list. */
    readonly created_by: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description The type of items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`.
     * @enum {string}
     */
    readonly item_type:
      | "card_bin"
      | "card_fingerprint"
      | "case_sensitive_string"
      | "country"
      | "email"
      | "ip_address"
      | "string";
    /**
     * RadarListListItemList
     * @description List of items contained within this value list.
     */
    readonly list_items: {
      /** @description Details about each object. */
      readonly data: readonly definitions["radar.value_list_item"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description The name of the value list. */
    readonly name: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "radar.value_list";
  };
  /**
   * RadarListListItem
   * @description Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
   *
   * Related guide: [Managing List Items](https://stripe.com/docs/radar/lists#managing-list-items).
   */
  readonly "radar.value_list_item": {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The name or email address of the user who added this item to the value list. */
    readonly created_by: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "radar.value_list_item";
    /** @description The value of the item. */
    readonly value: string;
    /** @description The identifier of the value list this item belongs to. */
    readonly value_list: string;
  };
  /** RadarReviewResourceLocation */
  readonly radar_review_resource_location: {
    /** @description The city where the payment originated. */
    readonly city?: string;
    /** @description Two-letter ISO code representing the country where the payment originated. */
    readonly country?: string;
    /** @description The geographic latitude where the payment originated. */
    readonly latitude?: number;
    /** @description The geographic longitude where the payment originated. */
    readonly longitude?: number;
    /** @description The state/county/province/region where the payment originated. */
    readonly region?: string;
  };
  /** RadarReviewResourceSession */
  readonly radar_review_resource_session: {
    /** @description The browser used in this browser session (e.g., `Chrome`). */
    readonly browser?: string;
    /** @description Information about the device used for the browser session (e.g., `Samsung SM-G930T`). */
    readonly device?: string;
    /** @description The platform for the browser session (e.g., `Macintosh`). */
    readonly platform?: string;
    /** @description The version for the browser session (e.g., `61.0.3163.100`). */
    readonly version?: string;
  };
  /**
   * TransferRecipient
   * @description With `Recipient` objects, you can transfer money from your Stripe account to a
   * third-party bank account or debit card. The API allows you to create, delete,
   * and update your recipients. You can retrieve individual recipients as well as
   * a list of all your recipients.
   *
   * **`Recipient` objects have been deprecated in favor of
   * [Connect](https://stripe.com/docs/connect), specifically Connect's much more powerful
   * [Account objects](https://stripe.com/docs/api#account). Stripe accounts that don't already use
   * recipients can no longer begin doing so. Please use `Account` objects
   * instead. If you are already using recipients, please see our
   * [migration guide](https://stripe.com/docs/connect/recipient-account-migrations) for more information.**
   */
  readonly recipient: {
    readonly active_account?: definitions["bank_account"];
    /** CardList */
    readonly cards?: {
      readonly data: readonly definitions["card"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description The default card to use for creating transfers to this recipient. */
    readonly default_card?: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    readonly email?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description The ID of the [Custom account](https://stripe.com/docs/connect/custom-accounts) this recipient was migrated to. If set, the recipient can no longer be updated, nor can transfers be made to it: use the Custom account instead. */
    readonly migrated_to?: string;
    /** @description Full, legal name of the recipient. */
    readonly name?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "recipient";
    readonly rolled_back_from?: string;
    /** @description Type of the recipient, one of `individual` or `corporation`. */
    readonly type: string;
  };
  /**
   * Refund
   * @description `Refund` objects allow you to refund a charge that has previously been created
   * but not yet refunded. Funds will be refunded to the credit or debit card that
   * was originally charged.
   *
   * Related guide: [Refunds](https://stripe.com/docs/refunds).
   */
  readonly refund: {
    /** @description Amount, in %s. */
    readonly amount: number;
    /** @description Balance transaction that describes the impact on your account balance. */
    readonly balance_transaction?: string;
    /** @description ID of the charge that was refunded. */
    readonly charge?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only) */
    readonly description?: string;
    /** @description If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction. */
    readonly failure_balance_transaction?: string;
    /** @description If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`. */
    readonly failure_reason?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "refund";
    /** @description ID of the PaymentIntent that was refunded. */
    readonly payment_intent?: string;
    /** @description Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`). */
    readonly reason?: string;
    /** @description This is the transaction number that appears on email receipts sent for this refund. */
    readonly receipt_number?: string;
    /** @description The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details. */
    readonly source_transfer_reversal?: string;
    /** @description Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details. */
    readonly status?: string;
    /** @description If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter. */
    readonly transfer_reversal?: string;
  };
  /**
   * reporting_report_run
   * @description The Report Run object represents an instance of a report type generated with
   * specific run parameters. Once the object is created, Stripe begins processing the report.
   * When the report has finished running, it will give you a reference to a file
   * where you can retrieve your results. For an overview, see
   * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
   *
   * Note that reports can only be run based on your live-mode data (not test-mode
   * data), and thus related requests must be made with a
   * [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
   */
  readonly "reporting.report_run": {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /**
     * @description If something should go wrong during the run, a message about the failure (populated when
     *  `status=failed`).
     */
    readonly error?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Always `true`: reports can only be run on live-mode data. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "reporting.report_run";
    readonly parameters: definitions["financial_reporting_finance_report_run_run_parameters"];
    /** @description The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. */
    readonly report_type: string;
    readonly result?: definitions["file"];
    /**
     * @description Status of this report run. This will be `pending` when the run is initially created.
     *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
     *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
     */
    readonly status: string;
    /**
     * @description Timestamp at which this run successfully finished (populated when
     *  `status=succeeded`). Measured in seconds since the Unix epoch.
     */
    readonly succeeded_at?: number;
  };
  /**
   * reporting_report_type
   * @description The Report Type resource corresponds to a particular type of report, such as
   * the "Activity summary" or "Itemized payouts" reports. These objects are
   * identified by an ID belonging to a set of enumerated values. See
   * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
   * for those Report Type IDs, along with required and optional parameters.
   *
   * Note that reports can only be run based on your live-mode data (not test-mode
   * data), and thus related requests must be made with a
   * [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
   */
  readonly "reporting.report_type": {
    /** @description Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch. */
    readonly data_available_end: number;
    /** @description Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch. */
    readonly data_available_start: number;
    /** @description List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.) */
    readonly default_columns?: readonly string[];
    /** @description The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`. */
    readonly id: string;
    /** @description Human-readable name of the Report Type */
    readonly name: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "reporting.report_type";
    /** @description When this Report Type was latest updated. Measured in seconds since the Unix epoch. */
    readonly updated: number;
    /** @description Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas. */
    readonly version: number;
  };
  /** ReserveTransaction */
  readonly reserve_transaction: {
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "reserve_transaction";
  };
  /**
   * RadarReview
   * @description Reviews can be used to supplement automated fraud detection with human expertise.
   *
   * Learn more about [Radar](/radar) and reviewing payments
   * [here](https://stripe.com/docs/radar/reviews).
   */
  readonly review: {
    /** @description The ZIP or postal code of the card used, if applicable. */
    readonly billing_zip?: string;
    /** @description The charge associated with this review. */
    readonly charge?: string;
    /**
     * @description The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, or `disputed`.
     * @enum {string}
     */
    readonly closed_reason?: "approved" | "disputed" | "refunded" | "refunded_as_fraud";
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The IP address where the payment originated. */
    readonly ip_address?: string;
    readonly ip_address_location?: definitions["radar_review_resource_location"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "review";
    /** @description If `true`, the review needs action. */
    readonly open: boolean;
    /**
     * @description The reason the review was opened. One of `rule` or `manual`.
     * @enum {string}
     */
    readonly opened_reason: "manual" | "rule";
    /** @description The PaymentIntent ID associated with this review, if one exists. */
    readonly payment_intent?: string;
    /** @description The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, or `disputed`. */
    readonly reason: string;
    readonly session?: definitions["radar_review_resource_session"];
  };
  /** RadarRule */
  readonly rule: {
    /** @description The action taken on the payment. */
    readonly action: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The predicate to evaluate the payment against. */
    readonly predicate: string;
  };
  /**
   * ScheduledQueryRun
   * @description If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
   * receive a `sigma.scheduled_query_run.created` webhook each time the query
   * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
   * retrieve the query results.
   */
  readonly scheduled_query_run: {
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description When the query was run, Sigma contained a snapshot of your Stripe data at this time. */
    readonly data_load_time: number;
    readonly error?: definitions["sigma_scheduled_query_run_error"];
    readonly file?: definitions["file"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "scheduled_query_run";
    /** @description Time at which the result expires and is no longer available for download. */
    readonly result_available_until: number;
    /** @description SQL for the query. */
    readonly sql: string;
    /** @description The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise. */
    readonly status: string;
    /** @description Title of the query. */
    readonly title: string;
  };
  /**
   * SetupIntent
   * @description A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
   * For example, you could use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
   * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
   *
   * Create a SetupIntent as soon as you're ready to collect your customer's payment credentials.
   * Do not maintain long-lived, unconfirmed SetupIntents as they may no longer be valid.
   * The SetupIntent then transitions through multiple [statuses](https://stripe.com/docs/payments/intents#intent-statuses) as it guides
   * you through the setup process.
   *
   * Successful SetupIntents result in payment credentials that are optimized for future payments.
   * For example, cardholders in [certain regions](/guides/strong-customer-authentication) may need to be run through
   * [Strong Customer Authentication](https://stripe.com/docs/strong-customer-authentication) at the time of payment method collection
   * in order to streamline later [off-session payments](https://stripe.com/docs/payments/setup-intents).
   * If the SetupIntent is used with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer), upon success,
   * it will automatically attach the resulting payment method to that Customer.
   * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
   * PaymentIntents to save payment methods in order to prevent saving invalid or unoptimized payment methods.
   *
   * By using SetupIntents, you ensure that your customers experience the minimum set of required friction,
   * even as regulations change over time.
   *
   * Related guide: [Setup Intents API](https://stripe.com/docs/payments/setup-intents).
   */
  readonly setup_intent: {
    /** @description ID of the Connect application that created the SetupIntent. */
    readonly application?: string;
    /**
     * @description Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
     * @enum {string}
     */
    readonly cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
    /**
     * @description The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
     *
     * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, embedded in URLs, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
     */
    readonly client_secret?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /**
     * @description ID of the Customer this SetupIntent belongs to, if one exists.
     *
     * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
     */
    readonly customer?: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    readonly last_setup_error?: definitions["api_errors"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description ID of the multi use Mandate generated by the SetupIntent. */
    readonly mandate?: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    readonly next_action?: definitions["setup_intent_next_action"];
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "setup_intent";
    /** @description The account (if any) for which the setup is intended. */
    readonly on_behalf_of?: string;
    /** @description ID of the payment method used with this SetupIntent. */
    readonly payment_method?: string;
    readonly payment_method_options?: definitions["setup_intent_payment_method_options"];
    /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. */
    readonly payment_method_types: readonly string[];
    /** @description ID of the single_use Mandate generated by the SetupIntent. */
    readonly single_use_mandate?: string;
    /**
     * @description [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
     * @enum {string}
     */
    readonly status:
      | "canceled"
      | "processing"
      | "requires_action"
      | "requires_confirmation"
      | "requires_payment_method"
      | "succeeded";
    /**
     * @description Indicates how the payment method is intended to be used in the future.
     *
     * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
     */
    readonly usage: string;
  };
  /** SetupIntentNextAction */
  readonly setup_intent_next_action: {
    readonly redirect_to_url?: definitions["setup_intent_next_action_redirect_to_url"];
    /** @description Type of the next action to perform, one of `redirect_to_url` or `use_stripe_sdk`. */
    readonly type: string;
    /** @description When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js. */
    readonly use_stripe_sdk?: { readonly [key: string]: unknown };
  };
  /** SetupIntentNextActionRedirectToUrl */
  readonly setup_intent_next_action_redirect_to_url: {
    /** @description If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion. */
    readonly return_url?: string;
    /** @description The URL you must redirect your customer to in order to authenticate. */
    readonly url?: string;
  };
  /** SetupIntentPaymentMethodOptions */
  readonly setup_intent_payment_method_options: {
    readonly card?: definitions["setup_intent_payment_method_options_card"];
  };
  /** setup_intent_payment_method_options_card */
  readonly setup_intent_payment_method_options_card: {
    /**
     * @description We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
     * @enum {string}
     */
    readonly request_three_d_secure?: "any" | "automatic" | "challenge_only";
  };
  /** Shipping */
  readonly shipping: {
    readonly address?: definitions["address"];
    /** @description The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. */
    readonly carrier?: string;
    /** @description Recipient name. */
    readonly name?: string;
    /** @description Recipient phone (including extension). */
    readonly phone?: string;
    /** @description The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas. */
    readonly tracking_number?: string;
  };
  /** ShippingMethod */
  readonly shipping_method: {
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the line item. */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    readonly delivery_estimate?: definitions["delivery_estimate"];
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
  };
  /** SigmaScheduledQueryRunError */
  readonly sigma_scheduled_query_run_error: {
    /** @description Information about the run failure. */
    readonly message: string;
  };
  /**
   * SKU
   * @description Stores representations of [stock keeping units](http://en.wikipedia.org/wiki/Stock_keeping_unit).
   * SKUs describe specific product variations, taking into account any combination of: attributes,
   * currency, and cost. For example, a product may be a T-shirt, whereas a specific SKU represents
   * the `size: large`, `color: red` version of that shirt.
   *
   * Can also be used to manage inventory.
   *
   * Related guide: [Tax, Shipping, and Inventory](https://stripe.com/docs/orders).
   */
  readonly sku: {
    /** @description Whether the SKU is available for purchase. */
    readonly active: boolean;
    /** @description A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
    readonly attributes: { readonly [key: string]: unknown };
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The URL of an image for this SKU, meant to be displayable to the customer. */
    readonly image?: string;
    readonly inventory: definitions["inventory"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "sku";
    readonly package_dimensions?: definitions["package_dimensions"];
    /** @description The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
    readonly price: number;
    /** @description The ID of the product this SKU is associated with. The product must be currently active. */
    readonly product: string;
    /** @description Time at which the object was last updated. Measured in seconds since the Unix epoch. */
    readonly updated: number;
  };
  /**
   * Source
   * @description `Source` objects allow you to accept a variety of payment methods. They
   * represent a customer's payment instrument, and can be used with the Stripe API
   * just like a `Card` object: once chargeable, they can be charged, or can be
   * attached to customers.
   *
   * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
   */
  readonly source: {
    readonly ach_credit_transfer?: definitions["source_type_ach_credit_transfer"];
    readonly ach_debit?: definitions["source_type_ach_debit"];
    readonly alipay?: definitions["source_type_alipay"];
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. */
    readonly amount?: number;
    readonly au_becs_debit?: definitions["source_type_au_becs_debit"];
    readonly bancontact?: definitions["source_type_bancontact"];
    readonly card?: definitions["source_type_card"];
    readonly card_present?: definitions["source_type_card_present"];
    /** @description The client secret of the source. Used for client-side retrieval using a publishable key. */
    readonly client_secret: string;
    readonly code_verification?: definitions["source_code_verification_flow"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources. */
    readonly currency?: string;
    /** @description The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer. */
    readonly customer?: string;
    readonly eps?: definitions["source_type_eps"];
    /** @description The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. */
    readonly flow: string;
    readonly giropay?: definitions["source_type_giropay"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    readonly ideal?: definitions["source_type_ideal"];
    readonly klarna?: definitions["source_type_klarna"];
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    readonly multibanco?: definitions["source_type_multibanco"];
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "source";
    readonly owner?: definitions["source_owner"];
    readonly p24?: definitions["source_type_p24"];
    readonly receiver?: definitions["source_receiver_flow"];
    readonly redirect?: definitions["source_redirect_flow"];
    readonly sepa_debit?: definitions["source_type_sepa_debit"];
    readonly sofort?: definitions["source_type_sofort"];
    readonly source_order?: definitions["source_order"];
    /** @description Extra information about a source. This will appear on your customer's statement every time you charge the source. */
    readonly statement_descriptor?: string;
    /** @description The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge. */
    readonly status: string;
    readonly three_d_secure?: definitions["source_type_three_d_secure"];
    /**
     * @description The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
     * @enum {string}
     */
    readonly type:
      | "ach_credit_transfer"
      | "ach_debit"
      | "alipay"
      | "au_becs_debit"
      | "bancontact"
      | "card"
      | "card_present"
      | "eps"
      | "giropay"
      | "ideal"
      | "klarna"
      | "multibanco"
      | "p24"
      | "sepa_debit"
      | "sofort"
      | "three_d_secure"
      | "wechat";
    /** @description Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned. */
    readonly usage?: string;
    readonly wechat?: definitions["source_type_wechat"];
  };
  /** SourceCodeVerificationFlow */
  readonly source_code_verification_flow: {
    /** @description The number of attempts remaining to authenticate the source object with a verification code. */
    readonly attempts_remaining: number;
    /** @description The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0). */
    readonly status: string;
  };
  /**
   * SourceMandateNotification
   * @description Source mandate notifications should be created when a notification related to
   * a source mandate must be sent to the payer. They will trigger a webhook or
   * deliver an email to the customer.
   */
  readonly source_mandate_notification: {
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`. */
    readonly amount?: number;
    readonly bacs_debit?: definitions["source_mandate_notification_bacs_debit_data"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "source_mandate_notification";
    /** @description The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`. */
    readonly reason: string;
    readonly sepa_debit?: definitions["source_mandate_notification_sepa_debit_data"];
    readonly source: definitions["source"];
    /** @description The status of the mandate notification. Valid statuses are `pending` or `submitted`. */
    readonly status: string;
    /** @description The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`. */
    readonly type: string;
  };
  /** SourceMandateNotificationBacsDebitData */
  readonly source_mandate_notification_bacs_debit_data: {
    /** @description Last 4 digits of the account number associated with the debit. */
    readonly last4?: string;
  };
  /** SourceMandateNotificationSepaDebitData */
  readonly source_mandate_notification_sepa_debit_data: {
    /** @description SEPA creditor ID. */
    readonly creditor_identifier?: string;
    /** @description Last 4 digits of the account number associated with the debit. */
    readonly last4?: string;
    /** @description Mandate reference associated with the debit. */
    readonly mandate_reference?: string;
  };
  /** SourceOrder */
  readonly source_order: {
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order. */
    readonly amount: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description The email address of the customer placing the order. */
    readonly email?: string;
    /** @description List of items constituting the order. */
    readonly items?: readonly definitions["source_order_item"][];
    readonly shipping?: definitions["shipping"];
  };
  /** SourceOrderItem */
  readonly source_order_item: {
    /** @description The amount (price) for this order item. */
    readonly amount?: number;
    /** @description This currency of this order item. Required when `amount` is present. */
    readonly currency?: string;
    /** @description Human-readable description for this order item. */
    readonly description?: string;
    /** @description The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered. */
    readonly quantity?: number;
    /** @description The type of this order item. Must be `sku`, `tax`, or `shipping`. */
    readonly type?: string;
  };
  /** SourceOwner */
  readonly source_owner: {
    readonly address?: definitions["address"];
    /** @description Owner's email address. */
    readonly email?: string;
    /** @description Owner's full name. */
    readonly name?: string;
    /** @description Owner's phone number (including extension). */
    readonly phone?: string;
    readonly verified_address?: definitions["address"];
    /** @description Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly verified_email?: string;
    /** @description Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly verified_name?: string;
    /** @description Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated. */
    readonly verified_phone?: string;
  };
  /** SourceReceiverFlow */
  readonly source_receiver_flow: {
    /** @description The address of the receiver source. This is the value that should be communicated to the customer to send their funds to. */
    readonly address?: string;
    /** @description The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency. */
    readonly amount_charged: number;
    /** @description The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency. */
    readonly amount_received: number;
    /** @description The total amount that was returned to the customer. The amount returned is expressed in the source's currency. */
    readonly amount_returned: number;
    /** @description Type of refund attribute method, one of `email`, `manual`, or `none`. */
    readonly refund_attributes_method: string;
    /** @description Type of refund attribute status, one of `missing`, `requested`, or `available`. */
    readonly refund_attributes_status: string;
  };
  /** SourceRedirectFlow */
  readonly source_redirect_flow: {
    /** @description The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`. */
    readonly failure_reason?: string;
    /** @description The URL you provide to redirect the customer to after they authenticated their payment. */
    readonly return_url: string;
    /** @description The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused). */
    readonly status: string;
    /** @description The URL provided to you to redirect a customer to as part of a `redirect` authentication flow. */
    readonly url: string;
  };
  /**
   * SourceTransaction
   * @description Some payment methods have no required amount that a customer must send.
   * Customers can be instructed to send any amount, and it can be made up of
   * multiple transactions. As such, sources can have multiple associated
   * transactions.
   */
  readonly source_transaction: {
    readonly ach_credit_transfer?: definitions["source_transaction_ach_credit_transfer_data"];
    /** @description A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver. */
    readonly amount: number;
    readonly chf_credit_transfer?: definitions["source_transaction_chf_credit_transfer_data"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    readonly gbp_credit_transfer?: definitions["source_transaction_gbp_credit_transfer_data"];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "source_transaction";
    readonly paper_check?: definitions["source_transaction_paper_check_data"];
    readonly sepa_credit_transfer?: definitions["source_transaction_sepa_credit_transfer_data"];
    /** @description The ID of the source this transaction is attached to. */
    readonly source: string;
    /** @description The status of the transaction, one of `succeeded`, `pending`, or `failed`. */
    readonly status: string;
    /**
     * @description The type of source this transaction is attached to.
     * @enum {string}
     */
    readonly type:
      | "ach_credit_transfer"
      | "ach_debit"
      | "alipay"
      | "bancontact"
      | "card"
      | "card_present"
      | "eps"
      | "giropay"
      | "ideal"
      | "klarna"
      | "multibanco"
      | "p24"
      | "sepa_debit"
      | "sofort"
      | "three_d_secure"
      | "wechat";
  };
  /** SourceTransactionAchCreditTransferData */
  readonly source_transaction_ach_credit_transfer_data: {
    /** @description Customer data associated with the transfer. */
    readonly customer_data?: string;
    /** @description Bank account fingerprint associated with the transfer. */
    readonly fingerprint?: string;
    /** @description Last 4 digits of the account number associated with the transfer. */
    readonly last4?: string;
    /** @description Routing number associated with the transfer. */
    readonly routing_number?: string;
  };
  /** SourceTransactionChfCreditTransferData */
  readonly source_transaction_chf_credit_transfer_data: {
    /** @description Reference associated with the transfer. */
    readonly reference?: string;
    /** @description Sender's country address. */
    readonly sender_address_country?: string;
    /** @description Sender's line 1 address. */
    readonly sender_address_line1?: string;
    /** @description Sender's bank account IBAN. */
    readonly sender_iban?: string;
    /** @description Sender's name. */
    readonly sender_name?: string;
  };
  /** SourceTransactionGbpCreditTransferData */
  readonly source_transaction_gbp_credit_transfer_data: {
    /** @description Bank account fingerprint associated with the Stripe owned bank account receiving the transfer. */
    readonly fingerprint?: string;
    /** @description The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported. */
    readonly funding_method?: string;
    /** @description Last 4 digits of sender account number associated with the transfer. */
    readonly last4?: string;
    /** @description Sender entered arbitrary information about the transfer. */
    readonly reference?: string;
    /** @description Sender account number associated with the transfer. */
    readonly sender_account_number?: string;
    /** @description Sender name associated with the transfer. */
    readonly sender_name?: string;
    /** @description Sender sort code associated with the transfer. */
    readonly sender_sort_code?: string;
  };
  /** SourceTransactionPaperCheckData */
  readonly source_transaction_paper_check_data: {
    /** @description Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch. */
    readonly available_at?: string;
    /** @description Comma-separated list of invoice IDs associated with the paper check. */
    readonly invoices?: string;
  };
  /** SourceTransactionSepaCreditTransferData */
  readonly source_transaction_sepa_credit_transfer_data: {
    /** @description Reference associated with the transfer. */
    readonly reference?: string;
    /** @description Sender's bank account IBAN. */
    readonly sender_iban?: string;
    /** @description Sender's name. */
    readonly sender_name?: string;
  };
  readonly source_type_ach_credit_transfer: {
    readonly account_number?: string;
    readonly bank_name?: string;
    readonly fingerprint?: string;
    readonly refund_account_holder_name?: string;
    readonly refund_account_holder_type?: string;
    readonly refund_routing_number?: string;
    readonly routing_number?: string;
    readonly swift_code?: string;
  };
  readonly source_type_ach_debit: {
    readonly bank_name?: string;
    readonly country?: string;
    readonly fingerprint?: string;
    readonly last4?: string;
    readonly routing_number?: string;
    readonly type?: string;
  };
  readonly source_type_alipay: {
    readonly data_string?: string;
    readonly native_url?: string;
    readonly statement_descriptor?: string;
  };
  readonly source_type_au_becs_debit: {
    readonly bsb_number?: string;
    readonly fingerprint?: string;
    readonly last4?: string;
  };
  readonly source_type_bancontact: {
    readonly bank_code?: string;
    readonly bank_name?: string;
    readonly bic?: string;
    readonly iban_last4?: string;
    readonly preferred_language?: string;
    readonly statement_descriptor?: string;
  };
  readonly source_type_card: {
    readonly address_line1_check?: string;
    readonly address_zip_check?: string;
    readonly brand?: string;
    readonly country?: string;
    readonly cvc_check?: string;
    readonly dynamic_last4?: string;
    readonly exp_month?: number;
    readonly exp_year?: number;
    readonly fingerprint?: string;
    readonly funding?: string;
    readonly last4?: string;
    readonly name?: string;
    readonly three_d_secure?: string;
    readonly tokenization_method?: string;
  };
  readonly source_type_card_present: {
    readonly application_cryptogram?: string;
    readonly application_preferred_name?: string;
    readonly authorization_code?: string;
    readonly authorization_response_code?: string;
    readonly brand?: string;
    readonly country?: string;
    readonly cvm_type?: string;
    readonly data_type?: string;
    readonly dedicated_file_name?: string;
    readonly emv_auth_data?: string;
    readonly evidence_customer_signature?: string;
    readonly evidence_transaction_certificate?: string;
    readonly exp_month?: number;
    readonly exp_year?: number;
    readonly fingerprint?: string;
    readonly funding?: string;
    readonly last4?: string;
    readonly pos_device_id?: string;
    readonly pos_entry_mode?: string;
    readonly read_method?: string;
    readonly reader?: string;
    readonly terminal_verification_results?: string;
    readonly transaction_status_information?: string;
  };
  readonly source_type_eps: {
    readonly reference?: string;
    readonly statement_descriptor?: string;
  };
  readonly source_type_giropay: {
    readonly bank_code?: string;
    readonly bank_name?: string;
    readonly bic?: string;
    readonly statement_descriptor?: string;
  };
  readonly source_type_ideal: {
    readonly bank?: string;
    readonly bic?: string;
    readonly iban_last4?: string;
    readonly statement_descriptor?: string;
  };
  readonly source_type_klarna: {
    readonly background_image_url?: string;
    readonly client_token?: string;
    readonly first_name?: string;
    readonly last_name?: string;
    readonly locale?: string;
    readonly logo_url?: string;
    readonly page_title?: string;
    readonly pay_later_asset_urls_descriptive?: string;
    readonly pay_later_asset_urls_standard?: string;
    readonly pay_later_name?: string;
    readonly pay_later_redirect_url?: string;
    readonly pay_now_asset_urls_descriptive?: string;
    readonly pay_now_asset_urls_standard?: string;
    readonly pay_now_name?: string;
    readonly pay_now_redirect_url?: string;
    readonly pay_over_time_asset_urls_descriptive?: string;
    readonly pay_over_time_asset_urls_standard?: string;
    readonly pay_over_time_name?: string;
    readonly pay_over_time_redirect_url?: string;
    readonly payment_method_categories?: string;
    readonly purchase_country?: string;
    readonly purchase_type?: string;
    readonly redirect_url?: string;
    readonly shipping_first_name?: string;
    readonly shipping_last_name?: string;
  };
  readonly source_type_multibanco: {
    readonly entity?: string;
    readonly reference?: string;
    readonly refund_account_holder_address_city?: string;
    readonly refund_account_holder_address_country?: string;
    readonly refund_account_holder_address_line1?: string;
    readonly refund_account_holder_address_line2?: string;
    readonly refund_account_holder_address_postal_code?: string;
    readonly refund_account_holder_address_state?: string;
    readonly refund_account_holder_name?: string;
    readonly refund_iban?: string;
  };
  readonly source_type_p24: {
    readonly reference?: string;
  };
  readonly source_type_sepa_debit: {
    readonly bank_code?: string;
    readonly branch_code?: string;
    readonly country?: string;
    readonly fingerprint?: string;
    readonly last4?: string;
    readonly mandate_reference?: string;
    readonly mandate_url?: string;
  };
  readonly source_type_sofort: {
    readonly bank_code?: string;
    readonly bank_name?: string;
    readonly bic?: string;
    readonly country?: string;
    readonly iban_last4?: string;
    readonly preferred_language?: string;
    readonly statement_descriptor?: string;
  };
  readonly source_type_three_d_secure: {
    readonly address_line1_check?: string;
    readonly address_zip_check?: string;
    readonly authenticated?: boolean;
    readonly brand?: string;
    readonly card?: string;
    readonly country?: string;
    readonly customer?: string;
    readonly cvc_check?: string;
    readonly dynamic_last4?: string;
    readonly exp_month?: number;
    readonly exp_year?: number;
    readonly fingerprint?: string;
    readonly funding?: string;
    readonly last4?: string;
    readonly name?: string;
    readonly three_d_secure?: string;
    readonly tokenization_method?: string;
  };
  readonly source_type_wechat: {
    readonly prepay_id?: string;
    readonly qr_code_url?: string;
    readonly statement_descriptor?: string;
  };
  /** StatusTransitions */
  readonly status_transitions: {
    /** @description The time that the order was canceled. */
    readonly canceled?: number;
    /** @description The time that the order was fulfilled. */
    readonly fulfiled?: number;
    /** @description The time that the order was paid. */
    readonly paid?: number;
    /** @description The time that the order was returned. */
    readonly returned?: number;
  };
  /**
   * Subscription
   * @description Subscriptions allow you to charge a customer on a recurring basis.
   *
   * Related guide: [Creating Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
   */
  readonly subscription: {
    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. */
    readonly application_fee_percent?: number;
    /** @description Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
    readonly billing_cycle_anchor: number;
    readonly billing_thresholds?: definitions["subscription_billing_thresholds"];
    /** @description A date in the future at which the subscription will automatically get canceled */
    readonly cancel_at?: number;
    /** @description If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period. */
    readonly cancel_at_period_end: boolean;
    /** @description If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state. */
    readonly canceled_at?: number;
    /**
     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     * @enum {string}
     */
    readonly collection_method?: "charge_automatically" | "send_invoice";
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created. */
    readonly current_period_end: number;
    /** @description Start of the current period that the subscription has been invoiced for. */
    readonly current_period_start: number;
    /** @description ID of the customer who owns the subscription. */
    readonly customer: string;
    /** @description Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`. */
    readonly days_until_due?: number;
    /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
    readonly default_payment_method?: string;
    /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
    readonly default_source?: string;
    /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
    readonly default_tax_rates?: readonly definitions["tax_rate"][];
    readonly discount?: definitions["discount"];
    /** @description If the subscription has ended, the date the subscription ended. */
    readonly ended_at?: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * SubscriptionItemList
     * @description List of subscription items, each with an attached plan.
     */
    readonly items: {
      /** @description Details about each object. */
      readonly data: readonly definitions["subscription_item"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description The most recent invoice this subscription has generated. */
    readonly latest_invoice?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /** @description Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`. */
    readonly next_pending_invoice_item_invoice?: number;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "subscription";
    readonly pause_collection?: definitions["subscriptions_resource_pause_collection"];
    readonly pending_invoice_item_interval?: definitions["subscription_pending_invoice_item_interval"];
    /** @description You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2). */
    readonly pending_setup_intent?: string;
    readonly pending_update?: definitions["subscriptions_resource_pending_update"];
    readonly plan?: definitions["plan"];
    /** @description The quantity of the plan to which the customer is subscribed. For example, if your plan is $10/user/month, and your customer has 5 users, you could pass 5 as the quantity to have the customer charged $50 (5 x $10) monthly. Only set if the subscription contains a single plan. */
    readonly quantity?: number;
    /** @description The schedule attached to the subscription */
    readonly schedule?: string;
    /** @description Date when the subscription was first created. The date might differ from the `created` date due to backdating. */
    readonly start_date: number;
    /**
     * @description Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.
     *
     * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.
     *
     * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
     *
     * If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.
     *
     * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
     * @enum {string}
     */
    readonly status: "active" | "canceled" | "incomplete" | "incomplete_expired" | "past_due" | "trialing" | "unpaid";
    /** @description If provided, each invoice created by this subscription will apply the tax rate, increasing the amount billed to the customer. */
    readonly tax_percent?: number;
    /** @description If the subscription has a trial, the end of that trial. */
    readonly trial_end?: number;
    /** @description If the subscription has a trial, the beginning of that trial. */
    readonly trial_start?: number;
  };
  /** SubscriptionBillingThresholds */
  readonly subscription_billing_thresholds: {
    /** @description Monetary threshold that triggers the subscription to create an invoice */
    readonly amount_gte?: number;
    /** @description Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`. */
    readonly reset_billing_cycle_anchor?: boolean;
  };
  /**
   * SubscriptionItem
   * @description Subscription items allow you to create customer subscriptions with more than
   * one plan, making it easy to represent complex billing relationships.
   */
  readonly subscription_item: {
    readonly billing_thresholds?: definitions["subscription_item_billing_thresholds"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "subscription_item";
    readonly plan: definitions["plan"];
    /** @description The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed. */
    readonly quantity?: number;
    /** @description The `subscription` this `subscription_item` belongs to. */
    readonly subscription: string;
    /** @description The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`. */
    readonly tax_rates?: readonly definitions["tax_rate"][];
  };
  /** SubscriptionItemBillingThresholds */
  readonly subscription_item_billing_thresholds: {
    /** @description Usage threshold that triggers the subscription to create an invoice */
    readonly usage_gte?: number;
  };
  /** SubscriptionPendingInvoiceItemInterval */
  readonly subscription_pending_invoice_item_interval: {
    /**
     * @description Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
     * @enum {string}
     */
    readonly interval: "day" | "month" | "week" | "year";
    /** @description The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
    readonly interval_count: number;
  };
  /**
   * SubscriptionSchedule
   * @description A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
   *
   * Related guide: [Subscription Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
   */
  readonly subscription_schedule: {
    /** @description Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch. */
    readonly canceled_at?: number;
    /** @description Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch. */
    readonly completed_at?: number;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    readonly current_phase?: definitions["subscription_schedule_current_phase"];
    /** @description ID of the customer who owns the subscription schedule. */
    readonly customer: string;
    readonly default_settings: definitions["subscription_schedules_resource_default_settings"];
    /**
     * @description Behavior of the subscription schedule and underlying subscription when it ends.
     * @enum {string}
     */
    readonly end_behavior: "cancel" | "none" | "release" | "renew";
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata?: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "subscription_schedule";
    /** @description Configuration for the subscription schedule's phases. */
    readonly phases: readonly definitions["subscription_schedule_phase_configuration"][];
    /** @description Time at which the subscription schedule was released. Measured in seconds since the Unix epoch. */
    readonly released_at?: number;
    /** @description ID of the subscription once managed by the subscription schedule (if it is released). */
    readonly released_subscription?: string;
    /**
     * @description The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
     * @enum {string}
     */
    readonly status: "active" | "canceled" | "completed" | "not_started" | "released";
    /** @description ID of the subscription managed by the subscription schedule. */
    readonly subscription?: string;
  };
  /**
   * SubscriptionScheduleConfigurationItem
   * @description A phase item describes the plan and quantity of a phase.
   */
  readonly subscription_schedule_configuration_item: {
    readonly billing_thresholds?: definitions["subscription_item_billing_thresholds"];
    /** @description ID of the plan to which the customer should be subscribed. */
    readonly plan: string;
    /** @description Quantity of the plan to which the customer should be subscribed. */
    readonly quantity?: number;
    /** @description The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`. */
    readonly tax_rates?: readonly definitions["tax_rate"][];
  };
  /** SubscriptionScheduleCurrentPhase */
  readonly subscription_schedule_current_phase: {
    /** @description The end of this phase of the subscription schedule. */
    readonly end_date: number;
    /** @description The start of this phase of the subscription schedule. */
    readonly start_date: number;
  };
  /**
   * SubscriptionSchedulePhaseConfiguration
   * @description A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
   */
  readonly subscription_schedule_phase_configuration: {
    /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account during this phase of the schedule. */
    readonly application_fee_percent?: number;
    readonly billing_thresholds?: definitions["subscription_billing_thresholds"];
    /**
     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     * @enum {string}
     */
    readonly collection_method?: "charge_automatically" | "send_invoice";
    /** @description ID of the coupon to use during this phase of the subscription schedule. */
    readonly coupon?: string;
    /** @description ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
    readonly default_payment_method?: string;
    /** @description The default tax rates to apply to the subscription during this phase of the subscription schedule. */
    readonly default_tax_rates?: readonly definitions["tax_rate"][];
    /** @description The end of this phase of the subscription schedule. */
    readonly end_date: number;
    readonly invoice_settings?: definitions["invoice_setting_subscription_schedule_setting"];
    /** @description Plans to subscribe during this phase of the subscription schedule. */
    readonly plans: readonly definitions["subscription_schedule_configuration_item"][];
    /**
     * @description Controls whether or not the subscription schedule will prorate when transitioning to this phase. Values are `create_prorations` and `none`.
     * @enum {string}
     */
    readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
    /** @description The start of this phase of the subscription schedule. */
    readonly start_date: number;
    /** @description If provided, each invoice created during this phase of the subscription schedule will apply the tax rate, increasing the amount billed to the customer. */
    readonly tax_percent?: number;
    /** @description When the trial ends within the phase. */
    readonly trial_end?: number;
  };
  /** SubscriptionSchedulesResourceDefaultSettings */
  readonly subscription_schedules_resource_default_settings: {
    readonly billing_thresholds?: definitions["subscription_billing_thresholds"];
    /**
     * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.
     * @enum {string}
     */
    readonly collection_method?: "charge_automatically" | "send_invoice";
    /** @description ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings. */
    readonly default_payment_method?: string;
    readonly invoice_settings?: definitions["invoice_setting_subscription_schedule_setting"];
  };
  /**
   * SubscriptionsResourcePauseCollection
   * @description The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
   * should be paused.
   */
  readonly subscriptions_resource_pause_collection: {
    /**
     * @description The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
     * @enum {string}
     */
    readonly behavior: "keep_as_draft" | "mark_uncollectible" | "void";
    /** @description The time after which the subscription will resume collecting payments. */
    readonly resumes_at?: number;
  };
  /**
   * SubscriptionsResourcePendingUpdate
   * @description Pending Updates store the changes pending from a previous update that will be applied
   * to the Subscription upon successful payment.
   */
  readonly subscriptions_resource_pending_update: {
    /** @description If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
    readonly billing_cycle_anchor?: number;
    /** @description The point after which the changes reflected by this update will be discarded and no longer applied. */
    readonly expires_at: number;
    /** @description List of subscription items, each with an attached plan, that will be set if the update is applied. */
    readonly subscription_items?: readonly definitions["subscription_item"][];
    /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied. */
    readonly trial_end?: number;
    /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
    readonly trial_from_plan?: boolean;
  };
  /** TaxDeductedAtSource */
  readonly tax_deducted_at_source: {
    /** @description Unique identifier for the object. */
    readonly id: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "tax_deducted_at_source";
    /** @description The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
    readonly period_end: number;
    /** @description The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period. */
    readonly period_start: number;
    /** @description The TAN that was supplied to Stripe when TDS was assessed */
    readonly tax_deduction_account_number: string;
  };
  /**
   * tax_id
   * @description You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers).
   * A customer's tax IDs are displayed on invoices and credit notes issued for the customer.
   *
   * Related guide: [Customer Tax Identification Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
   */
  readonly tax_id: {
    /** @description Two-letter ISO code representing the country of the tax ID. */
    readonly country?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description ID of the customer. */
    readonly customer: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "tax_id";
    /**
     * @description Type of the tax ID, one of `au_abn`, `ca_bn`, `ca_qst`, `ch_vat`, `es_cif`, `eu_vat`, `hk_br`, `in_gst`, `jp_cn`, `kr_brn`, `li_uid`, `mx_rfc`, `my_itn`, `my_sst`, `no_vat`, `nz_gst`, `ru_inn`, `sg_gst`, `sg_uen`, `th_vat`, `tw_vat`, `us_ein`, or `za_vat`. Note that some legacy tax IDs have type `unknown`
     * @enum {string}
     */
    readonly type:
      | "au_abn"
      | "ca_bn"
      | "ca_qst"
      | "ch_vat"
      | "es_cif"
      | "eu_vat"
      | "hk_br"
      | "in_gst"
      | "jp_cn"
      | "kr_brn"
      | "li_uid"
      | "mx_rfc"
      | "my_itn"
      | "my_sst"
      | "no_vat"
      | "nz_gst"
      | "ru_inn"
      | "sg_gst"
      | "sg_uen"
      | "th_vat"
      | "tw_vat"
      | "unknown"
      | "us_ein"
      | "za_vat";
    /** @description Value of the tax ID. */
    readonly value: string;
    readonly verification: definitions["tax_id_verification"];
  };
  /** tax_id_verification */
  readonly tax_id_verification: {
    /**
     * @description Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
     * @enum {string}
     */
    readonly status: "pending" | "unavailable" | "unverified" | "verified";
    /** @description Verified address. */
    readonly verified_address?: string;
    /** @description Verified name. */
    readonly verified_name?: string;
  };
  /**
   * TaxRate
   * @description Tax rates can be applied to invoices and subscriptions to collect tax.
   *
   * Related guide: [Tax Rates](https://stripe.com/docs/billing/taxes/tax-rates).
   */
  readonly tax_rate: {
    /** @description Defaults to `true`. When set to `false`, this tax rate cannot be applied to objects in the API, but will still be applied to subscriptions and invoices that already have it set. */
    readonly active: boolean;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
    readonly description?: string;
    /** @description The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page. */
    readonly display_name: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description This specifies if the tax rate is inclusive or exclusive. */
    readonly inclusive: boolean;
    /** @description The jurisdiction for the tax rate. */
    readonly jurisdiction?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "tax_rate";
    /** @description This represents the tax rate percent out of 100. */
    readonly percentage: number;
  };
  /**
   * TerminalConnectionToken
   * @description A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
   *
   * Related guide: [Fleet Management](https://stripe.com/docs/terminal/readers/fleet-management#create).
   */
  readonly "terminal.connection_token": {
    /** @description The id of the location that this connection token is scoped to. */
    readonly location?: string;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "terminal.connection_token";
    /** @description Your application should pass this token to the Stripe Terminal SDK. */
    readonly secret: string;
  };
  /**
   * TerminalLocationLocation
   * @description A Location represents a grouping of readers.
   *
   * Related guide: [Fleet Management](https://stripe.com/docs/terminal/readers/fleet-management#create).
   */
  readonly "terminal.location": {
    readonly address: definitions["address"];
    /** @description The display name of the location. */
    readonly display_name: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "terminal.location";
  };
  /**
   * TerminalReaderReader
   * @description A Reader represents a physical device for accepting payment details.
   *
   * Related guide: [Connecting to a Reader](https://stripe.com/docs/terminal/readers/connecting).
   */
  readonly "terminal.reader": {
    /** @description The current software version of the reader. */
    readonly device_sw_version?: string;
    /**
     * @description Type of reader, one of `bbpos_chipper2x` or `verifone_P400`.
     * @enum {string}
     */
    readonly device_type: "bbpos_chipper2x" | "verifone_P400";
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The local IP address of the reader. */
    readonly ip_address?: string;
    /** @description Custom label given to the reader for easier identification. */
    readonly label: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description The location identifier of the reader. */
    readonly location?: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "terminal.reader";
    /** @description Serial number of the reader. */
    readonly serial_number: string;
    /** @description The networking status of the reader. */
    readonly status?: string;
  };
  /**
   * ThreeDSecure
   * @description Cardholder authentication via 3D Secure is initiated by creating a `3D Secure`
   * object. Once the object has been created, you can use it to authenticate the
   * cardholder and create a charge.
   */
  readonly three_d_secure: {
    /** @description Amount of the charge that you will create when authentication completes. */
    readonly amount: number;
    /** @description True if the cardholder went through the authentication flow and their bank indicated that authentication succeeded. */
    readonly authenticated: boolean;
    readonly card: definitions["card"];
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "three_d_secure";
    /** @description If present, this is the URL that you should send the cardholder to for authentication. If you are going to use Stripe.js to display the authentication page in an iframe, you should use the value "_callback". */
    readonly redirect_url?: string;
    /** @description Possible values are `redirect_pending`, `succeeded`, or `failed`. When the cardholder can be authenticated, the object starts with status `redirect_pending`. When liability will be shifted to the cardholder's bank (either because the cardholder was successfully authenticated, or because the bank has not implemented 3D Secure, the object wlil be in status `succeeded`. `failed` indicates that authentication was attempted unsuccessfully. */
    readonly status: string;
  };
  /** three_d_secure_details */
  readonly three_d_secure_details: {
    /** @description Whether or not authentication was performed. 3D Secure will succeed without authentication when the card is not enrolled. */
    readonly authenticated?: boolean;
    /** @description Whether or not 3D Secure succeeded. */
    readonly succeeded?: boolean;
    /** @description The version of 3D Secure that was used for this payment. */
    readonly version: string;
  };
  /** three_d_secure_usage */
  readonly three_d_secure_usage: {
    /** @description Whether 3D Secure is supported on this card. */
    readonly supported: boolean;
  };
  /**
   * Token
   * @description Tokenization is the process Stripe uses to collect sensitive card or bank
   * account details, or personally identifiable information (PII), directly from
   * your customers in a secure manner. A token representing this information is
   * returned to your server to use. You should use our
   * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
   * client-side. This ensures that no sensitive card data touches your server,
   * and allows your integration to operate in a PCI-compliant way.
   *
   * If you cannot use client-side tokenization, you can also create tokens using
   * the API with either your publishable or secret API key. Keep in mind that if
   * your integration uses this method, you are responsible for any PCI compliance
   * that may be required, and you must keep your secret API key safe. Unlike with
   * client-side tokenization, your customer's information is not sent directly to
   * Stripe, so we cannot determine how it is handled or stored.
   *
   * Tokens cannot be stored or used more than once. To store card or bank account
   * information for later use, you can create [Customer](https://stripe.com/docs/api#customers)
   * objects or [Custom accounts](https://stripe.com/docs/api#external_accounts). Note that
   * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
   * supports only integrations that use client-side tokenization.
   *
   * Related guide: [Accept a payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
   */
  readonly token: {
    readonly bank_account?: definitions["bank_account"];
    readonly card?: definitions["card"];
    /** @description IP address of the client that generated the token. */
    readonly client_ip?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "token";
    /** @description Type of the token: `account`, `bank_account`, `card`, or `pii`. */
    readonly type: string;
    /** @description Whether this token has already been used (tokens can be used only once). */
    readonly used: boolean;
  };
  /**
   * Topup
   * @description To top up your Stripe balance, you create a top-up object. You can retrieve
   * individual top-ups, as well as list all top-ups. Top-ups are identified by a
   * unique, random ID.
   *
   * Related guide: [Topping Up your Platform Account](https://stripe.com/docs/connect/top-ups).
   */
  readonly topup: {
    /** @description Amount transferred. */
    readonly amount: number;
    /** @description ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up. */
    readonly balance_transaction?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up. */
    readonly expected_availability_date?: number;
    /** @description Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes). */
    readonly failure_code?: string;
    /** @description Message to user further explaining reason for top-up failure if available. */
    readonly failure_message?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "topup";
    readonly source: definitions["source"];
    /** @description Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter. */
    readonly statement_descriptor?: string;
    /**
     * @description The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
     * @enum {string}
     */
    readonly status: "canceled" | "failed" | "pending" | "reversed" | "succeeded";
    /** @description A string that identifies this top-up as part of a group. */
    readonly transfer_group?: string;
  };
  /**
   * Transfer
   * @description A `Transfer` object is created when you move funds between Stripe accounts as
   * part of Connect.
   *
   * Before April 6, 2017, transfers also represented movement of funds from a
   * Stripe account to a card or bank account. This behavior has since been split
   * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
   * information, read about the
   * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
   *
   * Related guide: [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers).
   */
  readonly transfer: {
    /** @description Amount in %s to be transferred. */
    readonly amount: number;
    /** @description Amount in %s reversed (can be less than the amount attribute on the transfer if a partial reversal was issued). */
    readonly amount_reversed: number;
    /** @description Balance transaction that describes the impact of this transfer on your account balance. */
    readonly balance_transaction?: string;
    /** @description Time that this record of the transfer was first created. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
    readonly description?: string;
    /** @description ID of the Stripe account the transfer was sent to. */
    readonly destination?: string;
    /** @description If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer. */
    readonly destination_payment?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "transfer";
    /**
     * TransferReversalList
     * @description A list of reversals that have been applied to the transfer.
     */
    readonly reversals: {
      /** @description Details about each object. */
      readonly data: readonly definitions["transfer_reversal"][];
      /** @description True if this list has another page of items after this one that can be fetched. */
      readonly has_more: boolean;
      /**
       * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
       * @enum {string}
       */
      readonly object: "list";
      /** @description The URL where this list can be accessed. */
      readonly url: string;
    };
    /** @description Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false. */
    readonly reversed: boolean;
    /** @description ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance. */
    readonly source_transaction?: string;
    /** @description The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`. */
    readonly source_type?: string;
    /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
    readonly transfer_group?: string;
  };
  /** transfer_data */
  readonly transfer_data: {
    /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
    readonly amount?: number;
    /**
     * @description The account (if any) the payment will be attributed to for tax
     * reporting, and where funds from the payment will be transferred to upon
     * payment success.
     */
    readonly destination: string;
  };
  /**
   * TransferReversal
   * @description [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
   * connected account, either entirely or partially, and can also specify whether
   * to refund any related application fees. Transfer reversals add to the
   * platform's balance and subtract from the destination account's balance.
   *
   * Reversing a transfer that was made for a [destination
   * charge](/docs/connect/destination-charges) is allowed only up to the amount of
   * the charge. It is possible to reverse a
   * [transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
   * transfer only if the destination account has enough balance to cover the
   * reversal.
   *
   * Related guide: [Reversing Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
   */
  readonly transfer_reversal: {
    /** @description Amount, in %s. */
    readonly amount: number;
    /** @description Balance transaction that describes the impact on your account balance. */
    readonly balance_transaction?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
    readonly currency: string;
    /** @description Linked payment refund for the transfer reversal. */
    readonly destination_payment_refund?: string;
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "transfer_reversal";
    /** @description ID of the refund responsible for the transfer reversal. */
    readonly source_refund?: string;
    /** @description ID of the transfer that was reversed. */
    readonly transfer: string;
  };
  /** TransferSchedule */
  readonly transfer_schedule: {
    /** @description The number of days charges for the account will be held before being paid out. */
    readonly delay_days: number;
    /** @description How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`. */
    readonly interval: string;
    /** @description The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months. */
    readonly monthly_anchor?: number;
    /** @description The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly. */
    readonly weekly_anchor?: string;
  };
  /** TransformUsage */
  readonly transform_usage: {
    /** @description Divide usage by this number. */
    readonly divide_by: number;
    /**
     * @description After division, either round the result `up` or `down`.
     * @enum {string}
     */
    readonly round: "down" | "up";
  };
  /**
   * UsageRecord
   * @description Usage records allow you to report customer usage and metrics to Stripe for
   * metered billing of subscription plans.
   *
   * Related guide: [Metered Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
   */
  readonly usage_record: {
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "usage_record";
    /** @description The usage quantity for the specified date. */
    readonly quantity: number;
    /** @description The ID of the subscription item this usage record contains data for. */
    readonly subscription_item: string;
    /** @description The timestamp when this usage occurred. */
    readonly timestamp: number;
  };
  /** UsageRecordSummary */
  readonly usage_record_summary: {
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description The invoice in which this usage period has been billed for. */
    readonly invoice?: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "usage_record_summary";
    readonly period: definitions["period"];
    /** @description The ID of the subscription item this summary is describing. */
    readonly subscription_item: string;
    /** @description The total usage within this usage period. */
    readonly total_usage: number;
  };
  /**
   * NotificationWebhookEndpoint
   * @description You can configure [webhook endpoints](https://stripe.com/docs/webhooks/) via the API to be
   * notified about events that happen in your Stripe account or connected
   * accounts.
   *
   * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
   *
   * Related guide: [Setting up Webhooks](https://stripe.com/docs/webhooks/configure).
   */
  readonly webhook_endpoint: {
    /** @description The API version events are rendered as for this webhook endpoint. */
    readonly api_version?: string;
    /** @description The ID of the associated Connect application. */
    readonly application?: string;
    /** @description Time at which the object was created. Measured in seconds since the Unix epoch. */
    readonly created: number;
    /** @description An optional description of what the wehbook is used for. */
    readonly description?: string;
    /** @description The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection. */
    readonly enabled_events: readonly string[];
    /** @description Unique identifier for the object. */
    readonly id: string;
    /** @description Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode. */
    readonly livemode: boolean;
    /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. */
    readonly metadata: { readonly [key: string]: unknown };
    /**
     * @description String representing the object's type. Objects of the same type share the same value.
     * @enum {string}
     */
    readonly object: "webhook_endpoint";
    /** @description The endpoint's secret, used to generate [webhook signatures](https://stripe.com/docs/webhooks/signatures). Only returned at creation. */
    readonly secret?: string;
    /** @description The status of the webhook. It can be `enabled` or `disabled`. */
    readonly status: string;
    /** @description The URL of the webhook endpoint. */
    readonly url: string;
  };
}

export interface operations {
  /** <p>Initiate 3D Secure authentication.</p> */
  readonly Post3dSecure: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Amount of the charge that you will create when authentication completes. */
          readonly amount: number;
          /** @description The ID of a card token, or the ID of a card belonging to the given customer. */
          readonly card?: string;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description The customer associated with this 3D secure authentication. */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The URL that the cardholder's browser will be returned to when authentication completes. */
          readonly return_url: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["three_d_secure"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a 3D Secure object.</p> */
  readonly Get3dSecureThreeDSecure: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly three_d_secure: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["three_d_secure"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an account.</p> */
  readonly GetAccount: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   */
  readonly PostAccount: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          readonly account_token?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /**
           * business_profile_specs
           * @description Business information about the account.
           */
          readonly business_profile?: {
            readonly mcc?: string;
            readonly name?: string;
            readonly product_description?: string;
            readonly support_email?: string;
            readonly support_phone?: string;
            readonly support_url?: string;
            readonly url?: string;
          };
          /**
           * @description The business type.
           * @enum {string}
           */
          readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /**
           * company_specs
           * @description Information about the company or business. This field is null unless `business_type` is set to `company`, `government_entity`, or `non_profit`.
           */
          readonly company?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly directors_provided?: boolean;
            readonly executives_provided?: boolean;
            readonly name?: string;
            readonly name_kana?: string;
            readonly name_kanji?: string;
            readonly owners_provided?: boolean;
            readonly phone?: string;
            /** @enum {string} */
            readonly structure?:
              | ""
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            readonly tax_id?: string;
            readonly tax_id_registrar?: string;
            readonly vat_id?: string;
            /** verification_specs */
            readonly verification?: {
              /** verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          readonly default_currency?: string;
          /** @description Email address of the account representative. For Standard accounts, this is used to ask them to claim their Stripe account. For Custom accounts, this only makes the account easier to identify to platforms; Stripe does not email the account representative. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          readonly external_account?: string;
          /**
           * individual_specs
           * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
           */
          readonly individual?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?: unknown;
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: unknown;
            readonly phone?: string;
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
          readonly requested_capabilities?: readonly (
            | "au_becs_debit_payments"
            | "card_issuing"
            | "card_payments"
            | "jcb_payments"
            | "legacy_payments"
            | "tax_reporting_us_1099_k"
            | "tax_reporting_us_1099_misc"
            | "transfers"
          )[];
          /**
           * settings_specs
           * @description Options for customizing how the account functions within Stripe.
           */
          readonly settings?: {
            /** branding_settings_specs */
            readonly branding?: {
              readonly icon?: string;
              readonly logo?: string;
              readonly primary_color?: string;
              readonly secondary_color?: string;
            };
            /** card_payments_settings_specs */
            readonly card_payments?: {
              /** decline_charge_on_specs */
              readonly decline_on?: {
                readonly avs_failure?: boolean;
                readonly cvc_failure?: boolean;
              };
              readonly statement_descriptor_prefix?: string;
            };
            /** payments_settings_specs */
            readonly payments?: {
              readonly statement_descriptor?: string;
              readonly statement_descriptor_kana?: string;
              readonly statement_descriptor_kanji?: string;
            };
            /** payout_settings_specs */
            readonly payouts?: {
              readonly debit_negative_balances?: boolean;
              /** transfer_schedule_specs */
              readonly schedule?: {
                readonly delay_days?: unknown;
                /** @enum {string} */
                readonly interval?: "daily" | "manual" | "monthly" | "weekly";
                readonly monthly_anchor?: number;
                /** @enum {string} */
                readonly weekly_anchor?:
                  | "friday"
                  | "monday"
                  | "saturday"
                  | "sunday"
                  | "thursday"
                  | "tuesday"
                  | "wednesday";
              };
              readonly statement_descriptor?: string;
            };
          };
          /**
           * tos_acceptance_specs
           * @description Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
           */
          readonly tos_acceptance?: {
            readonly date?: number;
            readonly ip?: string;
            readonly user_agent?: string;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   */
  readonly DeleteAccount: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly account?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountBankAccounts: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountBankAccountsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
  readonly GetAccountCapabilities: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["capability"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves information about the specified Account Capability.</p> */
  readonly GetAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly capability: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["capability"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing Account Capability.</p> */
  readonly PostAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly path: {
        readonly capability: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
          readonly requested?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["capability"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List external accounts for an account.</p> */
  readonly GetAccountExternalAccounts: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
          readonly data: readonly definitions["bank_account"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountExternalAccounts: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountExternalAccountsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  readonly PostAccountLoginLinks: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          readonly account: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Where to redirect the user after they log out of their dashboard. */
          readonly redirect_url?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["login_link"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
   *
   * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  readonly PutAccountLogout: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          readonly account: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["light_account_logout"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountPeople: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["person"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountPeople: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountPeoplePerson: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountPersons: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["person"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountPersons: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountPersonsPerson: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly account?: string;
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates an AccountLink object that returns a single-use Stripe URL that the user can redirect their user to in order to take them through the Connect Onboarding flow.</p> */
  readonly PostAccountLinks: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The identifier of the account to create an account link for. */
          readonly account: string;
          /**
           * @description Which information the platform needs to collect from the user. One of `currently_due` or `eventually_due`. Default is `currently_due`.
           * @enum {string}
           */
          readonly collect?: "currently_due" | "eventually_due";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The URL that the user will be redirected to if the account link is no longer valid. */
          readonly failure_url: string;
          /** @description The URL that the user will be redirected to upon leaving or completing the linked flow successfully. */
          readonly success_url: string;
          /**
           * @description The type of account link the user is requesting. Possible values are `custom_account_verification` or `custom_account_update`.
           * @enum {string}
           */
          readonly type: "custom_account_update" | "custom_account_verification";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["account_link"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a platform, the list is empty.</p> */
  readonly GetAccounts: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["account"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
   * To do this, you’ll first need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
   *
   * <p>For Standard accounts, parameters other than <code>country</code>, <code>email</code>, and <code>type</code>
   * are used to prefill the account application that we ask the account holder to complete.</p>
   */
  readonly PostAccounts: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          readonly account_token?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /**
           * business_profile_specs
           * @description Business information about the account.
           */
          readonly business_profile?: {
            readonly mcc?: string;
            readonly name?: string;
            readonly product_description?: string;
            readonly support_email?: string;
            readonly support_phone?: string;
            readonly support_url?: string;
            readonly url?: string;
          };
          /**
           * @description The business type.
           * @enum {string}
           */
          readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /**
           * company_specs
           * @description Information about the company or business. This field is null unless `business_type` is set to `company`, `government_entity`, or `non_profit`.
           */
          readonly company?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly directors_provided?: boolean;
            readonly executives_provided?: boolean;
            readonly name?: string;
            readonly name_kana?: string;
            readonly name_kanji?: string;
            readonly owners_provided?: boolean;
            readonly phone?: string;
            /** @enum {string} */
            readonly structure?:
              | ""
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            readonly tax_id?: string;
            readonly tax_id_registrar?: string;
            readonly vat_id?: string;
            /** verification_specs */
            readonly verification?: {
              /** verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code. For example, if you are in the United States and the business for which you're creating an account is legally represented in Canada, you would use `CA` as the country for the account being created. */
          readonly country?: string;
          /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          readonly default_currency?: string;
          /** @description The email address of the account holder. For Custom accounts, this is only to make the account easier to identify to you: Stripe will never directly email your users. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          readonly external_account?: string;
          /**
           * individual_specs
           * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
           */
          readonly individual?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?: unknown;
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: unknown;
            readonly phone?: string;
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
          readonly requested_capabilities?: readonly (
            | "au_becs_debit_payments"
            | "card_issuing"
            | "card_payments"
            | "jcb_payments"
            | "legacy_payments"
            | "tax_reporting_us_1099_k"
            | "tax_reporting_us_1099_misc"
            | "transfers"
          )[];
          /**
           * settings_specs
           * @description Options for customizing how the account functions within Stripe.
           */
          readonly settings?: {
            /** branding_settings_specs */
            readonly branding?: {
              readonly icon?: string;
              readonly logo?: string;
              readonly primary_color?: string;
              readonly secondary_color?: string;
            };
            /** card_payments_settings_specs */
            readonly card_payments?: {
              /** decline_charge_on_specs */
              readonly decline_on?: {
                readonly avs_failure?: boolean;
                readonly cvc_failure?: boolean;
              };
              readonly statement_descriptor_prefix?: string;
            };
            /** payments_settings_specs */
            readonly payments?: {
              readonly statement_descriptor?: string;
              readonly statement_descriptor_kana?: string;
              readonly statement_descriptor_kanji?: string;
            };
            /** payout_settings_specs */
            readonly payouts?: {
              readonly debit_negative_balances?: boolean;
              /** transfer_schedule_specs */
              readonly schedule?: {
                readonly delay_days?: unknown;
                /** @enum {string} */
                readonly interval?: "daily" | "manual" | "monthly" | "weekly";
                readonly monthly_anchor?: number;
                /** @enum {string} */
                readonly weekly_anchor?:
                  | "friday"
                  | "monday"
                  | "saturday"
                  | "sunday"
                  | "thursday"
                  | "tuesday"
                  | "wednesday";
              };
              readonly statement_descriptor?: string;
            };
          };
          /**
           * tos_acceptance_specs
           * @description Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
           */
          readonly tos_acceptance?: {
            readonly date?: number;
            readonly ip?: string;
            readonly user_agent?: string;
          };
          /**
           * @description The type of Stripe account to create. Currently must be `custom`, as only [Custom accounts](https://stripe.com/docs/connect/custom-accounts) may be created via the API.
           * @enum {string}
           */
          readonly type?: "custom" | "express" | "standard";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an account.</p> */
  readonly GetAccountsAccount: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates a connected <a href="/docs/connect/accounts">Express or Custom account</a> by setting the values of the parameters passed. Any parameters not provided are left unchanged. Most parameters can be changed only for Custom accounts. (These are marked <strong>Custom Only</strong> below.) Parameters marked <strong>Custom and Express</strong> are supported by both account types.</p>
   *
   * <p>To update your own account, use the <a href="https://dashboard.stripe.com/account">Dashboard</a>. Refer to our <a href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
   */
  readonly PostAccountsAccount: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description An [account token](https://stripe.com/docs/api#create_account_token), used to securely provide details to the account. */
          readonly account_token?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /**
           * business_profile_specs
           * @description Business information about the account.
           */
          readonly business_profile?: {
            readonly mcc?: string;
            readonly name?: string;
            readonly product_description?: string;
            readonly support_email?: string;
            readonly support_phone?: string;
            readonly support_url?: string;
            readonly url?: string;
          };
          /**
           * @description The business type.
           * @enum {string}
           */
          readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
          /**
           * company_specs
           * @description Information about the company or business. This field is null unless `business_type` is set to `company`, `government_entity`, or `non_profit`.
           */
          readonly company?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly directors_provided?: boolean;
            readonly executives_provided?: boolean;
            readonly name?: string;
            readonly name_kana?: string;
            readonly name_kanji?: string;
            readonly owners_provided?: boolean;
            readonly phone?: string;
            /** @enum {string} */
            readonly structure?:
              | ""
              | "government_instrumentality"
              | "governmental_unit"
              | "incorporated_non_profit"
              | "limited_liability_partnership"
              | "multi_member_llc"
              | "private_company"
              | "private_corporation"
              | "private_partnership"
              | "public_company"
              | "public_corporation"
              | "public_partnership"
              | "sole_proprietorship"
              | "tax_exempt_government_instrumentality"
              | "unincorporated_association"
              | "unincorporated_non_profit";
            readonly tax_id?: string;
            readonly tax_id_registrar?: string;
            readonly vat_id?: string;
            /** verification_specs */
            readonly verification?: {
              /** verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts). */
          readonly default_currency?: string;
          /** @description Email address of the account representative. For Standard accounts, this is used to ask them to claim their Stripe account. For Custom accounts, this only makes the account easier to identify to platforms; Stripe does not email the account representative. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A card or bank account to attach to the account. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary, as documented in the `external_account` parameter for [bank account](https://stripe.com/docs/api#account_create_bank_account) creation. <br><br>By default, providing an external account sets it as the new default external account for its currency, and deletes the old default if one exists. To add additional external accounts without replacing the existing default for the currency, use the bank account or card creation API. */
          readonly external_account?: string;
          /**
           * individual_specs
           * @description Information about the person represented by the account. This field is null unless `business_type` is set to `individual`.
           */
          readonly individual?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?: unknown;
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: unknown;
            readonly phone?: string;
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements and Stripe has verified them. An account may have some of its requested capabilities be active and some be inactive. */
          readonly requested_capabilities?: readonly (
            | "au_becs_debit_payments"
            | "card_issuing"
            | "card_payments"
            | "jcb_payments"
            | "legacy_payments"
            | "tax_reporting_us_1099_k"
            | "tax_reporting_us_1099_misc"
            | "transfers"
          )[];
          /**
           * settings_specs
           * @description Options for customizing how the account functions within Stripe.
           */
          readonly settings?: {
            /** branding_settings_specs */
            readonly branding?: {
              readonly icon?: string;
              readonly logo?: string;
              readonly primary_color?: string;
              readonly secondary_color?: string;
            };
            /** card_payments_settings_specs */
            readonly card_payments?: {
              /** decline_charge_on_specs */
              readonly decline_on?: {
                readonly avs_failure?: boolean;
                readonly cvc_failure?: boolean;
              };
              readonly statement_descriptor_prefix?: string;
            };
            /** payments_settings_specs */
            readonly payments?: {
              readonly statement_descriptor?: string;
              readonly statement_descriptor_kana?: string;
              readonly statement_descriptor_kanji?: string;
            };
            /** payout_settings_specs */
            readonly payouts?: {
              readonly debit_negative_balances?: boolean;
              /** transfer_schedule_specs */
              readonly schedule?: {
                readonly delay_days?: unknown;
                /** @enum {string} */
                readonly interval?: "daily" | "manual" | "monthly" | "weekly";
                readonly monthly_anchor?: number;
                /** @enum {string} */
                readonly weekly_anchor?:
                  | "friday"
                  | "monday"
                  | "saturday"
                  | "sunday"
                  | "thursday"
                  | "tuesday"
                  | "wednesday";
              };
              readonly statement_descriptor?: string;
            };
          };
          /**
           * tos_acceptance_specs
           * @description Details on the account's acceptance of the [Stripe Services Agreement](https://stripe.com/docs/connect/updating-accounts#tos-acceptance).
           */
          readonly tos_acceptance?: {
            readonly date?: number;
            readonly ip?: string;
            readonly user_agent?: string;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you can delete Custom or Express accounts you manage.</p>
   *
   * <p>Accounts created using test-mode keys can be deleted at any time. Accounts created using live-mode keys can only be deleted once all balances are zero.</p>
   *
   * <p>If you want to delete your own account, use the <a href="https://dashboard.stripe.com/account">account information tab in your account settings</a> instead.</p>
   */
  readonly DeleteAccountsAccount: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountsAccountBankAccounts: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountsAccountBankAccountsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountsAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountsAccountBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date, with the most recent capability appearing first.</p> */
  readonly GetAccountsAccountCapabilities: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["capability"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves information about the specified Account Capability.</p> */
  readonly GetAccountsAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly account: string;
        readonly capability: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["capability"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing Account Capability.</p> */
  readonly PostAccountsAccountCapabilitiesCapability: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly capability: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Passing true requests the capability for the account, if it is not already requested. A requested capability may not immediately become active. Any requirements to activate the capability are returned in the `requirements` arrays. */
          readonly requested?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["capability"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List external accounts for an account.</p> */
  readonly GetAccountsAccountExternalAccounts: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards. */
          readonly data: readonly definitions["bank_account"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Create an external account for a given account.</p> */
  readonly PostAccountsAccountExternalAccounts: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description When set to true, or if this is the first external account added in this currency, this account becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly external_account?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve a specified external account for a given account.</p> */
  readonly GetAccountsAccountExternalAccountsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the metadata, account holder name, and account holder type of a bank account belonging to a <a href="/docs/connect/custom-accounts">Custom account</a>, and optionally sets it as the default for its currency. Other bank account details are not editable by design.</p>
   * <p>You can re-enable a disabled bank account by performing an update call without providing any arguments or changes.</p>
   */
  readonly PostAccountsAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "" | "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description When set to true, this becomes the default external account for its currency. */
          readonly default_for_currency?: boolean;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Cardholder name. */
          readonly name?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a specified external account for a given account.</p> */
  readonly DeleteAccountsAccountExternalAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_external_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Creates a single-use login link for an Express account to access their Stripe dashboard.</p>
   *
   * <p><strong>You may only create login links for <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  readonly PostAccountsAccountLoginLinks: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Where to redirect the user after they log out of their dashboard. */
          readonly redirect_url?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["login_link"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Invalidates all sessions for a light account, for a platform to use during platform logout.</p>
   *
   * <p><strong>You may only log out <a href="/docs/connect/express-accounts">Express accounts</a> connected to your platform</strong>.</p>
   */
  readonly PutAccountsAccountLogout: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["light_account_logout"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountsAccountPeople: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["person"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountsAccountPeople: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountsAccountPeoplePerson: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountsAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountsAccountPeoplePerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date, with the most recent people appearing first.</p> */
  readonly GetAccountsAccountPersons: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filters on the list of people returned based on the person's relationship to the account's company. */
        readonly relationship?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly account: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["person"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new person.</p> */
  readonly PostAccountsAccountPersons: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an existing person.</p> */
  readonly GetAccountsAccountPersonsPerson: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing person.</p> */
  readonly PostAccountsAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * address_specs
           * @description The person's address.
           */
          readonly address?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /**
           * japan_address_kana_specs
           * @description The Kana variation of the person's address (Japan only).
           */
          readonly address_kana?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /**
           * japan_address_kanji_specs
           * @description The Kanji variation of the person's address (Japan only).
           */
          readonly address_kanji?: {
            readonly city?: string;
            readonly country?: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
            readonly town?: string;
          };
          /** @description The person's date of birth. */
          readonly dob?: unknown;
          /** @description The person's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The person's first name. */
          readonly first_name?: string;
          /** @description The Kana variation of the person's first name (Japan only). */
          readonly first_name_kana?: string;
          /** @description The Kanji variation of the person's first name (Japan only). */
          readonly first_name_kanji?: string;
          /** @description The person's gender (International regulations require either "male" or "female"). */
          readonly gender?: string;
          /** @description The person's ID number, as appropriate for their country. For example, a social security number in the U.S., social insurance number in Canada, etc. Instead of the number itself, you can also provide a [PII token provided by Stripe.js](https://stripe.com/docs/stripe.js#collecting-pii-data). */
          readonly id_number?: string;
          /** @description The person's last name. */
          readonly last_name?: string;
          /** @description The Kana variation of the person's last name (Japan only). */
          readonly last_name_kana?: string;
          /** @description The Kanji variation of the person's last name (Japan only). */
          readonly last_name_kanji?: string;
          /** @description The person's maiden name. */
          readonly maiden_name?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A [person token](https://stripe.com/docs/connect/account-tokens), used to securely provide details to the person. */
          readonly person_token?: string;
          /** @description The person's phone number. */
          readonly phone?: string;
          /**
           * relationship_specs
           * @description The relationship that this person has with the account's legal entity.
           */
          readonly relationship?: {
            readonly director?: boolean;
            readonly executive?: boolean;
            readonly owner?: boolean;
            readonly percent_ownership?: unknown;
            readonly representative?: boolean;
            readonly title?: string;
          };
          /** @description The last 4 digits of the person's social security number. */
          readonly ssn_last_4?: string;
          /**
           * person_verification_specs
           * @description The person's verification status.
           */
          readonly verification?: {
            /** person_verification_document_specs */
            readonly additional_document?: {
              readonly back?: string;
              readonly front?: string;
            };
            /** person_verification_document_specs */
            readonly document?: {
              readonly back?: string;
              readonly front?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p> */
  readonly DeleteAccountsAccountPersonsPerson: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
        readonly person: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_person"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>With <a href="/docs/connect">Connect</a>, you may flag accounts as suspicious.</p>
   *
   * <p>Test-mode Custom and Express accounts can be rejected at any time. Accounts created using live-mode keys may only be rejected once all balances are zero.</p>
   */
  readonly PostAccountsAccountReject: {
    readonly parameters: {
      readonly path: {
        readonly account: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The reason for rejecting the account. Can be `fraud`, `terms_of_service`, or `other`. */
          readonly reason: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List apple pay domains.</p> */
  readonly GetApplePayDomains: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly domain_name?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["apple_pay_domain"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Create an apple pay domain.</p> */
  readonly PostApplePayDomains: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          readonly domain_name: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["apple_pay_domain"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve an apple pay domain.</p> */
  readonly GetApplePayDomainsDomain: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly domain: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["apple_pay_domain"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete an apple pay domain.</p> */
  readonly DeleteApplePayDomainsDomain: {
    readonly parameters: {
      readonly path: {
        readonly domain: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_apple_pay_domain"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order, with the most recent fees appearing first.</p> */
  readonly GetApplicationFees: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return application fees for the charge specified by this charge ID. */
        readonly charge?: string;
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["application_fee"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also retrieve details about a specific refund stored on the application fee.</p> */
  readonly GetApplicationFeesFeeRefundsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly fee: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["fee_refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata as an argument.</p>
   */
  readonly PostApplicationFeesFeeRefundsId: {
    readonly parameters: {
      readonly path: {
        readonly fee: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["fee_refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an application fee that your account has collected. The same information is returned when refunding the application fee.</p> */
  readonly GetApplicationFeesId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["application_fee"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  readonly PostApplicationFeesIdRefund: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly amount?: number;
          readonly directive?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["application_fee"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are always available by default on the application fee object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
  readonly GetApplicationFeesIdRefunds: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["fee_refund"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Refunds an application fee that has previously been collected but not yet refunded.
   * Funds will be refunded to the Stripe account from which the fee was originally collected.</p>
   *
   * <p>You can optionally refund only part of an application fee.
   * You can do so multiple times, until the entire fee has been refunded.</p>
   *
   * <p>Once entirely refunded, an application fee can’t be refunded again.
   * This method will raise an error when called on an already-refunded application fee,
   * or when trying to refund more money than is left on an application fee.</p>
   */
  readonly PostApplicationFeesIdRefunds: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A positive integer, in _%s_, representing how much of this fee to refund. Can refund only up to the remaining unrefunded amount of the fee. */
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["fee_refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
   *  For a sample request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative balances</a>.</p>
   */
  readonly GetBalance: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["balance"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   */
  readonly GetBalanceHistory: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly available_on?: number;
        readonly created?: number;
        /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
        readonly currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
        readonly payout?: string;
        /** Only returns the original transaction. */
        readonly source?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only returns transactions of the given type. One of: `charge`, `refund`, `adjustment`, `application_fee`, `application_fee_refund`, `transfer`, `payment`, `payout`, `payout_failure`, `stripe_fee`, or `network_cost`. */
        readonly type?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["balance_transaction"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   */
  readonly GetBalanceHistoryId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["balance_transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
   *
   * <p>Note that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
   */
  readonly GetBalanceTransactions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly available_on?: number;
        readonly created?: number;
        /** Only return transactions in a certain currency. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
        readonly currency?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** For automatic Stripe payouts only, only returns transactions that were paid out on the specified payout ID. */
        readonly payout?: string;
        /** Only returns the original transaction. */
        readonly source?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only returns transactions of the given type. One of: `charge`, `refund`, `adjustment`, `application_fee`, `application_fee_refund`, `transfer`, `payment`, `payout`, `payout_failure`, `stripe_fee`, or `network_cost`. */
        readonly type?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["balance_transaction"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Retrieves the balance transaction with the given ID.</p>
   *
   * <p>Note that this endpoint previously used the path <code>/v1/balance/history/:id</code>.</p>
   */
  readonly GetBalanceTransactionsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["balance_transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a session of the self-serve Portal.</p> */
  readonly PostBillingPortalSessions: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The ID of an existing customer. */
          readonly customer: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The URL to which Stripe should send customers when they click on the link to return to your website. This field is required if a default return URL has not been configured for the portal. */
          readonly return_url?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["billing_portal.session"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your receivers. Receivers are returned sorted by creation date, with the most recently created receivers appearing first.</p> */
  readonly GetBitcoinReceivers: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Filter for active receivers. */
        readonly active?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Filter for filled receivers. */
        readonly filled?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Filter for receivers with uncaptured funds. */
        readonly uncaptured_funds?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["bitcoin_receiver"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the Bitcoin receiver with the given ID.</p> */
  readonly GetBitcoinReceiversId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["bitcoin_receiver"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List bitcoin transacitons for a given receiver.</p> */
  readonly GetBitcoinReceiversReceiverTransactions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return transactions for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly receiver: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["bitcoin_transaction"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List bitcoin transacitons for a given receiver.</p> */
  readonly GetBitcoinTransactions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return transactions for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        readonly receiver?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["bitcoin_transaction"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent charges appearing first.</p> */
  readonly GetCharges: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** Only return charges for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return charges that were created by the PaymentIntent specified by this PaymentIntent ID. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return charges for this transfer group. */
        readonly transfer_group?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["charge"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>To charge a credit card or other payment source, you create a <code>Charge</code> object. If your API key is in test mode, the supplied payment source (e.g., card) won’t actually be charged, although everything else will occur as if in live mode. (Stripe assumes that the charge would have completed successfully).</p> */
  readonly PostCharges: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          readonly amount?: number;
          readonly application_fee?: number;
          /** @description A fee in %s that will be applied to the charge and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
          readonly application_fee_amount?: number;
          /** @description Whether to immediately capture the charge. Defaults to `true`. When `false`, the charge issues an authorization (or pre-authorization), and will need to be [captured](https://stripe.com/docs/api#capture_charge) later. Uncaptured charges expire in _seven days_. For more information, see the [authorizing charges and settling later](https://stripe.com/docs/charges/placing-a-hold) documentation. */
          readonly capture?: boolean;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          readonly card?: unknown;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /** @description The ID of an existing customer that will be charged in this request. */
          readonly customer?: string;
          /** @description An arbitrary string which you can attach to a `Charge` object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
          readonly description?: string;
          /** destination_specs */
          readonly destination?: {
            readonly account: string;
            readonly amount?: number;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The Stripe account ID for which these funds are intended. Automatically set if you use the `destination` parameter. For details, see [Creating Separate Charges and Transfers](https://stripe.com/docs/connect/charges-transfers#on-behalf-of). */
          readonly on_behalf_of?: string;
          /** @description The email address to which this charge's [receipt](https://stripe.com/docs/dashboard/receipts) will be sent. The receipt will not be sent until the charge is paid, and no receipts will be sent for test mode charges. If this charge is for a [Customer](https://stripe.com/docs/api/customers/object), the email address specified here will override the customer's email address. If `receipt_email` is specified for a charge in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails). */
          readonly receipt_email?: string;
          /**
           * shipping
           * @description Shipping information for the charge. Helps prevent fraud on charges for physical goods.
           */
          readonly shipping?: {
            /** address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly carrier?: string;
            readonly name: string;
            readonly phone?: string;
            readonly tracking_number?: string;
          };
          /** @description A payment source to be charged. This can be the ID of a [card](https://stripe.com/docs/api#cards) (i.e., credit or debit card), a [bank account](https://stripe.com/docs/api#bank_accounts), a [source](https://stripe.com/docs/api#sources), a [token](https://stripe.com/docs/api#tokens), or a [connected account](https://stripe.com/docs/connect/account-debits#charging-a-connected-account). For certain sources---namely, [cards](https://stripe.com/docs/api#cards), [bank accounts](https://stripe.com/docs/api#bank_accounts), and attached [sources](https://stripe.com/docs/api#sources)---you must also pass the ID of the associated customer. */
          readonly source?: string;
          /** @description For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_specs
           * @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
           */
          readonly transfer_data?: {
            readonly amount?: number;
            readonly destination: string;
          };
          /** @description A string that identifies this transaction as part of a group. For details, see [Grouping transactions](https://stripe.com/docs/connect/charges-transfers#transfer-options). */
          readonly transfer_group?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["charge"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned from your previous request, and Stripe will return the corresponding charge information. The same information is returned when creating or refunding the charge.</p> */
  readonly GetChargesCharge: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["charge"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostChargesCharge: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The ID of an existing customer that will be associated with this request. This field may only be updated if there is no existing associated customer with this charge. */
          readonly customer?: string;
          /** @description An arbitrary string which you can attach to a charge object. It is displayed when in the web interface alongside the charge. Note that if you use Stripe to send automatic email receipts to your customers, your receipt emails will include the `description` of the charge(s) that they are describing. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * fraud_details
           * @description A set of key-value pairs you can attach to a charge giving information about its riskiness. If you believe a charge is fraudulent, include a `user_report` key with a value of `fraudulent`. If you believe a charge is safe, include a `user_report` key with a value of `safe`. Stripe will use the information you send to improve our fraud detection algorithms.
           */
          readonly fraud_details?: {
            /** @enum {string} */
            readonly user_report: "" | "fraudulent" | "safe";
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description This is the email address that the receipt for this charge will be sent to. If this field is updated, then a new email receipt will be sent to the updated address. */
          readonly receipt_email?: string;
          /**
           * shipping
           * @description Shipping information for the charge. Helps prevent fraud on charges for physical goods.
           */
          readonly shipping?: {
            /** address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly carrier?: string;
            readonly name: string;
            readonly phone?: string;
            readonly tracking_number?: string;
          };
          /** @description A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          readonly transfer_group?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["charge"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Capture the payment of an existing, uncaptured, charge. This is the second half of the two-step payment flow, where first you <a href="#create_charge">created a charge</a> with the capture option set to false.</p>
   *
   * <p>Uncaptured payments expire exactly seven days after they are created. If they are not captured by that point in time, they will be marked as refunded and will no longer be capturable.</p>
   */
  readonly PostChargesChargeCapture: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The amount to capture, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. */
          readonly amount?: number;
          /** @description An application fee to add on to this charge. */
          readonly application_fee?: number;
          /** @description An application fee amount to add on to this charge, which must be less than or equal to the original amount. */
          readonly application_fee_amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The email address to send this charge's receipt to. This will override the previously-specified email address for this charge, if one was set. Receipts will not be sent in test mode. */
          readonly receipt_email?: string;
          /** @description For card charges, use `statement_descriptor_suffix` instead. Otherwise, you can use this value as the complete description of a charge on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about the charge that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_specs
           * @description An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
           */
          readonly transfer_data?: {
            readonly amount?: number;
          };
          /** @description A string that identifies this transaction as part of a group. `transfer_group` may only be provided if it has not been set. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          readonly transfer_group?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["charge"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve a dispute for a specified charge.</p> */
  readonly GetChargesChargeDispute: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  readonly PostChargesChargeDispute: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * dispute_evidence_params
           * @description Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.
           */
          readonly evidence?: {
            readonly access_activity_log?: string;
            readonly billing_address?: string;
            readonly cancellation_policy?: string;
            readonly cancellation_policy_disclosure?: string;
            readonly cancellation_rebuttal?: string;
            readonly customer_communication?: string;
            readonly customer_email_address?: string;
            readonly customer_name?: string;
            readonly customer_purchase_ip?: string;
            readonly customer_signature?: string;
            readonly duplicate_charge_documentation?: string;
            readonly duplicate_charge_explanation?: string;
            readonly duplicate_charge_id?: string;
            readonly product_description?: string;
            readonly receipt?: string;
            readonly refund_policy?: string;
            readonly refund_policy_disclosure?: string;
            readonly refund_refusal_explanation?: string;
            readonly service_date?: string;
            readonly service_documentation?: string;
            readonly shipping_address?: string;
            readonly shipping_carrier?: string;
            readonly shipping_date?: string;
            readonly shipping_documentation?: string;
            readonly shipping_tracking_number?: string;
            readonly uncategorized_file?: string;
            readonly uncategorized_text?: string;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
          readonly submit?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  readonly PostChargesChargeDisputeClose: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create it.</p>
   *
   * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
   * Funds will be refunded to the credit or debit card that was originally charged.</p>
   *
   * <p>You can optionally refund only part of a charge.
   * You can do so multiple times, until the entire charge has been refunded.</p>
   *
   * <p>Once entirely refunded, a charge can’t be refunded again.
   * This method will raise an error when called on an already-refunded charge,
   * or when trying to refund more money than is left on a charge.</p>
   */
  readonly PostChargesChargeRefund: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          readonly metadata?: unknown;
          readonly payment_intent?: string;
          /** @enum {string} */
          readonly reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          readonly refund_application_fee?: boolean;
          readonly reverse_transfer?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["charge"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always available by default on the charge object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p> */
  readonly GetChargesChargeRefunds: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly charge: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["refund"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Create a refund.</p> */
  readonly PostChargesChargeRefunds: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          readonly payment_intent?: string;
          /** @enum {string} */
          readonly reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          readonly refund_application_fee?: boolean;
          readonly reverse_transfer?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing refund.</p> */
  readonly GetChargesChargeRefundsRefund: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly charge: string;
        readonly refund: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Update a specified refund.</p> */
  readonly PostChargesChargeRefundsRefund: {
    readonly parameters: {
      readonly path: {
        readonly charge: string;
        readonly refund: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Checkout Sessions.</p> */
  readonly GetCheckoutSessions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return the Checkout Session for the PaymentIntent specified. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return the Checkout Session for the subscription specified. */
        readonly subscription?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["checkout.session"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a Session object.</p> */
  readonly PostCheckoutSessions: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /**
           * @description Specify whether Checkout should collect the customer's billing address.
           * @enum {string}
           */
          readonly billing_address_collection?: "auto" | "required";
          /** @description The URL the customer will be directed to if they decide to cancel payment and return to your website. */
          readonly cancel_url: string;
          /**
           * @description A unique string to reference the Checkout Session. This can be a
           * customer ID, a cart ID, or similar, and can be used to reconcile the
           * session with your internal systems.
           */
          readonly client_reference_id?: string;
          /**
           * @description ID of an existing customer, if one exists. The email stored on the
           * customer will be used to prefill the email field on the Checkout page.
           * If the customer changes their email on the Checkout page, the Customer
           * object will be updated with the new email.
           * If blank for Checkout Sessions in `payment` or `subscription` mode,
           * Checkout will create a new customer object based on information
           * provided during the session.
           */
          readonly customer?: string;
          /**
           * @description If provided, this value will be used when the Customer object is created.
           * If not provided, customers will be asked to enter their email address.
           * Use this parameter to prefill customer data if you already have an email
           * on file. To access information about the customer once a session is
           * complete, use the `customer` field.
           */
          readonly customer_email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description A list of items the customer is purchasing. Use this parameter for
           * one-time payments or adding invoice line items to a subscription (used
           * in conjunction with `subscription_data`).
           */
          readonly line_items?: readonly {
            readonly amount?: number;
            readonly currency?: string;
            readonly description?: string;
            readonly images?: readonly string[];
            readonly name?: string;
            readonly quantity: number;
            readonly tax_rates?: readonly string[];
          }[];
          /**
           * @description The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
           * @enum {string}
           */
          readonly locale?:
            | "auto"
            | "da"
            | "de"
            | "en"
            | "es"
            | "fi"
            | "fr"
            | "it"
            | "ja"
            | "ms"
            | "nb"
            | "nl"
            | "pl"
            | "pt"
            | "pt-BR"
            | "sv"
            | "zh";
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /**
           * @description The mode of the Checkout Session, one of `payment`, `setup`, or `subscription`.
           * @enum {string}
           */
          readonly mode?: "payment" | "setup" | "subscription";
          /**
           * payment_intent_data_params
           * @description A subset of parameters to be passed to PaymentIntent creation for Checkout Sessions in `payment` mode.
           */
          readonly payment_intent_data?: {
            readonly application_fee_amount?: number;
            /** @enum {string} */
            readonly capture_method?: "automatic" | "manual";
            readonly description?: string;
            readonly metadata?: { readonly [key: string]: unknown };
            readonly on_behalf_of?: string;
            readonly receipt_email?: string;
            /** @enum {string} */
            readonly setup_future_usage?: "off_session" | "on_session";
            /** shipping */
            readonly shipping?: {
              /** address */
              readonly address: {
                readonly city?: string;
                readonly country?: string;
                readonly line1: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              readonly carrier?: string;
              readonly name: string;
              readonly phone?: string;
              readonly tracking_number?: string;
            };
            readonly statement_descriptor?: string;
            readonly statement_descriptor_suffix?: string;
            /** transfer_data_params */
            readonly transfer_data?: {
              readonly amount?: number;
              readonly destination: string;
            };
          };
          /** @description A list of the types of payment methods (e.g., card) this Checkout session can accept. */
          readonly payment_method_types: readonly ("card" | "fpx" | "ideal")[];
          /**
           * setup_intent_data_param
           * @description A subset of parameters to be passed to SetupIntent creation for Checkout Sessions in `setup` mode.
           */
          readonly setup_intent_data?: {
            readonly description?: string;
            readonly metadata?: { readonly [key: string]: unknown };
            readonly on_behalf_of?: string;
          };
          /**
           * shipping_address_collection_params
           * @description When set, provides configuration for Checkout to collect a shipping address from a customer.
           */
          readonly shipping_address_collection?: {
            readonly allowed_countries: readonly (
              | "AC"
              | "AD"
              | "AE"
              | "AF"
              | "AG"
              | "AI"
              | "AL"
              | "AM"
              | "AO"
              | "AQ"
              | "AR"
              | "AT"
              | "AU"
              | "AW"
              | "AX"
              | "AZ"
              | "BA"
              | "BB"
              | "BD"
              | "BE"
              | "BF"
              | "BG"
              | "BH"
              | "BI"
              | "BJ"
              | "BL"
              | "BM"
              | "BN"
              | "BO"
              | "BQ"
              | "BR"
              | "BS"
              | "BT"
              | "BV"
              | "BW"
              | "BY"
              | "BZ"
              | "CA"
              | "CD"
              | "CF"
              | "CG"
              | "CH"
              | "CI"
              | "CK"
              | "CL"
              | "CM"
              | "CN"
              | "CO"
              | "CR"
              | "CV"
              | "CW"
              | "CY"
              | "CZ"
              | "DE"
              | "DJ"
              | "DK"
              | "DM"
              | "DO"
              | "DZ"
              | "EC"
              | "EE"
              | "EG"
              | "EH"
              | "ER"
              | "ES"
              | "ET"
              | "FI"
              | "FJ"
              | "FK"
              | "FO"
              | "FR"
              | "GA"
              | "GB"
              | "GD"
              | "GE"
              | "GF"
              | "GG"
              | "GH"
              | "GI"
              | "GL"
              | "GM"
              | "GN"
              | "GP"
              | "GQ"
              | "GR"
              | "GS"
              | "GT"
              | "GU"
              | "GW"
              | "GY"
              | "HK"
              | "HN"
              | "HR"
              | "HT"
              | "HU"
              | "ID"
              | "IE"
              | "IL"
              | "IM"
              | "IN"
              | "IO"
              | "IQ"
              | "IS"
              | "IT"
              | "JE"
              | "JM"
              | "JO"
              | "JP"
              | "KE"
              | "KG"
              | "KH"
              | "KI"
              | "KM"
              | "KN"
              | "KR"
              | "KW"
              | "KY"
              | "KZ"
              | "LA"
              | "LB"
              | "LC"
              | "LI"
              | "LK"
              | "LR"
              | "LS"
              | "LT"
              | "LU"
              | "LV"
              | "LY"
              | "MA"
              | "MC"
              | "MD"
              | "ME"
              | "MF"
              | "MG"
              | "MK"
              | "ML"
              | "MM"
              | "MN"
              | "MO"
              | "MQ"
              | "MR"
              | "MS"
              | "MT"
              | "MU"
              | "MV"
              | "MW"
              | "MX"
              | "MY"
              | "MZ"
              | "NA"
              | "NC"
              | "NE"
              | "NG"
              | "NI"
              | "NL"
              | "NO"
              | "NP"
              | "NR"
              | "NU"
              | "NZ"
              | "OM"
              | "PA"
              | "PE"
              | "PF"
              | "PG"
              | "PH"
              | "PK"
              | "PL"
              | "PM"
              | "PN"
              | "PR"
              | "PS"
              | "PT"
              | "PY"
              | "QA"
              | "RE"
              | "RO"
              | "RS"
              | "RU"
              | "RW"
              | "SA"
              | "SB"
              | "SC"
              | "SE"
              | "SG"
              | "SH"
              | "SI"
              | "SJ"
              | "SK"
              | "SL"
              | "SM"
              | "SN"
              | "SO"
              | "SR"
              | "SS"
              | "ST"
              | "SV"
              | "SX"
              | "SZ"
              | "TA"
              | "TC"
              | "TD"
              | "TF"
              | "TG"
              | "TH"
              | "TJ"
              | "TK"
              | "TL"
              | "TM"
              | "TN"
              | "TO"
              | "TR"
              | "TT"
              | "TV"
              | "TW"
              | "TZ"
              | "UA"
              | "UG"
              | "US"
              | "UY"
              | "UZ"
              | "VA"
              | "VC"
              | "VE"
              | "VG"
              | "VN"
              | "VU"
              | "WF"
              | "WS"
              | "XK"
              | "YE"
              | "YT"
              | "ZA"
              | "ZM"
              | "ZW"
              | "ZZ"
            )[];
          };
          /**
           * @description Describes the type of transaction being performed by Checkout in order to customize
           * relevant text on the page, such as the submit button. `submit_type` can only be
           * specified on Checkout Sessions in `payment` mode, but not Checkout Sessions
           * in `subscription` or `setup` mode.
           * @enum {string}
           */
          readonly submit_type?: "auto" | "book" | "donate" | "pay";
          /**
           * subscription_data_params
           * @description A subset of parameters to be passed to subscription creation for Checkout Sessions in `subscription` mode.
           */
          readonly subscription_data?: {
            readonly application_fee_percent?: number;
            readonly coupon?: string;
            readonly default_tax_rates?: readonly string[];
            readonly items?: readonly {
              readonly plan: string;
              readonly quantity?: number;
              readonly tax_rates?: readonly string[];
            }[];
            readonly metadata?: { readonly [key: string]: unknown };
            readonly trial_end?: number;
            readonly trial_from_plan?: boolean;
            readonly trial_period_days?: number;
          };
          /**
           * @description The URL to which Stripe should send customers when payment or setup
           * is complete.
           * If you’d like access to the Checkout Session for the successful
           * payment, read more about it in our guide on [fulfilling your payments
           * with webhooks](/docs/payments/checkout/fulfillment#webhooks).
           */
          readonly success_url: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["checkout.session"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a Session object.</p> */
  readonly GetCheckoutSessionsSession: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly session: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["checkout.session"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Lists all Country Spec objects available in the API.</p> */
  readonly GetCountrySpecs: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["country_spec"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a Country Spec for a given Country code.</p> */
  readonly GetCountrySpecsCountry: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly country: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["country_spec"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your coupons.</p> */
  readonly GetCoupons: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["coupon"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
   *
   * <p>A coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code> of <amount>200</amount> is applied to it.</p>
   */
  readonly PostCoupons: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A positive integer representing the amount to subtract from an invoice total (required if `percent_off` is not passed). */
          readonly amount_off?: number;
          /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the `amount_off` parameter (required if `amount_off` is passed). */
          readonly currency?: string;
          /**
           * @description Specifies how long the discount will be in effect. Can be `forever`, `once`, or `repeating`.
           * @enum {string}
           */
          readonly duration: "forever" | "once" | "repeating";
          /** @description Required only if `duration` is `repeating`, in which case it must be a positive integer that specifies the number of months the discount will be in effect. */
          readonly duration_in_months?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Unique string of your choice that will be used to identify this coupon when applying it to a customer. This is often a specific code you'll give to your customer to use when signing up (e.g., `FALL25OFF`). If you don't want to specify a particular code, you can leave the ID blank and we'll generate a random code for you. */
          readonly id?: string;
          /** @description A positive integer specifying the number of times the coupon can be redeemed before it's no longer valid. For example, you might have a 50% off coupon that the first 20 readers of your blog can use. */
          readonly max_redemptions?: number;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
          readonly name?: string;
          /** @description A positive float larger than 0, and smaller or equal to 100, that represents the discount the coupon will apply (required if `amount_off` is not passed). */
          readonly percent_off?: number;
          /** @description Unix timestamp specifying the last time at which the coupon can be redeemed. After the redeem_by date, the coupon can no longer be applied to new customers. */
          readonly redeem_by?: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["coupon"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the coupon with the given ID.</p> */
  readonly GetCouponsCoupon: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly coupon: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["coupon"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not editable.</p> */
  readonly PostCouponsCoupon: {
    readonly parameters: {
      readonly path: {
        readonly coupon: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Name of the coupon displayed to customers on, for instance invoices, or receipts. By default the `id` is shown if `name` is not set. */
          readonly name?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["coupon"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means that new customers can’t redeem the coupon. You can also delete coupons via the API.</p> */
  readonly DeleteCouponsCoupon: {
    readonly parameters: {
      readonly path: {
        readonly coupon: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_coupon"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of credit notes.</p> */
  readonly GetCreditNotes: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return credit notes for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Only return credit notes for the invoice specified by this invoice ID. */
        readonly invoice?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["credit_note"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code> invoice, a credit note reduces
   * its <code>amount_due</code>. For a <code>status=paid</code> invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result
   * in any combination of the following:</p>
   *
   * <ul>
   *  <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund (using <code>refund</code>).</li>
   *  <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next invoice when it’s finalized.</li>
   *  <li>Outside of Stripe credit: record the amount that is or will be credited outside of Stripe (using <code>out_of_band_amount</code>).</li>
   * </ul>
   *
   * <p>For post-payment credit notes the sum of the refund, credit and outside of Stripe amounts must equal the credit note total.</p>
   *
   * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the invoice’s <code>pre_payment_credit_notes_amount</code>
   * or <code>post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of credit note creation.</p>
   */
  readonly PostCreditNotes: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The integer amount in **%s** representing the total amount of the credit note. */
          readonly amount?: number;
          /** @description The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
          readonly credit_amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description ID of the invoice. */
          readonly invoice: string;
          /** @description Line items that make up the credit note. */
          readonly lines?: readonly {
            readonly amount?: number;
            readonly description?: string;
            readonly invoice_line_item?: string;
            readonly quantity?: number;
            readonly tax_rates?: readonly string[];
            /** @enum {string} */
            readonly type: "custom_line_item" | "invoice_line_item";
            readonly unit_amount?: number;
            readonly unit_amount_decimal?: string;
          }[];
          /** @description The credit note's memo appears on the credit note PDF. */
          readonly memo?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The integer amount in **%s** representing the amount that is credited outside of Stripe. */
          readonly out_of_band_amount?: number;
          /**
           * @description Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
           * @enum {string}
           */
          readonly reason?: "duplicate" | "fraudulent" | "order_change" | "product_unsatisfactory";
          /** @description ID of an existing refund to link this credit note to. */
          readonly refund?: string;
          /** @description The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
          readonly refund_amount?: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["credit_note"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Get a preview of a credit note without creating it.</p> */
  readonly GetCreditNotesPreview: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The integer amount in **%s** representing the total amount of the credit note. */
        readonly amount?: number;
        /** The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
        readonly credit_amount?: number;
        /** ID of the invoice. */
        readonly invoice: string;
        /** Line items that make up the credit note. */
        readonly lines?: readonly unknown[];
        /** The credit note's memo appears on the credit note PDF. */
        readonly memo?: string;
        /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        readonly metadata?: string;
        /** The integer amount in **%s** representing the amount that is credited outside of Stripe. */
        readonly out_of_band_amount?: number;
        /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
        readonly reason?: string;
        /** ID of an existing refund to link this credit note to. */
        readonly refund?: string;
        /** The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
        readonly refund_amount?: number;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["credit_note"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of those items. This URL you can retrieve the full (paginated) list of line items.</p> */
  readonly GetCreditNotesPreviewLines: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The integer amount in **%s** representing the total amount of the credit note. */
        readonly amount?: number;
        /** The integer amount in **%s** representing the amount to credit the customer's balance, which will be automatically applied to their next invoice. */
        readonly credit_amount?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** ID of the invoice. */
        readonly invoice: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Line items that make up the credit note. */
        readonly lines?: readonly unknown[];
        /** The credit note's memo appears on the credit note PDF. */
        readonly memo?: string;
        /** Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
        readonly metadata?: string;
        /** The integer amount in **%s** representing the amount that is credited outside of Stripe. */
        readonly out_of_band_amount?: number;
        /** Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory` */
        readonly reason?: string;
        /** ID of an existing refund to link this credit note to. */
        readonly refund?: string;
        /** The integer amount in **%s** representing the amount to refund. If set, a refund will be created for the charge associated with the invoice. */
        readonly refund_amount?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["credit_note_line_item"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetCreditNotesCreditNoteLines: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly credit_note: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["credit_note_line_item"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the credit note object with the given identifier.</p> */
  readonly GetCreditNotesId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["credit_note"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing credit note.</p> */
  readonly PostCreditNotesId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Credit note memo. */
          readonly memo?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["credit_note"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.</p> */
  readonly PostCreditNotesIdVoid: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["credit_note"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.</p> */
  readonly GetCustomers: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A filter on the list based on the customer's `email` field. The value must be a string. */
        readonly email?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["customer"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new customer object.</p> */
  readonly PostCustomers: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The customer's address. */
          readonly address?: unknown;
          /** @description An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
          readonly balance?: number;
          /** @description The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
          readonly description?: string;
          /** @description Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
          readonly invoice_prefix?: string;
          /**
           * customer_param
           * @description Default invoice settings for this customer.
           */
          readonly invoice_settings?: {
            readonly custom_fields?: readonly {
              readonly name: string;
              readonly value: string;
            }[];
            readonly default_payment_method?: string;
            readonly footer?: string;
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The customer's full name or business name. */
          readonly name?: string;
          /** @description The sequence to be used on the customer's next invoice. Defaults to 1. */
          readonly next_invoice_sequence?: number;
          /** @description ID of the PaymentMethod to attach to the customer */
          readonly payment_method?: string;
          /** @description The customer's phone number. */
          readonly phone?: string;
          /** @description Customer's preferred languages, ordered by preference. */
          readonly preferred_locales?: readonly string[];
          /** @description The customer's shipping information. Appears on invoices emailed to this customer. */
          readonly shipping?: unknown;
          /**
           * @description The source can be a [Token](https://stripe.com/docs/api#tokens) or a [Source](https://stripe.com/docs/api#sources), as returned by [Elements](https://stripe.com/docs/elements). You must provide a source if the customer does not already have a valid source attached, and you are subscribing the customer to be charged automatically for a plan that is not free.
           *
           * Passing `source` will create a new source object, make it the customer default source, and delete the old customer default if one exists. If you want to add an additional source, instead use the [card creation API](https://stripe.com/docs/api#create_card) to add the card and then the [customer update API](https://stripe.com/docs/api#update_customer) to set it as the default.
           *
           * Whenever you attach a card to a customer, Stripe will automatically validate the card.
           */
          readonly source?: string;
          /**
           * @description The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
           * @enum {string}
           */
          readonly tax_exempt?: "" | "exempt" | "none" | "reverse";
          /** @description The customer's tax IDs. */
          readonly tax_id_data?: readonly {
            /** @enum {string} */
            readonly type:
              | "au_abn"
              | "ca_bn"
              | "ca_qst"
              | "ch_vat"
              | "es_cif"
              | "eu_vat"
              | "hk_br"
              | "in_gst"
              | "jp_cn"
              | "kr_brn"
              | "li_uid"
              | "mx_rfc"
              | "my_itn"
              | "my_sst"
              | "no_vat"
              | "nz_gst"
              | "ru_inn"
              | "sg_gst"
              | "sg_uen"
              | "th_vat"
              | "tw_vat"
              | "us_ein"
              | "za_vat";
            readonly value: string;
          }[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["customer"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing customer. You need only supply the unique customer identifier that was returned upon customer creation.</p> */
  readonly GetCustomersCustomer: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["customer"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not trigger this behavior.</p>
   *
   * <p>This request accepts mostly the same arguments as the customer creation call.</p>
   */
  readonly PostCustomersCustomer: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The customer's address. */
          readonly address?: unknown;
          /** @description An integer amount in %s that represents the customer's current balance, which affect the customer's future invoices. A negative amount represents a credit that decreases the amount due on an invoice; a positive amount increases the amount due on an invoice. */
          readonly balance?: number;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          readonly card?: unknown;
          /** @description The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description ID of Alipay account to make the customer's new default for invoice payments. */
          readonly default_alipay_account?: string;
          /** @description ID of bank account to make the customer's new default for invoice payments. */
          readonly default_bank_account?: string;
          /** @description ID of card to make the customer's new default for invoice payments. */
          readonly default_card?: string;
          /**
           * @description If you are using payment methods created via the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/update#update_customer-invoice_settings-default_payment_method) parameter.
           *
           * Provide the ID of a payment source already attached to this customer to make it this customer's default payment source.
           *
           * If you want to add a new payment source and make it the default, see the [source](https://stripe.com/docs/api/customers/update#update_customer-source) property.
           */
          readonly default_source?: string;
          /** @description An arbitrary string that you can attach to a customer object. It is displayed alongside the customer in the dashboard. */
          readonly description?: string;
          /** @description Customer's email address. It's displayed alongside the customer in your dashboard and can be useful for searching and tracking. This may be up to *512 characters*. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The prefix for the customer used to generate unique invoice numbers. Must be 3–12 uppercase letters or numbers. */
          readonly invoice_prefix?: string;
          /**
           * customer_param
           * @description Default invoice settings for this customer.
           */
          readonly invoice_settings?: {
            readonly custom_fields?: readonly {
              readonly name: string;
              readonly value: string;
            }[];
            readonly default_payment_method?: string;
            readonly footer?: string;
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The customer's full name or business name. */
          readonly name?: string;
          /** @description The sequence to be used on the customer's next invoice. Defaults to 1. */
          readonly next_invoice_sequence?: number;
          /** @description The customer's phone number. */
          readonly phone?: string;
          /** @description Customer's preferred languages, ordered by preference. */
          readonly preferred_locales?: readonly string[];
          /** @description The customer's shipping information. Appears on invoices emailed to this customer. */
          readonly shipping?: unknown;
          /**
           * @description The source can be a [Token](https://stripe.com/docs/api#tokens) or a [Source](https://stripe.com/docs/api#sources), as returned by [Elements](https://stripe.com/docs/elements). You must provide a source if the customer does not already have a valid source attached, and you are subscribing the customer to be charged automatically for a plan that is not free.
           *
           * Passing `source` will create a new source object, make it the customer default source, and delete the old customer default if one exists. If you want to add an additional source, instead use the [card creation API](https://stripe.com/docs/api#create_card) to add the card and then the [customer update API](https://stripe.com/docs/api#update_customer) to set it as the default.
           *
           * Whenever you attach a card to a customer, Stripe will automatically validate the card.
           */
          readonly source?: string;
          /**
           * @description The customer's tax exemption. One of `none`, `exempt`, or `reverse`.
           * @enum {string}
           */
          readonly tax_exempt?: "" | "exempt" | "none" | "reverse";
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["customer"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the customer.</p> */
  readonly DeleteCustomersCustomer: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_customer"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of transactions that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
  readonly GetCustomersCustomerBalanceTransactions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["customer_balance_transaction"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates an immutable transaction that updates the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
  readonly PostCustomersCustomerBalanceTransactions: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The integer amount in **%s** to apply to the customer's balance. Pass a negative amount to credit the customer's balance, and pass in a positive amount to debit the customer's balance. */
          readonly amount: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). If the customer's [`currency`](https://stripe.com/docs/api/customers/object#customer_object-currency) is set, this value must match it. If the customer's `currency` is not set, it will be updated to this value. */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["customer_balance_transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a specific transaction that updated the customer’s <a href="/docs/api/customers/object#customer_object-balance"><code>balance</code></a>.</p> */
  readonly GetCustomersCustomerBalanceTransactionsTransaction: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
        readonly transaction: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["customer_balance_transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Most customer balance transaction fields are immutable, but you may update its <code>description</code> and <code>metadata</code>.</p> */
  readonly PostCustomersCustomerBalanceTransactionsTransaction: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly transaction: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["customer_balance_transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always available by default on the Customer. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p> */
  readonly GetCustomersCustomerBankAccounts: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["bank_account"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  readonly PostCustomersCustomerBankAccounts: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details. */
          readonly alipay_account?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          readonly card?: unknown;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly source?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also retrieve details about a specific bank account stored on the Stripe account.</p> */
  readonly GetCustomersCustomerBankAccountsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["bank_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  readonly PostCustomersCustomerBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Cardholder name. */
          readonly name?: string;
          /** owner */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["bank_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  readonly DeleteCustomersCustomerBankAccountsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_payment_source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Verify a specified bank account for a given customer.</p> */
  readonly PostCustomersCustomerBankAccountsIdVerify: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          readonly amounts?: readonly number[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["bank_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>You can see a list of the cards belonging to a customer.
   * Note that the 10 most recent sources are always available on the <code>Customer</code> object.
   * If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional cards.</p>
   */
  readonly GetCustomersCustomerCards: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["card"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  readonly PostCustomersCustomerCards: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details. */
          readonly alipay_account?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          readonly card?: unknown;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly source?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a specific card stored on the customer.</p> */
  readonly GetCustomersCustomerCardsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["card"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  readonly PostCustomersCustomerCardsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Cardholder name. */
          readonly name?: string;
          /** owner */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["bank_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  readonly DeleteCustomersCustomerCardsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_payment_source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  readonly GetCustomersCustomerDiscount: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["discount"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Removes the currently applied discount on a customer.</p> */
  readonly DeleteCustomersCustomerDiscount: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_discount"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List sources for a specified customer.</p> */
  readonly GetCustomersCustomerSources: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Filter sources according to a particular object type. */
        readonly object?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["alipay_account"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
   *
   * <p>If the card’s owner has no default card, then the new card will become the default.
   * However, if the owner already has a default, then it will not change.
   * To change the default, you should <a href="/docs/api#update_customer">update the customer</a> to have a new <code>default_source</code>.</p>
   */
  readonly PostCustomersCustomerSources: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A token returned by [Stripe.js](https://stripe.com/docs/stripe.js) representing the user’s Alipay account details. */
          readonly alipay_account?: string;
          /** @description Either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js), or a dictionary containing a user's bank account details. */
          readonly bank_account?: unknown;
          /** @description A token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe.js). */
          readonly card?: unknown;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description Please refer to full [documentation](https://stripe.com/docs/api) instead. */
          readonly source?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve a specified source for a given customer.</p> */
  readonly GetCustomersCustomerSourcesId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Update a specified source for a given customer.</p> */
  readonly PostCustomersCustomerSourcesId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the person or business that owns the bank account. */
          readonly account_holder_name?: string;
          /**
           * @description The type of entity that holds the account. This can be either `individual` or `company`.
           * @enum {string}
           */
          readonly account_holder_type?: "company" | "individual";
          /** @description City/District/Suburb/Town/Village. */
          readonly address_city?: string;
          /** @description Billing address country, if provided when creating card. */
          readonly address_country?: string;
          /** @description Address line 1 (Street address/PO Box/Company name). */
          readonly address_line1?: string;
          /** @description Address line 2 (Apartment/Suite/Unit/Building). */
          readonly address_line2?: string;
          /** @description State/County/Province/Region. */
          readonly address_state?: string;
          /** @description ZIP or postal code. */
          readonly address_zip?: string;
          /** @description Two digit number representing the card’s expiration month. */
          readonly exp_month?: string;
          /** @description Four digit number representing the card’s expiration year. */
          readonly exp_year?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Cardholder name. */
          readonly name?: string;
          /** owner */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["bank_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a specified source for a given customer.</p> */
  readonly DeleteCustomersCustomerSourcesId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_payment_source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Verify a specified bank account for a given customer.</p> */
  readonly PostCustomersCustomerSourcesIdVerify: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Two positive integers, in *cents*, equal to the values of the microdeposits sent to the bank account. */
          readonly amounts?: readonly number[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["bank_account"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are always available by default on the customer object. If you need more than those 10, you can use the limit and starting_after parameters to page through additional subscriptions.</p> */
  readonly GetCustomersCustomerSubscriptions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["subscription"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new subscription on an existing customer.</p> */
  readonly PostCustomersCustomerSubscriptions: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /** @description For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor. */
          readonly backdate_start_date?: number;
          /** @description A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
          readonly billing_cycle_anchor?: number;
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?: unknown;
          /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          readonly cancel_at?: number;
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
          readonly default_tax_rates?: readonly string[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 20 subscription items, each with an attached plan. */
          readonly items?: readonly {
            readonly billing_thresholds?: unknown;
            readonly metadata?: { readonly [key: string]: unknown };
            readonly plan?: string;
            readonly quantity?: number;
            readonly tax_rates?: readonly string[];
          }[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /**
           * @description Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           *
           * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
           * @enum {string}
           */
          readonly payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?: unknown;
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** @description A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          readonly tax_percent?: unknown;
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: unknown;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          readonly trial_from_plan?: boolean;
          /** @description Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. */
          readonly trial_period_days?: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the subscription with the given ID.</p> */
  readonly GetCustomersCustomerSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
  readonly PostCustomersCustomerSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /**
           * @description Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
           * @enum {string}
           */
          readonly billing_cycle_anchor?: "now" | "unchanged";
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?: unknown;
          /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          readonly cancel_at?: unknown;
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
          readonly default_tax_rates?: readonly string[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description List of subscription items, each with an attached plan. */
          readonly items?: readonly {
            readonly billing_thresholds?: unknown;
            readonly clear_usage?: boolean;
            readonly deleted?: boolean;
            readonly id?: string;
            readonly metadata?: unknown;
            readonly plan?: string;
            readonly quantity?: number;
            readonly tax_rates?: readonly string[];
          }[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /** @description If specified, payment collection for this subscription will be paused. */
          readonly pause_collection?: unknown;
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?: unknown;
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations. */
          readonly proration_date?: number;
          /** @description A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          readonly tax_percent?: unknown;
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: unknown;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          readonly trial_from_plan?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the subscription will remain active until the end of the period, at which point it will be canceled and not renewed. Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   */
  readonly DeleteCustomersCustomerSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Can be set to `true` if `at_period_end` is not set to `true`. Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
          readonly invoice_now?: boolean;
          /** @description Can be set to `true` if `at_period_end` is not set to `true`. Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
          readonly prorate?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  readonly GetCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["discount"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Removes the currently applied discount on a customer.</p> */
  readonly DeleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_discount"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of tax IDs for a customer.</p> */
  readonly GetCustomersCustomerTaxIds: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly customer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["tax_id"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new <code>TaxID</code> object for a customer.</p> */
  readonly PostCustomersCustomerTaxIds: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description Type of the tax ID, one of `eu_vat`, `nz_gst`, `au_abn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `my_sst`, or `sg_gst`
           * @enum {string}
           */
          readonly type:
            | "au_abn"
            | "ca_bn"
            | "ca_qst"
            | "ch_vat"
            | "es_cif"
            | "eu_vat"
            | "hk_br"
            | "in_gst"
            | "jp_cn"
            | "kr_brn"
            | "li_uid"
            | "mx_rfc"
            | "my_itn"
            | "my_sst"
            | "no_vat"
            | "nz_gst"
            | "ru_inn"
            | "sg_gst"
            | "sg_uen"
            | "th_vat"
            | "tw_vat"
            | "us_ein"
            | "za_vat";
          /** @description Value of the tax ID. */
          readonly value: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["tax_id"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the <code>TaxID</code> object with the given identifier.</p> */
  readonly GetCustomersCustomerTaxIdsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["tax_id"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes an existing <code>TaxID</code> object.</p> */
  readonly DeleteCustomersCustomerTaxIdsId: {
    readonly parameters: {
      readonly path: {
        readonly customer: string;
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_tax_id"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your disputes.</p> */
  readonly GetDisputes: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return disputes associated to the charge specified by this charge ID. */
        readonly charge?: string;
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return disputes associated to the PaymentIntent specified by this PaymentIntent ID. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["dispute"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the dispute with the given ID.</p> */
  readonly GetDisputesDispute: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly dispute: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit evidence to help us resolve the dispute in your favor. You can do this in your <a href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence programmatically.</p>
   *
   * <p>Depending on your dispute type, different evidence fields will give you a better chance of winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide to dispute types</a>.</p>
   */
  readonly PostDisputesDispute: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * dispute_evidence_params
           * @description Evidence to upload, to respond to a dispute. Updating any field in the hash will submit all fields in the hash for review. The combined character count of all fields is limited to 150,000.
           */
          readonly evidence?: {
            readonly access_activity_log?: string;
            readonly billing_address?: string;
            readonly cancellation_policy?: string;
            readonly cancellation_policy_disclosure?: string;
            readonly cancellation_rebuttal?: string;
            readonly customer_communication?: string;
            readonly customer_email_address?: string;
            readonly customer_name?: string;
            readonly customer_purchase_ip?: string;
            readonly customer_signature?: string;
            readonly duplicate_charge_documentation?: string;
            readonly duplicate_charge_explanation?: string;
            readonly duplicate_charge_id?: string;
            readonly product_description?: string;
            readonly receipt?: string;
            readonly refund_policy?: string;
            readonly refund_policy_disclosure?: string;
            readonly refund_refusal_explanation?: string;
            readonly service_date?: string;
            readonly service_documentation?: string;
            readonly shipping_address?: string;
            readonly shipping_carrier?: string;
            readonly shipping_date?: string;
            readonly shipping_documentation?: string;
            readonly shipping_tracking_number?: string;
            readonly uncategorized_file?: string;
            readonly uncategorized_text?: string;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Whether to immediately submit evidence to the bank. If `false`, evidence is staged on the dispute. Staged evidence is visible in the API and Dashboard, and can be submitted to the bank by making another request with this attribute set to `true` (the default). */
          readonly submit?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing the dispute, acknowledging it as lost.</p>
   *
   * <p>The status of the dispute will change from <code>needs_response</code> to <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
   */
  readonly PostDisputesDisputeClose: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a short-lived API key for a given resource.</p> */
  readonly PostEphemeralKeys: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The ID of the Customer you'd like to modify using the resulting ephemeral key. */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The ID of the Issuing Card you'd like to access using the resulting ephemeral key. */
          readonly issuing_card?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["ephemeral_key"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Invalidates a short-lived API key for a given resource.</p> */
  readonly DeleteEphemeralKeysKey: {
    readonly parameters: {
      readonly path: {
        readonly key: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["ephemeral_key"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation time, specified in <a href="/docs/api/events/object">event object</a> <code>api_version</code> attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p> */
  readonly GetEvents: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** Filter events by whether all webhooks were successfully delivered. If false, events which are still pending or have failed all delivery attempts to a webhook endpoint will be returned. */
        readonly delivery_success?: boolean;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** A string containing a specific event name, or group of events using * as a wildcard. The list will be filtered to include only events with a matching event property. */
        readonly type?: string;
        /** An array of up to 20 strings containing specific event names. The list will be filtered to include only events with a matching event property. You may pass either `type` or `types`, but not both. */
        readonly types?: readonly unknown[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["event"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an event. Supply the unique identifier of the event, which you might have received in a webhook.</p> */
  readonly GetEventsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["event"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows the currencies for which Stripe supports.</p> */
  readonly GetExchangeRates: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with the exchange rate for currency X your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and total number of supported payout currencies, and the default is the max. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is the currency that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with the exchange rate for currency X, your subsequent call can include `starting_after=X` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["exchange_rate"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the exchange rates from the given currency to every supported currency.</p> */
  readonly GetExchangeRatesCurrency: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly currency: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["exchange_rate"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of file links.</p> */
  readonly GetFileLinks: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Filter links by their expiration status. By default, all links are returned. */
        readonly expired?: boolean;
        /** Only return links for the given file. */
        readonly file?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["file_link"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new file link object.</p> */
  readonly PostFileLinks: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A future timestamp after which the link will no longer be usable. */
          readonly expires_at?: number;
          /** @description The ID of the file. The file's `purpose` must be one of the following: `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `finance_report_run`, `pci_document`, `sigma_scheduled_query`, or `tax_document_user_upload`. */
          readonly file: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["file_link"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the file link with the given ID.</p> */
  readonly GetFileLinksLink: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly link: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["file_link"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing file link object. Expired links can no longer be updated.</p> */
  readonly PostFileLinksLink: {
    readonly parameters: {
      readonly path: {
        readonly link: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A future timestamp after which the link will no longer be usable, or `now` to expire the link immediately. */
          readonly expires_at?: unknown;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["file_link"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of the files that your account has access to. The files are returned sorted by creation date, with the most recently created files appearing first.</p> */
  readonly GetFiles: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The file purpose to filter queries by. If none is provided, files will not be filtered by purpose. */
        readonly purpose?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["file"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>To upload a file to Stripe, you’ll need to send a request of type <code>multipart/form-data</code>. The request should contain the file you would like to upload, as well as the parameters for creating a file.</p>
   *
   * <p>All of Stripe’s officially supported Client libraries should have support for sending <code>multipart/form-data</code>.</p>
   */
  readonly PostFiles: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A file to upload. The file should follow the specifications of RFC 2388 (which defines file transfers for the `multipart/form-data` protocol). */
          readonly file: string;
          /**
           * file_link_creation_params
           * @description Optional parameters to automatically create a [file link](https://stripe.com/docs/api#file_links) for the newly created file.
           */
          readonly file_link_data?: {
            readonly create: boolean;
            readonly expires_at?: number;
            readonly metadata?: unknown;
          };
          /**
           * @description The purpose of the uploaded file. Possible values are `additional_verification`, `business_icon`, `business_logo`, `customer_signature`, `dispute_evidence`, `identity_document`, `pci_document`, or `tax_document_user_upload`.
           * @enum {string}
           */
          readonly purpose:
            | "additional_verification"
            | "business_icon"
            | "business_logo"
            | "customer_signature"
            | "dispute_evidence"
            | "identity_document"
            | "pci_document"
            | "tax_document_user_upload";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["file"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing file object. Supply the unique file ID from a file, and Stripe will return the corresponding file object. To access file contents, see the <a href="/docs/file-upload#download-file-contents">File Upload Guide</a>.</p> */
  readonly GetFilesFile: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly file: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["file"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently created invoice items appearing first.</p> */
  readonly GetInvoiceitems: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** The identifier of the customer whose invoice items to return. If none is provided, all invoice items will be returned. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Only return invoice items belonging to this invoice. If none is provided, all invoice items will be returned. If specifying an invoice, no customer identifier is needed. */
        readonly invoice?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Set to `true` to only show pending invoice items, which are not yet attached to any invoices. Set to `false` to only show invoice items already attached to invoices. If unspecified, no filter is applied. */
        readonly pending?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["invoiceitem"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates an item to be added to a draft invoice. If no invoice is specified, the item will be on the next invoice created for the customer specified.</p> */
  readonly PostInvoiceitems: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The integer amount in **%s** of the charge to be applied to the upcoming invoice. Passing in a negative `amount` will reduce the `amount_due` on the invoice. */
          readonly amount?: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /** @description The ID of the customer who will be billed when this invoice item is billed. */
          readonly customer: string;
          /** @description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
          readonly description?: string;
          /** @description Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. */
          readonly discountable?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The ID of an existing invoice to add this invoice item to. When left blank, the invoice item will be added to the next upcoming scheduled invoice. This is useful when adding invoice items in response to an invoice.created webhook. You can only add invoice items to draft invoices. */
          readonly invoice?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /**
           * period
           * @description The period associated with this invoice item.
           */
          readonly period?: {
            readonly end: number;
            readonly start: number;
          };
          /** @description Non-negative integer. The quantity of units for the invoice item. */
          readonly quantity?: number;
          /** @description The ID of a subscription to add this invoice item to. When left blank, the invoice item will be be added to the next upcoming scheduled invoice. When set, scheduled invoices for subscriptions other than the specified subscription will ignore the invoice item. Use this when you want to express that an invoice item has been accrued within the context of a particular subscription. */
          readonly subscription?: string;
          /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. */
          readonly tax_rates?: readonly string[];
          /** @description The integer unit amount in **%s** of the charge to be applied to the upcoming invoice. This `unit_amount` will be multiplied by the quantity to get the full amount. Passing in a negative `unit_amount` will reduce the `amount_due` on the invoice. */
          readonly unit_amount?: number;
          /** @description Same as `unit_amount`, but accepts a decimal value with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
          readonly unit_amount_decimal?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoiceitem"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the invoice item with the given ID.</p> */
  readonly GetInvoiceitemsInvoiceitem: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly invoiceitem: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoiceitem"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only possible before the invoice it’s attached to is closed.</p> */
  readonly PostInvoiceitemsInvoiceitem: {
    readonly parameters: {
      readonly path: {
        readonly invoiceitem: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The integer amount in **%s** of the charge to be applied to the upcoming invoice. If you want to apply a credit to the customer's account, pass a negative amount. */
          readonly amount?: number;
          /** @description An arbitrary string which you can attach to the invoice item. The description is displayed in the invoice for easy tracking. */
          readonly description?: string;
          /** @description Controls whether discounts apply to this invoice item. Defaults to false for prorations or negative invoice items, and true for all other invoice items. Cannot be set to true for prorations. */
          readonly discountable?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /**
           * period
           * @description The period associated with this invoice item.
           */
          readonly period?: {
            readonly end: number;
            readonly start: number;
          };
          /** @description Non-negative integer. The quantity of units for the invoice item. */
          readonly quantity?: number;
          /** @description The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item. Pass an empty string to remove previously-defined tax rates. */
          readonly tax_rates?: readonly string[];
          /** @description The integer unit amount in **%s** of the charge to be applied to the upcoming invoice. This unit_amount will be multiplied by the quantity to get the full amount. If you want to apply a credit to the customer's account, pass a negative unit_amount. */
          readonly unit_amount?: number;
          /** @description Same as `unit_amount`, but accepts a decimal value with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set. */
          readonly unit_amount_decimal?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoiceitem"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not attached to invoices, or if it’s attached to a draft invoice.</p> */
  readonly DeleteInvoiceitemsInvoiceitem: {
    readonly parameters: {
      readonly path: {
        readonly invoiceitem: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_invoiceitem"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation date, with the most recently created invoices appearing first.</p> */
  readonly GetInvoices: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The collection method of the invoice to retrieve. Either `charge_automatically` or `send_invoice`. */
        readonly collection_method?: string;
        readonly created?: number;
        /** Only return invoices for the customer specified by this customer ID. */
        readonly customer?: string;
        readonly due_date?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview) */
        readonly status?: string;
        /** Only return invoices for the subscription specified by this subscription ID. */
        readonly subscription?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["invoice"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>This endpoint creates a draft invoice for a given customer. The draft invoice created pulls in all pending invoice items on that customer, including prorations.</p> */
  readonly PostInvoices: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices). */
          readonly application_fee_amount?: number;
          /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
          readonly auto_advance?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description A list of up to 4 custom fields to be displayed on the invoice. */
          readonly custom_fields?: readonly {
            readonly name: string;
            readonly value: string;
          }[];
          /** @description The ID of the customer who will be billed. */
          readonly customer: string;
          /** @description The number of days from when the invoice is created until it is due. Valid only for invoices where `collection_method=send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. */
          readonly default_tax_rates?: readonly string[];
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
          readonly description?: string;
          /** @description The date on which payment for this invoice is due. Valid only for invoices where `collection_method=send_invoice`. */
          readonly due_date?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Footer to be displayed on the invoice. */
          readonly footer?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
          readonly statement_descriptor?: string;
          /** @description The ID of the subscription to invoice, if any. If not set, the created invoice will include all pending invoice items for the customer. If set, the created invoice will only include pending invoice items for that subscription and pending invoice items not associated with any subscription. The subscription's billing cycle and regular subscription events won't be affected. */
          readonly subscription?: string;
          /** @description The percent tax rate applied to the invoice, represented as a decimal number. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          readonly tax_percent?: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>At any time, you can preview the upcoming invoice for a customer. This will show you all the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you any discount that is applicable to the customer.</p>
   *
   * <p>Note that when you are viewing an upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the customer’s discount.</p>
   *
   * <p>You can preview the effects of updating a subscription, including a preview of what proration will take place. To ensure that the actual proration is calculated exactly the same as the previewed proration, you should pass a <code>proration_date</code> parameter when doing the actual subscription update. The value passed in should be the same as the <code>subscription_proration_date</code> returned on the upcoming invoice resource. The recommended way to get only the prorations being previewed is to consider only proration line items where <code>period[start]</code> is equal to the <code>subscription_proration_date</code> on the upcoming invoice resource.</p>
   */
  readonly GetInvoicesUpcoming: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */
        readonly coupon?: string;
        /** The identifier of the customer whose upcoming invoice you'd like to retrieve. */
        readonly customer?: string;
        /** List of invoice items to add or update in the upcoming invoice preview. */
        readonly invoice_items?: readonly unknown[];
        /** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
        readonly schedule?: string;
        /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
        readonly subscription?: string;
        /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */
        readonly subscription_billing_cycle_anchor?: string;
        /** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.` */
        readonly subscription_cancel_at?: string;
        /** Boolean indicating whether this subscription should cancel at the end of the current period. */
        readonly subscription_cancel_at_period_end?: boolean;
        /** This simulates the subscription being canceled or expired immediately. */
        readonly subscription_cancel_now?: boolean;
        /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */
        readonly subscription_default_tax_rates?: string;
        /** List of subscription items, each with an attached plan. */
        readonly subscription_items?: readonly unknown[];
        /** This field has been renamed to `subscription_proration_behavior`. `subscription_prorate=true` can be replaced with `subscription_proration_behavior=create_prorations` and `subscription_prorate=false` can be replaced with `subscription_proration_behavior=none`. */
        readonly subscription_prorate?: boolean;
        /**
         * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
         *
         * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
         *
         * Prorations can be disabled by passing `none`.
         */
        readonly subscription_proration_behavior?: string;
        /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false. */
        readonly subscription_proration_date?: number;
        /** Date a subscription is intended to start (can be future or past) */
        readonly subscription_start_date?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
        readonly subscription_tax_percent?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */
        readonly subscription_trial_end?: string;
        /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. */
        readonly subscription_trial_from_plan?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>When retrieving an upcoming invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetInvoicesUpcomingLines: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The code of the coupon to apply. If `subscription` or `subscription_items` is provided, the invoice returned will preview updating or creating a subscription with that coupon. Otherwise, it will preview applying that coupon to the customer for the next upcoming invoice from among the customer's subscriptions. The invoice can be previewed without a coupon by passing this value as an empty string. */
        readonly coupon?: string;
        /** The identifier of the customer whose upcoming invoice you'd like to retrieve. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** List of invoice items to add or update in the upcoming invoice preview. */
        readonly invoice_items?: readonly unknown[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The identifier of the unstarted schedule whose upcoming invoice you'd like to retrieve. Cannot be used with subscription or subscription fields. */
        readonly schedule?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The identifier of the subscription for which you'd like to retrieve the upcoming invoice. If not provided, but a `subscription_items` is provided, you will preview creating a subscription with those items. If neither `subscription` nor `subscription_items` is provided, you will retrieve the next upcoming invoice from among the customer's subscriptions. */
        readonly subscription?: string;
        /** For new subscriptions, a future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. For existing subscriptions, the value can only be set to `now` or `unchanged`. */
        readonly subscription_billing_cycle_anchor?: string;
        /** Timestamp indicating when the subscription should be scheduled to cancel. Will prorate if within the current period and prorations have been enabled using `proration_behavior`.` */
        readonly subscription_cancel_at?: string;
        /** Boolean indicating whether this subscription should cancel at the end of the current period. */
        readonly subscription_cancel_at_period_end?: boolean;
        /** This simulates the subscription being canceled or expired immediately. */
        readonly subscription_cancel_now?: boolean;
        /** If provided, the invoice returned will preview updating or creating a subscription with these default tax rates. The default tax rates will apply to any line item that does not have `tax_rates` set. */
        readonly subscription_default_tax_rates?: string;
        /** List of subscription items, each with an attached plan. */
        readonly subscription_items?: readonly unknown[];
        /** If previewing an update to a subscription, this decides whether the preview will show the result of applying prorations or not. If set, one of `subscription_items` or `subscription`, and one of `subscription_items` or `subscription_trial_end` are required. */
        readonly subscription_prorate?: boolean;
        /**
         * Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
         *
         * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
         *
         * Prorations can be disabled by passing `none`.
         */
        readonly subscription_proration_behavior?: string;
        /** If previewing an update to a subscription, and doing proration, `subscription_proration_date` forces the proration to be calculated as though the update was done at the specified time. The time given must be within the current subscription period, and cannot be before the subscription was on its current plan. If set, `subscription`, and one of `subscription_items`, or `subscription_trial_end` are required. Also, `subscription_proration` cannot be set to false. */
        readonly subscription_proration_date?: number;
        /** Date a subscription is intended to start (can be future or past) */
        readonly subscription_start_date?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that tax percent. If set, one of `subscription_items` or `subscription` is required. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
        readonly subscription_tax_percent?: number;
        /** If provided, the invoice returned will preview updating or creating a subscription with that trial end. If set, one of `subscription_items` or `subscription` is required. */
        readonly subscription_trial_end?: string;
        /** Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `subscription_trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `subscription_trial_end` is not allowed. */
        readonly subscription_trial_from_plan?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["line_item"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the invoice with the given ID.</p> */
  readonly GetInvoicesInvoice: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Draft invoices are fully editable. Once an invoice is <a href="/docs/billing/invoices/workflow#finalized">finalized</a>,
   * monetary values, as well as <code>collection_method</code>, become uneditable.</p>
   *
   * <p>If you would like to stop the Stripe Billing engine from automatically finalizing, reattempting payments on,
   * sending reminders for, or <a href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices, pass
   * <code>auto_advance=false</code>.</p>
   */
  readonly PostInvoicesInvoice: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A fee in %s that will be applied to the invoice and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the Stripe-Account header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#invoices). */
          readonly application_fee_amount?: number;
          /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. */
          readonly auto_advance?: boolean;
          /**
           * @description Either `charge_automatically` or `send_invoice`. This field can be updated only on `draft` invoices.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description A list of up to 4 custom fields to be displayed on the invoice. If a value for `custom_fields` is specified, the list specified will replace the existing custom field list on this invoice. Pass an empty string to remove previously-defined fields. */
          readonly custom_fields?: readonly {
            readonly name: string;
            readonly value: string;
          }[];
          /** @description The number of days from which the invoice is created until it is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any line item that does not have `tax_rates` set. Pass an empty string to remove previously-defined tax rates. */
          readonly default_tax_rates?: readonly string[];
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard. */
          readonly description?: string;
          /** @description The date on which payment for this invoice is due. Only valid for invoices where `collection_method=send_invoice`. This field can only be updated on `draft` invoices. */
          readonly due_date?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Footer to be displayed on the invoice. */
          readonly footer?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Extra information about a charge for the customer's credit card statement. It must contain at least one letter. If not specified and this invoice is part of a subscription, the default `statement_descriptor` will be set to the first subscription item's product's `statement_descriptor`. */
          readonly statement_descriptor?: string;
          /** @description The percent tax rate applied to the invoice, represented as a non-negative decimal number (with at most four decimal places) between 0 and 100. To unset a previously-set value, pass an empty string. This field can be updated only on `draft` invoices. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          readonly tax_percent?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Permanently deletes a draft invoice. This cannot be undone. Attempts to delete invoices that are no longer in a draft state will fail; once an invoice has been finalized, it must be <a href="#void_invoice">voided</a>.</p> */
  readonly DeleteInvoicesInvoice: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to finalize a draft invoice manually, you can do so using this method.</p> */
  readonly PostInvoicesInvoiceFinalize: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Controls whether Stripe will perform [automatic collection](https://stripe.com/docs/billing/invoices/workflow/#auto_advance) of the invoice. When `false`, the invoice's state will not automatically advance without an explicit action. */
          readonly auto_advance?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p> */
  readonly GetInvoicesInvoiceLines: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly invoice: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["line_item"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting purposes.</p> */
  readonly PostInvoicesInvoiceMarkUncollectible: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can do so.</p> */
  readonly PostInvoicesInvoicePay: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description In cases where the source used to pay the invoice has insufficient funds, passing `forgive=true` controls whether a charge should be attempted for the full amount available on the source, up to the amount to fully pay the invoice. This effectively forgives the difference between the amount available on the source and the amount due.
           *
           * Passing `forgive=false` will fail the charge if the source hasn't been pre-funded with the right amount. An example for this case is with ACH Credit Transfers and wires: if the amount wired is less than the amount due by a small amount, you might want to forgive the difference.
           */
          readonly forgive?: boolean;
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /** @description Boolean representing whether an invoice is paid outside of Stripe. This will result in no charge being made. */
          readonly paid_out_of_band?: boolean;
          /** @description A PaymentMethod to be charged. The PaymentMethod must be the ID of a PaymentMethod belonging to the customer associated with the invoice being paid. */
          readonly payment_method?: string;
          /** @description A payment source to be charged. The source must be the ID of a source belonging to the customer associated with the invoice being paid. */
          readonly source?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Stripe will automatically send invoices to customers according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have already been paid, there will be no reference to the payment in the email.</p>
   *
   * <p>Requests made in test-mode result in no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
   */
  readonly PostInvoicesInvoiceSend: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the invoice can still be found.</p> */
  readonly PostInvoicesInvoiceVoid: {
    readonly parameters: {
      readonly path: {
        readonly invoice: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["invoice"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of issuer fraud records.</p> */
  readonly GetIssuerFraudRecords: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return issuer fraud records for the charge specified by this charge ID. */
        readonly charge?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["issuer_fraud_record"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Retrieves the details of an issuer fraud record that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#issuer_fraud_record_object">issuer fraud record</a> object reference for more details.</p>
   */
  readonly GetIssuerFraudRecordsIssuerFraudRecord: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly issuer_fraud_record: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuer_fraud_record"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingAuthorizations: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return issuing transactions that belong to the given card. */
        readonly card?: string;
        /** Only return authorizations belonging to the given cardholder. */
        readonly cardholder?: string;
        /** Only return authorizations that were created during the given date interval. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return authorizations with the given status. One of `pending`, `closed`, or `reversed`. */
        readonly status?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["issuing.authorization"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Authorization</code> object.</p> */
  readonly GetIssuingAuthorizationsAuthorization: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly authorization: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.authorization"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingAuthorizationsAuthorization: {
    readonly parameters: {
      readonly path: {
        readonly authorization: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.authorization"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Approves a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.</p> */
  readonly PostIssuingAuthorizationsAuthorizationApprove: {
    readonly parameters: {
      readonly path: {
        readonly authorization: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description If the authorization's `pending_request.is_amount_controllable` property is `true`, you may provide this value to control how much to hold for the authorization. Must be positive (use [`decline`](https://stripe.com/docs/api/issuing/authorizations/decline) to decline an authorization request). */
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.authorization"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Declines a pending Issuing <code>Authorization</code> object. This request should be made within the timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.</p> */
  readonly PostIssuingAuthorizationsAuthorizationDecline: {
    readonly parameters: {
      readonly path: {
        readonly authorization: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.authorization"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingCardholders: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return cardholders that were created during the given date interval. */
        readonly created?: number;
        /** Only return cardholders that have the given email address. */
        readonly email?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return cardholders that have the given phone number. */
        readonly phone_number?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return cardholders that have the given status. One of `active`, `inactive`, or `blocked`. */
        readonly status?: string;
        /** Only return cardholders that have the given type. One of `individual` or `company`. */
        readonly type?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["issuing.cardholder"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p> */
  readonly PostIssuingCardholders: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /**
           * billing_specs
           * @description The cardholder's billing address.
           */
          readonly billing: {
            /** required_address */
            readonly address: {
              readonly city: string;
              readonly country: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code: string;
              readonly state?: string;
            };
          };
          /**
           * company_param
           * @description Additional information about a `company` cardholder.
           */
          readonly company?: {
            readonly tax_id?: string;
          };
          /** @description The cardholder's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * individual_param
           * @description Additional information about an `individual` cardholder.
           */
          readonly individual?: {
            /** date_of_birth_specs */
            readonly dob?: {
              readonly day: number;
              readonly month: number;
              readonly year: number;
            };
            readonly first_name: string;
            readonly last_name: string;
            /** person_verification_param */
            readonly verification?: {
              /** person_verification_document_param */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The cardholder's name. This will be printed on cards issued to them. */
          readonly name: string;
          /** @description The cardholder's phone number. This will be transformed to [E.164](https://en.wikipedia.org/wiki/E.164) if it is not provided in that format already. */
          readonly phone_number?: string;
          /**
           * authorization_controls_param_v2
           * @description Spending rules that give you control over how your cardholders can make charges. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
            readonly spending_limits_currency?: string;
          };
          /**
           * @description Specifies whether to permit authorizations on this cardholder's cards. Defaults to `active`.
           * @enum {string}
           */
          readonly status?: "active" | "inactive";
          /**
           * @description One of `individual` or `company`.
           * @enum {string}
           */
          readonly type: "company" | "individual";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.cardholder"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Cardholder</code> object.</p> */
  readonly GetIssuingCardholdersCardholder: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly cardholder: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.cardholder"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingCardholdersCardholder: {
    readonly parameters: {
      readonly path: {
        readonly cardholder: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * billing_specs
           * @description The cardholder's billing address.
           */
          readonly billing?: {
            /** required_address */
            readonly address: {
              readonly city: string;
              readonly country: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code: string;
              readonly state?: string;
            };
          };
          /**
           * company_param
           * @description Additional information about a `company` cardholder.
           */
          readonly company?: {
            readonly tax_id?: string;
          };
          /** @description The cardholder's email address. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * individual_param
           * @description Additional information about an `individual` cardholder.
           */
          readonly individual?: {
            /** date_of_birth_specs */
            readonly dob?: {
              readonly day: number;
              readonly month: number;
              readonly year: number;
            };
            readonly first_name: string;
            readonly last_name: string;
            /** person_verification_param */
            readonly verification?: {
              /** person_verification_document_param */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The cardholder's phone number. */
          readonly phone_number?: string;
          /**
           * authorization_controls_param_v2
           * @description Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
            readonly spending_limits_currency?: string;
          };
          /**
           * @description Specifies whether to permit authorizations on this cardholder's cards.
           * @enum {string}
           */
          readonly status?: "active" | "inactive";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.cardholder"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingCards: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return cards belonging to the Cardholder with the provided ID. */
        readonly cardholder?: string;
        /** Only return cards that were issued during the given date interval. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Only return cards that have the given expiration month. */
        readonly exp_month?: number;
        /** Only return cards that have the given expiration year. */
        readonly exp_year?: number;
        /** Only return cards that have the given last four digits. */
        readonly last4?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return cards that have the given status. One of `active`, `inactive`, or `canceled`. */
        readonly status?: string;
        /** Only return cards that have the given type. One of `virtual` or `physical`. */
        readonly type?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["issuing.card"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates an Issuing <code>Card</code> object.</p> */
  readonly PostIssuingCards: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The [Cardholder](https://stripe.com/docs/api#issuing_cardholder_object) object with which the card will be associated. */
          readonly cardholder?: string;
          /** @description The currency for the card. This currently must be `usd`. */
          readonly currency: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The card this is meant to be a replacement for (if any). */
          readonly replacement_for?: string;
          /**
           * @description If `replacement_for` is specified, this should indicate why that card is being replaced.
           * @enum {string}
           */
          readonly replacement_reason?: "damaged" | "expired" | "lost" | "stolen";
          /**
           * shipping_specs
           * @description The address where the card will be shipped.
           */
          readonly shipping?: {
            /** required_address */
            readonly address: {
              readonly city: string;
              readonly country: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code: string;
              readonly state?: string;
            };
            readonly name: string;
            /** @enum {string} */
            readonly service?: "express" | "priority" | "standard";
            /** @enum {string} */
            readonly type?: "bulk" | "individual";
          };
          /**
           * authorization_controls_param
           * @description Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
          };
          /**
           * @description Whether authorizations can be approved on this card. Defaults to `inactive`.
           * @enum {string}
           */
          readonly status?: "active" | "inactive";
          /**
           * @description The type of card to issue. Possible values are `physical` or `virtual`.
           * @enum {string}
           */
          readonly type: "physical" | "virtual";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.card"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Card</code> object.</p> */
  readonly GetIssuingCardsCard: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly card: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.card"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingCardsCard: {
    readonly parameters: {
      readonly path: {
        readonly card: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * @description Reason why the `status` of this card is `canceled`.
           * @enum {string}
           */
          readonly cancellation_reason?: "lost" | "stolen";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /**
           * authorization_controls_param
           * @description Spending rules that give you some control over how your cards can be used. Refer to our [authorizations](https://stripe.com/docs/issuing/purchases/authorizations) documentation for more details.
           */
          readonly spending_controls?: {
            readonly allowed_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly blocked_categories?: readonly (
              | "ac_refrigeration_repair"
              | "accounting_bookkeeping_services"
              | "advertising_services"
              | "agricultural_cooperative"
              | "airlines_air_carriers"
              | "airports_flying_fields"
              | "ambulance_services"
              | "amusement_parks_carnivals"
              | "antique_reproductions"
              | "antique_shops"
              | "aquariums"
              | "architectural_surveying_services"
              | "art_dealers_and_galleries"
              | "artists_supply_and_craft_shops"
              | "auto_and_home_supply_stores"
              | "auto_body_repair_shops"
              | "auto_paint_shops"
              | "auto_service_shops"
              | "automated_cash_disburse"
              | "automated_fuel_dispensers"
              | "automobile_associations"
              | "automotive_parts_and_accessories_stores"
              | "automotive_tire_stores"
              | "bail_and_bond_payments"
              | "bakeries"
              | "bands_orchestras"
              | "barber_and_beauty_shops"
              | "betting_casino_gambling"
              | "bicycle_shops"
              | "billiard_pool_establishments"
              | "boat_dealers"
              | "boat_rentals_and_leases"
              | "book_stores"
              | "books_periodicals_and_newspapers"
              | "bowling_alleys"
              | "bus_lines"
              | "business_secretarial_schools"
              | "buying_shopping_services"
              | "cable_satellite_and_other_pay_television_and_radio"
              | "camera_and_photographic_supply_stores"
              | "candy_nut_and_confectionery_stores"
              | "car_and_truck_dealers_new_used"
              | "car_and_truck_dealers_used_only"
              | "car_rental_agencies"
              | "car_washes"
              | "carpentry_services"
              | "carpet_upholstery_cleaning"
              | "caterers"
              | "charitable_and_social_service_organizations_fundraising"
              | "chemicals_and_allied_products"
              | "child_care_services"
              | "childrens_and_infants_wear_stores"
              | "chiropodists_podiatrists"
              | "chiropractors"
              | "cigar_stores_and_stands"
              | "civic_social_fraternal_associations"
              | "cleaning_and_maintenance"
              | "clothing_rental"
              | "colleges_universities"
              | "commercial_equipment"
              | "commercial_footwear"
              | "commercial_photography_art_and_graphics"
              | "commuter_transport_and_ferries"
              | "computer_network_services"
              | "computer_programming"
              | "computer_repair"
              | "computer_software_stores"
              | "computers_peripherals_and_software"
              | "concrete_work_services"
              | "construction_materials"
              | "consulting_public_relations"
              | "correspondence_schools"
              | "cosmetic_stores"
              | "counseling_services"
              | "country_clubs"
              | "courier_services"
              | "court_costs"
              | "credit_reporting_agencies"
              | "cruise_lines"
              | "dairy_products_stores"
              | "dance_hall_studios_schools"
              | "dating_escort_services"
              | "dentists_orthodontists"
              | "department_stores"
              | "detective_agencies"
              | "digital_goods_applications"
              | "digital_goods_games"
              | "digital_goods_large_volume"
              | "digital_goods_media"
              | "direct_marketing_catalog_merchant"
              | "direct_marketing_combination_catalog_and_retail_merchant"
              | "direct_marketing_inbound_telemarketing"
              | "direct_marketing_insurance_services"
              | "direct_marketing_other"
              | "direct_marketing_outbound_telemarketing"
              | "direct_marketing_subscription"
              | "direct_marketing_travel"
              | "discount_stores"
              | "doctors"
              | "door_to_door_sales"
              | "drapery_window_covering_and_upholstery_stores"
              | "drinking_places"
              | "drug_stores_and_pharmacies"
              | "drugs_drug_proprietaries_and_druggist_sundries"
              | "dry_cleaners"
              | "durable_goods"
              | "duty_free_stores"
              | "eating_places_restaurants"
              | "educational_services"
              | "electric_razor_stores"
              | "electrical_parts_and_equipment"
              | "electrical_services"
              | "electronics_repair_shops"
              | "electronics_stores"
              | "elementary_secondary_schools"
              | "employment_temp_agencies"
              | "equipment_rental"
              | "exterminating_services"
              | "family_clothing_stores"
              | "fast_food_restaurants"
              | "financial_institutions"
              | "fines_government_administrative_entities"
              | "fireplace_fireplace_screens_and_accessories_stores"
              | "floor_covering_stores"
              | "florists"
              | "florists_supplies_nursery_stock_and_flowers"
              | "freezer_and_locker_meat_provisioners"
              | "fuel_dealers_non_automotive"
              | "funeral_services_crematories"
              | "furniture_home_furnishings_and_equipment_stores_except_appliances"
              | "furniture_repair_refinishing"
              | "furriers_and_fur_shops"
              | "general_services"
              | "gift_card_novelty_and_souvenir_shops"
              | "glass_paint_and_wallpaper_stores"
              | "glassware_crystal_stores"
              | "golf_courses_public"
              | "government_services"
              | "grocery_stores_supermarkets"
              | "hardware_equipment_and_supplies"
              | "hardware_stores"
              | "health_and_beauty_spas"
              | "hearing_aids_sales_and_supplies"
              | "heating_plumbing_a_c"
              | "hobby_toy_and_game_shops"
              | "home_supply_warehouse_stores"
              | "hospitals"
              | "hotels_motels_and_resorts"
              | "household_appliance_stores"
              | "industrial_supplies"
              | "information_retrieval_services"
              | "insurance_default"
              | "insurance_underwriting_premiums"
              | "intra_company_purchases"
              | "jewelry_stores_watches_clocks_and_silverware_stores"
              | "landscaping_services"
              | "laundries"
              | "laundry_cleaning_services"
              | "legal_services_attorneys"
              | "luggage_and_leather_goods_stores"
              | "lumber_building_materials_stores"
              | "manual_cash_disburse"
              | "marinas_service_and_supplies"
              | "masonry_stonework_and_plaster"
              | "massage_parlors"
              | "medical_and_dental_labs"
              | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
              | "medical_services"
              | "membership_organizations"
              | "mens_and_boys_clothing_and_accessories_stores"
              | "mens_womens_clothing_stores"
              | "metal_service_centers"
              | "miscellaneous"
              | "miscellaneous_apparel_and_accessory_shops"
              | "miscellaneous_auto_dealers"
              | "miscellaneous_business_services"
              | "miscellaneous_food_stores"
              | "miscellaneous_general_merchandise"
              | "miscellaneous_general_services"
              | "miscellaneous_home_furnishing_specialty_stores"
              | "miscellaneous_publishing_and_printing"
              | "miscellaneous_recreation_services"
              | "miscellaneous_repair_shops"
              | "miscellaneous_specialty_retail"
              | "mobile_home_dealers"
              | "motion_picture_theaters"
              | "motor_freight_carriers_and_trucking"
              | "motor_homes_dealers"
              | "motor_vehicle_supplies_and_new_parts"
              | "motorcycle_shops_and_dealers"
              | "motorcycle_shops_dealers"
              | "music_stores_musical_instruments_pianos_and_sheet_music"
              | "news_dealers_and_newsstands"
              | "non_fi_money_orders"
              | "non_fi_stored_value_card_purchase_load"
              | "nondurable_goods"
              | "nurseries_lawn_and_garden_supply_stores"
              | "nursing_personal_care"
              | "office_and_commercial_furniture"
              | "opticians_eyeglasses"
              | "optometrists_ophthalmologist"
              | "orthopedic_goods_prosthetic_devices"
              | "osteopaths"
              | "package_stores_beer_wine_and_liquor"
              | "paints_varnishes_and_supplies"
              | "parking_lots_garages"
              | "passenger_railways"
              | "pawn_shops"
              | "pet_shops_pet_food_and_supplies"
              | "petroleum_and_petroleum_products"
              | "photo_developing"
              | "photographic_photocopy_microfilm_equipment_and_supplies"
              | "photographic_studios"
              | "picture_video_production"
              | "piece_goods_notions_and_other_dry_goods"
              | "plumbing_heating_equipment_and_supplies"
              | "political_organizations"
              | "postal_services_government_only"
              | "precious_stones_and_metals_watches_and_jewelry"
              | "professional_services"
              | "public_warehousing_and_storage"
              | "quick_copy_repro_and_blueprint"
              | "railroads"
              | "real_estate_agents_and_managers_rentals"
              | "record_stores"
              | "recreational_vehicle_rentals"
              | "religious_goods_stores"
              | "religious_organizations"
              | "roofing_siding_sheet_metal"
              | "secretarial_support_services"
              | "security_brokers_dealers"
              | "service_stations"
              | "sewing_needlework_fabric_and_piece_goods_stores"
              | "shoe_repair_hat_cleaning"
              | "shoe_stores"
              | "small_appliance_repair"
              | "snowmobile_dealers"
              | "special_trade_services"
              | "specialty_cleaning"
              | "sporting_goods_stores"
              | "sporting_recreation_camps"
              | "sports_and_riding_apparel_stores"
              | "sports_clubs_fields"
              | "stamp_and_coin_stores"
              | "stationary_office_supplies_printing_and_writing_paper"
              | "stationery_stores_office_and_school_supply_stores"
              | "swimming_pools_sales"
              | "t_ui_travel_germany"
              | "tailors_alterations"
              | "tax_payments_government_agencies"
              | "tax_preparation_services"
              | "taxicabs_limousines"
              | "telecommunication_equipment_and_telephone_sales"
              | "telecommunication_services"
              | "telegraph_services"
              | "tent_and_awning_shops"
              | "testing_laboratories"
              | "theatrical_ticket_agencies"
              | "timeshares"
              | "tire_retreading_and_repair"
              | "tolls_bridge_fees"
              | "tourist_attractions_and_exhibits"
              | "towing_services"
              | "trailer_parks_campgrounds"
              | "transportation_services"
              | "travel_agencies_tour_operators"
              | "truck_stop_iteration"
              | "truck_utility_trailer_rentals"
              | "typesetting_plate_making_and_related_services"
              | "typewriter_stores"
              | "u_s_federal_government_agencies_or_departments"
              | "uniforms_commercial_clothing"
              | "used_merchandise_and_secondhand_stores"
              | "utilities"
              | "variety_stores"
              | "veterinary_services"
              | "video_amusement_game_supplies"
              | "video_game_arcades"
              | "video_tape_rental_stores"
              | "vocational_trade_schools"
              | "watch_jewelry_repair"
              | "welding_repair"
              | "wholesale_clubs"
              | "wig_and_toupee_stores"
              | "wires_money_orders"
              | "womens_accessory_and_specialty_shops"
              | "womens_ready_to_wear_stores"
              | "wrecking_and_salvage_yards"
            )[];
            readonly spending_limits?: readonly {
              readonly amount: number;
              readonly categories?: readonly (
                | "ac_refrigeration_repair"
                | "accounting_bookkeeping_services"
                | "advertising_services"
                | "agricultural_cooperative"
                | "airlines_air_carriers"
                | "airports_flying_fields"
                | "ambulance_services"
                | "amusement_parks_carnivals"
                | "antique_reproductions"
                | "antique_shops"
                | "aquariums"
                | "architectural_surveying_services"
                | "art_dealers_and_galleries"
                | "artists_supply_and_craft_shops"
                | "auto_and_home_supply_stores"
                | "auto_body_repair_shops"
                | "auto_paint_shops"
                | "auto_service_shops"
                | "automated_cash_disburse"
                | "automated_fuel_dispensers"
                | "automobile_associations"
                | "automotive_parts_and_accessories_stores"
                | "automotive_tire_stores"
                | "bail_and_bond_payments"
                | "bakeries"
                | "bands_orchestras"
                | "barber_and_beauty_shops"
                | "betting_casino_gambling"
                | "bicycle_shops"
                | "billiard_pool_establishments"
                | "boat_dealers"
                | "boat_rentals_and_leases"
                | "book_stores"
                | "books_periodicals_and_newspapers"
                | "bowling_alleys"
                | "bus_lines"
                | "business_secretarial_schools"
                | "buying_shopping_services"
                | "cable_satellite_and_other_pay_television_and_radio"
                | "camera_and_photographic_supply_stores"
                | "candy_nut_and_confectionery_stores"
                | "car_and_truck_dealers_new_used"
                | "car_and_truck_dealers_used_only"
                | "car_rental_agencies"
                | "car_washes"
                | "carpentry_services"
                | "carpet_upholstery_cleaning"
                | "caterers"
                | "charitable_and_social_service_organizations_fundraising"
                | "chemicals_and_allied_products"
                | "child_care_services"
                | "childrens_and_infants_wear_stores"
                | "chiropodists_podiatrists"
                | "chiropractors"
                | "cigar_stores_and_stands"
                | "civic_social_fraternal_associations"
                | "cleaning_and_maintenance"
                | "clothing_rental"
                | "colleges_universities"
                | "commercial_equipment"
                | "commercial_footwear"
                | "commercial_photography_art_and_graphics"
                | "commuter_transport_and_ferries"
                | "computer_network_services"
                | "computer_programming"
                | "computer_repair"
                | "computer_software_stores"
                | "computers_peripherals_and_software"
                | "concrete_work_services"
                | "construction_materials"
                | "consulting_public_relations"
                | "correspondence_schools"
                | "cosmetic_stores"
                | "counseling_services"
                | "country_clubs"
                | "courier_services"
                | "court_costs"
                | "credit_reporting_agencies"
                | "cruise_lines"
                | "dairy_products_stores"
                | "dance_hall_studios_schools"
                | "dating_escort_services"
                | "dentists_orthodontists"
                | "department_stores"
                | "detective_agencies"
                | "digital_goods_applications"
                | "digital_goods_games"
                | "digital_goods_large_volume"
                | "digital_goods_media"
                | "direct_marketing_catalog_merchant"
                | "direct_marketing_combination_catalog_and_retail_merchant"
                | "direct_marketing_inbound_telemarketing"
                | "direct_marketing_insurance_services"
                | "direct_marketing_other"
                | "direct_marketing_outbound_telemarketing"
                | "direct_marketing_subscription"
                | "direct_marketing_travel"
                | "discount_stores"
                | "doctors"
                | "door_to_door_sales"
                | "drapery_window_covering_and_upholstery_stores"
                | "drinking_places"
                | "drug_stores_and_pharmacies"
                | "drugs_drug_proprietaries_and_druggist_sundries"
                | "dry_cleaners"
                | "durable_goods"
                | "duty_free_stores"
                | "eating_places_restaurants"
                | "educational_services"
                | "electric_razor_stores"
                | "electrical_parts_and_equipment"
                | "electrical_services"
                | "electronics_repair_shops"
                | "electronics_stores"
                | "elementary_secondary_schools"
                | "employment_temp_agencies"
                | "equipment_rental"
                | "exterminating_services"
                | "family_clothing_stores"
                | "fast_food_restaurants"
                | "financial_institutions"
                | "fines_government_administrative_entities"
                | "fireplace_fireplace_screens_and_accessories_stores"
                | "floor_covering_stores"
                | "florists"
                | "florists_supplies_nursery_stock_and_flowers"
                | "freezer_and_locker_meat_provisioners"
                | "fuel_dealers_non_automotive"
                | "funeral_services_crematories"
                | "furniture_home_furnishings_and_equipment_stores_except_appliances"
                | "furniture_repair_refinishing"
                | "furriers_and_fur_shops"
                | "general_services"
                | "gift_card_novelty_and_souvenir_shops"
                | "glass_paint_and_wallpaper_stores"
                | "glassware_crystal_stores"
                | "golf_courses_public"
                | "government_services"
                | "grocery_stores_supermarkets"
                | "hardware_equipment_and_supplies"
                | "hardware_stores"
                | "health_and_beauty_spas"
                | "hearing_aids_sales_and_supplies"
                | "heating_plumbing_a_c"
                | "hobby_toy_and_game_shops"
                | "home_supply_warehouse_stores"
                | "hospitals"
                | "hotels_motels_and_resorts"
                | "household_appliance_stores"
                | "industrial_supplies"
                | "information_retrieval_services"
                | "insurance_default"
                | "insurance_underwriting_premiums"
                | "intra_company_purchases"
                | "jewelry_stores_watches_clocks_and_silverware_stores"
                | "landscaping_services"
                | "laundries"
                | "laundry_cleaning_services"
                | "legal_services_attorneys"
                | "luggage_and_leather_goods_stores"
                | "lumber_building_materials_stores"
                | "manual_cash_disburse"
                | "marinas_service_and_supplies"
                | "masonry_stonework_and_plaster"
                | "massage_parlors"
                | "medical_and_dental_labs"
                | "medical_dental_ophthalmic_and_hospital_equipment_and_supplies"
                | "medical_services"
                | "membership_organizations"
                | "mens_and_boys_clothing_and_accessories_stores"
                | "mens_womens_clothing_stores"
                | "metal_service_centers"
                | "miscellaneous"
                | "miscellaneous_apparel_and_accessory_shops"
                | "miscellaneous_auto_dealers"
                | "miscellaneous_business_services"
                | "miscellaneous_food_stores"
                | "miscellaneous_general_merchandise"
                | "miscellaneous_general_services"
                | "miscellaneous_home_furnishing_specialty_stores"
                | "miscellaneous_publishing_and_printing"
                | "miscellaneous_recreation_services"
                | "miscellaneous_repair_shops"
                | "miscellaneous_specialty_retail"
                | "mobile_home_dealers"
                | "motion_picture_theaters"
                | "motor_freight_carriers_and_trucking"
                | "motor_homes_dealers"
                | "motor_vehicle_supplies_and_new_parts"
                | "motorcycle_shops_and_dealers"
                | "motorcycle_shops_dealers"
                | "music_stores_musical_instruments_pianos_and_sheet_music"
                | "news_dealers_and_newsstands"
                | "non_fi_money_orders"
                | "non_fi_stored_value_card_purchase_load"
                | "nondurable_goods"
                | "nurseries_lawn_and_garden_supply_stores"
                | "nursing_personal_care"
                | "office_and_commercial_furniture"
                | "opticians_eyeglasses"
                | "optometrists_ophthalmologist"
                | "orthopedic_goods_prosthetic_devices"
                | "osteopaths"
                | "package_stores_beer_wine_and_liquor"
                | "paints_varnishes_and_supplies"
                | "parking_lots_garages"
                | "passenger_railways"
                | "pawn_shops"
                | "pet_shops_pet_food_and_supplies"
                | "petroleum_and_petroleum_products"
                | "photo_developing"
                | "photographic_photocopy_microfilm_equipment_and_supplies"
                | "photographic_studios"
                | "picture_video_production"
                | "piece_goods_notions_and_other_dry_goods"
                | "plumbing_heating_equipment_and_supplies"
                | "political_organizations"
                | "postal_services_government_only"
                | "precious_stones_and_metals_watches_and_jewelry"
                | "professional_services"
                | "public_warehousing_and_storage"
                | "quick_copy_repro_and_blueprint"
                | "railroads"
                | "real_estate_agents_and_managers_rentals"
                | "record_stores"
                | "recreational_vehicle_rentals"
                | "religious_goods_stores"
                | "religious_organizations"
                | "roofing_siding_sheet_metal"
                | "secretarial_support_services"
                | "security_brokers_dealers"
                | "service_stations"
                | "sewing_needlework_fabric_and_piece_goods_stores"
                | "shoe_repair_hat_cleaning"
                | "shoe_stores"
                | "small_appliance_repair"
                | "snowmobile_dealers"
                | "special_trade_services"
                | "specialty_cleaning"
                | "sporting_goods_stores"
                | "sporting_recreation_camps"
                | "sports_and_riding_apparel_stores"
                | "sports_clubs_fields"
                | "stamp_and_coin_stores"
                | "stationary_office_supplies_printing_and_writing_paper"
                | "stationery_stores_office_and_school_supply_stores"
                | "swimming_pools_sales"
                | "t_ui_travel_germany"
                | "tailors_alterations"
                | "tax_payments_government_agencies"
                | "tax_preparation_services"
                | "taxicabs_limousines"
                | "telecommunication_equipment_and_telephone_sales"
                | "telecommunication_services"
                | "telegraph_services"
                | "tent_and_awning_shops"
                | "testing_laboratories"
                | "theatrical_ticket_agencies"
                | "timeshares"
                | "tire_retreading_and_repair"
                | "tolls_bridge_fees"
                | "tourist_attractions_and_exhibits"
                | "towing_services"
                | "trailer_parks_campgrounds"
                | "transportation_services"
                | "travel_agencies_tour_operators"
                | "truck_stop_iteration"
                | "truck_utility_trailer_rentals"
                | "typesetting_plate_making_and_related_services"
                | "typewriter_stores"
                | "u_s_federal_government_agencies_or_departments"
                | "uniforms_commercial_clothing"
                | "used_merchandise_and_secondhand_stores"
                | "utilities"
                | "variety_stores"
                | "veterinary_services"
                | "video_amusement_game_supplies"
                | "video_game_arcades"
                | "video_tape_rental_stores"
                | "vocational_trade_schools"
                | "watch_jewelry_repair"
                | "welding_repair"
                | "wholesale_clubs"
                | "wig_and_toupee_stores"
                | "wires_money_orders"
                | "womens_accessory_and_specialty_shops"
                | "womens_ready_to_wear_stores"
                | "wrecking_and_salvage_yards"
              )[];
              /** @enum {string} */
              readonly interval: "all_time" | "daily" | "monthly" | "per_authorization" | "weekly" | "yearly";
            }[];
          };
          /**
           * @description Dictates whether authorizations can be approved on this card. If this card is being canceled because it was lost or stolen, this information should be provided as `cancellation_reason`.
           * @enum {string}
           */
          readonly status?: "active" | "canceled" | "inactive";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.card"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingDisputes: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["issuing.dispute"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates an Issuing <code>Dispute</code> object.</p> */
  readonly PostIssuingDisputes: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Dispute</code> object.</p> */
  readonly GetIssuingDisputesDispute: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly dispute: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingDisputesDispute: {
    readonly parameters: {
      readonly path: {
        readonly dispute: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.dispute"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Settlement</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingSettlements: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return issuing settlements that were created during the given date interval. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["issuing.settlement"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Settlement</code> object.</p> */
  readonly GetIssuingSettlementsSettlement: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly settlement: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.settlement"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingSettlementsSettlement: {
    readonly parameters: {
      readonly path: {
        readonly settlement: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.settlement"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetIssuingTransactions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return transactions that belong to the given card. */
        readonly card?: string;
        /** Only return transactions that belong to the given cardholder. */
        readonly cardholder?: string;
        /** Only return transactions that were created during the given date interval. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["issuing.transaction"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an Issuing <code>Transaction</code> object.</p> */
  readonly GetIssuingTransactionsTransaction: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly transaction: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostIssuingTransactionsTransaction: {
    readonly parameters: {
      readonly path: {
        readonly transaction: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["issuing.transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a Mandate object.</p> */
  readonly GetMandatesMandate: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly mandate: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["mandate"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your order returns. The returns are returned sorted by creation date, with the most recently created return appearing first.</p> */
  readonly GetOrderReturns: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Date this return was created. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The order to retrieve returns for. */
        readonly order?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["order_return"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing order return. Supply the unique order ID from either an order return creation request or the order return list, and Stripe will return the corresponding order information.</p> */
  readonly GetOrderReturnsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["order_return"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your orders. The orders are returned sorted by creation date, with the most recently created orders appearing first.</p> */
  readonly GetOrders: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Date this order was created. */
        readonly created?: number;
        /** Only return orders for the given customer. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Only return orders with the given IDs. */
        readonly ids?: readonly unknown[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return orders that have the given status. One of `created`, `paid`, `fulfilled`, or `refunded`. */
        readonly status?: string;
        /** Filter orders based on when they were paid, fulfilled, canceled, or returned. */
        readonly status_transitions?: string;
        /** Only return orders with the given upstream order IDs. */
        readonly upstream_ids?: readonly unknown[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["order"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new order object.</p> */
  readonly PostOrders: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
          readonly coupon?: string;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description The ID of an existing customer to use for this order. If provided, the customer email and shipping address will be used to create the order. Subsequently, the customer will also be charged to pay the order. If `email` or `shipping` are also provided, they will override the values retrieved from the customer object. */
          readonly customer?: string;
          /** @description The email address of the customer placing the order. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description List of items constituting the order. An order can have up to 25 items. */
          readonly items?: readonly {
            readonly amount?: number;
            readonly currency?: string;
            readonly description?: string;
            readonly parent?: string;
            readonly quantity?: number;
            /** @enum {string} */
            readonly type?: "discount" | "shipping" | "sku" | "tax";
          }[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /**
           * customer_shipping
           * @description Shipping address for the order. Required if any of the SKUs are for products that have `shippable` set to true.
           */
          readonly shipping?: {
            /** address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly name: string;
            readonly phone?: string;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["order"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing order. Supply the unique order ID from either an order creation request or the order list, and Stripe will return the corresponding order information.</p> */
  readonly GetOrdersId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["order"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specific order by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostOrdersId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A coupon code that represents a discount to be applied to this order. Must be one-time duration and in same currency as the order. An order can have multiple coupons. */
          readonly coupon?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The shipping method to select for fulfilling this order. If specified, must be one of the `id`s of a shipping method in the `shipping_methods` array. If specified, will overwrite the existing selected shipping method, updating `items` as necessary. */
          readonly selected_shipping_method?: string;
          /**
           * shipping_tracking_params
           * @description Tracking information once the order has been fulfilled.
           */
          readonly shipping?: {
            readonly carrier: string;
            readonly tracking_number: string;
          };
          /**
           * @description Current order status. One of `created`, `paid`, `canceled`, `fulfilled`, or `returned`. More detail in the [Orders Guide](https://stripe.com/docs/orders/guide#understanding-order-statuses).
           * @enum {string}
           */
          readonly status?: "canceled" | "created" | "fulfilled" | "paid" | "returned";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["order"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Pay an order by providing a <code>source</code> to create a payment.</p> */
  readonly PostOrdersIdPay: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A fee in %s that will be applied to the order and transferred to the application owner's Stripe account. The request must be made with an OAuth key or the `Stripe-Account` header in order to take an application fee. For more information, see the application fees [documentation](https://stripe.com/docs/connect/direct-charges#collecting-fees). */
          readonly application_fee?: number;
          /** @description The ID of an existing customer that will be charged for this order. If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified customer will be charged instead of the one attached to the order. */
          readonly customer?: string;
          /** @description The email address of the customer placing the order. Required if not previously specified for the order. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description A [Token](https://stripe.com/docs/api#tokens)'s or a [Source](https://stripe.com/docs/api#sources)'s ID, as returned by [Elements](https://stripe.com/docs/elements). If no customer was attached to the order at creation, either `source` or `customer` is required. Otherwise, the specified source will be charged intead of the customer attached to the order. */
          readonly source?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["order"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Return all or part of an order. The order must have a status of <code>paid</code> or <code>fulfilled</code> before it can be returned. Once all items have been returned, the order will become <code>canceled</code> or <code>returned</code> depending on which status the order started in.</p> */
  readonly PostOrdersIdReturns: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description List of items to return. */
          readonly items?: readonly {
            readonly amount?: number;
            readonly description?: string;
            readonly parent?: string;
            readonly quantity?: number;
            /** @enum {string} */
            readonly type?: "discount" | "shipping" | "sku" | "tax";
          }[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["order_return"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of PaymentIntents.</p> */
  readonly GetPaymentIntents: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?: number;
        /** Only return PaymentIntents for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["payment_intent"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Creates a PaymentIntent object.</p>
   *
   * <p>After the PaymentIntent is created, attach a payment method and <a href="/docs/api/payment_intents/confirm">confirm</a>
   * to continue the payment. You can read more about the different payment flows
   * available via the Payment Intents API <a href="/docs/payments/payment-intents">here</a>.</p>
   *
   * <p>When <code>confirm=true</code> is used during creation, it is equivalent to creating
   * and confirming the PaymentIntent in the same call. You may use any parameters
   * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when <code>confirm=true</code>
   * is supplied.</p>
   */
  readonly PostPaymentIntents: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          readonly amount: number;
          /**
           * @description The amount of the application fee (if any) that will be applied to the
           * payment and transferred to the application owner's Stripe account. For
           * more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly application_fee_amount?: number;
          /**
           * @description Controls when the funds will be captured from the customer's account.
           * @enum {string}
           */
          readonly capture_method?: "automatic" | "manual";
          /** @description Set to `true` to attempt to [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent immediately. This parameter defaults to `false`. When creating and confirming a PaymentIntent at the same time, parameters available in the [confirm](https://stripe.com/docs/api/payment_intents/confirm) API may also be provided. */
          readonly confirm?: boolean;
          /** @enum {string} */
          readonly confirmation_method?: "automatic" | "manual";
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /**
           * @description ID of the Customer this PaymentIntent belongs to, if one exists.
           *
           * Payment methods attached to other Customers cannot be used with this PaymentIntent.
           *
           * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly error_on_requires_action?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description ID of the mandate to be used for this payment. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly mandate?: string;
          /**
           * secret_key_param
           * @description This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm).
           */
          readonly mandate_data?: {
            /** customer_acceptance_param */
            readonly customer_acceptance: {
              readonly accepted_at?: number;
              /** offline_param */
              readonly offline?: { readonly [key: string]: unknown };
              /** online_param */
              readonly online?: {
                readonly ip_address: string;
                readonly user_agent: string;
              };
              /** @enum {string} */
              readonly type: "offline" | "online";
            };
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly off_session?: unknown;
          /** @description The Stripe account ID for which these funds are intended. For details, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts). */
          readonly on_behalf_of?: string;
          /**
           * @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent.
           *
           * If this parameter is omitted with `confirm=true`, `customer.default_source` will be attached as this PaymentIntent's payment instrument to improve the migration experience for users of the Charges API. We recommend that you explicitly provide the `payment_method` going forward.
           */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this PaymentIntent.
           */
          readonly payment_method_options?: {
            readonly card?: unknown;
          };
          /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. If this is not provided, defaults to ["card"]. */
          readonly payment_method_types?: readonly string[];
          /** @description Email address that the receipt for the resulting payment will be sent to. */
          readonly receipt_email?: string;
          /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-confirm). */
          readonly return_url?: string;
          /**
           * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           * @enum {string}
           */
          readonly setup_future_usage?: "off_session" | "on_session";
          /**
           * shipping
           * @description Shipping information for this PaymentIntent.
           */
          readonly shipping?: {
            /** address */
            readonly address: {
              readonly city?: string;
              readonly country?: string;
              readonly line1: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly carrier?: string;
            readonly name: string;
            readonly phone?: string;
            readonly tracking_number?: string;
          };
          /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_creation_params
           * @description The parameters used to automatically create a Transfer when the payment succeeds.
           * For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly transfer_data?: {
            readonly amount?: number;
            readonly destination: string;
          };
          /** @description A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          readonly transfer_group?: string;
          /** @description Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
          readonly use_stripe_sdk?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#payment_intent_object">payment intent</a> object reference for more details.</p>
   */
  readonly GetPaymentIntentsIntent: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The client secret of the PaymentIntent. Required if a publishable key is used to retrieve the source. */
        readonly client_secret?: string;
      };
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates properties on a PaymentIntent object without confirming.</p>
   *
   * <p>Depending on which properties you update, you may need to confirm the
   * PaymentIntent again. For example, updating the <code>payment_method</code> will
   * always require you to confirm the PaymentIntent again. If you prefer to
   * update and confirm at the same time, we recommend updating properties via
   * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
   */
  readonly PostPaymentIntentsIntent: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99). */
          readonly amount?: number;
          /** @description The amount of the application fee (if any) for the resulting payment. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          readonly application_fee_amount?: unknown;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /**
           * @description ID of the Customer this PaymentIntent belongs to, if one exists.
           *
           * Payment methods attached to other Customers cannot be used with this PaymentIntent.
           *
           * If present in combination with [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage), this PaymentIntent's payment method will be attached to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this PaymentIntent.
           */
          readonly payment_method_options?: {
            readonly card?: unknown;
          };
          /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
          readonly payment_method_types?: readonly string[];
          /** @description Email address that the receipt for the resulting payment will be sent to. */
          readonly receipt_email?: string;
          /**
           * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           *
           * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
           * @enum {string}
           */
          readonly setup_future_usage?: "" | "off_session" | "on_session";
          /** @description Shipping information for this PaymentIntent. */
          readonly shipping?: unknown;
          /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_update_params
           * @description The parameters used to automatically create a Transfer when the payment succeeds. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly transfer_data?: {
            readonly amount?: number;
          };
          /** @description A string that identifies the resulting payment as part of a group. `transfer_group` may only be provided if it has not been set. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details. */
          readonly transfer_group?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>A PaymentIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
   *
   * <p>Once canceled, no additional charges will be made by the PaymentIntent and any operations on the PaymentIntent will fail with an error. For PaymentIntents with <code>status='requires_capture'</code>, the remaining <code>amount_capturable</code> will automatically be refunded.</p>
   */
  readonly PostPaymentIntentsIntentCancel: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * @description Reason for canceling this PaymentIntent. Possible values are `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`
           * @enum {string}
           */
          readonly cancellation_reason?: "abandoned" | "duplicate" | "fraudulent" | "requested_by_customer";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is <code>requires_capture</code>.</p>
   *
   * <p>Uncaptured PaymentIntents will be canceled exactly seven days after they are created.</p>
   *
   * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and capture</a>.</p>
   */
  readonly PostPaymentIntentsIntentCapture: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The amount to capture from the PaymentIntent, which must be less than or equal to the original amount. Any additional amount will be automatically refunded. Defaults to the full `amount_capturable` if not provided. */
          readonly amount_to_capture?: number;
          /**
           * @description The amount of the application fee (if any) that will be applied to the
           * payment and transferred to the application owner's Stripe account. For
           * more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly application_fee_amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description For non-card charges, you can use this value as the complete description that appears on your customers’ statements. Must contain at least one letter, maximum 22 characters. */
          readonly statement_descriptor?: string;
          /** @description Provides information about a card payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters for the concatenated descriptor. */
          readonly statement_descriptor_suffix?: string;
          /**
           * transfer_data_update_params
           * @description The parameters used to automatically create a Transfer when the payment
           * is captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
           */
          readonly transfer_data?: {
            readonly amount?: number;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Confirm that your customer intends to pay with current or provided
   * payment method. Upon confirmation, the PaymentIntent will attempt to initiate
   * a payment.</p>
   *
   * <p>If the selected payment method requires additional authentication steps, the
   * PaymentIntent will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If payment fails,
   * the PaymentIntent will transition to the <code>requires_payment_method</code> status. If
   * payment succeeds, the PaymentIntent will transition to the <code>succeeded</code>
   * status (or <code>requires_capture</code>, if <code>capture_method</code> is set to <code>manual</code>).</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>automatic</code>, payment may be attempted
   * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
   * and the PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
   * After <code>next_action</code>s are handled by the client, no additional
   * confirmation is required to complete the payment.</p>
   *
   * <p>If the <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
   * initiated using a secret key.
   * If any actions are required for the payment, the PaymentIntent will
   * return to the <code>requires_confirmation</code> state
   * after those actions are completed. Your server needs to then
   * explicitly re-confirm the PaymentIntent to initiate the next payment
   * attempt. Read the <a href="/docs/payments/payment-intents/web-manual">expanded documentation</a>
   * to learn more about manual confirmation.</p>
   */
  readonly PostPaymentIntentsIntentConfirm: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The client secret of the PaymentIntent. */
          readonly client_secret?: string;
          /** @description Set to `true` to fail the payment attempt if the PaymentIntent transitions into `requires_action`. This parameter is intended for simpler integrations that do not handle customer actions, like [saving cards without authentication](https://stripe.com/docs/payments/save-card-without-authentication). */
          readonly error_on_requires_action?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description ID of the mandate to be used for this payment. */
          readonly mandate?: string;
          /**
           * secret_key_param
           * @description This hash contains details about the Mandate to create
           */
          readonly mandate_data?: {
            /** customer_acceptance_param */
            readonly customer_acceptance: {
              readonly accepted_at?: number;
              /** offline_param */
              readonly offline?: { readonly [key: string]: unknown };
              /** online_param */
              readonly online?: {
                readonly ip_address: string;
                readonly user_agent: string;
              };
              /** @enum {string} */
              readonly type: "offline" | "online";
            };
          };
          /** @description Set to `true` to indicate that the customer is not in your checkout flow during this payment attempt, and therefore is unable to authenticate. This parameter is intended for scenarios where you collect card details and [charge them later](https://stripe.com/docs/payments/cards/charging-saved-cards). */
          readonly off_session?: unknown;
          /** @description ID of the payment method (a PaymentMethod, Card, or [compatible Source](https://stripe.com/docs/payments/payment-methods#compatibility) object) to attach to this PaymentIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this PaymentIntent.
           */
          readonly payment_method_options?: {
            readonly card?: unknown;
          };
          /** @description The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. */
          readonly payment_method_types?: readonly string[];
          /** @description Email address that the receipt for the resulting payment will be sent to. */
          readonly receipt_email?: string;
          /**
           * @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
           * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
           * This parameter is only used for cards and other redirect-based payment methods.
           */
          readonly return_url?: string;
          /**
           * @description Indicates that you intend to make future payments with this PaymentIntent's payment method.
           *
           * Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.
           *
           * When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).
           *
           * If `setup_future_usage` is already set and you are performing a request using a publishable key, you may only update the value from `on_session` to `off_session`.
           * @enum {string}
           */
          readonly setup_future_usage?: "" | "off_session" | "on_session";
          /** @description Shipping information for this PaymentIntent. */
          readonly shipping?: unknown;
          /** @description Set to `true` only when using manual confirmation and the iOS or Android SDKs to handle additional authentication steps. */
          readonly use_stripe_sdk?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of PaymentMethods for a given Customer</p> */
  readonly GetPaymentMethods: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The ID of the customer whose PaymentMethods will be retrieved. */
        readonly customer: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** A required filter on the list, based on the object `type` field. */
        readonly type: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["payment_method"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js reference</a> to learn how to create PaymentMethods via Stripe.js.</p> */
  readonly PostPaymentMethods: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * param
           * @description If this is an `au_becs_debit` PaymentMethod, this hash contains details about the bank account.
           */
          readonly au_becs_debit?: {
            readonly account_number: string;
            readonly bsb_number: string;
          };
          /**
           * billing_details_inner_params
           * @description Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
           */
          readonly billing_details?: {
            /** billing_details_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
          /** @description If this is a `card` PaymentMethod, this hash contains the user's card details. For backwards compatibility, you can alternatively provide a Stripe token (e.g., for Apple Pay, Amex Express Checkout, or legacy Checkout) into the card hash with format `card: {token: "tok_visa"}`. When creating with a card number, you must meet the requirements for [PCI compliance](https://stripe.com/docs/security#validating-pci-compliance). We strongly recommend using Stripe.js instead of interacting with this API directly. */
          readonly card?: { readonly [key: string]: unknown };
          /** @description The `Customer` to whom the original PaymentMethod is attached. */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * param
           * @description If this is an `fpx` PaymentMethod, this hash contains details about the FPX payment method.
           */
          readonly fpx?: {
            /** @enum {string} */
            readonly bank:
              | "affin_bank"
              | "alliance_bank"
              | "ambank"
              | "bank_islam"
              | "bank_muamalat"
              | "bank_rakyat"
              | "bsn"
              | "cimb"
              | "deutsche_bank"
              | "hong_leong_bank"
              | "hsbc"
              | "kfh"
              | "maybank2e"
              | "maybank2u"
              | "ocbc"
              | "pb_enterprise"
              | "public_bank"
              | "rhb"
              | "standard_chartered"
              | "uob";
          };
          /**
           * param
           * @description If this is an `ideal` PaymentMethod, this hash contains details about the iDEAL payment method.
           */
          readonly ideal?: {
            /** @enum {string} */
            readonly bank?:
              | "abn_amro"
              | "asn_bank"
              | "bunq"
              | "handelsbanken"
              | "ing"
              | "knab"
              | "moneyou"
              | "rabobank"
              | "regiobank"
              | "sns_bank"
              | "triodos_bank"
              | "van_lanschot";
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The PaymentMethod to share. */
          readonly payment_method?: string;
          /**
           * param
           * @description If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
           */
          readonly sepa_debit?: {
            readonly iban: string;
          };
          /**
           * @description The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type. Required unless `payment_method` is specified (see the [Cloning PaymentMethods](https://stripe.com/docs/payments/payment-methods/connect#cloning-payment-methods) guide)
           * @enum {string}
           */
          readonly type?: "au_becs_debit" | "card" | "fpx" | "ideal" | "sepa_debit";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_method"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a PaymentMethod object.</p> */
  readonly GetPaymentMethodsPaymentMethod: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly payment_method: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_method"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p> */
  readonly PostPaymentMethodsPaymentMethod: {
    readonly parameters: {
      readonly path: {
        readonly payment_method: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * billing_details_inner_params
           * @description Billing information associated with the PaymentMethod that may be used or required by particular types of payment methods.
           */
          readonly billing_details?: {
            /** billing_details_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
          /**
           * update_api_param
           * @description If this is a `card` PaymentMethod, this hash contains the user's card details.
           */
          readonly card?: {
            readonly exp_month?: number;
            readonly exp_year?: number;
          };
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /**
           * update_param
           * @description If this is a `sepa_debit` PaymentMethod, this hash contains details about the SEPA debit bank account.
           */
          readonly sepa_debit?: { readonly [key: string]: unknown };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_method"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Attaches a PaymentMethod object to a Customer.</p>
   *
   * <p>To attach a new PaymentMethod to a customer for future payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
   * or a PaymentIntent with <a href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
   * These approaches will perform any necessary steps to ensure that the PaymentMethod can be used in a future payment. Using the
   * <code>/v1/payment_methods/:id/attach</code> endpoint does not ensure that future payments can be made with the attached PaymentMethod.
   * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future payments</a> for more information about setting up future payments.</p>
   *
   * <p>To use this PaymentMethod as the default for invoice or subscription payments,
   * set <a href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
   * on the Customer to the PaymentMethod’s ID.</p>
   */
  readonly PostPaymentMethodsPaymentMethodAttach: {
    readonly parameters: {
      readonly path: {
        readonly payment_method: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The ID of the customer to which to attach the PaymentMethod. */
          readonly customer: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_method"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Detaches a PaymentMethod object from a Customer.</p> */
  readonly PostPaymentMethodsPaymentMethodDetach: {
    readonly parameters: {
      readonly path: {
        readonly payment_method: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payment_method"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of existing payouts sent to third-party bank accounts or that Stripe has sent you. The payouts are returned in sorted order, with the most recently created payouts appearing first.</p> */
  readonly GetPayouts: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly arrival_date?: number;
        readonly created?: number;
        /** The ID of an external account - only return payouts sent to this external account. */
        readonly destination?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return payouts that have the given status: `pending`, `paid`, `failed`, or `canceled`. */
        readonly status?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["payout"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>To send funds to your own bank account, you create a new payout object. Your <a href="#balance">Stripe balance</a> must be able to cover the payout amount, or you’ll receive an “Insufficient Funds” error.</p>
   *
   * <p>If your API key is in test mode, money won’t actually be sent, though everything else will occur as if in live mode.</p>
   *
   * <p>If you are creating a manual payout on a Stripe account that uses multiple payment source types, you’ll need to specify the source type balance that the payout should draw from. The <a href="#balance_object">balance object</a> details available and pending amounts by source type.</p>
   */
  readonly PostPayouts: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A positive integer in cents representing how much to payout. */
          readonly amount: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description The ID of a bank account or a card to send the payout to. If no destination is supplied, the default external account for the specified currency will be used. */
          readonly destination?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /**
           * @description The method used to send this payout, which can be `standard` or `instant`. `instant` is only supported for payouts to debit cards. (See [Instant payouts for marketplaces for more information](https://stripe.com/blog/instant-payouts-for-marketplaces).)
           * @enum {string}
           */
          readonly method?: "instant" | "standard";
          /**
           * @description The balance type of your Stripe balance to draw this payout from. Balances for different payment sources are kept separately. You can find the amounts with the balances API. One of `bank_account`, `card`, or `fpx`.
           * @enum {string}
           */
          readonly source_type?: "bank_account" | "card" | "fpx";
          /** @description A string to be displayed on the recipient's bank or card statement. This may be at most 22 characters. Attempting to use a `statement_descriptor` longer than 22 characters will return an error. Note: Most banks will truncate this information and/or display it inconsistently. Some may not display it at all. */
          readonly statement_descriptor?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payout"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the payout list, and Stripe will return the corresponding payout information.</p> */
  readonly GetPayoutsPayout: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly payout: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payout"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified payout by setting the values of the parameters passed. Any parameters not provided will be left unchanged. This request accepts only the metadata as arguments.</p> */
  readonly PostPayoutsPayout: {
    readonly parameters: {
      readonly path: {
        readonly payout: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payout"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>A previously created payout can be canceled if it has not yet been paid out. Funds will be refunded to your available balance. You may not cancel automatic Stripe payouts.</p> */
  readonly PostPayoutsPayoutCancel: {
    readonly parameters: {
      readonly path: {
        readonly payout: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["payout"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your plans.</p> */
  readonly GetPlans: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return plans that are active or inactive (e.g., pass `false` to list all inactive plans). */
        readonly active?: boolean;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return plans for the given product. */
        readonly product?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["plan"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can create plans using the API, or in the Stripe <a href="https://dashboard.stripe.com/subscriptions/products">Dashboard</a>.</p> */
  readonly PostPlans: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Whether the plan is currently available for new subscriptions. Defaults to `true`. */
          readonly active?: boolean;
          /**
           * @description Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.
           * @enum {string}
           */
          readonly aggregate_usage?: "last_during_period" | "last_ever" | "max" | "sum";
          /** @description A positive integer in %s (or 0 for a free plan) representing how much to charge on a recurring basis. */
          readonly amount?: number;
          /** @description Same as `amount`, but accepts a decimal value with at most 12 decimal places. Only one of `amount` and `amount_decimal` can be set. */
          readonly amount_decimal?: string;
          /**
           * @description Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
           * @enum {string}
           */
          readonly billing_scheme?: "per_unit" | "tiered";
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description An identifier randomly generated by Stripe. Used to identify this plan when subscribing a customer. You can optionally override this ID, but the ID must be unique across all plans in your Stripe account. You can, however, use the same plan ID in both live and test modes. */
          readonly id?: string;
          /**
           * @description Specifies billing frequency. Either `day`, `week`, `month` or `year`.
           * @enum {string}
           */
          readonly interval: "day" | "month" | "week" | "year";
          /** @description The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). */
          readonly interval_count?: number;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A brief description of the plan, hidden from customers. */
          readonly nickname?: string;
          /**
           * inline_product_params
           * @description The product whose pricing the created plan will represent. This can either be the ID of an existing product, or a dictionary containing fields used to create a [service product](https://stripe.com/docs/api#product_object-type).
           */
          readonly product?: {
            readonly active?: boolean;
            readonly id?: string;
            readonly metadata?: { readonly [key: string]: unknown };
            readonly name: string;
            readonly statement_descriptor?: string;
            readonly unit_label?: string;
          };
          /** @description Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`. */
          readonly tiers?: readonly {
            readonly flat_amount?: number;
            readonly flat_amount_decimal?: string;
            readonly unit_amount?: number;
            readonly unit_amount_decimal?: string;
            readonly up_to: unknown;
          }[];
          /**
           * @description Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.
           * @enum {string}
           */
          readonly tiers_mode?: "graduated" | "volume";
          /**
           * transform_usage_param
           * @description Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with `tiers`.
           */
          readonly transform_usage?: {
            readonly divide_by: number;
            /** @enum {string} */
            readonly round: "down" | "up";
          };
          /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
          readonly trial_period_days?: number;
          /**
           * @description Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
           * @enum {string}
           */
          readonly usage_type?: "licensed" | "metered";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["plan"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the plan with the given ID.</p> */
  readonly GetPlansPlan: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly plan: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["plan"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p> */
  readonly PostPlansPlan: {
    readonly parameters: {
      readonly path: {
        readonly plan: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Whether the plan is currently available for new subscriptions. */
          readonly active?: boolean;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A brief description of the plan, hidden from customers. */
          readonly nickname?: string;
          /** @description The product the plan belongs to. Note that after updating, statement descriptors and line items of the plan in active subscriptions will be affected. */
          readonly product?: string;
          /** @description Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan). */
          readonly trial_period_days?: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["plan"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p> */
  readonly DeletePlansPlan: {
    readonly parameters: {
      readonly path: {
        readonly plan: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_plan"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created products appearing first.</p> */
  readonly GetProducts: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return products that are active or inactive (e.g., pass `false` to list all inactive products). */
        readonly active?: boolean;
        /** Only return products that were created during the given date interval. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Only return products with the given IDs. */
        readonly ids?: readonly unknown[];
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return products that can be shipped (i.e., physical, not digital products). */
        readonly shippable?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return products of this type. */
        readonly type?: string;
        /** Only return products with the given url. */
        readonly url?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["product"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new product object.</p> */
  readonly PostProducts: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Whether the product is currently available for purchase. Defaults to `true`. */
          readonly active?: boolean;
          /** @description A list of up to 5 alphanumeric attributes. */
          readonly attributes?: readonly string[];
          /** @description A short one-line description of the product, meant to be displayable to the customer. May only be set if type=`good`. */
          readonly caption?: string;
          /** @description An array of Connect application names or identifiers that should not be able to order the SKUs for this product. May only be set if type=`good`. */
          readonly deactivate_on?: readonly string[];
          /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description An identifier will be randomly generated by Stripe. You can optionally override this ID, but the ID must be unique across all products in your Stripe account. */
          readonly id?: string;
          /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
          readonly images?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
          readonly name: string;
          /**
           * package_dimensions_specs
           * @description The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. May only be set if type=`good`.
           */
          readonly package_dimensions?: {
            readonly height: number;
            readonly length: number;
            readonly weight: number;
            readonly width: number;
          };
          /** @description Whether this product is shipped (i.e., physical goods). Defaults to `true`. May only be set if type=`good`. */
          readonly shippable?: boolean;
          /**
           * @description An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
           *
           * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
           *  It must contain at least one letter.
           */
          readonly statement_descriptor?: string;
          /**
           * @description The type of the product. Defaults to `service` if not explicitly specified, enabling use of this product with Subscriptions and Plans. Set this parameter to `good` to use this product with Orders and SKUs. On API versions before `2018-02-05`, this field defaults to `good` for compatibility reasons.
           * @enum {string}
           */
          readonly type?: "good" | "service";
          /** @description A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. */
          readonly unit_label?: string;
          /** @description A URL of a publicly-accessible webpage for this product. May only be set if type=`good`. */
          readonly url?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["product"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or the product list, and Stripe will return the corresponding product information.</p> */
  readonly GetProductsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["product"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostProductsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Whether the product is available for purchase. */
          readonly active?: boolean;
          /** @description A list of up to 5 alphanumeric attributes that each SKU can provide values for (e.g., `["color", "size"]`). If a value for `attributes` is specified, the list specified will replace the existing attributes list on this product. Any attributes not present after the update will be deleted from the SKUs for this product. */
          readonly attributes?: readonly string[];
          /** @description A short one-line description of the product, meant to be displayable to the customer. May only be set if `type=good`. */
          readonly caption?: string;
          /** @description An array of Connect application names or identifiers that should not be able to order the SKUs for this product. May only be set if `type=good`. */
          readonly deactivate_on?: readonly string[];
          /** @description The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 8 URLs of images for this product, meant to be displayable to the customer. */
          readonly images?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions. */
          readonly name?: string;
          /** @description The dimensions of this product for shipping purposes. A SKU associated with this product can override this value by having its own `package_dimensions`. May only be set if `type=good`. */
          readonly package_dimensions?: unknown;
          /** @description Whether this product is shipped (i.e., physical goods). Defaults to `true`. May only be set if `type=good`. */
          readonly shippable?: boolean;
          /**
           * @description An arbitrary string to be displayed on your customer's credit card or bank statement. While most banks display this information consistently, some may display it incorrectly or not at all.
           *
           * This may be up to 22 characters. The statement description may not include `<`, `>`, `\`, `"`, `'` characters, and will appear on your customer's statement in capital letters. Non-ASCII characters are automatically stripped.
           *  It must contain at least one letter. May only be set if `type=service`.
           */
          readonly statement_descriptor?: string;
          /** @description A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will be included in associated invoice line item descriptions. May only be set if `type=service`. */
          readonly unit_label?: string;
          /** @description A URL of a publicly-accessible webpage for this product. May only be set if `type=good`. */
          readonly url?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["product"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a product. Deleting a product with type=<code>good</code> is only possible if it has no SKUs associated with it. Deleting a product with type=<code>service</code> is only possible if it has no plans associated with it.</p> */
  readonly DeleteProductsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_product"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of early fraud warnings.</p> */
  readonly GetRadarEarlyFraudWarnings: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return early fraud warnings for the charge specified by this charge ID. */
        readonly charge?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["radar.early_fraud_warning"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
   *
   * <p>Please refer to the <a href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
   */
  readonly GetRadarEarlyFraudWarningsEarlyFraudWarning: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly early_fraud_warning: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["radar.early_fraud_warning"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetRadarValueListItems: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Return items belonging to the parent list whose value matches the specified value (using an "is like" match). */
        readonly value?: string;
        /** Identifier for the parent value list this item belongs to. */
        readonly value_list: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["radar.value_list_item"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p> */
  readonly PostRadarValueListItems: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The value of the item (whose type must match the type of the parent value list). */
          readonly value: string;
          /** @description The identifier of the value list which the created item will be added to. */
          readonly value_list: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["radar.value_list_item"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a <code>ValueListItem</code> object.</p> */
  readonly GetRadarValueListItemsItem: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["radar.value_list_item"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p> */
  readonly DeleteRadarValueListItemsItem: {
    readonly parameters: {
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_radar.value_list_item"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetRadarValueLists: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The alias used to reference the value list when writing rules. */
        readonly alias?: string;
        /** A value contained within a value list - returns all value lists containing this value. */
        readonly contains?: string;
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["radar.value_list"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p> */
  readonly PostRadarValueLists: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description The name of the value list for use in rules. */
          readonly alias: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description Type of the items in the value list. One of `card_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, or `case_sensitive_string`. Use `string` if the item type is unknown or mixed.
           * @enum {string}
           */
          readonly item_type?:
            | "card_bin"
            | "card_fingerprint"
            | "case_sensitive_string"
            | "country"
            | "email"
            | "ip_address"
            | "string";
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The human-readable name of the value list. */
          readonly name: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["radar.value_list"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a <code>ValueList</code> object.</p> */
  readonly GetRadarValueListsValueList: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly value_list: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["radar.value_list"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Note that <code>item_type</code> is immutable.</p> */
  readonly PostRadarValueListsValueList: {
    readonly parameters: {
      readonly path: {
        readonly value_list: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The name of the value list for use in rules. */
          readonly alias?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The human-readable name of the value list. */
          readonly name?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["radar.value_list"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a value list must not be referenced in any rules.</p> */
  readonly DeleteRadarValueListsValueList: {
    readonly parameters: {
      readonly path: {
        readonly value_list: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_radar.value_list"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your recipients. The recipients are returned sorted by creation date, with the most recently created recipients appearing first.</p> */
  readonly GetRecipients: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        readonly type?: string;
        /** Only return recipients that are verified or unverified. */
        readonly verified?: boolean;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["recipient"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Creates a new <code>Recipient</code> object and verifies the recipient’s identity.
   * Also verifies the recipient’s bank account information or debit card, if either is provided.</p>
   */
  readonly PostRecipients: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below. */
          readonly bank_account?: string;
          /** @description A U.S. Visa or MasterCard debit card (_not_ prepaid) to attach to the recipient. If the debit card is not valid, recipient creation will fail. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Although not all information is required, the extra info helps prevent fraud. */
          readonly card?: string;
          /** @description An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
          readonly description?: string;
          /** @description The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
          readonly name: string;
          /** @description The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
          readonly tax_id?: string;
          /** @description Type of the recipient: either `individual` or `corporation`. */
          readonly type: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["recipient"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing recipient. You need only supply the unique recipient identifier that was returned upon recipient creation.</p> */
  readonly GetRecipientsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_recipient"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specified recipient by setting the values of the parameters passed.
   * Any parameters not provided will be left unchanged.</p>
   *
   * <p>If you update the name or tax ID, the identity verification will automatically be rerun.
   * If you update the bank account, the bank account validation will automatically be rerun.</p>
   */
  readonly PostRecipientsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A bank account to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's bank account details, with the options described below. */
          readonly bank_account?: string;
          /** @description A U.S. Visa or MasterCard debit card (not prepaid) to attach to the recipient. You can provide either a token, like the ones returned by [Stripe.js](https://stripe.com/docs/stripe-js), or a dictionary containing a user's debit card details, with the options described below. Passing `card` will create a new card, make it the new recipient default card, and delete the old recipient default (if one exists). If you want to add additional debit cards instead of replacing the existing default, use the [card creation API](https://stripe.com/docs/api#create_card). Whenever you attach a card to a recipient, Stripe will automatically validate the debit card. */
          readonly card?: string;
          /** @description ID of the card to set as the recipient's new default for payouts. */
          readonly default_card?: string;
          /** @description An arbitrary string which you can attach to a `Recipient` object. It is displayed alongside the recipient in the web interface. */
          readonly description?: string;
          /** @description The recipient's email address. It is displayed alongside the recipient in the web interface, and can be useful for searching and tracking. */
          readonly email?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The recipient's full, legal name. For type `individual`, should be in the format `First Last`, `First Middle Last`, or `First M Last` (no prefixes or suffixes). For `corporation`, the full, incorporated name. */
          readonly name?: string;
          /** @description The recipient's tax ID, as a string. For type `individual`, the full SSN; for type `corporation`, the full EIN. */
          readonly tax_id?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["recipient"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Permanently deletes a recipient. It cannot be undone.</p> */
  readonly DeleteRecipientsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_recipient"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of all refunds you’ve previously created. The refunds are returned in sorted order, with the most recent refunds appearing first. For convenience, the 10 most recent refunds are always available by default on the charge object.</p> */
  readonly GetRefunds: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return refunds for the charge specified by this charge ID. */
        readonly charge?: string;
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return refunds for the PaymentIntent specified by this ID. */
        readonly payment_intent?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["refund"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Create a refund.</p> */
  readonly PostRefunds: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          readonly amount?: number;
          readonly charge?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          readonly payment_intent?: string;
          /** @enum {string} */
          readonly reason?: "duplicate" | "fraudulent" | "requested_by_customer";
          readonly refund_application_fee?: boolean;
          readonly reverse_transfer?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing refund.</p> */
  readonly GetRefundsRefund: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly refund: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specified refund by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts <code>metadata</code> as an argument.</p>
   */
  readonly PostRefundsRefund: {
    readonly parameters: {
      readonly path: {
        readonly refund: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["refund"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of Report Runs, with the most recent appearing first. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  readonly GetReportingReportRuns: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["reporting.report_run"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new object and begin running the report. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  readonly PostReportingReportRuns: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * run_parameter_specs
           * @description Parameters specifying how the report should be run. Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation.
           */
          readonly parameters?: {
            readonly columns?: readonly string[];
            readonly connected_account?: string;
            readonly currency?: string;
            readonly interval_end?: number;
            readonly interval_start?: number;
            readonly payout?: string;
            /** @enum {string} */
            readonly reporting_category?:
              | "advance"
              | "advance_funding"
              | "charge"
              | "charge_failure"
              | "connect_collection_transfer"
              | "connect_reserved_funds"
              | "dispute"
              | "dispute_reversal"
              | "fee"
              | "financing_paydown"
              | "financing_paydown_reversal"
              | "financing_payout"
              | "financing_payout_reversal"
              | "issuing_authorization_hold"
              | "issuing_authorization_release"
              | "issuing_transaction"
              | "network_cost"
              | "other_adjustment"
              | "partial_capture_reversal"
              | "payout"
              | "payout_reversal"
              | "platform_earning"
              | "platform_earning_refund"
              | "refund"
              | "refund_failure"
              | "risk_reserved_funds"
              | "tax"
              | "topup"
              | "topup_reversal"
              | "transfer"
              | "transfer_reversal";
            /** @enum {string} */
            readonly timezone?:
              | "Africa/Abidjan"
              | "Africa/Accra"
              | "Africa/Addis_Ababa"
              | "Africa/Algiers"
              | "Africa/Asmara"
              | "Africa/Asmera"
              | "Africa/Bamako"
              | "Africa/Bangui"
              | "Africa/Banjul"
              | "Africa/Bissau"
              | "Africa/Blantyre"
              | "Africa/Brazzaville"
              | "Africa/Bujumbura"
              | "Africa/Cairo"
              | "Africa/Casablanca"
              | "Africa/Ceuta"
              | "Africa/Conakry"
              | "Africa/Dakar"
              | "Africa/Dar_es_Salaam"
              | "Africa/Djibouti"
              | "Africa/Douala"
              | "Africa/El_Aaiun"
              | "Africa/Freetown"
              | "Africa/Gaborone"
              | "Africa/Harare"
              | "Africa/Johannesburg"
              | "Africa/Juba"
              | "Africa/Kampala"
              | "Africa/Khartoum"
              | "Africa/Kigali"
              | "Africa/Kinshasa"
              | "Africa/Lagos"
              | "Africa/Libreville"
              | "Africa/Lome"
              | "Africa/Luanda"
              | "Africa/Lubumbashi"
              | "Africa/Lusaka"
              | "Africa/Malabo"
              | "Africa/Maputo"
              | "Africa/Maseru"
              | "Africa/Mbabane"
              | "Africa/Mogadishu"
              | "Africa/Monrovia"
              | "Africa/Nairobi"
              | "Africa/Ndjamena"
              | "Africa/Niamey"
              | "Africa/Nouakchott"
              | "Africa/Ouagadougou"
              | "Africa/Porto-Novo"
              | "Africa/Sao_Tome"
              | "Africa/Timbuktu"
              | "Africa/Tripoli"
              | "Africa/Tunis"
              | "Africa/Windhoek"
              | "America/Adak"
              | "America/Anchorage"
              | "America/Anguilla"
              | "America/Antigua"
              | "America/Araguaina"
              | "America/Argentina/Buenos_Aires"
              | "America/Argentina/Catamarca"
              | "America/Argentina/ComodRivadavia"
              | "America/Argentina/Cordoba"
              | "America/Argentina/Jujuy"
              | "America/Argentina/La_Rioja"
              | "America/Argentina/Mendoza"
              | "America/Argentina/Rio_Gallegos"
              | "America/Argentina/Salta"
              | "America/Argentina/San_Juan"
              | "America/Argentina/San_Luis"
              | "America/Argentina/Tucuman"
              | "America/Argentina/Ushuaia"
              | "America/Aruba"
              | "America/Asuncion"
              | "America/Atikokan"
              | "America/Atka"
              | "America/Bahia"
              | "America/Bahia_Banderas"
              | "America/Barbados"
              | "America/Belem"
              | "America/Belize"
              | "America/Blanc-Sablon"
              | "America/Boa_Vista"
              | "America/Bogota"
              | "America/Boise"
              | "America/Buenos_Aires"
              | "America/Cambridge_Bay"
              | "America/Campo_Grande"
              | "America/Cancun"
              | "America/Caracas"
              | "America/Catamarca"
              | "America/Cayenne"
              | "America/Cayman"
              | "America/Chicago"
              | "America/Chihuahua"
              | "America/Coral_Harbour"
              | "America/Cordoba"
              | "America/Costa_Rica"
              | "America/Creston"
              | "America/Cuiaba"
              | "America/Curacao"
              | "America/Danmarkshavn"
              | "America/Dawson"
              | "America/Dawson_Creek"
              | "America/Denver"
              | "America/Detroit"
              | "America/Dominica"
              | "America/Edmonton"
              | "America/Eirunepe"
              | "America/El_Salvador"
              | "America/Ensenada"
              | "America/Fort_Nelson"
              | "America/Fort_Wayne"
              | "America/Fortaleza"
              | "America/Glace_Bay"
              | "America/Godthab"
              | "America/Goose_Bay"
              | "America/Grand_Turk"
              | "America/Grenada"
              | "America/Guadeloupe"
              | "America/Guatemala"
              | "America/Guayaquil"
              | "America/Guyana"
              | "America/Halifax"
              | "America/Havana"
              | "America/Hermosillo"
              | "America/Indiana/Indianapolis"
              | "America/Indiana/Knox"
              | "America/Indiana/Marengo"
              | "America/Indiana/Petersburg"
              | "America/Indiana/Tell_City"
              | "America/Indiana/Vevay"
              | "America/Indiana/Vincennes"
              | "America/Indiana/Winamac"
              | "America/Indianapolis"
              | "America/Inuvik"
              | "America/Iqaluit"
              | "America/Jamaica"
              | "America/Jujuy"
              | "America/Juneau"
              | "America/Kentucky/Louisville"
              | "America/Kentucky/Monticello"
              | "America/Knox_IN"
              | "America/Kralendijk"
              | "America/La_Paz"
              | "America/Lima"
              | "America/Los_Angeles"
              | "America/Louisville"
              | "America/Lower_Princes"
              | "America/Maceio"
              | "America/Managua"
              | "America/Manaus"
              | "America/Marigot"
              | "America/Martinique"
              | "America/Matamoros"
              | "America/Mazatlan"
              | "America/Mendoza"
              | "America/Menominee"
              | "America/Merida"
              | "America/Metlakatla"
              | "America/Mexico_City"
              | "America/Miquelon"
              | "America/Moncton"
              | "America/Monterrey"
              | "America/Montevideo"
              | "America/Montreal"
              | "America/Montserrat"
              | "America/Nassau"
              | "America/New_York"
              | "America/Nipigon"
              | "America/Nome"
              | "America/Noronha"
              | "America/North_Dakota/Beulah"
              | "America/North_Dakota/Center"
              | "America/North_Dakota/New_Salem"
              | "America/Ojinaga"
              | "America/Panama"
              | "America/Pangnirtung"
              | "America/Paramaribo"
              | "America/Phoenix"
              | "America/Port-au-Prince"
              | "America/Port_of_Spain"
              | "America/Porto_Acre"
              | "America/Porto_Velho"
              | "America/Puerto_Rico"
              | "America/Punta_Arenas"
              | "America/Rainy_River"
              | "America/Rankin_Inlet"
              | "America/Recife"
              | "America/Regina"
              | "America/Resolute"
              | "America/Rio_Branco"
              | "America/Rosario"
              | "America/Santa_Isabel"
              | "America/Santarem"
              | "America/Santiago"
              | "America/Santo_Domingo"
              | "America/Sao_Paulo"
              | "America/Scoresbysund"
              | "America/Shiprock"
              | "America/Sitka"
              | "America/St_Barthelemy"
              | "America/St_Johns"
              | "America/St_Kitts"
              | "America/St_Lucia"
              | "America/St_Thomas"
              | "America/St_Vincent"
              | "America/Swift_Current"
              | "America/Tegucigalpa"
              | "America/Thule"
              | "America/Thunder_Bay"
              | "America/Tijuana"
              | "America/Toronto"
              | "America/Tortola"
              | "America/Vancouver"
              | "America/Virgin"
              | "America/Whitehorse"
              | "America/Winnipeg"
              | "America/Yakutat"
              | "America/Yellowknife"
              | "Antarctica/Casey"
              | "Antarctica/Davis"
              | "Antarctica/DumontDUrville"
              | "Antarctica/Macquarie"
              | "Antarctica/Mawson"
              | "Antarctica/McMurdo"
              | "Antarctica/Palmer"
              | "Antarctica/Rothera"
              | "Antarctica/South_Pole"
              | "Antarctica/Syowa"
              | "Antarctica/Troll"
              | "Antarctica/Vostok"
              | "Arctic/Longyearbyen"
              | "Asia/Aden"
              | "Asia/Almaty"
              | "Asia/Amman"
              | "Asia/Anadyr"
              | "Asia/Aqtau"
              | "Asia/Aqtobe"
              | "Asia/Ashgabat"
              | "Asia/Ashkhabad"
              | "Asia/Atyrau"
              | "Asia/Baghdad"
              | "Asia/Bahrain"
              | "Asia/Baku"
              | "Asia/Bangkok"
              | "Asia/Barnaul"
              | "Asia/Beirut"
              | "Asia/Bishkek"
              | "Asia/Brunei"
              | "Asia/Calcutta"
              | "Asia/Chita"
              | "Asia/Choibalsan"
              | "Asia/Chongqing"
              | "Asia/Chungking"
              | "Asia/Colombo"
              | "Asia/Dacca"
              | "Asia/Damascus"
              | "Asia/Dhaka"
              | "Asia/Dili"
              | "Asia/Dubai"
              | "Asia/Dushanbe"
              | "Asia/Famagusta"
              | "Asia/Gaza"
              | "Asia/Harbin"
              | "Asia/Hebron"
              | "Asia/Ho_Chi_Minh"
              | "Asia/Hong_Kong"
              | "Asia/Hovd"
              | "Asia/Irkutsk"
              | "Asia/Istanbul"
              | "Asia/Jakarta"
              | "Asia/Jayapura"
              | "Asia/Jerusalem"
              | "Asia/Kabul"
              | "Asia/Kamchatka"
              | "Asia/Karachi"
              | "Asia/Kashgar"
              | "Asia/Kathmandu"
              | "Asia/Katmandu"
              | "Asia/Khandyga"
              | "Asia/Kolkata"
              | "Asia/Krasnoyarsk"
              | "Asia/Kuala_Lumpur"
              | "Asia/Kuching"
              | "Asia/Kuwait"
              | "Asia/Macao"
              | "Asia/Macau"
              | "Asia/Magadan"
              | "Asia/Makassar"
              | "Asia/Manila"
              | "Asia/Muscat"
              | "Asia/Nicosia"
              | "Asia/Novokuznetsk"
              | "Asia/Novosibirsk"
              | "Asia/Omsk"
              | "Asia/Oral"
              | "Asia/Phnom_Penh"
              | "Asia/Pontianak"
              | "Asia/Pyongyang"
              | "Asia/Qatar"
              | "Asia/Qostanay"
              | "Asia/Qyzylorda"
              | "Asia/Rangoon"
              | "Asia/Riyadh"
              | "Asia/Saigon"
              | "Asia/Sakhalin"
              | "Asia/Samarkand"
              | "Asia/Seoul"
              | "Asia/Shanghai"
              | "Asia/Singapore"
              | "Asia/Srednekolymsk"
              | "Asia/Taipei"
              | "Asia/Tashkent"
              | "Asia/Tbilisi"
              | "Asia/Tehran"
              | "Asia/Tel_Aviv"
              | "Asia/Thimbu"
              | "Asia/Thimphu"
              | "Asia/Tokyo"
              | "Asia/Tomsk"
              | "Asia/Ujung_Pandang"
              | "Asia/Ulaanbaatar"
              | "Asia/Ulan_Bator"
              | "Asia/Urumqi"
              | "Asia/Ust-Nera"
              | "Asia/Vientiane"
              | "Asia/Vladivostok"
              | "Asia/Yakutsk"
              | "Asia/Yangon"
              | "Asia/Yekaterinburg"
              | "Asia/Yerevan"
              | "Atlantic/Azores"
              | "Atlantic/Bermuda"
              | "Atlantic/Canary"
              | "Atlantic/Cape_Verde"
              | "Atlantic/Faeroe"
              | "Atlantic/Faroe"
              | "Atlantic/Jan_Mayen"
              | "Atlantic/Madeira"
              | "Atlantic/Reykjavik"
              | "Atlantic/South_Georgia"
              | "Atlantic/St_Helena"
              | "Atlantic/Stanley"
              | "Australia/ACT"
              | "Australia/Adelaide"
              | "Australia/Brisbane"
              | "Australia/Broken_Hill"
              | "Australia/Canberra"
              | "Australia/Currie"
              | "Australia/Darwin"
              | "Australia/Eucla"
              | "Australia/Hobart"
              | "Australia/LHI"
              | "Australia/Lindeman"
              | "Australia/Lord_Howe"
              | "Australia/Melbourne"
              | "Australia/NSW"
              | "Australia/North"
              | "Australia/Perth"
              | "Australia/Queensland"
              | "Australia/South"
              | "Australia/Sydney"
              | "Australia/Tasmania"
              | "Australia/Victoria"
              | "Australia/West"
              | "Australia/Yancowinna"
              | "Brazil/Acre"
              | "Brazil/DeNoronha"
              | "Brazil/East"
              | "Brazil/West"
              | "CET"
              | "CST6CDT"
              | "Canada/Atlantic"
              | "Canada/Central"
              | "Canada/Eastern"
              | "Canada/Mountain"
              | "Canada/Newfoundland"
              | "Canada/Pacific"
              | "Canada/Saskatchewan"
              | "Canada/Yukon"
              | "Chile/Continental"
              | "Chile/EasterIsland"
              | "Cuba"
              | "EET"
              | "EST"
              | "EST5EDT"
              | "Egypt"
              | "Eire"
              | "Etc/GMT"
              | "Etc/GMT+0"
              | "Etc/GMT+1"
              | "Etc/GMT+10"
              | "Etc/GMT+11"
              | "Etc/GMT+12"
              | "Etc/GMT+2"
              | "Etc/GMT+3"
              | "Etc/GMT+4"
              | "Etc/GMT+5"
              | "Etc/GMT+6"
              | "Etc/GMT+7"
              | "Etc/GMT+8"
              | "Etc/GMT+9"
              | "Etc/GMT-0"
              | "Etc/GMT-1"
              | "Etc/GMT-10"
              | "Etc/GMT-11"
              | "Etc/GMT-12"
              | "Etc/GMT-13"
              | "Etc/GMT-14"
              | "Etc/GMT-2"
              | "Etc/GMT-3"
              | "Etc/GMT-4"
              | "Etc/GMT-5"
              | "Etc/GMT-6"
              | "Etc/GMT-7"
              | "Etc/GMT-8"
              | "Etc/GMT-9"
              | "Etc/GMT0"
              | "Etc/Greenwich"
              | "Etc/UCT"
              | "Etc/UTC"
              | "Etc/Universal"
              | "Etc/Zulu"
              | "Europe/Amsterdam"
              | "Europe/Andorra"
              | "Europe/Astrakhan"
              | "Europe/Athens"
              | "Europe/Belfast"
              | "Europe/Belgrade"
              | "Europe/Berlin"
              | "Europe/Bratislava"
              | "Europe/Brussels"
              | "Europe/Bucharest"
              | "Europe/Budapest"
              | "Europe/Busingen"
              | "Europe/Chisinau"
              | "Europe/Copenhagen"
              | "Europe/Dublin"
              | "Europe/Gibraltar"
              | "Europe/Guernsey"
              | "Europe/Helsinki"
              | "Europe/Isle_of_Man"
              | "Europe/Istanbul"
              | "Europe/Jersey"
              | "Europe/Kaliningrad"
              | "Europe/Kiev"
              | "Europe/Kirov"
              | "Europe/Lisbon"
              | "Europe/Ljubljana"
              | "Europe/London"
              | "Europe/Luxembourg"
              | "Europe/Madrid"
              | "Europe/Malta"
              | "Europe/Mariehamn"
              | "Europe/Minsk"
              | "Europe/Monaco"
              | "Europe/Moscow"
              | "Europe/Nicosia"
              | "Europe/Oslo"
              | "Europe/Paris"
              | "Europe/Podgorica"
              | "Europe/Prague"
              | "Europe/Riga"
              | "Europe/Rome"
              | "Europe/Samara"
              | "Europe/San_Marino"
              | "Europe/Sarajevo"
              | "Europe/Saratov"
              | "Europe/Simferopol"
              | "Europe/Skopje"
              | "Europe/Sofia"
              | "Europe/Stockholm"
              | "Europe/Tallinn"
              | "Europe/Tirane"
              | "Europe/Tiraspol"
              | "Europe/Ulyanovsk"
              | "Europe/Uzhgorod"
              | "Europe/Vaduz"
              | "Europe/Vatican"
              | "Europe/Vienna"
              | "Europe/Vilnius"
              | "Europe/Volgograd"
              | "Europe/Warsaw"
              | "Europe/Zagreb"
              | "Europe/Zaporozhye"
              | "Europe/Zurich"
              | "Factory"
              | "GB"
              | "GB-Eire"
              | "GMT"
              | "GMT+0"
              | "GMT-0"
              | "GMT0"
              | "Greenwich"
              | "HST"
              | "Hongkong"
              | "Iceland"
              | "Indian/Antananarivo"
              | "Indian/Chagos"
              | "Indian/Christmas"
              | "Indian/Cocos"
              | "Indian/Comoro"
              | "Indian/Kerguelen"
              | "Indian/Mahe"
              | "Indian/Maldives"
              | "Indian/Mauritius"
              | "Indian/Mayotte"
              | "Indian/Reunion"
              | "Iran"
              | "Israel"
              | "Jamaica"
              | "Japan"
              | "Kwajalein"
              | "Libya"
              | "MET"
              | "MST"
              | "MST7MDT"
              | "Mexico/BajaNorte"
              | "Mexico/BajaSur"
              | "Mexico/General"
              | "NZ"
              | "NZ-CHAT"
              | "Navajo"
              | "PRC"
              | "PST8PDT"
              | "Pacific/Apia"
              | "Pacific/Auckland"
              | "Pacific/Bougainville"
              | "Pacific/Chatham"
              | "Pacific/Chuuk"
              | "Pacific/Easter"
              | "Pacific/Efate"
              | "Pacific/Enderbury"
              | "Pacific/Fakaofo"
              | "Pacific/Fiji"
              | "Pacific/Funafuti"
              | "Pacific/Galapagos"
              | "Pacific/Gambier"
              | "Pacific/Guadalcanal"
              | "Pacific/Guam"
              | "Pacific/Honolulu"
              | "Pacific/Johnston"
              | "Pacific/Kiritimati"
              | "Pacific/Kosrae"
              | "Pacific/Kwajalein"
              | "Pacific/Majuro"
              | "Pacific/Marquesas"
              | "Pacific/Midway"
              | "Pacific/Nauru"
              | "Pacific/Niue"
              | "Pacific/Norfolk"
              | "Pacific/Noumea"
              | "Pacific/Pago_Pago"
              | "Pacific/Palau"
              | "Pacific/Pitcairn"
              | "Pacific/Pohnpei"
              | "Pacific/Ponape"
              | "Pacific/Port_Moresby"
              | "Pacific/Rarotonga"
              | "Pacific/Saipan"
              | "Pacific/Samoa"
              | "Pacific/Tahiti"
              | "Pacific/Tarawa"
              | "Pacific/Tongatapu"
              | "Pacific/Truk"
              | "Pacific/Wake"
              | "Pacific/Wallis"
              | "Pacific/Yap"
              | "Poland"
              | "Portugal"
              | "ROC"
              | "ROK"
              | "Singapore"
              | "Turkey"
              | "UCT"
              | "US/Alaska"
              | "US/Aleutian"
              | "US/Arizona"
              | "US/Central"
              | "US/East-Indiana"
              | "US/Eastern"
              | "US/Hawaii"
              | "US/Indiana-Starke"
              | "US/Michigan"
              | "US/Mountain"
              | "US/Pacific"
              | "US/Pacific-New"
              | "US/Samoa"
              | "UTC"
              | "Universal"
              | "W-SU"
              | "WET"
              | "Zulu";
          };
          /** @description The ID of the [report type](https://stripe.com/docs/reporting/statements/api#report-types) to run, such as `"balance.summary.1"`. */
          readonly report_type: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["reporting.report_run"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing Report Run. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  readonly GetReportingReportRunsReportRun: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly report_run: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["reporting.report_run"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a full list of Report Types. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  readonly GetReportingReportTypes: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["reporting.report_type"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of a Report Type. (Requires a <a href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p> */
  readonly GetReportingReportTypesReportType: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly report_type: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["reporting.report_type"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are sorted in descending order by creation date, with the most recently created object appearing first.</p> */
  readonly GetReviews: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["review"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a <code>Review</code> object.</p> */
  readonly GetReviewsReview: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly review: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["review"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p> */
  readonly PostReviewsReviewApprove: {
    readonly parameters: {
      readonly path: {
        readonly review: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["review"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of SetupIntents.</p> */
  readonly GetSetupIntents: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?: number;
        /** Only return SetupIntents for the customer specified by this customer ID. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return SetupIntents associated with the specified payment method. */
        readonly payment_method?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["setup_intent"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Creates a SetupIntent object.</p>
   *
   * <p>After the SetupIntent is created, attach a payment method and <a href="/docs/api/setup_intents/confirm">confirm</a>
   * to collect any required permissions to charge the payment method later.</p>
   */
  readonly PostSetupIntents: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Set to `true` to attempt to confirm this SetupIntent immediately. This parameter defaults to `false`. If the payment method attached is a card, a return_url may be provided in case additional authentication is required. */
          readonly confirm?: boolean;
          /**
           * @description ID of the Customer this SetupIntent belongs to, if one exists.
           *
           * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * secret_key_param
           * @description This hash contains details about the Mandate to create. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm).
           */
          readonly mandate_data?: {
            /** customer_acceptance_param */
            readonly customer_acceptance: {
              readonly accepted_at?: number;
              /** offline_param */
              readonly offline?: { readonly [key: string]: unknown };
              /** online_param */
              readonly online?: {
                readonly ip_address: string;
                readonly user_agent: string;
              };
              /** @enum {string} */
              readonly type: "offline" | "online";
            };
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The Stripe account ID for which this SetupIntent is created. */
          readonly on_behalf_of?: string;
          /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this SetupIntent.
           */
          readonly payment_method_options?: {
            /** setup_intent_param */
            readonly card?: {
              /** @enum {string} */
              readonly request_three_d_secure?: "any" | "automatic";
            };
          };
          /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to use. If this is not provided, defaults to ["card"]. */
          readonly payment_method_types?: readonly string[];
          /** @description The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site. If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme. This parameter can only be used with [`confirm=true`](https://stripe.com/docs/api/setup_intents/create#create_setup_intent-confirm). */
          readonly return_url?: string;
          /**
           * setup_intent_single_use_params
           * @description If this hash is populated, this SetupIntent will generate a single_use Mandate on success.
           */
          readonly single_use?: {
            readonly amount: number;
            readonly currency: string;
          };
          /**
           * @description Indicates how the payment method is intended to be used in the future. If not provided, this value defaults to `off_session`.
           * @enum {string}
           */
          readonly usage?: "off_session" | "on_session";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["setup_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
   *
   * <p>Client-side retrieval using a publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
   *
   * <p>When retrieved with a publishable key, only a subset of properties will be returned. Please refer to the <a href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
   */
  readonly GetSetupIntentsIntent: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The client secret of the SetupIntent. Required if a publishable key is used to retrieve the SetupIntent. */
        readonly client_secret?: string;
      };
      readonly path: {
        readonly intent: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["setup_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates a SetupIntent object.</p> */
  readonly PostSetupIntentsIntent: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * @description ID of the Customer this SetupIntent belongs to, if one exists.
           *
           * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
           */
          readonly customer?: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this SetupIntent.
           */
          readonly payment_method_options?: {
            /** setup_intent_param */
            readonly card?: {
              /** @enum {string} */
              readonly request_three_d_secure?: "any" | "automatic";
            };
          };
          /** @description The list of payment method types (e.g. card) that this SetupIntent is allowed to set up. If this is not provided, defaults to ["card"]. */
          readonly payment_method_types?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["setup_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>A SetupIntent object can be canceled when it is in one of these statuses: <code>requires_payment_method</code>, <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code>. </p>
   *
   * <p>Once canceled, setup is abandoned and any operations on the SetupIntent will fail with an error.</p>
   */
  readonly PostSetupIntentsIntentCancel: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * @description Reason for canceling this SetupIntent. Possible values are `abandoned`, `requested_by_customer`, or `duplicate`
           * @enum {string}
           */
          readonly cancellation_reason?: "abandoned" | "duplicate" | "requested_by_customer";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["setup_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Confirm that your customer intends to set up the current or
   * provided payment method. For example, you would confirm a SetupIntent
   * when a customer hits the “Save” button on a payment method management
   * page on your website.</p>
   *
   * <p>If the selected payment method does not require any additional
   * steps from the customer, the SetupIntent will transition to the
   * <code>succeeded</code> status.</p>
   *
   * <p>Otherwise, it will transition to the <code>requires_action</code> status and
   * suggest additional actions via <code>next_action</code>. If setup fails,
   * the SetupIntent will transition to the
   * <code>requires_payment_method</code> status.</p>
   */
  readonly PostSetupIntentsIntentConfirm: {
    readonly parameters: {
      readonly path: {
        readonly intent: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The client secret of the SetupIntent. */
          readonly client_secret?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * secret_key_param
           * @description This hash contains details about the Mandate to create
           */
          readonly mandate_data?: {
            /** customer_acceptance_param */
            readonly customer_acceptance: {
              readonly accepted_at?: number;
              /** offline_param */
              readonly offline?: { readonly [key: string]: unknown };
              /** online_param */
              readonly online?: {
                readonly ip_address: string;
                readonly user_agent: string;
              };
              /** @enum {string} */
              readonly type: "offline" | "online";
            };
          };
          /** @description ID of the payment method (a PaymentMethod, Card, or saved Source object) to attach to this SetupIntent. */
          readonly payment_method?: string;
          /**
           * payment_method_options_param
           * @description Payment-method-specific configuration for this SetupIntent.
           */
          readonly payment_method_options?: {
            /** setup_intent_param */
            readonly card?: {
              /** @enum {string} */
              readonly request_three_d_secure?: "any" | "automatic";
            };
          };
          /**
           * @description The URL to redirect your customer back to after they authenticate on the payment method's app or site.
           * If you'd prefer to redirect to a mobile application, you can alternatively supply an application URI scheme.
           * This parameter is only used for cards and other redirect-based payment methods.
           */
          readonly return_url?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["setup_intent"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of scheduled query runs.</p> */
  readonly GetSigmaScheduledQueryRuns: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["scheduled_query_run"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an scheduled query run.</p> */
  readonly GetSigmaScheduledQueryRunsScheduledQueryRun: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly scheduled_query_run: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["scheduled_query_run"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your SKUs. The SKUs are returned sorted by creation date, with the most recently created SKUs appearing first.</p> */
  readonly GetSkus: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return SKUs that are active or inactive (e.g., pass `false` to list all inactive products). */
        readonly active?: boolean;
        /** Only return SKUs that have the specified key-value pairs in this partially constructed dictionary. Can be specified only if `product` is also supplied. For instance, if the associated product has attributes `["color", "size"]`, passing in `attributes[color]=red` returns all the SKUs for this product that have `color` set to `red`. */
        readonly attributes?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Only return SKUs with the given IDs. */
        readonly ids?: readonly unknown[];
        /** Only return SKUs that are either in stock or out of stock (e.g., pass `false` to list all SKUs that are out of stock). If no value is provided, all SKUs are returned. */
        readonly in_stock?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The ID of the product whose SKUs will be retrieved. Must be a product with type `good`. */
        readonly product?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["sku"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new SKU associated with a product.</p> */
  readonly PostSkus: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Whether the SKU is available for purchase. Default to `true`. */
          readonly active?: boolean;
          /** @description A dictionary of attributes and values for the attributes defined by the product. If, for example, a product's attributes are `["size", "gender"]`, a valid SKU has the following dictionary of attributes: `{"size": "Medium", "gender": "Unisex"}`. */
          readonly attributes?: { readonly [key: string]: unknown };
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The identifier for the SKU. Must be unique. If not provided, an identifier will be randomly generated. */
          readonly id?: string;
          /** @description The URL of an image for this SKU, meant to be displayable to the customer. */
          readonly image?: string;
          /**
           * inventory_specs
           * @description Description of the SKU's inventory.
           */
          readonly inventory: {
            readonly quantity?: number;
            /** @enum {string} */
            readonly type?: "bucket" | "finite" | "infinite";
            /** @enum {string} */
            readonly value?: "" | "in_stock" | "limited" | "out_of_stock";
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /**
           * package_dimensions_specs
           * @description The dimensions of this SKU for shipping purposes.
           */
          readonly package_dimensions?: {
            readonly height: number;
            readonly length: number;
            readonly weight: number;
            readonly width: number;
          };
          /** @description The cost of the item as a nonnegative integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
          readonly price: number;
          /** @description The ID of the product this SKU is associated with. Must be a product with type `good`. */
          readonly product: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["sku"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing SKU. Supply the unique SKU identifier from either a SKU creation request or from the product, and Stripe will return the corresponding SKU information.</p> */
  readonly GetSkusId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_sku"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specific SKU by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>Note that a SKU’s <code>attributes</code> are not editable. Instead, you would need to deactivate the existing SKU and create a new one with the new attribute values.</p>
   */
  readonly PostSkusId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Whether this SKU is available for purchase. */
          readonly active?: boolean;
          /** @description A dictionary of attributes and values for the attributes defined by the product. When specified, `attributes` will partially update the existing attributes dictionary on the product, with the postcondition that a value must be present for each attribute key on the product. */
          readonly attributes?: { readonly [key: string]: unknown };
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The URL of an image for this SKU, meant to be displayable to the customer. */
          readonly image?: string;
          /**
           * inventory_update_specs
           * @description Description of the SKU's inventory.
           */
          readonly inventory?: {
            readonly quantity?: number;
            /** @enum {string} */
            readonly type?: "bucket" | "finite" | "infinite";
            /** @enum {string} */
            readonly value?: "" | "in_stock" | "limited" | "out_of_stock";
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The dimensions of this SKU for shipping purposes. */
          readonly package_dimensions?: unknown;
          /** @description The cost of the item as a positive integer in the smallest currency unit (that is, 100 cents to charge $1.00, or 100 to charge ¥100, Japanese Yen being a zero-decimal currency). */
          readonly price?: number;
          /** @description The ID of the product that this SKU should belong to. The product must exist, have the same set of attribute names as the SKU's current product, and be of type `good`. */
          readonly product?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["sku"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Delete a SKU. Deleting a SKU is only possible until it has been used in an order.</p> */
  readonly DeleteSkusId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_sku"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new source object.</p> */
  readonly PostSources: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources. Not supported for `receiver` type sources, where charge amount may not be specified until funds land. */
          readonly amount?: number;
          /** @description Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. */
          readonly currency?: string;
          /** @description The `Customer` to whom the original source is attached to. Must be set when the original source is not a `Source` (e.g., `Card`). */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * @description The authentication `flow` of the source to create. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`. It is generally inferred unless a type supports multiple flows.
           * @enum {string}
           */
          readonly flow?: "code_verification" | "none" | "receiver" | "redirect";
          /**
           * mandate_params
           * @description Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
           */
          readonly mandate?: {
            /** mandate_acceptance_params */
            readonly acceptance?: {
              readonly date?: number;
              readonly ip?: string;
              /** mandate_offline_acceptance_params */
              readonly offline?: {
                readonly contact_email: string;
              };
              /** mandate_online_acceptance_params */
              readonly online?: {
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
              /** @enum {string} */
              readonly status: "accepted" | "pending" | "refused" | "revoked";
              /** @enum {string} */
              readonly type?: "offline" | "online";
              readonly user_agent?: string;
            };
            readonly amount?: unknown;
            readonly currency?: string;
            /** @enum {string} */
            readonly interval?: "one_time" | "scheduled" | "variable";
            /** @enum {string} */
            readonly notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description The source to share. */
          readonly original_source?: string;
          /**
           * owner
           * @description Information about the owner of the payment instrument that may be used or required by particular source types.
           */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
          /**
           * receiver_params
           * @description Optional parameters for the receiver flow. Can be set only if the source is a receiver (`flow` is `receiver`).
           */
          readonly receiver?: {
            /** @enum {string} */
            readonly refund_attributes_method?: "email" | "manual" | "none";
          };
          /**
           * redirect_params
           * @description Parameters required for the redirect flow. Required if the source is authenticated by a redirect (`flow` is `redirect`).
           */
          readonly redirect?: {
            readonly return_url: string;
          };
          /**
           * shallow_order_specs
           * @description Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
           */
          readonly source_order?: {
            readonly items?: readonly {
              readonly amount?: number;
              readonly currency?: string;
              readonly description?: string;
              readonly parent?: string;
              readonly quantity?: number;
              /** @enum {string} */
              readonly type?: "discount" | "shipping" | "sku" | "tax";
            }[];
            /** order_shipping */
            readonly shipping?: {
              /** address */
              readonly address: {
                readonly city?: string;
                readonly country?: string;
                readonly line1: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              readonly carrier?: string;
              readonly name?: string;
              readonly phone?: string;
              readonly tracking_number?: string;
            };
          };
          /** @description An arbitrary string to be displayed on your customer's statement. As an example, if your website is `RunClub` and the item you're charging for is a race ticket, you may want to specify a `statement_descriptor` of `RunClub 5K race ticket.` While many payment types will display this information, some may not display it at all. */
          readonly statement_descriptor?: string;
          /** @description An optional token used to create the source. When passed, token properties will override source parameters. */
          readonly token?: string;
          /** @description The `type` of the source to create. Required unless `customer` and `original_source` are specified (see the [Cloning card Sources](https://stripe.com/docs/sources/connect#cloning-card-sources) guide) */
          readonly type?: string;
          /**
           * @description Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
           * @enum {string}
           */
          readonly usage?: "reusable" | "single_use";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will return the corresponding up-to-date source object information.</p> */
  readonly GetSourcesSource: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The client secret of the source. Required if a publishable key is used to retrieve the source. */
        readonly client_secret?: string;
      };
      readonly path: {
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also possible to update type specific information for selected payment methods. Please refer to our <a href="/docs/sources">payment method guides</a> for more detail.</p>
   */
  readonly PostSourcesSource: {
    readonly parameters: {
      readonly path: {
        readonly source: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Amount associated with the source. */
          readonly amount?: number;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * mandate_params
           * @description Information about a mandate possibility attached to a source object (generally for bank debits) as well as its acceptance status.
           */
          readonly mandate?: {
            /** mandate_acceptance_params */
            readonly acceptance?: {
              readonly date?: number;
              readonly ip?: string;
              /** mandate_offline_acceptance_params */
              readonly offline?: {
                readonly contact_email: string;
              };
              /** mandate_online_acceptance_params */
              readonly online?: {
                readonly date?: number;
                readonly ip?: string;
                readonly user_agent?: string;
              };
              /** @enum {string} */
              readonly status: "accepted" | "pending" | "refused" | "revoked";
              /** @enum {string} */
              readonly type?: "offline" | "online";
              readonly user_agent?: string;
            };
            readonly amount?: unknown;
            readonly currency?: string;
            /** @enum {string} */
            readonly interval?: "one_time" | "scheduled" | "variable";
            /** @enum {string} */
            readonly notification_method?: "deprecated_none" | "email" | "manual" | "none" | "stripe_email";
          };
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /**
           * owner
           * @description Information about the owner of the payment instrument that may be used or required by particular source types.
           */
          readonly owner?: {
            /** source_address */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            readonly email?: string;
            readonly name?: string;
            readonly phone?: string;
          };
          /**
           * order_params
           * @description Information about the items and shipping associated with the source. Required for transactional credit (for example Klarna) sources before you can charge it.
           */
          readonly source_order?: {
            readonly items?: readonly {
              readonly amount?: number;
              readonly currency?: string;
              readonly description?: string;
              readonly parent?: string;
              readonly quantity?: number;
              /** @enum {string} */
              readonly type?: "discount" | "shipping" | "sku" | "tax";
            }[];
            /** order_shipping */
            readonly shipping?: {
              /** address */
              readonly address: {
                readonly city?: string;
                readonly country?: string;
                readonly line1: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              readonly carrier?: string;
              readonly name?: string;
              readonly phone?: string;
              readonly tracking_number?: string;
            };
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a new Source MandateNotification.</p> */
  readonly GetSourcesSourceMandateNotificationsMandateNotification: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly mandate_notification: string;
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["source_mandate_notification"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>List source transactions for a given source.</p> */
  readonly GetSourcesSourceSourceTransactions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly source: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["source_transaction"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the source transaction ID and Stripe will return the corresponding up-to-date source object information.</p> */
  readonly GetSourcesSourceSourceTransactionsSourceTransaction: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly source: string;
        readonly source_transaction: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["source_transaction"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Verify a given source.</p> */
  readonly PostSourcesSourceVerify: {
    readonly parameters: {
      readonly path: {
        readonly source: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The values needed to verify the source. */
          readonly values: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["source"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your subscription items for a given subscription.</p> */
  readonly GetSubscriptionItems: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The ID of the subscription whose items will be retrieved. */
        readonly subscription: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["subscription_item"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p> */
  readonly PostSubscriptionItems: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?: unknown;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** @description The identifier of the plan to add to the subscription. */
          readonly plan?: string;
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
          readonly proration_date?: number;
          /** @description The quantity you'd like to apply to the subscription item you're creating. */
          readonly quantity?: number;
          /** @description The identifier of the subscription to modify. */
          readonly subscription: string;
          /** @description A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
          readonly tax_rates?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_item"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the invoice item with the given ID.</p> */
  readonly GetSubscriptionItemsItem: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_item"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the plan or quantity of an item on a current subscription.</p> */
  readonly PostSubscriptionItemsItem: {
    readonly parameters: {
      readonly path: {
        readonly item: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. When updating, pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?: unknown;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** @description The identifier of the new plan for this subscription item. */
          readonly plan?: string;
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
          readonly proration_date?: number;
          /** @description The quantity you'd like to apply to the subscription item you're creating. */
          readonly quantity?: number;
          /** @description A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates. */
          readonly tax_rates?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_item"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the subscription.</p> */
  readonly DeleteSubscriptionItemsItem: {
    readonly parameters: {
      readonly path: {
        readonly item: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Delete all usage for the given subscription item. Allowed only when the current plan's `usage_type` is `metered`. */
          readonly clear_usage?: boolean;
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply the same proration that was previewed with the [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. */
          readonly proration_date?: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_subscription_item"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>For the specified subscription item, returns a list of summary objects. Each object in the list provides usage information that’s been summarized from multiple usage records and over a subscription billing period (e.g., 15 usage records in the billing plan’s month of September).</p>
   *
   * <p>The list is sorted in reverse-chronological order (newest first). The first list item represents the most current usage period that hasn’t ended yet. Since new usage records can still be added, the returned summary information for the subscription item’s ID should be seen as unstable until the subscription billing period ends.</p>
   */
  readonly GetSubscriptionItemsSubscriptionItemUsageRecordSummaries: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly subscription_item: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["usage_record_summary"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Creates a usage record for a specified subscription item and date, and fills it with a quantity.</p>
   *
   * <p>Usage records provide <code>quantity</code> information that Stripe uses to track how much a customer is using your service. With usage information and the pricing model set up by the <a href="https://stripe.com/docs/billing/subscriptions/metered-billing">metered billing</a> plan, Stripe helps you send accurate invoices to your customers.</p>
   *
   * <p>The default calculation for usage is to add up all the <code>quantity</code> values of the usage records within a billing period. You can change this default behavior with the billing plan’s <code>aggregate_usage</code> <a href="/docs/api/plans/create#create_plan-aggregate_usage">parameter</a>. When there is more than one usage record with the same timestamp, Stripe adds the <code>quantity</code> values together. In most cases, this is the desired resolution, however, you can change this behavior with the <code>action</code> parameter.</p>
   *
   * <p>The default pricing model for metered billing is <a href="/docs/api/plans/object#plan_object-billing_scheme">per-unit pricing</a>. For finer granularity, you can configure metered billing to have a <a href="https://stripe.com/docs/billing/subscriptions/tiers">tiered pricing</a> model.</p>
   */
  readonly PostSubscriptionItemsSubscriptionItemUsageRecords: {
    readonly parameters: {
      readonly path: {
        readonly subscription_item: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /**
           * @description Valid values are `increment` (default) or `set`. When using `increment` the specified `quantity` will be added to the usage at the specified timestamp. The `set` action will overwrite the usage quantity at that timestamp. If the subscription has [billing thresholds](https://stripe.com/docs/api/subscriptions/object#subscription_object-billing_thresholds), `increment` is the only allowed value.
           * @enum {string}
           */
          readonly action?: "increment" | "set";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The usage quantity for the specified timestamp. */
          readonly quantity: number;
          /** @description The timestamp for the usage event. This timestamp must be within the current billing period of the subscription of the provided `subscription_item`. */
          readonly timestamp: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["usage_record"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the list of your subscription schedules.</p> */
  readonly GetSubscriptionSchedules: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Only return subscription schedules that were created canceled the given date interval. */
        readonly canceled_at?: number;
        /** Only return subscription schedules that completed during the given date interval. */
        readonly completed_at?: number;
        /** Only return subscription schedules that were created during the given date interval. */
        readonly created?: number;
        /** Only return subscription schedules for the given customer. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** Only return subscription schedules that were released during the given date interval. */
        readonly released_at?: number;
        /** Only return subscription schedules that have not started yet. */
        readonly scheduled?: boolean;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["subscription_schedule"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new subscription schedule object. Each customer can have up to 25 active or scheduled subscriptions.</p> */
  readonly PostSubscriptionSchedules: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description The identifier of the customer to create the subscription schedule for. */
          readonly customer?: string;
          /**
           * default_settings_params
           * @description Object representing the subscription schedule's default settings.
           */
          readonly default_settings?: {
            readonly billing_thresholds?: unknown;
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly default_payment_method?: string;
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
          };
          /**
           * @description Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
           * @enum {string}
           */
          readonly end_behavior?: "cancel" | "none" | "release" | "renew";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's plan(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls. */
          readonly from_subscription?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. */
          readonly phases?: readonly {
            readonly application_fee_percent?: number;
            readonly billing_thresholds?: unknown;
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly coupon?: string;
            readonly default_payment_method?: string;
            readonly default_tax_rates?: readonly string[];
            readonly end_date?: number;
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
            readonly iterations?: number;
            readonly plans: readonly {
              readonly billing_thresholds?: unknown;
              readonly plan?: string;
              readonly quantity?: number;
              readonly tax_rates?: readonly string[];
            }[];
            /** @enum {string} */
            readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            readonly tax_percent?: number;
            readonly trial?: boolean;
            readonly trial_end?: number;
          }[];
          /** @description When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on. */
          readonly start_date?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_schedule"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule identifier that was returned upon subscription schedule creation.</p> */
  readonly GetSubscriptionSchedulesSchedule: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly schedule: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_schedule"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing subscription schedule.</p> */
  readonly PostSubscriptionSchedulesSchedule: {
    readonly parameters: {
      readonly path: {
        readonly schedule: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * default_settings_params
           * @description Object representing the subscription schedule's default settings.
           */
          readonly default_settings?: {
            readonly billing_thresholds?: unknown;
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly default_payment_method?: string;
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
          };
          /**
           * @description Configures how the subscription schedule behaves when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.
           * @enum {string}
           */
          readonly end_behavior?: "cancel" | "none" | "release" | "renew";
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted. */
          readonly phases?: readonly {
            readonly application_fee_percent?: number;
            readonly billing_thresholds?: unknown;
            /** @enum {string} */
            readonly collection_method?: "charge_automatically" | "send_invoice";
            readonly coupon?: string;
            readonly default_payment_method?: string;
            readonly default_tax_rates?: readonly string[];
            readonly end_date?: unknown;
            /** subscription_schedules_param */
            readonly invoice_settings?: {
              readonly days_until_due?: number;
            };
            readonly iterations?: number;
            readonly plans: readonly {
              readonly billing_thresholds?: unknown;
              readonly plan?: string;
              readonly quantity?: number;
              readonly tax_rates?: readonly string[];
            }[];
            /** @enum {string} */
            readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
            readonly start_date?: unknown;
            readonly tax_percent?: number;
            readonly trial?: boolean;
            readonly trial_end?: unknown;
          }[];
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description If the update changes the current phase, indicates if the changes should be prorated. Valid values are `create_prorations` or `none`, and the default value is `create_prorations`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_schedule"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or <code>active</code>.</p> */
  readonly PostSubscriptionSchedulesScheduleCancel: {
    readonly parameters: {
      readonly path: {
        readonly schedule: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description If the subscription schedule is `active`, indicates whether or not to generate a final invoice that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`. */
          readonly invoice_now?: boolean;
          /** @description If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`. */
          readonly prorate?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_schedule"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>. If the subscription schedule is currently associated with a subscription, releasing it will remove its <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p> */
  readonly PostSubscriptionSchedulesScheduleRelease: {
    readonly parameters: {
      readonly path: {
        readonly schedule: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Keep any cancellation on the subscription that the schedule has set */
          readonly preserve_cancel_date?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription_schedule"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions, specify <code>status=canceled</code>.</p> */
  readonly GetSubscriptions: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`. */
        readonly collection_method?: string;
        readonly created?: number;
        readonly current_period_end?: number;
        readonly current_period_start?: number;
        /** The ID of the customer whose subscriptions will be retrieved. */
        readonly customer?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** The ID of the plan whose subscriptions will be retrieved. */
        readonly plan?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** The status of the subscriptions to retrieve. One of: `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `unpaid`, `canceled`, or `all`. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Passing in a value of `all` will return subscriptions of all statuses. */
        readonly status?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["subscription"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new subscription on an existing customer. Each customer can have up to 25 active or scheduled subscriptions.</p> */
  readonly PostSubscriptions: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /** @description For new subscriptions, a past timestamp to backdate the subscription's start date to. If set, the first invoice will contain a proration for the timespan between the start date and the current time. Can be combined with trials and the billing cycle anchor. */
          readonly backdate_start_date?: number;
          /** @description A future timestamp to anchor the subscription's [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle). This is used to determine the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. */
          readonly billing_cycle_anchor?: number;
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?: unknown;
          /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          readonly cancel_at?: number;
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description The identifier of the customer to subscribe. */
          readonly customer: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. */
          readonly default_tax_rates?: readonly string[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description A list of up to 20 subscription items, each with an attached plan. */
          readonly items?: readonly {
            readonly billing_thresholds?: unknown;
            readonly metadata?: { readonly [key: string]: unknown };
            readonly plan?: string;
            readonly quantity?: number;
            readonly tax_rates?: readonly string[];
          }[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /**
           * @description Use `allow_incomplete` to create subscriptions with `status=incomplete` if the first invoice cannot be paid. Creating subscriptions with this status allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           *
           * `pending_if_incomplete` is only used with updates and cannot be passed when creating a subscription.
           * @enum {string}
           */
          readonly payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?: unknown;
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) resulting from the `billing_cycle_anchor`. Valid values are `create_prorations` or `none`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. Prorations can be disabled by passing `none`. If no value is passed, the default is `create_prorations`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** @description A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          readonly tax_percent?: unknown;
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: unknown;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          readonly trial_from_plan?: boolean;
          /** @description Integer representing the number of trial period days before the customer is charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. */
          readonly trial_period_days?: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the subscription with the given ID.</p> */
  readonly GetSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities, we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p> */
  readonly PostSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly subscription_exposed_id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions). */
          readonly application_fee_percent?: number;
          /**
           * @description Either `now` or `unchanged`. Setting the value to `now` resets the subscription's billing cycle anchor to the current time. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
           * @enum {string}
           */
          readonly billing_cycle_anchor?: "now" | "unchanged";
          /** @description Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds. */
          readonly billing_thresholds?: unknown;
          /** @description A timestamp at which the subscription should cancel. If set to a date before the current period ends, this will cause a proration if prorations have been enabled using `proration_behavior`. If set during a future period, this will always cause a proration for that period. */
          readonly cancel_at?: unknown;
          /** @description Boolean indicating whether this subscription should cancel at the end of the current period. */
          readonly cancel_at_period_end?: boolean;
          /**
           * @description Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.
           * @enum {string}
           */
          readonly collection_method?: "charge_automatically" | "send_invoice";
          /** @description The code of the coupon to apply to this subscription. A coupon applied to a subscription will only affect invoices created for that particular subscription. */
          readonly coupon?: string;
          /** @description Number of days a customer has to pay invoices generated by this subscription. Valid only for subscriptions where `collection_method` is set to `send_invoice`. */
          readonly days_until_due?: number;
          /** @description ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. If not set, invoices will use the default payment method in the customer's invoice settings. */
          readonly default_payment_method?: string;
          /** @description ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If not set, defaults to the customer's default source. */
          readonly default_source?: string;
          /** @description The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription. Pass an empty string to remove previously-defined tax rates. */
          readonly default_tax_rates?: readonly string[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description List of subscription items, each with an attached plan. */
          readonly items?: readonly {
            readonly billing_thresholds?: unknown;
            readonly clear_usage?: boolean;
            readonly deleted?: boolean;
            readonly id?: string;
            readonly metadata?: unknown;
            readonly plan?: string;
            readonly quantity?: number;
            readonly tax_rates?: readonly string[];
          }[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Indicates if a customer is on or off-session while an invoice payment is attempted. */
          readonly off_session?: boolean;
          /** @description If specified, payment collection for this subscription will be paused. */
          readonly pause_collection?: unknown;
          /**
           * @description Use `allow_incomplete` to transition the subscription to `status=past_due` if a payment is required but cannot be paid. This allows you to manage scenarios where additional user actions are needed to pay a subscription's invoice. For example, SCA regulation may require 3DS authentication to complete payment. See the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication) for Billing to learn more. This is the default behavior.
           *
           * Use `pending_if_incomplete` to update the subscription using [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates). When you use `pending_if_incomplete` you can only pass the parameters [supported by pending updates](https://stripe.com/docs/billing/pending-updates-reference#supported-attributes).
           *
           * Use `error_if_incomplete` if you want Stripe to return an HTTP 402 status code if a subscription's first invoice cannot be paid. For example, if a payment method requires 3DS authentication due to SCA regulation and further user action is needed, this parameter does not create a subscription and returns an error instead. This was the default behavior for API versions prior to 2019-03-14. See the [changelog](https://stripe.com/docs/upgrades#2019-03-14) to learn more.
           * @enum {string}
           */
          readonly payment_behavior?: "allow_incomplete" | "error_if_incomplete" | "pending_if_incomplete";
          /** @description Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval. */
          readonly pending_invoice_item_interval?: unknown;
          /** @description This field has been renamed to `proration_behavior`. `prorate=true` can be replaced with `proration_behavior=create_prorations` and `prorate=false` can be replaced with `proration_behavior=none`. */
          readonly prorate?: boolean;
          /**
           * @description Determines how to handle [prorations](https://stripe.com/docs/subscriptions/billing-cycle#prorations) when the billing cycle changes (e.g., when switching plans, resetting `billing_cycle_anchor=now`, or starting a trial), or if an item's `quantity` changes. Valid values are `create_prorations`, `none`, or `always_invoice`.
           *
           * Passing `create_prorations` will cause proration invoice items to be created when applicable. These proration items will only be invoiced immediately under [certain conditions](https://stripe.com/docs/subscriptions/upgrading-downgrading#immediate-payment). In order to always invoice immediately for prorations, pass `always_invoice`.
           *
           * Prorations can be disabled by passing `none`.
           * @enum {string}
           */
          readonly proration_behavior?: "always_invoice" | "create_prorations" | "none";
          /** @description If set, the proration will be calculated as though the subscription was updated at the given time. This can be used to apply exactly the same proration that was previewed with [upcoming invoice](https://stripe.com/docs/api#retrieve_customer_invoice) endpoint. It can also be used to implement custom proration logic, such as prorating by day instead of by second, by providing the time that you wish to use for proration calculations. */
          readonly proration_date?: number;
          /** @description A non-negative decimal (with at most four decimal places) between 0 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount in each billing period. For example, a plan which charges $10/month with a `tax_percent` of `20.0` will charge $12 per invoice. To unset a previously-set value, pass an empty string. This field has been deprecated and will be removed in a future API version, for further information view the [migration docs](https://stripe.com/docs/billing/migration/taxes) for `tax_rates`. */
          readonly tax_percent?: unknown;
          /** @description Unix timestamp representing the end of the trial period the customer will get before being charged for the first time. This will always overwrite any trials that might apply via a subscribed plan. If set, trial_end will override the default trial period of the plan the customer is being subscribed to. The special value `now` can be provided to end the customer's trial immediately. Can be at most two years from `billing_cycle_anchor`. */
          readonly trial_end?: unknown;
          /** @description Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. */
          readonly trial_from_plan?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Cancels a customer’s subscription immediately. The customer will not be charged again for the subscription.</p>
   *
   * <p>Note, however, that any pending invoice items that you’ve created will still be charged for at the end of the period, unless manually <a href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel immediately, pending prorations will be removed.</p>
   *
   * <p>By default, upon subscription cancellation, Stripe will stop automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at all.</p>
   */
  readonly DeleteSubscriptionsSubscriptionExposedId: {
    readonly parameters: {
      readonly path: {
        readonly subscription_exposed_id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Will generate a final invoice that invoices for any un-invoiced metered usage and new/pending proration invoice items. */
          readonly invoice_now?: boolean;
          /** @description Will generate a proration invoice item that credits remaining unused time until the subscription period end. */
          readonly prorate?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["subscription"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Removes the currently applied discount on a subscription.</p> */
  readonly DeleteSubscriptionsSubscriptionExposedIdDiscount: {
    readonly parameters: {
      readonly path: {
        readonly subscription_exposed_id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_discount"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax rates appearing first.</p> */
  readonly GetTaxRates: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Optional flag to filter by tax rates that are either active or not active (archived) */
        readonly active?: boolean;
        /** Optional range for filtering created date */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** Optional flag to filter by tax rates that are inclusive (or those that are not inclusive) */
        readonly inclusive?: boolean;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["tax_rate"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new tax rate.</p> */
  readonly PostTaxRates: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Flag determining whether the tax rate is active or inactive. Inactive tax rates continue to work where they are currently applied however they cannot be used for new applications. */
          readonly active?: boolean;
          /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
          readonly description?: string;
          /** @description The display name of the tax rate, which will be shown to users. */
          readonly display_name: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description This specifies if the tax rate is inclusive or exclusive. */
          readonly inclusive: boolean;
          /** @description The jurisdiction for the tax rate. */
          readonly jurisdiction?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description This represents the tax rate percent out of 100. */
          readonly percentage: number;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["tax_rate"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a tax rate with the given ID</p> */
  readonly GetTaxRatesTaxRate: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly tax_rate: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["tax_rate"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates an existing tax rate.</p> */
  readonly PostTaxRatesTaxRate: {
    readonly parameters: {
      readonly path: {
        readonly tax_rate: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Flag determining whether the tax rate is active or inactive. Inactive tax rates continue to work where they are currently applied however they cannot be used for new applications. */
          readonly active?: boolean;
          /** @description An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers. */
          readonly description?: string;
          /** @description The display name of the tax rate, which will be shown to users. */
          readonly display_name?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The jurisdiction for the tax rate. */
          readonly jurisdiction?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["tax_rate"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied through your server. On your backend, add an endpoint that creates and returns a connection token.</p> */
  readonly PostTerminalConnectionTokens: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The id of the location that this connection token is scoped to. If specified the connection token will only be usable with readers assigned to that location, otherwise the connection token will be usable with all readers. */
          readonly location?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["terminal.connection_token"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of <code>Location</code> objects.</p> */
  readonly GetTerminalLocations: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["terminal.location"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new <code>Location</code> object.</p> */
  readonly PostTerminalLocations: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /**
           * required_country_address
           * @description The full address of the location.
           */
          readonly address: {
            readonly city?: string;
            readonly country: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /** @description A name for the location. */
          readonly display_name: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["terminal.location"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a <code>Location</code> object.</p> */
  readonly GetTerminalLocationsLocation: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly location: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["terminal.location"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostTerminalLocationsLocation: {
    readonly parameters: {
      readonly path: {
        readonly location: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * required_country_address
           * @description The full address of the location.
           */
          readonly address?: {
            readonly city?: string;
            readonly country: string;
            readonly line1?: string;
            readonly line2?: string;
            readonly postal_code?: string;
            readonly state?: string;
          };
          /** @description A name for the location. */
          readonly display_name?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["terminal.location"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes a <code>Location</code> object.</p> */
  readonly DeleteTerminalLocationsLocation: {
    readonly parameters: {
      readonly path: {
        readonly location: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_terminal.location"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of <code>Reader</code> objects.</p> */
  readonly GetTerminalReaders: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** Filters readers by device type */
        readonly device_type?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A location ID to filter the response list to only readers at the specific location */
        readonly location?: string;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** A status filter to filter readers to only offline or online readers */
        readonly status?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description A list of readers */
          readonly data: readonly definitions["terminal.reader"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Creates a new <code>Reader</code> object.</p> */
  readonly PostTerminalReaders: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Custom label given to the reader for easier identification. If no label is specified, the registration code will be used. */
          readonly label?: string;
          /** @description The location to assign the reader to. If no location is specified, the reader will be assigned to the account's default location. */
          readonly location?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description A code generated by the reader used for registering to an account. */
          readonly registration_code: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["terminal.reader"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves a <code>Reader</code> object.</p> */
  readonly GetTerminalReadersReader: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly reader: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["terminal.reader"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p> */
  readonly PostTerminalReadersReader: {
    readonly parameters: {
      readonly path: {
        readonly reader: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description The new label of the reader. */
          readonly label?: string;
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["terminal.reader"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Deletes a <code>Reader</code> object.</p> */
  readonly DeleteTerminalReadersReader: {
    readonly parameters: {
      readonly path: {
        readonly reader: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_terminal.reader"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Creates a single-use token that represents a bank account’s details.
   * This token can be used with any API method in place of a bank account dictionary. This token can be used only once, by attaching it to a <a href="#accounts">Custom account</a>.</p>
   */
  readonly PostTokens: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /**
           * connect_js_account_token_specs
           * @description Information for the account this token will represent.
           */
          readonly account?: {
            /** @enum {string} */
            readonly business_type?: "company" | "government_entity" | "individual" | "non_profit";
            /** company_specs */
            readonly company?: {
              /** address_specs */
              readonly address?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              /** japan_address_kana_specs */
              readonly address_kana?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              /** japan_address_kanji_specs */
              readonly address_kanji?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              readonly directors_provided?: boolean;
              readonly executives_provided?: boolean;
              readonly name?: string;
              readonly name_kana?: string;
              readonly name_kanji?: string;
              readonly owners_provided?: boolean;
              readonly phone?: string;
              /** @enum {string} */
              readonly structure?:
                | ""
                | "government_instrumentality"
                | "governmental_unit"
                | "incorporated_non_profit"
                | "limited_liability_partnership"
                | "multi_member_llc"
                | "private_company"
                | "private_corporation"
                | "private_partnership"
                | "public_company"
                | "public_corporation"
                | "public_partnership"
                | "sole_proprietorship"
                | "tax_exempt_government_instrumentality"
                | "unincorporated_association"
                | "unincorporated_non_profit";
              readonly tax_id?: string;
              readonly tax_id_registrar?: string;
              readonly vat_id?: string;
              /** verification_specs */
              readonly verification?: {
                /** verification_document_specs */
                readonly document?: {
                  readonly back?: string;
                  readonly front?: string;
                };
              };
            };
            /** individual_specs */
            readonly individual?: {
              /** address_specs */
              readonly address?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
              };
              /** japan_address_kana_specs */
              readonly address_kana?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              /** japan_address_kanji_specs */
              readonly address_kanji?: {
                readonly city?: string;
                readonly country?: string;
                readonly line1?: string;
                readonly line2?: string;
                readonly postal_code?: string;
                readonly state?: string;
                readonly town?: string;
              };
              readonly dob?: unknown;
              readonly email?: string;
              readonly first_name?: string;
              readonly first_name_kana?: string;
              readonly first_name_kanji?: string;
              readonly gender?: string;
              readonly id_number?: string;
              readonly last_name?: string;
              readonly last_name_kana?: string;
              readonly last_name_kanji?: string;
              readonly maiden_name?: string;
              readonly metadata?: unknown;
              readonly phone?: string;
              readonly ssn_last_4?: string;
              /** person_verification_specs */
              readonly verification?: {
                /** person_verification_document_specs */
                readonly additional_document?: {
                  readonly back?: string;
                  readonly front?: string;
                };
                /** person_verification_document_specs */
                readonly document?: {
                  readonly back?: string;
                  readonly front?: string;
                };
              };
            };
            readonly tos_shown_and_accepted?: boolean;
          };
          /**
           * token_create_bank_account
           * @description The bank account this token will represent.
           */
          readonly bank_account?: {
            readonly account_holder_name?: string;
            /** @enum {string} */
            readonly account_holder_type?: "company" | "individual";
            readonly account_number: string;
            readonly country: string;
            readonly currency?: string;
            readonly routing_number?: string;
          };
          readonly card?: unknown;
          /** @description The customer (owned by the application's account) for which to create a token. This can be used only with an [OAuth access token](https://stripe.com/docs/connect/standard-accounts) or [Stripe-Account header](https://stripe.com/docs/connect/authentication). For more details, see [Cloning Saved Payment Methods](https://stripe.com/docs/connect/cloning-saved-payment-methods). */
          readonly customer?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /**
           * person_token_specs
           * @description Information for the person this token will represent.
           */
          readonly person?: {
            /** address_specs */
            readonly address?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
            };
            /** japan_address_kana_specs */
            readonly address_kana?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            /** japan_address_kanji_specs */
            readonly address_kanji?: {
              readonly city?: string;
              readonly country?: string;
              readonly line1?: string;
              readonly line2?: string;
              readonly postal_code?: string;
              readonly state?: string;
              readonly town?: string;
            };
            readonly dob?: unknown;
            readonly email?: string;
            readonly first_name?: string;
            readonly first_name_kana?: string;
            readonly first_name_kanji?: string;
            readonly gender?: string;
            readonly id_number?: string;
            readonly last_name?: string;
            readonly last_name_kana?: string;
            readonly last_name_kanji?: string;
            readonly maiden_name?: string;
            readonly metadata?: unknown;
            readonly phone?: string;
            /** relationship_specs */
            readonly relationship?: {
              readonly director?: boolean;
              readonly executive?: boolean;
              readonly owner?: boolean;
              readonly percent_ownership?: unknown;
              readonly representative?: boolean;
              readonly title?: string;
            };
            readonly ssn_last_4?: string;
            /** person_verification_specs */
            readonly verification?: {
              /** person_verification_document_specs */
              readonly additional_document?: {
                readonly back?: string;
                readonly front?: string;
              };
              /** person_verification_document_specs */
              readonly document?: {
                readonly back?: string;
                readonly front?: string;
              };
            };
          };
          /**
           * pii_token_specs
           * @description The PII this token will represent.
           */
          readonly pii?: {
            readonly id_number?: string;
          };
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["token"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the token with the given ID.</p> */
  readonly GetTokensToken: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly token: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["token"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of top-ups.</p> */
  readonly GetTopups: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A positive integer representing how much to transfer. */
        readonly amount?: number;
        /** A filter on the list, based on the object `created` field. The value can be a string with an integer Unix timestamp, or it can be a dictionary with a number of different query options. */
        readonly created?: number;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return top-ups that have the given status. One of `canceled`, `failed`, `pending` or `succeeded`. */
        readonly status?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["topup"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Top up the balance of an account</p> */
  readonly PostTopups: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A positive integer representing how much to transfer. */
          readonly amount: number;
          /** @description Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies). */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The ID of a source to transfer funds from. For most users, this should be left unspecified which will use the bank account that was set up in the dashboard for the specified currency. In test mode, this can be a test bank token (see [Testing Top-ups](https://stripe.com/docs/connect/testing#testing-top-ups)). */
          readonly source?: string;
          /** @description Extra information about a top-up for the source's bank statement. Limited to 15 ASCII characters. */
          readonly statement_descriptor?: string;
          /** @description A string that identifies this top-up as part of a group. */
          readonly transfer_group?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["topup"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned from your previous request, and Stripe will return the corresponding top-up information.</p> */
  readonly GetTopupsTopup: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly topup: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["topup"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p> */
  readonly PostTopupsTopup: {
    readonly parameters: {
      readonly path: {
        readonly topup: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["topup"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Cancels a top-up. Only pending top-ups can be canceled.</p> */
  readonly PostTopupsTopupCancel: {
    readonly parameters: {
      readonly path: {
        readonly topup: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["topup"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the most recently created transfers appearing first.</p> */
  readonly GetTransfers: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        readonly created?: number;
        /** Only return transfers for the destination specified by this account ID. */
        readonly destination?: string;
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
        /** Only return transfers with the specified transfer group. */
        readonly transfer_group?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["transfer"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds” error.</p> */
  readonly PostTransfers: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /** @description A positive integer in %s representing how much to transfer. */
          readonly amount?: number;
          /** @description 3-letter [ISO code for currency](https://stripe.com/docs/payouts). */
          readonly currency: string;
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description The ID of a connected Stripe account. <a href="/docs/connect/charges-transfers">See the Connect documentation</a> for details. */
          readonly destination: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: { readonly [key: string]: unknown };
          /** @description You can use this parameter to transfer funds from a charge before they are added to your available balance. A pending balance will transfer immediately but the funds will not become available until the original charge becomes available. [See the Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-availability) for details. */
          readonly source_transaction?: string;
          /**
           * @description The source balance to use for this transfer. One of `bank_account`, `card`, or `fpx`. For most users, this will default to `card`.
           * @enum {string}
           */
          readonly source_type?: "bank_account" | "card" | "fpx";
          /** @description A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/charges-transfers#transfer-options) for details. */
          readonly transfer_group?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["transfer"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are always available by default on the transfer object. If you need more than those 10, you can use this API method and the <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p> */
  readonly GetTransfersIdReversals: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
      readonly path: {
        readonly id: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          /** @description Details about each object. */
          readonly data: readonly definitions["transfer_reversal"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
   *
   * <p>When reversing transfers, you can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been reversed.</p>
   *
   * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
   */
  readonly PostTransfersIdReversals: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description A positive integer in %s representing how much of this transfer to reverse. Can only reverse up to the unreversed amount remaining of the transfer. Partial transfer reversals are only allowed for transfers to Stripe Accounts. Defaults to the entire transfer amount. */
          readonly amount?: number;
          /** @description An arbitrary string which you can attach to a reversal object. It is displayed alongside the reversal in the Dashboard. This will be unset if you POST an empty value. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description Boolean indicating whether the application fee should be refunded when reversing this transfer. If a full transfer reversal is given, the full application fee will be refunded. Otherwise, the application fee will be refunded with an amount proportional to the amount of the transfer reversed. */
          readonly refund_application_fee?: boolean;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["transfer_reversal"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request or the transfer list, and Stripe will return the corresponding transfer information.</p> */
  readonly GetTransfersTransfer: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly transfer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["transfer"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request accepts only metadata as an argument.</p>
   */
  readonly PostTransfersTransfer: {
    readonly parameters: {
      readonly path: {
        readonly transfer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description An arbitrary string attached to the object. Often useful for displaying to users. */
          readonly description?: string;
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["transfer"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also retrieve details about a specific reversal stored on the transfer.</p> */
  readonly GetTransfersTransferReversalsId: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly id: string;
        readonly transfer: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["transfer_reversal"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /**
   * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be left unchanged.</p>
   *
   * <p>This request only accepts metadata and description as arguments.</p>
   */
  readonly PostTransfersTransferReversalsId: {
    readonly parameters: {
      readonly path: {
        readonly id: string;
        readonly transfer: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["transfer_reversal"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Returns a list of your webhook endpoints.</p> */
  readonly GetWebhookEndpoints: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
        /** A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list. */
        readonly ending_before?: string;
        /** A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10. */
        readonly limit?: number;
        /** A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list. */
        readonly starting_after?: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: {
          readonly data: readonly definitions["webhook_endpoint"][];
          /** @description True if this list has another page of items after this one that can be fetched. */
          readonly has_more: boolean;
          /**
           * @description String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
           * @enum {string}
           */
          readonly object: "list";
          /** @description The URL where this list can be accessed. */
          readonly url: string;
        };
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that notifies the specified <code>url</code> only about events from your account is created. You can also create webhook endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the Dashboard.</p> */
  readonly PostWebhookEndpoints: {
    readonly parameters: {
      readonly body: {
        /** Body parameters for the request. */
        readonly payload: {
          /**
           * @description Events sent to this endpoint will be generated with this Stripe Version instead of your account's default Stripe Version.
           * @enum {string}
           */
          readonly api_version?:
            | "2011-01-01"
            | "2011-06-21"
            | "2011-06-28"
            | "2011-08-01"
            | "2011-09-15"
            | "2011-11-17"
            | "2012-02-23"
            | "2012-03-25"
            | "2012-06-18"
            | "2012-06-28"
            | "2012-07-09"
            | "2012-09-24"
            | "2012-10-26"
            | "2012-11-07"
            | "2013-02-11"
            | "2013-02-13"
            | "2013-07-05"
            | "2013-08-12"
            | "2013-08-13"
            | "2013-10-29"
            | "2013-12-03"
            | "2014-01-31"
            | "2014-03-13"
            | "2014-03-28"
            | "2014-05-19"
            | "2014-06-13"
            | "2014-06-17"
            | "2014-07-22"
            | "2014-07-26"
            | "2014-08-04"
            | "2014-08-20"
            | "2014-09-08"
            | "2014-10-07"
            | "2014-11-05"
            | "2014-11-20"
            | "2014-12-08"
            | "2014-12-17"
            | "2014-12-22"
            | "2015-01-11"
            | "2015-01-26"
            | "2015-02-10"
            | "2015-02-16"
            | "2015-02-18"
            | "2015-03-24"
            | "2015-04-07"
            | "2015-06-15"
            | "2015-07-07"
            | "2015-07-13"
            | "2015-07-28"
            | "2015-08-07"
            | "2015-08-19"
            | "2015-09-03"
            | "2015-09-08"
            | "2015-09-23"
            | "2015-10-01"
            | "2015-10-12"
            | "2015-10-16"
            | "2016-02-03"
            | "2016-02-19"
            | "2016-02-22"
            | "2016-02-23"
            | "2016-02-29"
            | "2016-03-07"
            | "2016-06-15"
            | "2016-07-06"
            | "2016-10-19"
            | "2017-01-27"
            | "2017-02-14"
            | "2017-04-06"
            | "2017-05-25"
            | "2017-06-05"
            | "2017-08-15"
            | "2017-12-14"
            | "2018-01-23"
            | "2018-02-05"
            | "2018-02-06"
            | "2018-02-28"
            | "2018-05-21"
            | "2018-07-27"
            | "2018-08-23"
            | "2018-09-06"
            | "2018-09-24"
            | "2018-10-31"
            | "2018-11-08"
            | "2019-02-11"
            | "2019-02-19"
            | "2019-03-14"
            | "2019-05-16"
            | "2019-08-14"
            | "2019-09-09"
            | "2019-10-08"
            | "2019-10-17"
            | "2019-11-05"
            | "2019-12-03"
            | "2020-03-02";
          /** @description Whether this endpoint should receive events from connected accounts (`true`), or from your account (`false`). Defaults to `false`. */
          readonly connect?: boolean;
          /** @description An optional description of what the wehbook is used for. */
          readonly description?: string;
          /** @description The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
          readonly enabled_events: readonly (
            | "*"
            | "account.application.authorized"
            | "account.application.deauthorized"
            | "account.external_account.created"
            | "account.external_account.deleted"
            | "account.external_account.updated"
            | "account.updated"
            | "application_fee.created"
            | "application_fee.refund.updated"
            | "application_fee.refunded"
            | "balance.available"
            | "capability.updated"
            | "charge.captured"
            | "charge.dispute.closed"
            | "charge.dispute.created"
            | "charge.dispute.funds_reinstated"
            | "charge.dispute.funds_withdrawn"
            | "charge.dispute.updated"
            | "charge.expired"
            | "charge.failed"
            | "charge.pending"
            | "charge.refund.updated"
            | "charge.refunded"
            | "charge.succeeded"
            | "charge.updated"
            | "checkout.session.completed"
            | "coupon.created"
            | "coupon.deleted"
            | "coupon.updated"
            | "credit_note.created"
            | "credit_note.updated"
            | "credit_note.voided"
            | "customer.created"
            | "customer.deleted"
            | "customer.discount.created"
            | "customer.discount.deleted"
            | "customer.discount.updated"
            | "customer.source.created"
            | "customer.source.deleted"
            | "customer.source.expiring"
            | "customer.source.updated"
            | "customer.subscription.created"
            | "customer.subscription.deleted"
            | "customer.subscription.pending_update_applied"
            | "customer.subscription.pending_update_expired"
            | "customer.subscription.trial_will_end"
            | "customer.subscription.updated"
            | "customer.tax_id.created"
            | "customer.tax_id.deleted"
            | "customer.tax_id.updated"
            | "customer.updated"
            | "file.created"
            | "invoice.created"
            | "invoice.deleted"
            | "invoice.finalized"
            | "invoice.marked_uncollectible"
            | "invoice.payment_action_required"
            | "invoice.payment_failed"
            | "invoice.payment_succeeded"
            | "invoice.sent"
            | "invoice.upcoming"
            | "invoice.updated"
            | "invoice.voided"
            | "invoiceitem.created"
            | "invoiceitem.deleted"
            | "invoiceitem.updated"
            | "issuing_authorization.created"
            | "issuing_authorization.request"
            | "issuing_authorization.updated"
            | "issuing_card.created"
            | "issuing_card.updated"
            | "issuing_cardholder.created"
            | "issuing_cardholder.updated"
            | "issuing_transaction.created"
            | "issuing_transaction.updated"
            | "mandate.updated"
            | "order.created"
            | "order.payment_failed"
            | "order.payment_succeeded"
            | "order.updated"
            | "order_return.created"
            | "payment_intent.amount_capturable_updated"
            | "payment_intent.canceled"
            | "payment_intent.created"
            | "payment_intent.payment_failed"
            | "payment_intent.processing"
            | "payment_intent.succeeded"
            | "payment_method.attached"
            | "payment_method.card_automatically_updated"
            | "payment_method.detached"
            | "payment_method.updated"
            | "payout.canceled"
            | "payout.created"
            | "payout.failed"
            | "payout.paid"
            | "payout.updated"
            | "person.created"
            | "person.deleted"
            | "person.updated"
            | "plan.created"
            | "plan.deleted"
            | "plan.updated"
            | "product.created"
            | "product.deleted"
            | "product.updated"
            | "radar.early_fraud_warning.created"
            | "radar.early_fraud_warning.updated"
            | "recipient.created"
            | "recipient.deleted"
            | "recipient.updated"
            | "reporting.report_run.failed"
            | "reporting.report_run.succeeded"
            | "reporting.report_type.updated"
            | "review.closed"
            | "review.opened"
            | "setup_intent.canceled"
            | "setup_intent.created"
            | "setup_intent.setup_failed"
            | "setup_intent.succeeded"
            | "sigma.scheduled_query_run.created"
            | "sku.created"
            | "sku.deleted"
            | "sku.updated"
            | "source.canceled"
            | "source.chargeable"
            | "source.failed"
            | "source.mandate_notification"
            | "source.refund_attributes_required"
            | "source.transaction.created"
            | "source.transaction.updated"
            | "subscription_schedule.aborted"
            | "subscription_schedule.canceled"
            | "subscription_schedule.completed"
            | "subscription_schedule.created"
            | "subscription_schedule.expiring"
            | "subscription_schedule.released"
            | "subscription_schedule.updated"
            | "tax_rate.created"
            | "tax_rate.updated"
            | "topup.canceled"
            | "topup.created"
            | "topup.failed"
            | "topup.reversed"
            | "topup.succeeded"
            | "transfer.created"
            | "transfer.failed"
            | "transfer.paid"
            | "transfer.reversed"
            | "transfer.updated"
          )[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The URL of the webhook endpoint. */
          readonly url: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["webhook_endpoint"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Retrieves the webhook endpoint with the given ID.</p> */
  readonly GetWebhookEndpointsWebhookEndpoint: {
    readonly parameters: {
      readonly query: {
        /** Specifies which fields in the response should be expanded. */
        readonly expand?: readonly unknown[];
      };
      readonly path: {
        readonly webhook_endpoint: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["webhook_endpoint"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the status of your endpoint.</p> */
  readonly PostWebhookEndpointsWebhookEndpoint: {
    readonly parameters: {
      readonly path: {
        readonly webhook_endpoint: string;
      };
      readonly body: {
        /** Body parameters for the request. */
        readonly payload?: {
          /** @description An optional description of what the wehbook is used for. */
          readonly description?: string;
          /** @description Disable the webhook endpoint if set to true. */
          readonly disabled?: boolean;
          /** @description The list of events to enable for this endpoint. You may specify `['*']` to enable all events, except those that require explicit selection. */
          readonly enabled_events?: readonly (
            | "*"
            | "account.application.authorized"
            | "account.application.deauthorized"
            | "account.external_account.created"
            | "account.external_account.deleted"
            | "account.external_account.updated"
            | "account.updated"
            | "application_fee.created"
            | "application_fee.refund.updated"
            | "application_fee.refunded"
            | "balance.available"
            | "capability.updated"
            | "charge.captured"
            | "charge.dispute.closed"
            | "charge.dispute.created"
            | "charge.dispute.funds_reinstated"
            | "charge.dispute.funds_withdrawn"
            | "charge.dispute.updated"
            | "charge.expired"
            | "charge.failed"
            | "charge.pending"
            | "charge.refund.updated"
            | "charge.refunded"
            | "charge.succeeded"
            | "charge.updated"
            | "checkout.session.completed"
            | "coupon.created"
            | "coupon.deleted"
            | "coupon.updated"
            | "credit_note.created"
            | "credit_note.updated"
            | "credit_note.voided"
            | "customer.created"
            | "customer.deleted"
            | "customer.discount.created"
            | "customer.discount.deleted"
            | "customer.discount.updated"
            | "customer.source.created"
            | "customer.source.deleted"
            | "customer.source.expiring"
            | "customer.source.updated"
            | "customer.subscription.created"
            | "customer.subscription.deleted"
            | "customer.subscription.pending_update_applied"
            | "customer.subscription.pending_update_expired"
            | "customer.subscription.trial_will_end"
            | "customer.subscription.updated"
            | "customer.tax_id.created"
            | "customer.tax_id.deleted"
            | "customer.tax_id.updated"
            | "customer.updated"
            | "file.created"
            | "invoice.created"
            | "invoice.deleted"
            | "invoice.finalized"
            | "invoice.marked_uncollectible"
            | "invoice.payment_action_required"
            | "invoice.payment_failed"
            | "invoice.payment_succeeded"
            | "invoice.sent"
            | "invoice.upcoming"
            | "invoice.updated"
            | "invoice.voided"
            | "invoiceitem.created"
            | "invoiceitem.deleted"
            | "invoiceitem.updated"
            | "issuing_authorization.created"
            | "issuing_authorization.request"
            | "issuing_authorization.updated"
            | "issuing_card.created"
            | "issuing_card.updated"
            | "issuing_cardholder.created"
            | "issuing_cardholder.updated"
            | "issuing_transaction.created"
            | "issuing_transaction.updated"
            | "mandate.updated"
            | "order.created"
            | "order.payment_failed"
            | "order.payment_succeeded"
            | "order.updated"
            | "order_return.created"
            | "payment_intent.amount_capturable_updated"
            | "payment_intent.canceled"
            | "payment_intent.created"
            | "payment_intent.payment_failed"
            | "payment_intent.processing"
            | "payment_intent.succeeded"
            | "payment_method.attached"
            | "payment_method.card_automatically_updated"
            | "payment_method.detached"
            | "payment_method.updated"
            | "payout.canceled"
            | "payout.created"
            | "payout.failed"
            | "payout.paid"
            | "payout.updated"
            | "person.created"
            | "person.deleted"
            | "person.updated"
            | "plan.created"
            | "plan.deleted"
            | "plan.updated"
            | "product.created"
            | "product.deleted"
            | "product.updated"
            | "radar.early_fraud_warning.created"
            | "radar.early_fraud_warning.updated"
            | "recipient.created"
            | "recipient.deleted"
            | "recipient.updated"
            | "reporting.report_run.failed"
            | "reporting.report_run.succeeded"
            | "reporting.report_type.updated"
            | "review.closed"
            | "review.opened"
            | "setup_intent.canceled"
            | "setup_intent.created"
            | "setup_intent.setup_failed"
            | "setup_intent.succeeded"
            | "sigma.scheduled_query_run.created"
            | "sku.created"
            | "sku.deleted"
            | "sku.updated"
            | "source.canceled"
            | "source.chargeable"
            | "source.failed"
            | "source.mandate_notification"
            | "source.refund_attributes_required"
            | "source.transaction.created"
            | "source.transaction.updated"
            | "subscription_schedule.aborted"
            | "subscription_schedule.canceled"
            | "subscription_schedule.completed"
            | "subscription_schedule.created"
            | "subscription_schedule.expiring"
            | "subscription_schedule.released"
            | "subscription_schedule.updated"
            | "tax_rate.created"
            | "tax_rate.updated"
            | "topup.canceled"
            | "topup.created"
            | "topup.failed"
            | "topup.reversed"
            | "topup.succeeded"
            | "transfer.created"
            | "transfer.failed"
            | "transfer.paid"
            | "transfer.reversed"
            | "transfer.updated"
          )[];
          /** @description Specifies which fields in the response should be expanded. */
          readonly expand?: readonly string[];
          /** @description Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`. */
          readonly metadata?: unknown;
          /** @description The URL of the webhook endpoint. */
          readonly url?: string;
        };
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["webhook_endpoint"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
  /** <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook endpoint management</a> page of the Stripe dashboard.</p> */
  readonly DeleteWebhookEndpointsWebhookEndpoint: {
    readonly parameters: {
      readonly path: {
        readonly webhook_endpoint: string;
      };
    };
    readonly responses: {
      /** Successful response. */
      readonly 200: {
        readonly schema: definitions["deleted_webhook_endpoint"];
      };
      /** Error response. */
      readonly default: {
        readonly schema: definitions["error"];
      };
    };
  };
}

export interface external {}
